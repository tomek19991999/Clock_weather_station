
Clock_weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002d9f4  0800bdc0  0800bdc0  0001bdc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080397b4  080397b4  000501e4  2**0
                  CONTENTS
  4 .ARM          00000008  080397b4  080397b4  000497b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080397bc  080397bc  000501e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080397bc  080397bc  000497bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080397c0  080397c0  000497c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080397c4  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a240  200001e4  080399a8  000501e4  2**2
                  ALLOC
 10 ._user_heap_stack 00002204  2000a424  080399a8  0005a424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000501e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000202e1  00000000  00000000  00050214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046cd  00000000  00000000  000704f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b10  00000000  00000000  00074bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018f8  00000000  00000000  000766d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c04b  00000000  00000000  00077fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023831  00000000  00000000  000a401b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102174  00000000  00000000  000c784c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c99c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082cc  00000000  00000000  001c9a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bda4 	.word	0x0800bda4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800bda4 	.word	0x0800bda4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_DMA_Init+0x38>)
 8000eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <MX_DMA_Init+0x38>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6493      	str	r3, [r2, #72]	; 0x48
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_DMA_Init+0x38>)
 8000ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	200f      	movs	r0, #15
 8000ed0:	f001 fda9 	bl	8002a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ed4:	200f      	movs	r0, #15
 8000ed6:	f001 fdc2 	bl	8002a5e <HAL_NVIC_EnableIRQ>

}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	4b3a      	ldr	r3, [pc, #232]	; (8000fe8 <MX_GPIO_Init+0x100>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a39      	ldr	r2, [pc, #228]	; (8000fe8 <MX_GPIO_Init+0x100>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b37      	ldr	r3, [pc, #220]	; (8000fe8 <MX_GPIO_Init+0x100>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b34      	ldr	r3, [pc, #208]	; (8000fe8 <MX_GPIO_Init+0x100>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	4a33      	ldr	r2, [pc, #204]	; (8000fe8 <MX_GPIO_Init+0x100>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f22:	4b31      	ldr	r3, [pc, #196]	; (8000fe8 <MX_GPIO_Init+0x100>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	4b2e      	ldr	r3, [pc, #184]	; (8000fe8 <MX_GPIO_Init+0x100>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	4a2d      	ldr	r2, [pc, #180]	; (8000fe8 <MX_GPIO_Init+0x100>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3a:	4b2b      	ldr	r3, [pc, #172]	; (8000fe8 <MX_GPIO_Init+0x100>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2120      	movs	r1, #32
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4e:	f002 f943 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f641 0104 	movw	r1, #6148	; 0x1804
 8000f58:	4824      	ldr	r0, [pc, #144]	; (8000fec <MX_GPIO_Init+0x104>)
 8000f5a:	f002 f93d 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	4619      	mov	r1, r3
 8000f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f76:	f001 ff85 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f7a:	2320      	movs	r3, #32
 8000f7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f94:	f001 ff76 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTONA6_Pin;
 8000f98:	2340      	movs	r3, #64	; 0x40
 8000f9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTONA6_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fae:	f001 ff69 	bl	8002e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8000fb2:	f641 0304 	movw	r3, #6148	; 0x1804
 8000fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4808      	ldr	r0, [pc, #32]	; (8000fec <MX_GPIO_Init+0x104>)
 8000fcc:	f001 ff5a 	bl	8002e84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2103      	movs	r1, #3
 8000fd4:	2006      	movs	r0, #6
 8000fd6:	f001 fd26 	bl	8002a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fda:	2006      	movs	r0, #6
 8000fdc:	f001 fd3f 	bl	8002a5e <HAL_NVIC_EnableIRQ>

}
 8000fe0:	bf00      	nop
 8000fe2:	3720      	adds	r7, #32
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	48000400 	.word	0x48000400

08000ff0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_I2C1_Init+0x74>)
 8000ff6:	4a1c      	ldr	r2, [pc, #112]	; (8001068 <MX_I2C1_Init+0x78>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <MX_I2C1_Init+0x74>)
 8000ffc:	4a1b      	ldr	r2, [pc, #108]	; (800106c <MX_I2C1_Init+0x7c>)
 8000ffe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_I2C1_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_I2C1_Init+0x74>)
 8001008:	2201      	movs	r2, #1
 800100a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_I2C1_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_I2C1_Init+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_I2C1_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_I2C1_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_I2C1_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800102a:	480e      	ldr	r0, [pc, #56]	; (8001064 <MX_I2C1_Init+0x74>)
 800102c:	f002 f904 	bl	8003238 <HAL_I2C_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001036:	f000 ffb9 	bl	8001fac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800103a:	2100      	movs	r1, #0
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <MX_I2C1_Init+0x74>)
 800103e:	f002 fe5f 	bl	8003d00 <HAL_I2CEx_ConfigAnalogFilter>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001048:	f000 ffb0 	bl	8001fac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800104c:	2100      	movs	r1, #0
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_I2C1_Init+0x74>)
 8001050:	f002 fea1 	bl	8003d96 <HAL_I2CEx_ConfigDigitalFilter>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800105a:	f000 ffa7 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000200 	.word	0x20000200
 8001068:	40005400 	.word	0x40005400
 800106c:	2000090e 	.word	0x2000090e

08001070 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b0ac      	sub	sp, #176	; 0xb0
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2288      	movs	r2, #136	; 0x88
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f007 fbdd 	bl	8008850 <memset>
  if(i2cHandle->Instance==I2C1)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a21      	ldr	r2, [pc, #132]	; (8001120 <HAL_I2C_MspInit+0xb0>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d13a      	bne.n	8001116 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010a0:	2340      	movs	r3, #64	; 0x40
 80010a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4618      	mov	r0, r3
 80010ae:	f003 fde1 	bl	8004c74 <HAL_RCCEx_PeriphCLKConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010b8:	f000 ff78 	bl	8001fac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010bc:	4b19      	ldr	r3, [pc, #100]	; (8001124 <HAL_I2C_MspInit+0xb4>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c0:	4a18      	ldr	r2, [pc, #96]	; (8001124 <HAL_I2C_MspInit+0xb4>)
 80010c2:	f043 0302 	orr.w	r3, r3, #2
 80010c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c8:	4b16      	ldr	r3, [pc, #88]	; (8001124 <HAL_I2C_MspInit+0xb4>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010d4:	23c0      	movs	r3, #192	; 0xc0
 80010d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010da:	2312      	movs	r3, #18
 80010dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ec:	2304      	movs	r3, #4
 80010ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010f6:	4619      	mov	r1, r3
 80010f8:	480b      	ldr	r0, [pc, #44]	; (8001128 <HAL_I2C_MspInit+0xb8>)
 80010fa:	f001 fec3 	bl	8002e84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <HAL_I2C_MspInit+0xb4>)
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	4a08      	ldr	r2, [pc, #32]	; (8001124 <HAL_I2C_MspInit+0xb4>)
 8001104:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001108:	6593      	str	r3, [r2, #88]	; 0x58
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_I2C_MspInit+0xb4>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001116:	bf00      	nop
 8001118:	37b0      	adds	r7, #176	; 0xb0
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40005400 	.word	0x40005400
 8001124:	40021000 	.word	0x40021000
 8001128:	48000400 	.word	0x48000400

0800112c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <MX_IWDG_Init+0x34>)
 8001132:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <MX_IWDG_Init+0x38>)
 8001134:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <MX_IWDG_Init+0x34>)
 8001138:	2206      	movs	r2, #6
 800113a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <MX_IWDG_Init+0x34>)
 800113e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001142:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_IWDG_Init+0x34>)
 8001146:	f640 72ff 	movw	r2, #4095	; 0xfff
 800114a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_IWDG_Init+0x34>)
 800114e:	f002 fe6e 	bl	8003e2e <HAL_IWDG_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001158:	f000 ff28 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000254 	.word	0x20000254
 8001164:	40003000 	.word	0x40003000

08001168 <lcd_cmd>:
#define LCD_OFFSET_Y  2

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];

static void lcd_cmd(uint8_t cmd) //send command
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001178:	480c      	ldr	r0, [pc, #48]	; (80011ac <lcd_cmd+0x44>)
 800117a:	f002 f82d 	bl	80031d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001184:	4809      	ldr	r0, [pc, #36]	; (80011ac <lcd_cmd+0x44>)
 8001186:	f002 f827 	bl	80031d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 800118a:	1df9      	adds	r1, r7, #7
 800118c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001190:	2201      	movs	r2, #1
 8001192:	4807      	ldr	r0, [pc, #28]	; (80011b0 <lcd_cmd+0x48>)
 8001194:	f004 fe33 	bl	8005dfe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800119e:	4803      	ldr	r0, [pc, #12]	; (80011ac <lcd_cmd+0x44>)
 80011a0:	f002 f81a 	bl	80031d8 <HAL_GPIO_WritePin>
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	48000400 	.word	0x48000400
 80011b0:	2000a290 	.word	0x2000a290

080011b4 <lcd_data>:


static void lcd_data(uint8_t data) //send data
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <lcd_data+0x44>)
 80011c6:	f002 f807 	bl	80031d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d0:	4809      	ldr	r0, [pc, #36]	; (80011f8 <lcd_data+0x44>)
 80011d2:	f002 f801 	bl	80031d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80011d6:	1df9      	adds	r1, r7, #7
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011dc:	2201      	movs	r2, #1
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <lcd_data+0x48>)
 80011e0:	f004 fe0d 	bl	8005dfe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ea:	4803      	ldr	r0, [pc, #12]	; (80011f8 <lcd_data+0x44>)
 80011ec:	f001 fff4 	bl	80031d8 <HAL_GPIO_WritePin>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	48000400 	.word	0x48000400
 80011fc:	2000a290 	.word	0x2000a290

08001200 <lcd_send>:


static void lcd_send(uint16_t value)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <lcd_send+0x20>
		lcd_cmd(value);
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ffa5 	bl	8001168 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 800121e:	e004      	b.n	800122a <lcd_send+0x2a>
		lcd_data(value);
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ffc5 	bl	80011b4 <lcd_data>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <lcd_data16>:
  CMD(ST7735S_MADCTL), 0xa0,
};


static void lcd_data16(uint16_t value)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	b29b      	uxth	r3, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ffb5 	bl	80011b4 <lcd_data>
	lcd_data(value);
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ffb0 	bl	80011b4 <lcd_data>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <lcd_set_window>:


static void lcd_set_window(int x, int y, int width, int height)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 800126a:	202a      	movs	r0, #42	; 0x2a
 800126c:	f7ff ff7c 	bl	8001168 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	b29b      	uxth	r3, r3
 8001274:	3301      	adds	r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ffda 	bl	8001232 <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	b29a      	uxth	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	b29b      	uxth	r3, r3
 8001286:	4413      	add	r3, r2
 8001288:	b29b      	uxth	r3, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ffd1 	bl	8001232 <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 8001290:	202b      	movs	r0, #43	; 0x2b
 8001292:	f7ff ff69 	bl	8001168 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	b29b      	uxth	r3, r3
 800129a:	3302      	adds	r3, #2
 800129c:	b29b      	uxth	r3, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ffc7 	bl	8001232 <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4413      	add	r3, r2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	3301      	adds	r3, #1
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ffbc 	bl	8001232 <lcd_data16>
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <lcd_init>:




void lcd_init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2104      	movs	r1, #4
 80012ce:	4817      	ldr	r0, [pc, #92]	; (800132c <lcd_init+0x68>)
 80012d0:	f001 ff82 	bl	80031d8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80012d4:	2064      	movs	r0, #100	; 0x64
 80012d6:	f000 f91b 	bl	8001510 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80012da:	2201      	movs	r2, #1
 80012dc:	2104      	movs	r1, #4
 80012de:	4813      	ldr	r0, [pc, #76]	; (800132c <lcd_init+0x68>)
 80012e0:	f001 ff7a 	bl	80031d8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80012e4:	2064      	movs	r0, #100	; 0x64
 80012e6:	f000 f913 	bl	8001510 <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	e009      	b.n	8001304 <lcd_init+0x40>
    lcd_send(init_table[i]);
 80012f0:	4a0f      	ldr	r2, [pc, #60]	; (8001330 <lcd_init+0x6c>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff81 	bl	8001200 <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3301      	adds	r3, #1
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b4b      	cmp	r3, #75	; 0x4b
 8001308:	d9f2      	bls.n	80012f0 <lcd_init+0x2c>
  }

  HAL_Delay(200);
 800130a:	20c8      	movs	r0, #200	; 0xc8
 800130c:	f000 f900 	bl	8001510 <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 8001310:	2011      	movs	r0, #17
 8001312:	f7ff ff29 	bl	8001168 <lcd_cmd>
  HAL_Delay(120);
 8001316:	2078      	movs	r0, #120	; 0x78
 8001318:	f000 f8fa 	bl	8001510 <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
 800131c:	2029      	movs	r0, #41	; 0x29
 800131e:	f7ff ff23 	bl	8001168 <lcd_cmd>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	48000400 	.word	0x48000400
 8001330:	0800bf88 	.word	0x0800bf88

08001334 <lcd_put_pixel>:

void lcd_put_pixel(int x, int y, uint16_t color)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	4613      	mov	r3, r2
 8001340:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	015b      	lsls	r3, r3, #5
 800134c:	461a      	mov	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4413      	add	r3, r2
 8001352:	4905      	ldr	r1, [pc, #20]	; (8001368 <lcd_put_pixel+0x34>)
 8001354:	88fa      	ldrh	r2, [r7, #6]
 8001356:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800135a:	bf00      	nop
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000264 	.word	0x20000264

0800136c <lcd_copy>:

void lcd_copy(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	22a0      	movs	r2, #160	; 0xa0
 8001374:	2100      	movs	r1, #0
 8001376:	2000      	movs	r0, #0
 8001378:	f7ff ff70 	bl	800125c <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 800137c:	202c      	movs	r0, #44	; 0x2c
 800137e:	f7ff fef3 	bl	8001168 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001382:	2201      	movs	r2, #1
 8001384:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001388:	4808      	ldr	r0, [pc, #32]	; (80013ac <lcd_copy+0x40>)
 800138a:	f001 ff25 	bl	80031d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <lcd_copy+0x40>)
 8001396:	f001 ff1f 	bl	80031d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer));
 800139a:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800139e:	4904      	ldr	r1, [pc, #16]	; (80013b0 <lcd_copy+0x44>)
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <lcd_copy+0x48>)
 80013a2:	f004 fe9b 	bl	80060dc <HAL_SPI_Transmit_DMA>
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	48000400 	.word	0x48000400
 80013b0:	20000264 	.word	0x20000264
 80013b4:	2000a290 	.word	0x2000a290

080013b8 <lps_read_reg>:
#define LPS25HB_TEMP_OUT_H 		0x2C

#define TIMEOUT                 100

static uint8_t lps_read_reg(uint8_t reg)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af04      	add	r7, sp, #16
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	2364      	movs	r3, #100	; 0x64
 80013cc:	9302      	str	r3, [sp, #8]
 80013ce:	2301      	movs	r3, #1
 80013d0:	9301      	str	r3, [sp, #4]
 80013d2:	f107 030f 	add.w	r3, r7, #15
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2301      	movs	r3, #1
 80013da:	21ba      	movs	r1, #186	; 0xba
 80013dc:	4803      	ldr	r0, [pc, #12]	; (80013ec <lps_read_reg+0x34>)
 80013de:	f002 f8cf 	bl	8003580 <HAL_I2C_Mem_Read>

    return value;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000200 	.word	0x20000200

080013f0 <lps_write_reg>:

static void lps_write_reg(uint8_t reg, uint8_t value)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af04      	add	r7, sp, #16
 80013f6:	4603      	mov	r3, r0
 80013f8:	460a      	mov	r2, r1
 80013fa:	71fb      	strb	r3, [r7, #7]
 80013fc:	4613      	mov	r3, r2
 80013fe:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	b29a      	uxth	r2, r3
 8001404:	2364      	movs	r3, #100	; 0x64
 8001406:	9302      	str	r3, [sp, #8]
 8001408:	2301      	movs	r3, #1
 800140a:	9301      	str	r3, [sp, #4]
 800140c:	1dbb      	adds	r3, r7, #6
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	2301      	movs	r3, #1
 8001412:	21ba      	movs	r1, #186	; 0xba
 8001414:	4803      	ldr	r0, [pc, #12]	; (8001424 <lps_write_reg+0x34>)
 8001416:	f001 ff9f 	bl	8003358 <HAL_I2C_Mem_Write>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000200 	.word	0x20000200

08001428 <lps25hb_init>:

HAL_StatusTypeDef lps25hb_init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
    if (lps_read_reg(LPS25HB_WHO_AM_I) != 0xBD)
 800142c:	200f      	movs	r0, #15
 800142e:	f7ff ffc3 	bl	80013b8 <lps_read_reg>
 8001432:	4603      	mov	r3, r0
 8001434:	2bbd      	cmp	r3, #189	; 0xbd
 8001436:	d001      	beq.n	800143c <lps25hb_init+0x14>
         return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e004      	b.n	8001446 <lps25hb_init+0x1e>

    lps_write_reg(LPS25HB_CTRL_REG1,  0x80); //wake up sensor
 800143c:	2180      	movs	r1, #128	; 0x80
 800143e:	2020      	movs	r0, #32
 8001440:	f7ff ffd6 	bl	80013f0 <lps_write_reg>
    return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	bd80      	pop	{r7, pc}

0800144a <lps25hb_one_shot>:
    lps_write_reg(LPS25HB_CTRL_REG1,  0xC0);
        return HAL_OK;
}

HAL_StatusTypeDef lps25hb_one_shot(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
    lps_write_reg(LPS25HB_CTRL_REG2, 0x01);
 800144e:	2101      	movs	r1, #1
 8001450:	2021      	movs	r0, #33	; 0x21
 8001452:	f7ff ffcd 	bl	80013f0 <lps_write_reg>
    return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	bd80      	pop	{r7, pc}

0800145c <lps25hb_read_temp>:
	  lps_write_reg(LPS25HB_CTRL_REG1, 0);
    return HAL_OK;
}

float lps25hb_read_temp(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af04      	add	r7, sp, #16
     int16_t temp;

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_TEMP_OUT_L | 0x80, 1, (uint8_t*)&temp, sizeof(temp), TIMEOUT) != HAL_OK)
 8001462:	2364      	movs	r3, #100	; 0x64
 8001464:	9302      	str	r3, [sp, #8]
 8001466:	2302      	movs	r3, #2
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	1dbb      	adds	r3, r7, #6
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2301      	movs	r3, #1
 8001470:	22ab      	movs	r2, #171	; 0xab
 8001472:	21ba      	movs	r1, #186	; 0xba
 8001474:	480d      	ldr	r0, [pc, #52]	; (80014ac <lps25hb_read_temp+0x50>)
 8001476:	f002 f883 	bl	8003580 <HAL_I2C_Mem_Read>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <lps25hb_read_temp+0x28>
         Error_Handler();
 8001480:	f000 fd94 	bl	8001fac <Error_Handler>

     return 42.5f + temp / 480.0f;
 8001484:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001488:	ee07 3a90 	vmov	s15, r3
 800148c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001490:	eddf 6a07 	vldr	s13, [pc, #28]	; 80014b0 <lps25hb_read_temp+0x54>
 8001494:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001498:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80014b4 <lps25hb_read_temp+0x58>
 800149c:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80014a0:	eeb0 0a67 	vmov.f32	s0, s15
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000200 	.word	0x20000200
 80014b0:	43f00000 	.word	0x43f00000
 80014b4:	422a0000 	.word	0x422a0000

080014b8 <lps25hb_read_pressure>:

float lps25hb_read_pressure(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af04      	add	r7, sp, #16
     int32_t pressure = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_PRESS_OUT_XL | 0x80, 1, (uint8_t*)&pressure, 3, TIMEOUT) != HAL_OK)
 80014c2:	2364      	movs	r3, #100	; 0x64
 80014c4:	9302      	str	r3, [sp, #8]
 80014c6:	2303      	movs	r3, #3
 80014c8:	9301      	str	r3, [sp, #4]
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	2301      	movs	r3, #1
 80014d0:	22a8      	movs	r2, #168	; 0xa8
 80014d2:	21ba      	movs	r1, #186	; 0xba
 80014d4:	480c      	ldr	r0, [pc, #48]	; (8001508 <lps25hb_read_pressure+0x50>)
 80014d6:	f002 f853 	bl	8003580 <HAL_I2C_Mem_Read>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <lps25hb_read_pressure+0x2c>
         Error_Handler();
 80014e0:	f000 fd64 	bl	8001fac <Error_Handler>

     return (pressure / 4096.0f)+9;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ee:	eddf 6a07 	vldr	s13, [pc, #28]	; 800150c <lps25hb_read_pressure+0x54>
 80014f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f6:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80014fa:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80014fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000200 	.word	0x20000200
 800150c:	45800000 	.word	0x45800000

08001510 <HAL_Delay>:
/* USER CODE BEGIN 0 */


//Add __WFI() -> sleep (wait for interrupt)
void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f001 f99e 	bl	8002858 <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001528:	d007      	beq.n	800153a <HAL_Delay+0x2a>
  {
    wait += (uint32_t)uwTickFreq;
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_Delay+0x44>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001536:	e000      	b.n	800153a <HAL_Delay+0x2a>
  {
	  __WFI();
 8001538:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800153a:	f001 f98d 	bl	8002858 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	429a      	cmp	r2, r3
 8001548:	d8f6      	bhi.n	8001538 <HAL_Delay+0x28>
  }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000008 	.word	0x20000008

08001558 <__io_putchar>:

int __io_putchar(int ch)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b0a      	cmp	r3, #10
 8001564:	d102      	bne.n	800156c <__io_putchar+0x14>
    __io_putchar('\r');
 8001566:	200d      	movs	r0, #13
 8001568:	f7ff fff6 	bl	8001558 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800156c:	1d39      	adds	r1, r7, #4
 800156e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001572:	2201      	movs	r2, #1
 8001574:	4803      	ldr	r0, [pc, #12]	; (8001584 <__io_putchar+0x2c>)
 8001576:	f005 fb69 	bl	8006c4c <HAL_UART_Transmit>

  return 1;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	2000a38c 	.word	0x2000a38c

08001588 <HAL_GPIO_EXTI_Callback>:

volatile uint8_t flag = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]

  if (GPIO_Pin == USER_BUTTON_Pin) {
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d138      	bne.n	800160a <HAL_GPIO_EXTI_Callback+0x82>
	  static uint32_t last_interrupt_time = 0;
	  uint32_t current_interrupt_time = HAL_GetTick();
 8001598:	f001 f95e 	bl	8002858 <HAL_GetTick>
 800159c:	60f8      	str	r0, [r7, #12]
	  // button filter ( 100ms)
	  if ((current_interrupt_time - last_interrupt_time) > 300) {
 800159e:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <HAL_GPIO_EXTI_Callback+0x8c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80015aa:	d92e      	bls.n	800160a <HAL_GPIO_EXTI_Callback+0x82>
		  last_interrupt_time = current_interrupt_time;
 80015ac:	4a19      	ldr	r2, [pc, #100]	; (8001614 <HAL_GPIO_EXTI_Callback+0x8c>)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6013      	str	r3, [r2, #0]
		  printf("Enter interrupt!\n");
 80015b2:	4819      	ldr	r0, [pc, #100]	; (8001618 <HAL_GPIO_EXTI_Callback+0x90>)
 80015b4:	f007 ff24 	bl	8009400 <puts>
		  HAL_Delay(100);
 80015b8:	2064      	movs	r0, #100	; 0x64
 80015ba:	f7ff ffa9 	bl	8001510 <HAL_Delay>
		  if(flag==0) {
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <HAL_GPIO_EXTI_Callback+0x94>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d109      	bne.n	80015dc <HAL_GPIO_EXTI_Callback+0x54>
			  flag=1;
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <HAL_GPIO_EXTI_Callback+0x94>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
			  printf("Set flag 1\n");
 80015ce:	4814      	ldr	r0, [pc, #80]	; (8001620 <HAL_GPIO_EXTI_Callback+0x98>)
 80015d0:	f007 ff16 	bl	8009400 <puts>
			  HAL_Delay(200);
 80015d4:	20c8      	movs	r0, #200	; 0xc8
 80015d6:	f7ff ff9b 	bl	8001510 <HAL_Delay>
			  flag=0;

	  }
	}
  }
}
 80015da:	e016      	b.n	800160a <HAL_GPIO_EXTI_Callback+0x82>
		  else if(flag==1) {
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_GPIO_EXTI_Callback+0x94>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d109      	bne.n	80015fa <HAL_GPIO_EXTI_Callback+0x72>
			  flag=2;
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <HAL_GPIO_EXTI_Callback+0x94>)
 80015e8:	2202      	movs	r2, #2
 80015ea:	701a      	strb	r2, [r3, #0]
			  printf("Set flag 2\n");
 80015ec:	480d      	ldr	r0, [pc, #52]	; (8001624 <HAL_GPIO_EXTI_Callback+0x9c>)
 80015ee:	f007 ff07 	bl	8009400 <puts>
			  HAL_Delay(200);
 80015f2:	20c8      	movs	r0, #200	; 0xc8
 80015f4:	f7ff ff8c 	bl	8001510 <HAL_Delay>
}
 80015f8:	e007      	b.n	800160a <HAL_GPIO_EXTI_Callback+0x82>
		  else if (flag==2){
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <HAL_GPIO_EXTI_Callback+0x94>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d102      	bne.n	800160a <HAL_GPIO_EXTI_Callback+0x82>
			  flag=0;
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_GPIO_EXTI_Callback+0x94>)
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2000a268 	.word	0x2000a268
 8001618:	0800bdc0 	.word	0x0800bdc0
 800161c:	2000a264 	.word	0x2000a264
 8001620:	0800bdd4 	.word	0x0800bdd4
 8001624:	0800bde0 	.word	0x0800bde0

08001628 <lps_temperature_pressure_measure>:
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, currentTime.Minutes);
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, currentTime.Seconds);
}

void lps_temperature_pressure_measure()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b09e      	sub	sp, #120	; 0x78
 800162c:	af02      	add	r7, sp, #8
	  printf("Searching...\n");
 800162e:	484b      	ldr	r0, [pc, #300]	; (800175c <lps_temperature_pressure_measure+0x134>)
 8001630:	f007 fee6 	bl	8009400 <puts>
	  if (lps25hb_init() == HAL_OK) {
 8001634:	f7ff fef8 	bl	8001428 <lps25hb_init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	f040 8085 	bne.w	800174a <lps_temperature_pressure_measure+0x122>
	    printf("OK: LPS25HB\n");
 8001640:	4847      	ldr	r0, [pc, #284]	; (8001760 <lps_temperature_pressure_measure+0x138>)
 8001642:	f007 fedd 	bl	8009400 <puts>
	    lps25hb_one_shot();
 8001646:	f7ff ff00 	bl	800144a <lps25hb_one_shot>
	    HAL_Delay(100);
 800164a:	2064      	movs	r0, #100	; 0x64
 800164c:	f7ff ff60 	bl	8001510 <HAL_Delay>
	    printf("T = %.1f*C\n", lps25hb_read_temp());
 8001650:	f7ff ff04 	bl	800145c <lps25hb_read_temp>
 8001654:	ee10 3a10 	vmov	r3, s0
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff75 	bl	8000548 <__aeabi_f2d>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4840      	ldr	r0, [pc, #256]	; (8001764 <lps_temperature_pressure_measure+0x13c>)
 8001664:	f007 fe46 	bl	80092f4 <iprintf>
	    printf("p = %.1f hPa\n", lps25hb_read_pressure()+14);
 8001668:	f7ff ff26 	bl	80014b8 <lps25hb_read_pressure>
 800166c:	eef0 7a40 	vmov.f32	s15, s0
 8001670:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001674:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001678:	ee17 0a90 	vmov	r0, s15
 800167c:	f7fe ff64 	bl	8000548 <__aeabi_f2d>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4838      	ldr	r0, [pc, #224]	; (8001768 <lps_temperature_pressure_measure+0x140>)
 8001686:	f007 fe35 	bl	80092f4 <iprintf>

	    wchar_t buffer[20];
	    swprintf(buffer, 20, L"Temperatura: %.1f°C", lps25hb_read_temp()-2);
 800168a:	f7ff fee7 	bl	800145c <lps25hb_read_temp>
 800168e:	eef0 7a40 	vmov.f32	s15, s0
 8001692:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001696:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800169a:	ee17 0a90 	vmov	r0, s15
 800169e:	f7fe ff53 	bl	8000548 <__aeabi_f2d>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	1d38      	adds	r0, r7, #4
 80016a8:	e9cd 2300 	strd	r2, r3, [sp]
 80016ac:	4a2f      	ldr	r2, [pc, #188]	; (800176c <lps_temperature_pressure_measure+0x144>)
 80016ae:	2114      	movs	r1, #20
 80016b0:	f007 ff02 	bl	80094b8 <swprintf>
	    hagl_put_text(buffer, 20, 75, YELLOW, font6x9);
 80016b4:	1d38      	adds	r0, r7, #4
 80016b6:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <lps_temperature_pressure_measure+0x148>)
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80016be:	224b      	movs	r2, #75	; 0x4b
 80016c0:	2114      	movs	r1, #20
 80016c2:	f006 fc19 	bl	8007ef8 <hagl_put_text>
	    swprintf(buffer, 20, L"Cisnienie: %.0fhPa", lps25hb_read_pressure());
 80016c6:	f7ff fef7 	bl	80014b8 <lps25hb_read_pressure>
 80016ca:	ee10 3a10 	vmov	r3, s0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe ff3a 	bl	8000548 <__aeabi_f2d>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	1d38      	adds	r0, r7, #4
 80016da:	e9cd 2300 	strd	r2, r3, [sp]
 80016de:	4a25      	ldr	r2, [pc, #148]	; (8001774 <lps_temperature_pressure_measure+0x14c>)
 80016e0:	2114      	movs	r1, #20
 80016e2:	f007 fee9 	bl	80094b8 <swprintf>
	    hagl_put_text(buffer, 20, 95, YELLOW, font6x9);
 80016e6:	1d38      	adds	r0, r7, #4
 80016e8:	4b21      	ldr	r3, [pc, #132]	; (8001770 <lps_temperature_pressure_measure+0x148>)
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80016f0:	225f      	movs	r2, #95	; 0x5f
 80016f2:	2114      	movs	r1, #20
 80016f4:	f006 fc00 	bl	8007ef8 <hagl_put_text>
	    lcd_copy();
 80016f8:	f7ff fe38 	bl	800136c <lcd_copy>

	    RTC_TimeTypeDef time;
	    RTC_DateTypeDef date;
	    for(int i=0;i<2;i++){
 80016fc:	2300      	movs	r3, #0
 80016fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001700:	e01f      	b.n	8001742 <lps_temperature_pressure_measure+0x11a>
	  	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001702:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001706:	2200      	movs	r2, #0
 8001708:	4619      	mov	r1, r3
 800170a:	481b      	ldr	r0, [pc, #108]	; (8001778 <lps_temperature_pressure_measure+0x150>)
 800170c:	f004 f896 	bl	800583c <HAL_RTC_GetTime>
	  	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001710:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001714:	2200      	movs	r2, #0
 8001716:	4619      	mov	r1, r3
 8001718:	4817      	ldr	r0, [pc, #92]	; (8001778 <lps_temperature_pressure_measure+0x150>)
 800171a:	f004 f8eb 	bl	80058f4 <HAL_RTC_GetDate>
	  	  printf("Aktualny czas: %02d:%02d:%02d\n", time.Hours, time.Minutes, time.Seconds);
 800171e:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001722:	4619      	mov	r1, r3
 8001724:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001728:	461a      	mov	r2, r3
 800172a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800172e:	4813      	ldr	r0, [pc, #76]	; (800177c <lps_temperature_pressure_measure+0x154>)
 8001730:	f007 fde0 	bl	80092f4 <iprintf>
	  	  HAL_Delay(1000);
 8001734:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001738:	f7ff feea 	bl	8001510 <HAL_Delay>
	    for(int i=0;i<2;i++){
 800173c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800173e:	3301      	adds	r3, #1
 8001740:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001744:	2b01      	cmp	r3, #1
 8001746:	dddc      	ble.n	8001702 <lps_temperature_pressure_measure+0xda>
	    }
	  } else {
	    printf("Error: LPS25HB not found\n");
	    Error_Handler();
	  }
}
 8001748:	e004      	b.n	8001754 <lps_temperature_pressure_measure+0x12c>
	    printf("Error: LPS25HB not found\n");
 800174a:	480d      	ldr	r0, [pc, #52]	; (8001780 <lps_temperature_pressure_measure+0x158>)
 800174c:	f007 fe58 	bl	8009400 <puts>
	    Error_Handler();
 8001750:	f000 fc2c 	bl	8001fac <Error_Handler>
}
 8001754:	bf00      	nop
 8001756:	3770      	adds	r7, #112	; 0x70
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	0800bdec 	.word	0x0800bdec
 8001760:	0800bdfc 	.word	0x0800bdfc
 8001764:	0800be08 	.word	0x0800be08
 8001768:	0800be14 	.word	0x0800be14
 800176c:	0800be24 	.word	0x0800be24
 8001770:	0800c020 	.word	0x0800c020
 8001774:	0800be74 	.word	0x0800be74
 8001778:	2000a26c 	.word	0x2000a26c
 800177c:	0800bec0 	.word	0x0800bec0
 8001780:	0800bee0 	.word	0x0800bee0

08001784 <first_procedure_hour_change>:

void first_procedure_hour_change()
{
 8001784:	b5b0      	push	{r4, r5, r7, lr}
 8001786:	b0a0      	sub	sp, #128	; 0x80
 8001788:	af02      	add	r7, sp, #8
	  printf("Entering first procedure!\n");
 800178a:	4896      	ldr	r0, [pc, #600]	; (80019e4 <first_procedure_hour_change+0x260>)
 800178c:	f007 fe38 	bl	8009400 <puts>
	  HAL_Delay(100);
 8001790:	2064      	movs	r0, #100	; 0x64
 8001792:	f7ff febd 	bl	8001510 <HAL_Delay>
	  int16_t prev_value=0;
 8001796:	2300      	movs	r3, #0
 8001798:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  uint8_t i=0;
 800179c:	2300      	movs	r3, #0
 800179e:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	  RTC_TimeTypeDef time;
	  RTC_DateTypeDef date;
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80017a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017a6:	2200      	movs	r2, #0
 80017a8:	4619      	mov	r1, r3
 80017aa:	488f      	ldr	r0, [pc, #572]	; (80019e8 <first_procedure_hour_change+0x264>)
 80017ac:	f004 f846 	bl	800583c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80017b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017b4:	2200      	movs	r2, #0
 80017b6:	4619      	mov	r1, r3
 80017b8:	488b      	ldr	r0, [pc, #556]	; (80019e8 <first_procedure_hour_change+0x264>)
 80017ba:	f004 f89b 	bl	80058f4 <HAL_RTC_GetDate>
	  wchar_t buffer[20];
	  for (int i = 0; i < 2; i++) {
 80017be:	2300      	movs	r3, #0
 80017c0:	673b      	str	r3, [r7, #112]	; 0x70
 80017c2:	e025      	b.n	8001810 <first_procedure_hour_change+0x8c>
	    hagl_draw_rounded_rectangle(52+i, 30+i, 75-i, 55-i, 2-i, YELLOW);
 80017c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	3334      	adds	r3, #52	; 0x34
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	b218      	sxth	r0, r3
 80017ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	331e      	adds	r3, #30
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	b219      	sxth	r1, r3
 80017d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017da:	b29b      	uxth	r3, r3
 80017dc:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	b21a      	sxth	r2, r3
 80017e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	f1c3 0337 	rsb	r3, r3, #55	; 0x37
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	b21c      	sxth	r4, r3
 80017f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	f1c3 0302 	rsb	r3, r3, #2
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	f24e 05ff 	movw	r5, #57599	; 0xe0ff
 8001800:	9501      	str	r5, [sp, #4]
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	4623      	mov	r3, r4
 8001806:	f006 fbff 	bl	8008008 <hagl_draw_rounded_rectangle>
	  for (int i = 0; i < 2; i++) {
 800180a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800180c:	3301      	adds	r3, #1
 800180e:	673b      	str	r3, [r7, #112]	; 0x70
 8001810:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001812:	2b01      	cmp	r3, #1
 8001814:	ddd6      	ble.n	80017c4 <first_procedure_hour_change+0x40>
	  }
	  swprintf(buffer, 20, L"%02d:%02d", time.Hours, time.Minutes);
 8001816:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800181a:	461a      	mov	r2, r3
 800181c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001820:	4638      	mov	r0, r7
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	4613      	mov	r3, r2
 8001826:	4a71      	ldr	r2, [pc, #452]	; (80019ec <first_procedure_hour_change+0x268>)
 8001828:	2114      	movs	r1, #20
 800182a:	f007 fe45 	bl	80094b8 <swprintf>
	  hagl_put_text(buffer, 55, 35, YELLOW, font9x18);
 800182e:	4638      	mov	r0, r7
 8001830:	4b6f      	ldr	r3, [pc, #444]	; (80019f0 <first_procedure_hour_change+0x26c>)
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001838:	2223      	movs	r2, #35	; 0x23
 800183a:	2137      	movs	r1, #55	; 0x37
 800183c:	f006 fb5c 	bl	8007ef8 <hagl_put_text>
	  lcd_copy();
 8001840:	f7ff fd94 	bl	800136c <lcd_copy>
	  while(flag==1){
 8001844:	e098      	b.n	8001978 <first_procedure_hour_change+0x1f4>
		  int16_t value = __HAL_TIM_GET_COUNTER(&htim3);
 8001846:	4b6b      	ldr	r3, [pc, #428]	; (80019f4 <first_procedure_hour_change+0x270>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		  if (value != prev_value) {
 8001850:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 8001854:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8001858:	429a      	cmp	r2, r3
 800185a:	f000 808d 	beq.w	8001978 <first_procedure_hour_change+0x1f4>
			  //printf("value = %d\n", value);
			  i++;
 800185e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001862:	3301      	adds	r3, #1
 8001864:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			  if(value==prev_value+1){
 8001868:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 800186c:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8001870:	3301      	adds	r3, #1
 8001872:	429a      	cmp	r2, r3
 8001874:	d13a      	bne.n	80018ec <first_procedure_hour_change+0x168>
				  if(i==2)
 8001876:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800187a:	2b02      	cmp	r3, #2
 800187c:	d136      	bne.n	80018ec <first_procedure_hour_change+0x168>
				  {
					  HAL_IWDG_Refresh(&hiwdg);
 800187e:	485e      	ldr	r0, [pc, #376]	; (80019f8 <first_procedure_hour_change+0x274>)
 8001880:	f002 fb24 	bl	8003ecc <HAL_IWDG_Refresh>
					  time.Hours=time.Hours+1;
 8001884:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001888:	3301      	adds	r3, #1
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
					  if(time.Hours==24) time.Hours=0;
 8001890:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001894:	2b18      	cmp	r3, #24
 8001896:	d102      	bne.n	800189e <first_procedure_hour_change+0x11a>
 8001898:	2300      	movs	r3, #0
 800189a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
					  HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800189e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018a2:	2200      	movs	r2, #0
 80018a4:	4619      	mov	r1, r3
 80018a6:	4850      	ldr	r0, [pc, #320]	; (80019e8 <first_procedure_hour_change+0x264>)
 80018a8:	f003 ff2b 	bl	8005702 <HAL_RTC_SetTime>
					  printf("Hours: %d\n", time.Hours);
 80018ac:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80018b0:	4619      	mov	r1, r3
 80018b2:	4852      	ldr	r0, [pc, #328]	; (80019fc <first_procedure_hour_change+0x278>)
 80018b4:	f007 fd1e 	bl	80092f4 <iprintf>
					  i=0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
					  swprintf(buffer, 20, L"%02d:%02d", time.Hours, time.Minutes);
 80018be:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80018c2:	461a      	mov	r2, r3
 80018c4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80018c8:	4638      	mov	r0, r7
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	4613      	mov	r3, r2
 80018ce:	4a47      	ldr	r2, [pc, #284]	; (80019ec <first_procedure_hour_change+0x268>)
 80018d0:	2114      	movs	r1, #20
 80018d2:	f007 fdf1 	bl	80094b8 <swprintf>
					  hagl_put_text(buffer, 55, 35, YELLOW, font9x18);
 80018d6:	4638      	mov	r0, r7
 80018d8:	4b45      	ldr	r3, [pc, #276]	; (80019f0 <first_procedure_hour_change+0x26c>)
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80018e0:	2223      	movs	r2, #35	; 0x23
 80018e2:	2137      	movs	r1, #55	; 0x37
 80018e4:	f006 fb08 	bl	8007ef8 <hagl_put_text>
					  lcd_copy();
 80018e8:	f7ff fd40 	bl	800136c <lcd_copy>
				  }
			  }
			  if(value==prev_value-1){
 80018ec:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 80018f0:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80018f4:	3b01      	subs	r3, #1
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d13a      	bne.n	8001970 <first_procedure_hour_change+0x1ec>
				  if(i==2)
 80018fa:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d136      	bne.n	8001970 <first_procedure_hour_change+0x1ec>
				  {
					  HAL_IWDG_Refresh(&hiwdg);
 8001902:	483d      	ldr	r0, [pc, #244]	; (80019f8 <first_procedure_hour_change+0x274>)
 8001904:	f002 fae2 	bl	8003ecc <HAL_IWDG_Refresh>
					  time.Hours=time.Hours-1;
 8001908:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800190c:	3b01      	subs	r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
					  if(time.Hours==255) time.Hours=23;
 8001914:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001918:	2bff      	cmp	r3, #255	; 0xff
 800191a:	d102      	bne.n	8001922 <first_procedure_hour_change+0x19e>
 800191c:	2317      	movs	r3, #23
 800191e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
					  HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001922:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001926:	2200      	movs	r2, #0
 8001928:	4619      	mov	r1, r3
 800192a:	482f      	ldr	r0, [pc, #188]	; (80019e8 <first_procedure_hour_change+0x264>)
 800192c:	f003 fee9 	bl	8005702 <HAL_RTC_SetTime>
					  printf("Hours: %d\n", time.Hours);
 8001930:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001934:	4619      	mov	r1, r3
 8001936:	4831      	ldr	r0, [pc, #196]	; (80019fc <first_procedure_hour_change+0x278>)
 8001938:	f007 fcdc 	bl	80092f4 <iprintf>
					  i=0;
 800193c:	2300      	movs	r3, #0
 800193e:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
					  swprintf(buffer, 20, L"%02d:%02d", time.Hours, time.Minutes);
 8001942:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001946:	461a      	mov	r2, r3
 8001948:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800194c:	4638      	mov	r0, r7
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	4613      	mov	r3, r2
 8001952:	4a26      	ldr	r2, [pc, #152]	; (80019ec <first_procedure_hour_change+0x268>)
 8001954:	2114      	movs	r1, #20
 8001956:	f007 fdaf 	bl	80094b8 <swprintf>
					  hagl_put_text(buffer, 55, 35, YELLOW, font9x18);
 800195a:	4638      	mov	r0, r7
 800195c:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <first_procedure_hour_change+0x26c>)
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001964:	2223      	movs	r2, #35	; 0x23
 8001966:	2137      	movs	r1, #55	; 0x37
 8001968:	f006 fac6 	bl	8007ef8 <hagl_put_text>
					  lcd_copy();
 800196c:	f7ff fcfe 	bl	800136c <lcd_copy>
				  }
			  }
			  prev_value = value;
 8001970:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001974:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  while(flag==1){
 8001978:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <first_procedure_hour_change+0x27c>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b01      	cmp	r3, #1
 8001980:	f43f af61 	beq.w	8001846 <first_procedure_hour_change+0xc2>
		  }
	  }
	  for (int i = 0; i < 2; i++) {
 8001984:	2300      	movs	r3, #0
 8001986:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001988:	e024      	b.n	80019d4 <first_procedure_hour_change+0x250>
	    hagl_draw_rounded_rectangle(52+i, 30+i, 75-i, 55-i, 2-i, BLACK);
 800198a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800198c:	b29b      	uxth	r3, r3
 800198e:	3334      	adds	r3, #52	; 0x34
 8001990:	b29b      	uxth	r3, r3
 8001992:	b218      	sxth	r0, r3
 8001994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001996:	b29b      	uxth	r3, r3
 8001998:	331e      	adds	r3, #30
 800199a:	b29b      	uxth	r3, r3
 800199c:	b219      	sxth	r1, r3
 800199e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	b21a      	sxth	r2, r3
 80019aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	f1c3 0337 	rsb	r3, r3, #55	; 0x37
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	b21c      	sxth	r4, r3
 80019b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	f1c3 0302 	rsb	r3, r3, #2
 80019be:	b29b      	uxth	r3, r3
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	2500      	movs	r5, #0
 80019c4:	9501      	str	r5, [sp, #4]
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	4623      	mov	r3, r4
 80019ca:	f006 fb1d 	bl	8008008 <hagl_draw_rounded_rectangle>
	  for (int i = 0; i < 2; i++) {
 80019ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019d0:	3301      	adds	r3, #1
 80019d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80019d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	ddd7      	ble.n	800198a <first_procedure_hour_change+0x206>
	  }
}
 80019da:	bf00      	nop
 80019dc:	bf00      	nop
 80019de:	3778      	adds	r7, #120	; 0x78
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bdb0      	pop	{r4, r5, r7, pc}
 80019e4:	0800befc 	.word	0x0800befc
 80019e8:	2000a26c 	.word	0x2000a26c
 80019ec:	0800bf18 	.word	0x0800bf18
 80019f0:	0800efd8 	.word	0x0800efd8
 80019f4:	2000a340 	.word	0x2000a340
 80019f8:	20000254 	.word	0x20000254
 80019fc:	0800bf40 	.word	0x0800bf40
 8001a00:	2000a264 	.word	0x2000a264

08001a04 <second_procedure_minutes_change>:

void second_procedure_minutes_change()
{
 8001a04:	b5b0      	push	{r4, r5, r7, lr}
 8001a06:	b0a8      	sub	sp, #160	; 0xa0
 8001a08:	af02      	add	r7, sp, #8
	  printf("Entering second procedure!\n");
 8001a0a:	48c1      	ldr	r0, [pc, #772]	; (8001d10 <second_procedure_minutes_change+0x30c>)
 8001a0c:	f007 fcf8 	bl	8009400 <puts>
	  HAL_Delay(100);
 8001a10:	2064      	movs	r0, #100	; 0x64
 8001a12:	f7ff fd7d 	bl	8001510 <HAL_Delay>
	  int16_t prev_value=0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	  uint8_t i=0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
	  RTC_TimeTypeDef time;
	  RTC_DateTypeDef date;
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001a22:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a26:	2200      	movs	r2, #0
 8001a28:	4619      	mov	r1, r3
 8001a2a:	48ba      	ldr	r0, [pc, #744]	; (8001d14 <second_procedure_minutes_change+0x310>)
 8001a2c:	f003 ff06 	bl	800583c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001a30:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a34:	2200      	movs	r2, #0
 8001a36:	4619      	mov	r1, r3
 8001a38:	48b6      	ldr	r0, [pc, #728]	; (8001d14 <second_procedure_minutes_change+0x310>)
 8001a3a:	f003 ff5b 	bl	80058f4 <HAL_RTC_GetDate>
	  wchar_t buffer[20];
	  for (int i = 0; i < 2; i++) {
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a44:	e02c      	b.n	8001aa0 <second_procedure_minutes_change+0x9c>
	    hagl_draw_rounded_rectangle(80+i, 30+i, 105-i, 55-i, 2-i, YELLOW);
 8001a46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	3350      	adds	r3, #80	; 0x50
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	b218      	sxth	r0, r3
 8001a52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	331e      	adds	r3, #30
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	b219      	sxth	r1, r3
 8001a5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	f1c3 0369 	rsb	r3, r3, #105	; 0x69
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	b21a      	sxth	r2, r3
 8001a6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	f1c3 0337 	rsb	r3, r3, #55	; 0x37
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	b21c      	sxth	r4, r3
 8001a7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	f1c3 0302 	rsb	r3, r3, #2
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	f24e 05ff 	movw	r5, #57599	; 0xe0ff
 8001a8c:	9501      	str	r5, [sp, #4]
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	4623      	mov	r3, r4
 8001a92:	f006 fab9 	bl	8008008 <hagl_draw_rounded_rectangle>
	  for (int i = 0; i < 2; i++) {
 8001a96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001aa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	ddce      	ble.n	8001a46 <second_procedure_minutes_change+0x42>
	  }
	  swprintf(buffer, 20, L"%02d:%02d", time.Hours, time.Minutes);
 8001aa8:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001aac:	461a      	mov	r2, r3
 8001aae:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001ab2:	f107 001c 	add.w	r0, r7, #28
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	4a97      	ldr	r2, [pc, #604]	; (8001d18 <second_procedure_minutes_change+0x314>)
 8001abc:	2114      	movs	r1, #20
 8001abe:	f007 fcfb 	bl	80094b8 <swprintf>
	  hagl_put_text(buffer, 55, 35, YELLOW, font9x18);
 8001ac2:	f107 001c 	add.w	r0, r7, #28
 8001ac6:	4b95      	ldr	r3, [pc, #596]	; (8001d1c <second_procedure_minutes_change+0x318>)
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001ace:	2223      	movs	r2, #35	; 0x23
 8001ad0:	2137      	movs	r1, #55	; 0x37
 8001ad2:	f006 fa11 	bl	8007ef8 <hagl_put_text>
	  lcd_copy();
 8001ad6:	f7ff fc49 	bl	800136c <lcd_copy>
	  while(flag==2){
 8001ada:	e09c      	b.n	8001c16 <second_procedure_minutes_change+0x212>
		  int16_t value = __HAL_TIM_GET_COUNTER(&htim3);
 8001adc:	4b90      	ldr	r3, [pc, #576]	; (8001d20 <second_procedure_minutes_change+0x31c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		  if (value != prev_value) {
 8001ae6:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 8001aea:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8001aee:	429a      	cmp	r2, r3
 8001af0:	f000 8091 	beq.w	8001c16 <second_procedure_minutes_change+0x212>
			  //printf("value = %d\n", value);
			  i++;
 8001af4:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001af8:	3301      	adds	r3, #1
 8001afa:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
			  if(value==prev_value+1){
 8001afe:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 8001b02:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8001b06:	3301      	adds	r3, #1
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d13c      	bne.n	8001b86 <second_procedure_minutes_change+0x182>
				  if(i==2)
 8001b0c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d138      	bne.n	8001b86 <second_procedure_minutes_change+0x182>
				  {
					  HAL_IWDG_Refresh(&hiwdg);
 8001b14:	4883      	ldr	r0, [pc, #524]	; (8001d24 <second_procedure_minutes_change+0x320>)
 8001b16:	f002 f9d9 	bl	8003ecc <HAL_IWDG_Refresh>
					  time.Minutes=time.Minutes+1;
 8001b1a:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001b1e:	3301      	adds	r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
					  if(time.Minutes==60) time.Minutes=0;
 8001b26:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001b2a:	2b3c      	cmp	r3, #60	; 0x3c
 8001b2c:	d102      	bne.n	8001b34 <second_procedure_minutes_change+0x130>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
					  HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001b34:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b38:	2200      	movs	r2, #0
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4875      	ldr	r0, [pc, #468]	; (8001d14 <second_procedure_minutes_change+0x310>)
 8001b3e:	f003 fde0 	bl	8005702 <HAL_RTC_SetTime>
					  printf("Minutes: %d\n", time.Minutes);
 8001b42:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001b46:	4619      	mov	r1, r3
 8001b48:	4877      	ldr	r0, [pc, #476]	; (8001d28 <second_procedure_minutes_change+0x324>)
 8001b4a:	f007 fbd3 	bl	80092f4 <iprintf>
					  i=0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
					  swprintf(buffer, 20, L"%02d:%02d", time.Hours, time.Minutes);
 8001b54:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001b58:	461a      	mov	r2, r3
 8001b5a:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001b5e:	f107 001c 	add.w	r0, r7, #28
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	4613      	mov	r3, r2
 8001b66:	4a6c      	ldr	r2, [pc, #432]	; (8001d18 <second_procedure_minutes_change+0x314>)
 8001b68:	2114      	movs	r1, #20
 8001b6a:	f007 fca5 	bl	80094b8 <swprintf>
					  hagl_put_text(buffer, 55, 35, YELLOW, font9x18);
 8001b6e:	f107 001c 	add.w	r0, r7, #28
 8001b72:	4b6a      	ldr	r3, [pc, #424]	; (8001d1c <second_procedure_minutes_change+0x318>)
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001b7a:	2223      	movs	r2, #35	; 0x23
 8001b7c:	2137      	movs	r1, #55	; 0x37
 8001b7e:	f006 f9bb 	bl	8007ef8 <hagl_put_text>
					  lcd_copy();
 8001b82:	f7ff fbf3 	bl	800136c <lcd_copy>
				  }
			  }
			  if(value==prev_value-1){
 8001b86:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 8001b8a:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d13c      	bne.n	8001c0e <second_procedure_minutes_change+0x20a>
				  if(i==2)
 8001b94:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d138      	bne.n	8001c0e <second_procedure_minutes_change+0x20a>
				  {
					  HAL_IWDG_Refresh(&hiwdg);
 8001b9c:	4861      	ldr	r0, [pc, #388]	; (8001d24 <second_procedure_minutes_change+0x320>)
 8001b9e:	f002 f995 	bl	8003ecc <HAL_IWDG_Refresh>
					  time.Minutes=time.Minutes-1;
 8001ba2:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
					  if(time.Minutes==255) time.Minutes=59;
 8001bae:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001bb2:	2bff      	cmp	r3, #255	; 0xff
 8001bb4:	d102      	bne.n	8001bbc <second_procedure_minutes_change+0x1b8>
 8001bb6:	233b      	movs	r3, #59	; 0x3b
 8001bb8:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
					  HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001bbc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4853      	ldr	r0, [pc, #332]	; (8001d14 <second_procedure_minutes_change+0x310>)
 8001bc6:	f003 fd9c 	bl	8005702 <HAL_RTC_SetTime>
					  printf("Minutes: %d\n", time.Minutes);
 8001bca:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4855      	ldr	r0, [pc, #340]	; (8001d28 <second_procedure_minutes_change+0x324>)
 8001bd2:	f007 fb8f 	bl	80092f4 <iprintf>
					  i=0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
					  swprintf(buffer, 20, L"%02d:%02d", time.Hours, time.Minutes);
 8001bdc:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001be0:	461a      	mov	r2, r3
 8001be2:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001be6:	f107 001c 	add.w	r0, r7, #28
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	4613      	mov	r3, r2
 8001bee:	4a4a      	ldr	r2, [pc, #296]	; (8001d18 <second_procedure_minutes_change+0x314>)
 8001bf0:	2114      	movs	r1, #20
 8001bf2:	f007 fc61 	bl	80094b8 <swprintf>
					  hagl_put_text(buffer, 55, 35, YELLOW, font9x18);
 8001bf6:	f107 001c 	add.w	r0, r7, #28
 8001bfa:	4b48      	ldr	r3, [pc, #288]	; (8001d1c <second_procedure_minutes_change+0x318>)
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001c02:	2223      	movs	r2, #35	; 0x23
 8001c04:	2137      	movs	r1, #55	; 0x37
 8001c06:	f006 f977 	bl	8007ef8 <hagl_put_text>
					  lcd_copy();
 8001c0a:	f7ff fbaf 	bl	800136c <lcd_copy>
				  }
			  }
			  prev_value = value;
 8001c0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001c12:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	  while(flag==2){
 8001c16:	4b45      	ldr	r3, [pc, #276]	; (8001d2c <second_procedure_minutes_change+0x328>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	f43f af5d 	beq.w	8001adc <second_procedure_minutes_change+0xd8>
		  }
	  }
	  for (int i = 0; i < 2; i++) {
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001c28:	e02b      	b.n	8001c82 <second_procedure_minutes_change+0x27e>
	    hagl_draw_rounded_rectangle(80+i, 30+i, 105-i, 55-i, 2-i, BLACK);
 8001c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3350      	adds	r3, #80	; 0x50
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	b218      	sxth	r0, r3
 8001c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	331e      	adds	r3, #30
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	b219      	sxth	r1, r3
 8001c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	f1c3 0369 	rsb	r3, r3, #105	; 0x69
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	b21a      	sxth	r2, r3
 8001c50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	f1c3 0337 	rsb	r3, r3, #55	; 0x37
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	b21c      	sxth	r4, r3
 8001c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	f1c3 0302 	rsb	r3, r3, #2
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	2500      	movs	r5, #0
 8001c6e:	9501      	str	r5, [sp, #4]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	4623      	mov	r3, r4
 8001c74:	f006 f9c8 	bl	8008008 <hagl_draw_rounded_rectangle>
	  for (int i = 0; i < 2; i++) {
 8001c78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001c82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	ddcf      	ble.n	8001c2a <second_procedure_minutes_change+0x226>
	  }
	  swprintf(buffer, 20, L"%02d:%02d", time.Hours, time.Minutes);
 8001c8a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001c8e:	461a      	mov	r2, r3
 8001c90:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001c94:	f107 001c 	add.w	r0, r7, #28
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <second_procedure_minutes_change+0x314>)
 8001c9e:	2114      	movs	r1, #20
 8001ca0:	f007 fc0a 	bl	80094b8 <swprintf>
	  hagl_put_text(buffer, 55, 35, YELLOW, font9x18);
 8001ca4:	f107 001c 	add.w	r0, r7, #28
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <second_procedure_minutes_change+0x318>)
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001cb0:	2223      	movs	r2, #35	; 0x23
 8001cb2:	2137      	movs	r1, #55	; 0x37
 8001cb4:	f006 f920 	bl	8007ef8 <hagl_put_text>
	  lcd_copy();
 8001cb8:	f7ff fb58 	bl	800136c <lcd_copy>

	for(int i=0;i<1;i++){
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001cc2:	e01c      	b.n	8001cfe <second_procedure_minutes_change+0x2fa>
		RTC_TimeTypeDef time;
		RTC_DateTypeDef date;
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001cc4:	f107 0308 	add.w	r3, r7, #8
 8001cc8:	2200      	movs	r2, #0
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4811      	ldr	r0, [pc, #68]	; (8001d14 <second_procedure_minutes_change+0x310>)
 8001cce:	f003 fdb5 	bl	800583c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	480e      	ldr	r0, [pc, #56]	; (8001d14 <second_procedure_minutes_change+0x310>)
 8001cda:	f003 fe0b 	bl	80058f4 <HAL_RTC_GetDate>
	  printf("Aktualny czas: %02d:%02d:%02d\n", time.Hours, time.Minutes, time.Seconds);
 8001cde:	7a3b      	ldrb	r3, [r7, #8]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	7a7b      	ldrb	r3, [r7, #9]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	7abb      	ldrb	r3, [r7, #10]
 8001ce8:	4811      	ldr	r0, [pc, #68]	; (8001d30 <second_procedure_minutes_change+0x32c>)
 8001cea:	f007 fb03 	bl	80092f4 <iprintf>
	  HAL_Delay(100);
 8001cee:	2064      	movs	r0, #100	; 0x64
 8001cf0:	f7ff fc0e 	bl	8001510 <HAL_Delay>
	for(int i=0;i<1;i++){
 8001cf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001cfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	ddde      	ble.n	8001cc4 <second_procedure_minutes_change+0x2c0>
	}

}
 8001d06:	bf00      	nop
 8001d08:	bf00      	nop
 8001d0a:	3798      	adds	r7, #152	; 0x98
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d10:	0800bf4c 	.word	0x0800bf4c
 8001d14:	2000a26c 	.word	0x2000a26c
 8001d18:	0800bf18 	.word	0x0800bf18
 8001d1c:	0800efd8 	.word	0x0800efd8
 8001d20:	2000a340 	.word	0x2000a340
 8001d24:	20000254 	.word	0x20000254
 8001d28:	0800bf68 	.word	0x0800bf68
 8001d2c:	2000a264 	.word	0x2000a264
 8001d30:	0800bec0 	.word	0x0800bec0

08001d34 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) //When we get interrupt (If DMA finish send data to LCD)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <HAL_SPI_TxCpltCallback+0x1c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d101      	bne.n	8001d48 <HAL_SPI_TxCpltCallback+0x14>
	{
		lcd_transfer_done();
 8001d44:	f000 f806 	bl	8001d54 <lcd_transfer_done>
	}
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	2000a290 	.word	0x2000a290

08001d54 <lcd_transfer_done>:

void lcd_transfer_done(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d5e:	4802      	ldr	r0, [pc, #8]	; (8001d68 <lcd_transfer_done+0x14>)
 8001d60:	f001 fa3a 	bl	80031d8 <HAL_GPIO_WritePin>
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	48000400 	.word	0x48000400

08001d6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d70:	b09f      	sub	sp, #124	; 0x7c
 8001d72:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d74:	f000 fd07 	bl	8002786 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d78:	f000 f8c0 	bl	8001efc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d7c:	f7ff f8b4 	bl	8000ee8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d80:	f7ff f894 	bl	8000eac <MX_DMA_Init>
  MX_RTC_Init();
 8001d84:	f000 f918 	bl	8001fb8 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001d88:	f000 fc48 	bl	800261c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001d8c:	f7ff f930 	bl	8000ff0 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001d90:	f000 f97e 	bl	8002090 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001d94:	f000 fb8c 	bl	80024b0 <MX_TIM3_Init>
  MX_IWDG_Init();
 8001d98:	f7ff f9c8 	bl	800112c <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_IWDG_Refresh(&hiwdg);
 8001d9c:	484e      	ldr	r0, [pc, #312]	; (8001ed8 <main+0x16c>)
 8001d9e:	f002 f895 	bl	8003ecc <HAL_IWDG_Refresh>
  //read_and_save_correct_time_after_sleep();

  lcd_init();
 8001da2:	f7ff fa8f 	bl	80012c4 <lcd_init>
  for (int i = 0; i < 8; i++) {
 8001da6:	2300      	movs	r3, #0
 8001da8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001daa:	e032      	b.n	8001e12 <main+0xa6>
    hagl_draw_rounded_rectangle(2+i, 2+i, 158-i, 126-i, 8-i, rgb565(0, 0, i*16));
 8001dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	3302      	adds	r3, #2
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	b21d      	sxth	r5, r3
 8001db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	3302      	adds	r3, #2
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	b21e      	sxth	r6, r3
 8001dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	f1c3 039e 	rsb	r3, r3, #158	; 0x9e
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	fa0f f883 	sxth.w	r8, r3
 8001dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	f1c3 037e 	rsb	r3, r3, #126	; 0x7e
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	fa0f f983 	sxth.w	r9, r3
 8001ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	f1c3 0308 	rsb	r3, r3, #8
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	b21c      	sxth	r4, r3
 8001de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	2100      	movs	r1, #0
 8001df4:	2000      	movs	r0, #0
 8001df6:	f006 faa1 	bl	800833c <rgb565>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	9400      	str	r4, [sp, #0]
 8001e00:	464b      	mov	r3, r9
 8001e02:	4642      	mov	r2, r8
 8001e04:	4631      	mov	r1, r6
 8001e06:	4628      	mov	r0, r5
 8001e08:	f006 f8fe 	bl	8008008 <hagl_draw_rounded_rectangle>
  for (int i = 0; i < 8; i++) {
 8001e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e0e:	3301      	adds	r3, #1
 8001e10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e14:	2b07      	cmp	r3, #7
 8001e16:	ddc9      	ble.n	8001dac <main+0x40>
  }

  RTC_TimeTypeDef time;
  RTC_DateTypeDef date;
  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001e18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	4619      	mov	r1, r3
 8001e20:	482e      	ldr	r0, [pc, #184]	; (8001edc <main+0x170>)
 8001e22:	f003 fd0b 	bl	800583c <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001e26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	482b      	ldr	r0, [pc, #172]	; (8001edc <main+0x170>)
 8001e30:	f003 fd60 	bl	80058f4 <HAL_RTC_GetDate>
  printf("Aktualny czas: %02d:%02d:%02d\n", time.Hours, time.Minutes, time.Seconds);
 8001e34:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001e44:	4826      	ldr	r0, [pc, #152]	; (8001ee0 <main+0x174>)
 8001e46:	f007 fa55 	bl	80092f4 <iprintf>

  wchar_t buffer[20];
  swprintf(buffer, 20, L"%02d:%02d", time.Hours, time.Minutes);
 8001e4a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001e54:	1d38      	adds	r0, r7, #4
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	4a22      	ldr	r2, [pc, #136]	; (8001ee4 <main+0x178>)
 8001e5c:	2114      	movs	r1, #20
 8001e5e:	f007 fb2b 	bl	80094b8 <swprintf>
  hagl_put_text(buffer, 55, 35, YELLOW, font9x18);
 8001e62:	1d38      	adds	r0, r7, #4
 8001e64:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <main+0x17c>)
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001e6c:	2223      	movs	r2, #35	; 0x23
 8001e6e:	2137      	movs	r1, #55	; 0x37
 8001e70:	f006 f842 	bl	8007ef8 <hagl_put_text>
  lcd_copy();
 8001e74:	f7ff fa7a 	bl	800136c <lcd_copy>

  /*** check if the SB flag i set ***/
  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8001e78:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <main+0x180>)
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d01a      	beq.n	8001eba <main+0x14e>
  {
	    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB); //clear the flag (flag of low power mode)
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <main+0x180>)
 8001e86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e8a:	619a      	str	r2, [r3, #24]
	    lps_temperature_pressure_measure();
 8001e8c:	f7ff fbcc 	bl	8001628 <lps_temperature_pressure_measure>
	    HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);   //disable PA0
 8001e90:	2001      	movs	r0, #1
 8001e92:	f002 f85b 	bl	8003f4c <HAL_PWR_DisableWakeUpPin>
	    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001e96:	213c      	movs	r1, #60	; 0x3c
 8001e98:	4815      	ldr	r0, [pc, #84]	; (8001ef0 <main+0x184>)
 8001e9a:	f004 fcb3 	bl	8006804 <HAL_TIM_Encoder_Start>

	    /*SET HOURS*/
	    if(flag==1)
 8001e9e:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <main+0x188>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <main+0x140>
	    {
	  	  first_procedure_hour_change();
 8001ea8:	f7ff fc6c 	bl	8001784 <first_procedure_hour_change>
	    }

	  /*SET MINUTES*/
	    if(flag==2)
 8001eac:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <main+0x188>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d101      	bne.n	8001eba <main+0x14e>
	    {
	  	  second_procedure_minutes_change();
 8001eb6:	f7ff fda5 	bl	8001a04 <second_procedure_minutes_change>
	    }
  }

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU); //clear wake-up flag before entry standby mode
 8001eba:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <main+0x180>)
 8001ebc:	221f      	movs	r2, #31
 8001ebe:	619a      	str	r2, [r3, #24]
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1_LOW);
 8001ec0:	2021      	movs	r0, #33	; 0x21
 8001ec2:	f002 f823 	bl	8003f0c <HAL_PWR_EnableWakeUpPin>
  printf("Going sleep...\n");
 8001ec6:	480c      	ldr	r0, [pc, #48]	; (8001ef8 <main+0x18c>)
 8001ec8:	f007 fa9a 	bl	8009400 <puts>
  HAL_IWDG_Refresh(&hiwdg);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <main+0x16c>)
 8001ece:	f001 fffd 	bl	8003ecc <HAL_IWDG_Refresh>
  IWDG_STDBY_FREEZE;
  IWDG_STOP_FREEZE;
  //save_time_to_sleep();
  HAL_PWR_EnterSTANDBYMode();
 8001ed2:	f002 f851 	bl	8003f78 <HAL_PWR_EnterSTANDBYMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ed6:	e7fe      	b.n	8001ed6 <main+0x16a>
 8001ed8:	20000254 	.word	0x20000254
 8001edc:	2000a26c 	.word	0x2000a26c
 8001ee0:	0800bec0 	.word	0x0800bec0
 8001ee4:	0800bf18 	.word	0x0800bf18
 8001ee8:	0800efd8 	.word	0x0800efd8
 8001eec:	40007000 	.word	0x40007000
 8001ef0:	2000a340 	.word	0x2000a340
 8001ef4:	2000a264 	.word	0x2000a264
 8001ef8:	0800bf78 	.word	0x0800bf78

08001efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b096      	sub	sp, #88	; 0x58
 8001f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	2244      	movs	r2, #68	; 0x44
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f006 fca0 	bl	8008850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f10:	463b      	mov	r3, r7
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
 8001f1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f1e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f22:	f002 f851 	bl	8003fc8 <HAL_PWREx_ControlVoltageScaling>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f2c:	f000 f83e 	bl	8001fac <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f30:	f001 ffdc 	bl	8003eec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f34:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <SystemClock_Config+0xac>)
 8001f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3a:	4a1b      	ldr	r2, [pc, #108]	; (8001fa8 <SystemClock_Config+0xac>)
 8001f3c:	f023 0318 	bic.w	r3, r3, #24
 8001f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001f44:	231c      	movs	r3, #28
 8001f46:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f50:	2301      	movs	r3, #1
 8001f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001f58:	2370      	movs	r3, #112	; 0x70
 8001f5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4618      	mov	r0, r3
 8001f66:	f002 f885 	bl	8004074 <HAL_RCC_OscConfig>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001f70:	f000 f81c 	bl	8001fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f74:	230f      	movs	r3, #15
 8001f76:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f88:	463b      	mov	r3, r7
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f002 fc4d 	bl	800482c <HAL_RCC_ClockConfig>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001f98:	f000 f808 	bl	8001fac <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001f9c:	f003 f954 	bl	8005248 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001fa0:	bf00      	nop
 8001fa2:	3758      	adds	r7, #88	; 0x58
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021000 	.word	0x40021000

08001fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb0:	b672      	cpsid	i
}
 8001fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <Error_Handler+0x8>
	...

08001fb8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001fbc:	4b15      	ldr	r3, [pc, #84]	; (8002014 <MX_RTC_Init+0x5c>)
 8001fbe:	4a16      	ldr	r2, [pc, #88]	; (8002018 <MX_RTC_Init+0x60>)
 8001fc0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <MX_RTC_Init+0x5c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <MX_RTC_Init+0x5c>)
 8001fca:	227f      	movs	r2, #127	; 0x7f
 8001fcc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <MX_RTC_Init+0x5c>)
 8001fd0:	22ff      	movs	r2, #255	; 0xff
 8001fd2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <MX_RTC_Init+0x5c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <MX_RTC_Init+0x5c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <MX_RTC_Init+0x5c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <MX_RTC_Init+0x5c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001fec:	4809      	ldr	r0, [pc, #36]	; (8002014 <MX_RTC_Init+0x5c>)
 8001fee:	f003 fb0d 	bl	800560c <HAL_RTC_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001ff8:	f7ff ffd8 	bl	8001fac <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 8, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	2108      	movs	r1, #8
 8002000:	4804      	ldr	r0, [pc, #16]	; (8002014 <MX_RTC_Init+0x5c>)
 8002002:	f003 fd95 	bl	8005b30 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800200c:	f7ff ffce 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}
 8002014:	2000a26c 	.word	0x2000a26c
 8002018:	40002800 	.word	0x40002800

0800201c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b0a4      	sub	sp, #144	; 0x90
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002024:	f107 0308 	add.w	r3, r7, #8
 8002028:	2288      	movs	r2, #136	; 0x88
 800202a:	2100      	movs	r1, #0
 800202c:	4618      	mov	r0, r3
 800202e:	f006 fc0f 	bl	8008850 <memset>
  if(rtcHandle->Instance==RTC)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a14      	ldr	r2, [pc, #80]	; (8002088 <HAL_RTC_MspInit+0x6c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d120      	bne.n	800207e <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800203c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002040:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002046:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800204a:	f107 0308 	add.w	r3, r7, #8
 800204e:	4618      	mov	r0, r3
 8002050:	f002 fe10 	bl	8004c74 <HAL_RCCEx_PeriphCLKConfig>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800205a:	f7ff ffa7 	bl	8001fac <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_RTC_MspInit+0x70>)
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002064:	4a09      	ldr	r2, [pc, #36]	; (800208c <HAL_RTC_MspInit+0x70>)
 8002066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800206a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 1, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2101      	movs	r1, #1
 8002072:	2003      	movs	r0, #3
 8002074:	f000 fcd7 	bl	8002a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002078:	2003      	movs	r0, #3
 800207a:	f000 fcf0 	bl	8002a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800207e:	bf00      	nop
 8002080:	3790      	adds	r7, #144	; 0x90
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40002800 	.word	0x40002800
 800208c:	40021000 	.word	0x40021000

08002090 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002094:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <MX_SPI2_Init+0x74>)
 8002096:	4a1c      	ldr	r2, [pc, #112]	; (8002108 <MX_SPI2_Init+0x78>)
 8002098:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800209a:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <MX_SPI2_Init+0x74>)
 800209c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <MX_SPI2_Init+0x74>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020a8:	4b16      	ldr	r3, [pc, #88]	; (8002104 <MX_SPI2_Init+0x74>)
 80020aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80020ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <MX_SPI2_Init+0x74>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020b6:	4b13      	ldr	r3, [pc, #76]	; (8002104 <MX_SPI2_Init+0x74>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <MX_SPI2_Init+0x74>)
 80020be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020c4:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <MX_SPI2_Init+0x74>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <MX_SPI2_Init+0x74>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <MX_SPI2_Init+0x74>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <MX_SPI2_Init+0x74>)
 80020d8:	2200      	movs	r2, #0
 80020da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <MX_SPI2_Init+0x74>)
 80020de:	2207      	movs	r2, #7
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <MX_SPI2_Init+0x74>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <MX_SPI2_Init+0x74>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020ee:	4805      	ldr	r0, [pc, #20]	; (8002104 <MX_SPI2_Init+0x74>)
 80020f0:	f003 fde2 	bl	8005cb8 <HAL_SPI_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80020fa:	f7ff ff57 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	2000a290 	.word	0x2000a290
 8002108:	40003800 	.word	0x40003800

0800210c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a3a      	ldr	r2, [pc, #232]	; (8002214 <HAL_SPI_MspInit+0x108>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d16d      	bne.n	800220a <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800212e:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <HAL_SPI_MspInit+0x10c>)
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	4a39      	ldr	r2, [pc, #228]	; (8002218 <HAL_SPI_MspInit+0x10c>)
 8002134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002138:	6593      	str	r3, [r2, #88]	; 0x58
 800213a:	4b37      	ldr	r3, [pc, #220]	; (8002218 <HAL_SPI_MspInit+0x10c>)
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002146:	4b34      	ldr	r3, [pc, #208]	; (8002218 <HAL_SPI_MspInit+0x10c>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214a:	4a33      	ldr	r2, [pc, #204]	; (8002218 <HAL_SPI_MspInit+0x10c>)
 800214c:	f043 0304 	orr.w	r3, r3, #4
 8002150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002152:	4b31      	ldr	r3, [pc, #196]	; (8002218 <HAL_SPI_MspInit+0x10c>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	4b2e      	ldr	r3, [pc, #184]	; (8002218 <HAL_SPI_MspInit+0x10c>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	4a2d      	ldr	r2, [pc, #180]	; (8002218 <HAL_SPI_MspInit+0x10c>)
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800216a:	4b2b      	ldr	r3, [pc, #172]	; (8002218 <HAL_SPI_MspInit+0x10c>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002176:	2308      	movs	r3, #8
 8002178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002182:	2303      	movs	r3, #3
 8002184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002186:	2305      	movs	r3, #5
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800218a:	f107 0314 	add.w	r3, r7, #20
 800218e:	4619      	mov	r1, r3
 8002190:	4822      	ldr	r0, [pc, #136]	; (800221c <HAL_SPI_MspInit+0x110>)
 8002192:	f000 fe77 	bl	8002e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800219a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a4:	2303      	movs	r3, #3
 80021a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021a8:	2305      	movs	r3, #5
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	4619      	mov	r1, r3
 80021b2:	481b      	ldr	r0, [pc, #108]	; (8002220 <HAL_SPI_MspInit+0x114>)
 80021b4:	f000 fe66 	bl	8002e84 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80021b8:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <HAL_SPI_MspInit+0x118>)
 80021ba:	4a1b      	ldr	r2, [pc, #108]	; (8002228 <HAL_SPI_MspInit+0x11c>)
 80021bc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 80021be:	4b19      	ldr	r3, [pc, #100]	; (8002224 <HAL_SPI_MspInit+0x118>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021c4:	4b17      	ldr	r3, [pc, #92]	; (8002224 <HAL_SPI_MspInit+0x118>)
 80021c6:	2210      	movs	r2, #16
 80021c8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ca:	4b16      	ldr	r3, [pc, #88]	; (8002224 <HAL_SPI_MspInit+0x118>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021d0:	4b14      	ldr	r3, [pc, #80]	; (8002224 <HAL_SPI_MspInit+0x118>)
 80021d2:	2280      	movs	r2, #128	; 0x80
 80021d4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021d6:	4b13      	ldr	r3, [pc, #76]	; (8002224 <HAL_SPI_MspInit+0x118>)
 80021d8:	2200      	movs	r2, #0
 80021da:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021dc:	4b11      	ldr	r3, [pc, #68]	; (8002224 <HAL_SPI_MspInit+0x118>)
 80021de:	2200      	movs	r2, #0
 80021e0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <HAL_SPI_MspInit+0x118>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021e8:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <HAL_SPI_MspInit+0x118>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80021ee:	480d      	ldr	r0, [pc, #52]	; (8002224 <HAL_SPI_MspInit+0x118>)
 80021f0:	f000 fc50 	bl	8002a94 <HAL_DMA_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 80021fa:	f7ff fed7 	bl	8001fac <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a08      	ldr	r2, [pc, #32]	; (8002224 <HAL_SPI_MspInit+0x118>)
 8002202:	655a      	str	r2, [r3, #84]	; 0x54
 8002204:	4a07      	ldr	r2, [pc, #28]	; (8002224 <HAL_SPI_MspInit+0x118>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800220a:	bf00      	nop
 800220c:	3728      	adds	r7, #40	; 0x28
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40003800 	.word	0x40003800
 8002218:	40021000 	.word	0x40021000
 800221c:	48000800 	.word	0x48000800
 8002220:	48000400 	.word	0x48000400
 8002224:	2000a2f4 	.word	0x2000a2f4
 8002228:	40020058 	.word	0x40020058

0800222c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002232:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <HAL_MspInit+0x44>)
 8002234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002236:	4a0e      	ldr	r2, [pc, #56]	; (8002270 <HAL_MspInit+0x44>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6613      	str	r3, [r2, #96]	; 0x60
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <HAL_MspInit+0x44>)
 8002240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_MspInit+0x44>)
 800224c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224e:	4a08      	ldr	r2, [pc, #32]	; (8002270 <HAL_MspInit+0x44>)
 8002250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002254:	6593      	str	r3, [r2, #88]	; 0x58
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_MspInit+0x44>)
 8002258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000

08002274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002278:	e7fe      	b.n	8002278 <NMI_Handler+0x4>

0800227a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800227e:	e7fe      	b.n	800227e <HardFault_Handler+0x4>

08002280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <MemManage_Handler+0x4>

08002286 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800228a:	e7fe      	b.n	800228a <BusFault_Handler+0x4>

0800228c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002290:	e7fe      	b.n	8002290 <UsageFault_Handler+0x4>

08002292 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c0:	f000 fab6 	bl	8002830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <RTC_WKUP_IRQHandler+0x10>)
 80022ce:	f003 fcc3 	bl	8005c58 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	2000a26c 	.word	0x2000a26c

080022dc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 80022e0:	2001      	movs	r0, #1
 80022e2:	f000 ff91 	bl	8003208 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <DMA1_Channel5_IRQHandler+0x10>)
 80022f2:	f000 fce7 	bl	8002cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	2000a2f4 	.word	0x2000a2f4

08002300 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return 1;
 8002304:	2301      	movs	r3, #1
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <_kill>:

int _kill(int pid, int sig)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800231a:	f006 f841 	bl	80083a0 <__errno>
 800231e:	4603      	mov	r3, r0
 8002320:	2216      	movs	r2, #22
 8002322:	601a      	str	r2, [r3, #0]
  return -1;
 8002324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <_exit>:

void _exit (int status)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002338:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ffe7 	bl	8002310 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002342:	e7fe      	b.n	8002342 <_exit+0x12>

08002344 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	e00a      	b.n	800236c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002356:	f3af 8000 	nop.w
 800235a:	4601      	mov	r1, r0
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	60ba      	str	r2, [r7, #8]
 8002362:	b2ca      	uxtb	r2, r1
 8002364:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	3301      	adds	r3, #1
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	429a      	cmp	r2, r3
 8002372:	dbf0      	blt.n	8002356 <_read+0x12>
  }

  return len;
 8002374:	687b      	ldr	r3, [r7, #4]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b086      	sub	sp, #24
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	e009      	b.n	80023a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	60ba      	str	r2, [r7, #8]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff f8dd 	bl	8001558 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	3301      	adds	r3, #1
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	dbf1      	blt.n	8002390 <_write+0x12>
  }
  return len;
 80023ac:	687b      	ldr	r3, [r7, #4]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <_close>:

int _close(int file)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023de:	605a      	str	r2, [r3, #4]
  return 0;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <_isatty>:

int _isatty(int file)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023f6:	2301      	movs	r3, #1
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002428:	4a14      	ldr	r2, [pc, #80]	; (800247c <_sbrk+0x5c>)
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <_sbrk+0x60>)
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <_sbrk+0x64>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d102      	bne.n	8002442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800243c:	4b11      	ldr	r3, [pc, #68]	; (8002484 <_sbrk+0x64>)
 800243e:	4a12      	ldr	r2, [pc, #72]	; (8002488 <_sbrk+0x68>)
 8002440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <_sbrk+0x64>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	429a      	cmp	r2, r3
 800244e:	d207      	bcs.n	8002460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002450:	f005 ffa6 	bl	80083a0 <__errno>
 8002454:	4603      	mov	r3, r0
 8002456:	220c      	movs	r2, #12
 8002458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800245a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800245e:	e009      	b.n	8002474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <_sbrk+0x64>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002466:	4b07      	ldr	r3, [pc, #28]	; (8002484 <_sbrk+0x64>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	4a05      	ldr	r2, [pc, #20]	; (8002484 <_sbrk+0x64>)
 8002470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002472:	68fb      	ldr	r3, [r7, #12]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20018000 	.word	0x20018000
 8002480:	00002000 	.word	0x00002000
 8002484:	2000a33c 	.word	0x2000a33c
 8002488:	2000a428 	.word	0x2000a428

0800248c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <SystemInit+0x20>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	4a05      	ldr	r2, [pc, #20]	; (80024ac <SystemInit+0x20>)
 8002498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800249c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08c      	sub	sp, #48	; 0x30
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024b6:	f107 030c 	add.w	r3, r7, #12
 80024ba:	2224      	movs	r2, #36	; 0x24
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f006 f9c6 	bl	8008850 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c4:	463b      	mov	r3, r7
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024ce:	4b21      	ldr	r3, [pc, #132]	; (8002554 <MX_TIM3_Init+0xa4>)
 80024d0:	4a21      	ldr	r2, [pc, #132]	; (8002558 <MX_TIM3_Init+0xa8>)
 80024d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024d4:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <MX_TIM3_Init+0xa4>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024da:	4b1e      	ldr	r3, [pc, #120]	; (8002554 <MX_TIM3_Init+0xa4>)
 80024dc:	2200      	movs	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024e0:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <MX_TIM3_Init+0xa4>)
 80024e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e8:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <MX_TIM3_Init+0xa4>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ee:	4b19      	ldr	r3, [pc, #100]	; (8002554 <MX_TIM3_Init+0xa4>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80024f4:	2301      	movs	r3, #1
 80024f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024f8:	2300      	movs	r3, #0
 80024fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024fc:	2301      	movs	r3, #1
 80024fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002500:	2300      	movs	r3, #0
 8002502:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8002504:	2301      	movs	r3, #1
 8002506:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002508:	2300      	movs	r3, #0
 800250a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800250c:	2301      	movs	r3, #1
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002510:	2300      	movs	r3, #0
 8002512:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002514:	230f      	movs	r3, #15
 8002516:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002518:	f107 030c 	add.w	r3, r7, #12
 800251c:	4619      	mov	r1, r3
 800251e:	480d      	ldr	r0, [pc, #52]	; (8002554 <MX_TIM3_Init+0xa4>)
 8002520:	f004 f8ca 	bl	80066b8 <HAL_TIM_Encoder_Init>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800252a:	f7ff fd3f 	bl	8001fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800252e:	2300      	movs	r3, #0
 8002530:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002536:	463b      	mov	r3, r7
 8002538:	4619      	mov	r1, r3
 800253a:	4806      	ldr	r0, [pc, #24]	; (8002554 <MX_TIM3_Init+0xa4>)
 800253c:	f004 fab0 	bl	8006aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002546:	f7ff fd31 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800254a:	bf00      	nop
 800254c:	3730      	adds	r7, #48	; 0x30
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	2000a340 	.word	0x2000a340
 8002558:	40000400 	.word	0x40000400

0800255c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a25      	ldr	r2, [pc, #148]	; (8002610 <HAL_TIM_Encoder_MspInit+0xb4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d144      	bne.n	8002608 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800257e:	4b25      	ldr	r3, [pc, #148]	; (8002614 <HAL_TIM_Encoder_MspInit+0xb8>)
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	4a24      	ldr	r2, [pc, #144]	; (8002614 <HAL_TIM_Encoder_MspInit+0xb8>)
 8002584:	f043 0302 	orr.w	r3, r3, #2
 8002588:	6593      	str	r3, [r2, #88]	; 0x58
 800258a:	4b22      	ldr	r3, [pc, #136]	; (8002614 <HAL_TIM_Encoder_MspInit+0xb8>)
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <HAL_TIM_Encoder_MspInit+0xb8>)
 8002598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259a:	4a1e      	ldr	r2, [pc, #120]	; (8002614 <HAL_TIM_Encoder_MspInit+0xb8>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025a2:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <HAL_TIM_Encoder_MspInit+0xb8>)
 80025a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ae:	4b19      	ldr	r3, [pc, #100]	; (8002614 <HAL_TIM_Encoder_MspInit+0xb8>)
 80025b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b2:	4a18      	ldr	r2, [pc, #96]	; (8002614 <HAL_TIM_Encoder_MspInit+0xb8>)
 80025b4:	f043 0304 	orr.w	r3, r3, #4
 80025b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ba:	4b16      	ldr	r3, [pc, #88]	; (8002614 <HAL_TIM_Encoder_MspInit+0xb8>)
 80025bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ca:	2302      	movs	r3, #2
 80025cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d2:	2300      	movs	r3, #0
 80025d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025d6:	2302      	movs	r3, #2
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025da:	f107 0314 	add.w	r3, r7, #20
 80025de:	4619      	mov	r1, r3
 80025e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e4:	f000 fc4e 	bl	8002e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025e8:	2340      	movs	r3, #64	; 0x40
 80025ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ec:	2302      	movs	r3, #2
 80025ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f4:	2300      	movs	r3, #0
 80025f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025f8:	2302      	movs	r3, #2
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	4619      	mov	r1, r3
 8002602:	4805      	ldr	r0, [pc, #20]	; (8002618 <HAL_TIM_Encoder_MspInit+0xbc>)
 8002604:	f000 fc3e 	bl	8002e84 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002608:	bf00      	nop
 800260a:	3728      	adds	r7, #40	; 0x28
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40000400 	.word	0x40000400
 8002614:	40021000 	.word	0x40021000
 8002618:	48000800 	.word	0x48000800

0800261c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002620:	4b14      	ldr	r3, [pc, #80]	; (8002674 <MX_USART2_UART_Init+0x58>)
 8002622:	4a15      	ldr	r2, [pc, #84]	; (8002678 <MX_USART2_UART_Init+0x5c>)
 8002624:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002626:	4b13      	ldr	r3, [pc, #76]	; (8002674 <MX_USART2_UART_Init+0x58>)
 8002628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800262c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800262e:	4b11      	ldr	r3, [pc, #68]	; (8002674 <MX_USART2_UART_Init+0x58>)
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002634:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <MX_USART2_UART_Init+0x58>)
 8002636:	2200      	movs	r2, #0
 8002638:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <MX_USART2_UART_Init+0x58>)
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <MX_USART2_UART_Init+0x58>)
 8002642:	220c      	movs	r2, #12
 8002644:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002646:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <MX_USART2_UART_Init+0x58>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800264c:	4b09      	ldr	r3, [pc, #36]	; (8002674 <MX_USART2_UART_Init+0x58>)
 800264e:	2200      	movs	r2, #0
 8002650:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <MX_USART2_UART_Init+0x58>)
 8002654:	2200      	movs	r2, #0
 8002656:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <MX_USART2_UART_Init+0x58>)
 800265a:	2200      	movs	r2, #0
 800265c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800265e:	4805      	ldr	r0, [pc, #20]	; (8002674 <MX_USART2_UART_Init+0x58>)
 8002660:	f004 faa6 	bl	8006bb0 <HAL_UART_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800266a:	f7ff fc9f 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	2000a38c 	.word	0x2000a38c
 8002678:	40004400 	.word	0x40004400

0800267c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b0ac      	sub	sp, #176	; 0xb0
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002684:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	2288      	movs	r2, #136	; 0x88
 800269a:	2100      	movs	r1, #0
 800269c:	4618      	mov	r0, r3
 800269e:	f006 f8d7 	bl	8008850 <memset>
  if(uartHandle->Instance==USART2)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a21      	ldr	r2, [pc, #132]	; (800272c <HAL_UART_MspInit+0xb0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d13b      	bne.n	8002724 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80026ac:	2302      	movs	r3, #2
 80026ae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80026b0:	2300      	movs	r3, #0
 80026b2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	4618      	mov	r0, r3
 80026ba:	f002 fadb 	bl	8004c74 <HAL_RCCEx_PeriphCLKConfig>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026c4:	f7ff fc72 	bl	8001fac <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_UART_MspInit+0xb4>)
 80026ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026cc:	4a18      	ldr	r2, [pc, #96]	; (8002730 <HAL_UART_MspInit+0xb4>)
 80026ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d2:	6593      	str	r3, [r2, #88]	; 0x58
 80026d4:	4b16      	ldr	r3, [pc, #88]	; (8002730 <HAL_UART_MspInit+0xb4>)
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <HAL_UART_MspInit+0xb4>)
 80026e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e4:	4a12      	ldr	r2, [pc, #72]	; (8002730 <HAL_UART_MspInit+0xb4>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ec:	4b10      	ldr	r3, [pc, #64]	; (8002730 <HAL_UART_MspInit+0xb4>)
 80026ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026f8:	230c      	movs	r3, #12
 80026fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270a:	2303      	movs	r3, #3
 800270c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002710:	2307      	movs	r3, #7
 8002712:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002716:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800271a:	4619      	mov	r1, r3
 800271c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002720:	f000 fbb0 	bl	8002e84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002724:	bf00      	nop
 8002726:	37b0      	adds	r7, #176	; 0xb0
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40004400 	.word	0x40004400
 8002730:	40021000 	.word	0x40021000

08002734 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800276c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002738:	f7ff fea8 	bl	800248c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800273c:	480c      	ldr	r0, [pc, #48]	; (8002770 <LoopForever+0x6>)
  ldr r1, =_edata
 800273e:	490d      	ldr	r1, [pc, #52]	; (8002774 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002740:	4a0d      	ldr	r2, [pc, #52]	; (8002778 <LoopForever+0xe>)
  movs r3, #0
 8002742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002744:	e002      	b.n	800274c <LoopCopyDataInit>

08002746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800274a:	3304      	adds	r3, #4

0800274c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800274c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800274e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002750:	d3f9      	bcc.n	8002746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002754:	4c0a      	ldr	r4, [pc, #40]	; (8002780 <LoopForever+0x16>)
  movs r3, #0
 8002756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002758:	e001      	b.n	800275e <LoopFillZerobss>

0800275a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800275a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800275c:	3204      	adds	r2, #4

0800275e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800275e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002760:	d3fb      	bcc.n	800275a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002762:	f005 ffdb 	bl	800871c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002766:	f7ff fb01 	bl	8001d6c <main>

0800276a <LoopForever>:

LoopForever:
    b LoopForever
 800276a:	e7fe      	b.n	800276a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800276c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002774:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002778:	080397c4 	.word	0x080397c4
  ldr r2, =_sbss
 800277c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002780:	2000a424 	.word	0x2000a424

08002784 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002784:	e7fe      	b.n	8002784 <ADC1_2_IRQHandler>

08002786 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002790:	2003      	movs	r0, #3
 8002792:	f000 f93d 	bl	8002a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002796:	2001      	movs	r0, #1
 8002798:	f000 f80e 	bl	80027b8 <HAL_InitTick>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	71fb      	strb	r3, [r7, #7]
 80027a6:	e001      	b.n	80027ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027a8:	f7ff fd40 	bl	800222c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027ac:	79fb      	ldrb	r3, [r7, #7]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027c4:	4b17      	ldr	r3, [pc, #92]	; (8002824 <HAL_InitTick+0x6c>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d023      	beq.n	8002814 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027cc:	4b16      	ldr	r3, [pc, #88]	; (8002828 <HAL_InitTick+0x70>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b14      	ldr	r3, [pc, #80]	; (8002824 <HAL_InitTick+0x6c>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	4619      	mov	r1, r3
 80027d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027da:	fbb3 f3f1 	udiv	r3, r3, r1
 80027de:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 f949 	bl	8002a7a <HAL_SYSTICK_Config>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10f      	bne.n	800280e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b0f      	cmp	r3, #15
 80027f2:	d809      	bhi.n	8002808 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f4:	2200      	movs	r2, #0
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027fc:	f000 f913 	bl	8002a26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002800:	4a0a      	ldr	r2, [pc, #40]	; (800282c <HAL_InitTick+0x74>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e007      	b.n	8002818 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
 800280c:	e004      	b.n	8002818 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	73fb      	strb	r3, [r7, #15]
 8002812:	e001      	b.n	8002818 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002818:	7bfb      	ldrb	r3, [r7, #15]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000008 	.word	0x20000008
 8002828:	20000000 	.word	0x20000000
 800282c:	20000004 	.word	0x20000004

08002830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_IncTick+0x20>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_IncTick+0x24>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4413      	add	r3, r2
 8002840:	4a04      	ldr	r2, [pc, #16]	; (8002854 <HAL_IncTick+0x24>)
 8002842:	6013      	str	r3, [r2, #0]
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000008 	.word	0x20000008
 8002854:	2000a410 	.word	0x2000a410

08002858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return uwTick;
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_GetTick+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	2000a410 	.word	0x2000a410

08002870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800288c:	4013      	ands	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800289c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a2:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	60d3      	str	r3, [r2, #12]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <__NVIC_GetPriorityGrouping+0x18>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	f003 0307 	and.w	r3, r3, #7
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	db0b      	blt.n	80028fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	4907      	ldr	r1, [pc, #28]	; (800290c <__NVIC_EnableIRQ+0x38>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2001      	movs	r0, #1
 80028f6:	fa00 f202 	lsl.w	r2, r0, r2
 80028fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000e100 	.word	0xe000e100

08002910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	6039      	str	r1, [r7, #0]
 800291a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002920:	2b00      	cmp	r3, #0
 8002922:	db0a      	blt.n	800293a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	b2da      	uxtb	r2, r3
 8002928:	490c      	ldr	r1, [pc, #48]	; (800295c <__NVIC_SetPriority+0x4c>)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	0112      	lsls	r2, r2, #4
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	440b      	add	r3, r1
 8002934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002938:	e00a      	b.n	8002950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4908      	ldr	r1, [pc, #32]	; (8002960 <__NVIC_SetPriority+0x50>)
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	3b04      	subs	r3, #4
 8002948:	0112      	lsls	r2, r2, #4
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	440b      	add	r3, r1
 800294e:	761a      	strb	r2, [r3, #24]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000e100 	.word	0xe000e100
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	; 0x24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f1c3 0307 	rsb	r3, r3, #7
 800297e:	2b04      	cmp	r3, #4
 8002980:	bf28      	it	cs
 8002982:	2304      	movcs	r3, #4
 8002984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3304      	adds	r3, #4
 800298a:	2b06      	cmp	r3, #6
 800298c:	d902      	bls.n	8002994 <NVIC_EncodePriority+0x30>
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3b03      	subs	r3, #3
 8002992:	e000      	b.n	8002996 <NVIC_EncodePriority+0x32>
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43da      	mvns	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	401a      	ands	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	43d9      	mvns	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029bc:	4313      	orrs	r3, r2
         );
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3724      	adds	r7, #36	; 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029dc:	d301      	bcc.n	80029e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029de:	2301      	movs	r3, #1
 80029e0:	e00f      	b.n	8002a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029e2:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <SysTick_Config+0x40>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ea:	210f      	movs	r1, #15
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029f0:	f7ff ff8e 	bl	8002910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <SysTick_Config+0x40>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029fa:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <SysTick_Config+0x40>)
 80029fc:	2207      	movs	r2, #7
 80029fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	e000e010 	.word	0xe000e010

08002a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff ff29 	bl	8002870 <__NVIC_SetPriorityGrouping>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b086      	sub	sp, #24
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a38:	f7ff ff3e 	bl	80028b8 <__NVIC_GetPriorityGrouping>
 8002a3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	6978      	ldr	r0, [r7, #20]
 8002a44:	f7ff ff8e 	bl	8002964 <NVIC_EncodePriority>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff5d 	bl	8002910 <__NVIC_SetPriority>
}
 8002a56:	bf00      	nop
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff31 	bl	80028d4 <__NVIC_EnableIRQ>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ffa2 	bl	80029cc <SysTick_Config>
 8002a88:	4603      	mov	r3, r0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e098      	b.n	8002bd8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4b4d      	ldr	r3, [pc, #308]	; (8002be4 <HAL_DMA_Init+0x150>)
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d80f      	bhi.n	8002ad2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4b4b      	ldr	r3, [pc, #300]	; (8002be8 <HAL_DMA_Init+0x154>)
 8002aba:	4413      	add	r3, r2
 8002abc:	4a4b      	ldr	r2, [pc, #300]	; (8002bec <HAL_DMA_Init+0x158>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	009a      	lsls	r2, r3, #2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a48      	ldr	r2, [pc, #288]	; (8002bf0 <HAL_DMA_Init+0x15c>)
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40
 8002ad0:	e00e      	b.n	8002af0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4b46      	ldr	r3, [pc, #280]	; (8002bf4 <HAL_DMA_Init+0x160>)
 8002ada:	4413      	add	r3, r2
 8002adc:	4a43      	ldr	r2, [pc, #268]	; (8002bec <HAL_DMA_Init+0x158>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	091b      	lsrs	r3, r3, #4
 8002ae4:	009a      	lsls	r2, r3, #2
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a42      	ldr	r2, [pc, #264]	; (8002bf8 <HAL_DMA_Init+0x164>)
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b4a:	d039      	beq.n	8002bc0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	4a27      	ldr	r2, [pc, #156]	; (8002bf0 <HAL_DMA_Init+0x15c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d11a      	bne.n	8002b8c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b56:	4b29      	ldr	r3, [pc, #164]	; (8002bfc <HAL_DMA_Init+0x168>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	f003 031c 	and.w	r3, r3, #28
 8002b62:	210f      	movs	r1, #15
 8002b64:	fa01 f303 	lsl.w	r3, r1, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	4924      	ldr	r1, [pc, #144]	; (8002bfc <HAL_DMA_Init+0x168>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002b70:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <HAL_DMA_Init+0x168>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7c:	f003 031c 	and.w	r3, r3, #28
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	491d      	ldr	r1, [pc, #116]	; (8002bfc <HAL_DMA_Init+0x168>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]
 8002b8a:	e019      	b.n	8002bc0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b8c:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <HAL_DMA_Init+0x16c>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b94:	f003 031c 	and.w	r3, r3, #28
 8002b98:	210f      	movs	r1, #15
 8002b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	4917      	ldr	r1, [pc, #92]	; (8002c00 <HAL_DMA_Init+0x16c>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ba6:	4b16      	ldr	r3, [pc, #88]	; (8002c00 <HAL_DMA_Init+0x16c>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6859      	ldr	r1, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	f003 031c 	and.w	r3, r3, #28
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	4911      	ldr	r1, [pc, #68]	; (8002c00 <HAL_DMA_Init+0x16c>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	40020407 	.word	0x40020407
 8002be8:	bffdfff8 	.word	0xbffdfff8
 8002bec:	cccccccd 	.word	0xcccccccd
 8002bf0:	40020000 	.word	0x40020000
 8002bf4:	bffdfbf8 	.word	0xbffdfbf8
 8002bf8:	40020400 	.word	0x40020400
 8002bfc:	400200a8 	.word	0x400200a8
 8002c00:	400204a8 	.word	0x400204a8

08002c04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_DMA_Start_IT+0x20>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e04b      	b.n	8002cbc <HAL_DMA_Start_IT+0xb8>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d13a      	bne.n	8002cae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 f8e0 	bl	8002e22 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 020e 	orr.w	r2, r2, #14
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	e00f      	b.n	8002c9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0204 	bic.w	r2, r2, #4
 8002c8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 020a 	orr.w	r2, r2, #10
 8002c9a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	e005      	b.n	8002cba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce0:	f003 031c 	and.w	r3, r3, #28
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d026      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x7a>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d021      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0320 	and.w	r3, r3, #32
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d107      	bne.n	8002d18 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0204 	bic.w	r2, r2, #4
 8002d16:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1c:	f003 021c 	and.w	r2, r3, #28
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	2104      	movs	r1, #4
 8002d26:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d071      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002d3c:	e06c      	b.n	8002e18 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	f003 031c 	and.w	r3, r3, #28
 8002d46:	2202      	movs	r2, #2
 8002d48:	409a      	lsls	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d02e      	beq.n	8002db0 <HAL_DMA_IRQHandler+0xec>
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d029      	beq.n	8002db0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10b      	bne.n	8002d82 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 020a 	bic.w	r2, r2, #10
 8002d78:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f003 021c 	and.w	r2, r3, #28
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	2102      	movs	r1, #2
 8002d90:	fa01 f202 	lsl.w	r2, r1, r2
 8002d94:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d038      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002dae:	e033      	b.n	8002e18 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db4:	f003 031c 	and.w	r3, r3, #28
 8002db8:	2208      	movs	r2, #8
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d02a      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x156>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d025      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 020e 	bic.w	r2, r2, #14
 8002ddc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	f003 021c 	and.w	r2, r3, #28
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	2101      	movs	r1, #1
 8002dec:	fa01 f202 	lsl.w	r2, r1, r2
 8002df0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d004      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
}
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e34:	f003 021c 	and.w	r2, r3, #28
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e42:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b10      	cmp	r3, #16
 8002e52:	d108      	bne.n	8002e66 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e64:	e007      	b.n	8002e76 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	60da      	str	r2, [r3, #12]
}
 8002e76:	bf00      	nop
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e92:	e17f      	b.n	8003194 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	2101      	movs	r1, #1
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 8171 	beq.w	800318e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d005      	beq.n	8002ec4 <HAL_GPIO_Init+0x40>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d130      	bne.n	8002f26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	2203      	movs	r2, #3
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002efa:	2201      	movs	r2, #1
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4013      	ands	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	091b      	lsrs	r3, r3, #4
 8002f10:	f003 0201 	and.w	r2, r3, #1
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d118      	bne.n	8002f64 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002f38:	2201      	movs	r2, #1
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4013      	ands	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	08db      	lsrs	r3, r3, #3
 8002f4e:	f003 0201 	and.w	r2, r3, #1
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d017      	beq.n	8002fa0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4013      	ands	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d123      	bne.n	8002ff4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	08da      	lsrs	r2, r3, #3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3208      	adds	r2, #8
 8002fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	220f      	movs	r2, #15
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	08da      	lsrs	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3208      	adds	r2, #8
 8002fee:	6939      	ldr	r1, [r7, #16]
 8002ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	2203      	movs	r2, #3
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0203 	and.w	r2, r3, #3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80ac 	beq.w	800318e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003036:	4b5f      	ldr	r3, [pc, #380]	; (80031b4 <HAL_GPIO_Init+0x330>)
 8003038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800303a:	4a5e      	ldr	r2, [pc, #376]	; (80031b4 <HAL_GPIO_Init+0x330>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	6613      	str	r3, [r2, #96]	; 0x60
 8003042:	4b5c      	ldr	r3, [pc, #368]	; (80031b4 <HAL_GPIO_Init+0x330>)
 8003044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800304e:	4a5a      	ldr	r2, [pc, #360]	; (80031b8 <HAL_GPIO_Init+0x334>)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	089b      	lsrs	r3, r3, #2
 8003054:	3302      	adds	r3, #2
 8003056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	220f      	movs	r2, #15
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4013      	ands	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003078:	d025      	beq.n	80030c6 <HAL_GPIO_Init+0x242>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a4f      	ldr	r2, [pc, #316]	; (80031bc <HAL_GPIO_Init+0x338>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01f      	beq.n	80030c2 <HAL_GPIO_Init+0x23e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a4e      	ldr	r2, [pc, #312]	; (80031c0 <HAL_GPIO_Init+0x33c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d019      	beq.n	80030be <HAL_GPIO_Init+0x23a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a4d      	ldr	r2, [pc, #308]	; (80031c4 <HAL_GPIO_Init+0x340>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d013      	beq.n	80030ba <HAL_GPIO_Init+0x236>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a4c      	ldr	r2, [pc, #304]	; (80031c8 <HAL_GPIO_Init+0x344>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00d      	beq.n	80030b6 <HAL_GPIO_Init+0x232>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a4b      	ldr	r2, [pc, #300]	; (80031cc <HAL_GPIO_Init+0x348>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d007      	beq.n	80030b2 <HAL_GPIO_Init+0x22e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a4a      	ldr	r2, [pc, #296]	; (80031d0 <HAL_GPIO_Init+0x34c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d101      	bne.n	80030ae <HAL_GPIO_Init+0x22a>
 80030aa:	2306      	movs	r3, #6
 80030ac:	e00c      	b.n	80030c8 <HAL_GPIO_Init+0x244>
 80030ae:	2307      	movs	r3, #7
 80030b0:	e00a      	b.n	80030c8 <HAL_GPIO_Init+0x244>
 80030b2:	2305      	movs	r3, #5
 80030b4:	e008      	b.n	80030c8 <HAL_GPIO_Init+0x244>
 80030b6:	2304      	movs	r3, #4
 80030b8:	e006      	b.n	80030c8 <HAL_GPIO_Init+0x244>
 80030ba:	2303      	movs	r3, #3
 80030bc:	e004      	b.n	80030c8 <HAL_GPIO_Init+0x244>
 80030be:	2302      	movs	r3, #2
 80030c0:	e002      	b.n	80030c8 <HAL_GPIO_Init+0x244>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <HAL_GPIO_Init+0x244>
 80030c6:	2300      	movs	r3, #0
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	f002 0203 	and.w	r2, r2, #3
 80030ce:	0092      	lsls	r2, r2, #2
 80030d0:	4093      	lsls	r3, r2
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030d8:	4937      	ldr	r1, [pc, #220]	; (80031b8 <HAL_GPIO_Init+0x334>)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	089b      	lsrs	r3, r3, #2
 80030de:	3302      	adds	r3, #2
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030e6:	4b3b      	ldr	r3, [pc, #236]	; (80031d4 <HAL_GPIO_Init+0x350>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	43db      	mvns	r3, r3
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4013      	ands	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800310a:	4a32      	ldr	r2, [pc, #200]	; (80031d4 <HAL_GPIO_Init+0x350>)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003110:	4b30      	ldr	r3, [pc, #192]	; (80031d4 <HAL_GPIO_Init+0x350>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	43db      	mvns	r3, r3
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003134:	4a27      	ldr	r2, [pc, #156]	; (80031d4 <HAL_GPIO_Init+0x350>)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800313a:	4b26      	ldr	r3, [pc, #152]	; (80031d4 <HAL_GPIO_Init+0x350>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	43db      	mvns	r3, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800315e:	4a1d      	ldr	r2, [pc, #116]	; (80031d4 <HAL_GPIO_Init+0x350>)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003164:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <HAL_GPIO_Init+0x350>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	43db      	mvns	r3, r3
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4013      	ands	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003188:	4a12      	ldr	r2, [pc, #72]	; (80031d4 <HAL_GPIO_Init+0x350>)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	3301      	adds	r3, #1
 8003192:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	fa22 f303 	lsr.w	r3, r2, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f47f ae78 	bne.w	8002e94 <HAL_GPIO_Init+0x10>
  }
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40010000 	.word	0x40010000
 80031bc:	48000400 	.word	0x48000400
 80031c0:	48000800 	.word	0x48000800
 80031c4:	48000c00 	.word	0x48000c00
 80031c8:	48001000 	.word	0x48001000
 80031cc:	48001400 	.word	0x48001400
 80031d0:	48001800 	.word	0x48001800
 80031d4:	40010400 	.word	0x40010400

080031d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	807b      	strh	r3, [r7, #2]
 80031e4:	4613      	mov	r3, r2
 80031e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031e8:	787b      	ldrb	r3, [r7, #1]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031ee:	887a      	ldrh	r2, [r7, #2]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031f4:	e002      	b.n	80031fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031f6:	887a      	ldrh	r2, [r7, #2]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003214:	695a      	ldr	r2, [r3, #20]
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	4013      	ands	r3, r2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d006      	beq.n	800322c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800321e:	4a05      	ldr	r2, [pc, #20]	; (8003234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003220:	88fb      	ldrh	r3, [r7, #6]
 8003222:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe f9ae 	bl	8001588 <HAL_GPIO_EXTI_Callback>
  }
}
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40010400 	.word	0x40010400

08003238 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e081      	b.n	800334e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7fd ff06 	bl	8001070 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2224      	movs	r2, #36	; 0x24
 8003268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0201 	bic.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003288:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003298:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d107      	bne.n	80032b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	e006      	b.n	80032c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80032be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d104      	bne.n	80032d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69d9      	ldr	r1, [r3, #28]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1a      	ldr	r2, [r3, #32]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	4608      	mov	r0, r1
 8003362:	4611      	mov	r1, r2
 8003364:	461a      	mov	r2, r3
 8003366:	4603      	mov	r3, r0
 8003368:	817b      	strh	r3, [r7, #10]
 800336a:	460b      	mov	r3, r1
 800336c:	813b      	strh	r3, [r7, #8]
 800336e:	4613      	mov	r3, r2
 8003370:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b20      	cmp	r3, #32
 800337c:	f040 80f9 	bne.w	8003572 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <HAL_I2C_Mem_Write+0x34>
 8003386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003388:	2b00      	cmp	r3, #0
 800338a:	d105      	bne.n	8003398 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003392:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0ed      	b.n	8003574 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_I2C_Mem_Write+0x4e>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e0e6      	b.n	8003574 <HAL_I2C_Mem_Write+0x21c>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033ae:	f7ff fa53 	bl	8002858 <HAL_GetTick>
 80033b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	2319      	movs	r3, #25
 80033ba:	2201      	movs	r2, #1
 80033bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 fac3 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0d1      	b.n	8003574 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2221      	movs	r2, #33	; 0x21
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2240      	movs	r2, #64	; 0x40
 80033dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a3a      	ldr	r2, [r7, #32]
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033f8:	88f8      	ldrh	r0, [r7, #6]
 80033fa:	893a      	ldrh	r2, [r7, #8]
 80033fc:	8979      	ldrh	r1, [r7, #10]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	9301      	str	r3, [sp, #4]
 8003402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	4603      	mov	r3, r0
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f9d3 	bl	80037b4 <I2C_RequestMemoryWrite>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0a9      	b.n	8003574 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003424:	b29b      	uxth	r3, r3
 8003426:	2bff      	cmp	r3, #255	; 0xff
 8003428:	d90e      	bls.n	8003448 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	22ff      	movs	r2, #255	; 0xff
 800342e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003434:	b2da      	uxtb	r2, r3
 8003436:	8979      	ldrh	r1, [r7, #10]
 8003438:	2300      	movs	r3, #0
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 fc2b 	bl	8003c9c <I2C_TransferConfig>
 8003446:	e00f      	b.n	8003468 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003456:	b2da      	uxtb	r2, r3
 8003458:	8979      	ldrh	r1, [r7, #10]
 800345a:	2300      	movs	r3, #0
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 fc1a 	bl	8003c9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 faad 	bl	80039cc <I2C_WaitOnTXISFlagUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e07b      	b.n	8003574 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	781a      	ldrb	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d034      	beq.n	8003520 <HAL_I2C_Mem_Write+0x1c8>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d130      	bne.n	8003520 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c4:	2200      	movs	r2, #0
 80034c6:	2180      	movs	r1, #128	; 0x80
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 fa3f 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e04d      	b.n	8003574 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2bff      	cmp	r3, #255	; 0xff
 80034e0:	d90e      	bls.n	8003500 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	22ff      	movs	r2, #255	; 0xff
 80034e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	8979      	ldrh	r1, [r7, #10]
 80034f0:	2300      	movs	r3, #0
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 fbcf 	bl	8003c9c <I2C_TransferConfig>
 80034fe:	e00f      	b.n	8003520 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350e:	b2da      	uxtb	r2, r3
 8003510:	8979      	ldrh	r1, [r7, #10]
 8003512:	2300      	movs	r3, #0
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 fbbe 	bl	8003c9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003524:	b29b      	uxth	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d19e      	bne.n	8003468 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 fa8c 	bl	8003a4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e01a      	b.n	8003574 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2220      	movs	r2, #32
 8003544:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6859      	ldr	r1, [r3, #4]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b0a      	ldr	r3, [pc, #40]	; (800357c <HAL_I2C_Mem_Write+0x224>)
 8003552:	400b      	ands	r3, r1
 8003554:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	e000      	b.n	8003574 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003572:	2302      	movs	r3, #2
  }
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	fe00e800 	.word	0xfe00e800

08003580 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	4608      	mov	r0, r1
 800358a:	4611      	mov	r1, r2
 800358c:	461a      	mov	r2, r3
 800358e:	4603      	mov	r3, r0
 8003590:	817b      	strh	r3, [r7, #10]
 8003592:	460b      	mov	r3, r1
 8003594:	813b      	strh	r3, [r7, #8]
 8003596:	4613      	mov	r3, r2
 8003598:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	f040 80fd 	bne.w	80037a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <HAL_I2C_Mem_Read+0x34>
 80035ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d105      	bne.n	80035c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0f1      	b.n	80037a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_I2C_Mem_Read+0x4e>
 80035ca:	2302      	movs	r3, #2
 80035cc:	e0ea      	b.n	80037a4 <HAL_I2C_Mem_Read+0x224>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035d6:	f7ff f93f 	bl	8002858 <HAL_GetTick>
 80035da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	2319      	movs	r3, #25
 80035e2:	2201      	movs	r2, #1
 80035e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f9af 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0d5      	b.n	80037a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2222      	movs	r2, #34	; 0x22
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2240      	movs	r2, #64	; 0x40
 8003604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a3a      	ldr	r2, [r7, #32]
 8003612:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003618:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003620:	88f8      	ldrh	r0, [r7, #6]
 8003622:	893a      	ldrh	r2, [r7, #8]
 8003624:	8979      	ldrh	r1, [r7, #10]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	9301      	str	r3, [sp, #4]
 800362a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	4603      	mov	r3, r0
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f913 	bl	800385c <I2C_RequestMemoryRead>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0ad      	b.n	80037a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364c:	b29b      	uxth	r3, r3
 800364e:	2bff      	cmp	r3, #255	; 0xff
 8003650:	d90e      	bls.n	8003670 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	22ff      	movs	r2, #255	; 0xff
 8003656:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365c:	b2da      	uxtb	r2, r3
 800365e:	8979      	ldrh	r1, [r7, #10]
 8003660:	4b52      	ldr	r3, [pc, #328]	; (80037ac <HAL_I2C_Mem_Read+0x22c>)
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 fb17 	bl	8003c9c <I2C_TransferConfig>
 800366e:	e00f      	b.n	8003690 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367e:	b2da      	uxtb	r2, r3
 8003680:	8979      	ldrh	r1, [r7, #10]
 8003682:	4b4a      	ldr	r3, [pc, #296]	; (80037ac <HAL_I2C_Mem_Read+0x22c>)
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 fb06 	bl	8003c9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003696:	2200      	movs	r2, #0
 8003698:	2104      	movs	r1, #4
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f956 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e07c      	b.n	80037a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d034      	beq.n	8003750 <HAL_I2C_Mem_Read+0x1d0>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d130      	bne.n	8003750 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f4:	2200      	movs	r2, #0
 80036f6:	2180      	movs	r1, #128	; 0x80
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f927 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e04d      	b.n	80037a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370c:	b29b      	uxth	r3, r3
 800370e:	2bff      	cmp	r3, #255	; 0xff
 8003710:	d90e      	bls.n	8003730 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	22ff      	movs	r2, #255	; 0xff
 8003716:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371c:	b2da      	uxtb	r2, r3
 800371e:	8979      	ldrh	r1, [r7, #10]
 8003720:	2300      	movs	r3, #0
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 fab7 	bl	8003c9c <I2C_TransferConfig>
 800372e:	e00f      	b.n	8003750 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373e:	b2da      	uxtb	r2, r3
 8003740:	8979      	ldrh	r1, [r7, #10]
 8003742:	2300      	movs	r3, #0
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 faa6 	bl	8003c9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d19a      	bne.n	8003690 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 f974 	bl	8003a4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e01a      	b.n	80037a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2220      	movs	r2, #32
 8003774:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6859      	ldr	r1, [r3, #4]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <HAL_I2C_Mem_Read+0x230>)
 8003782:	400b      	ands	r3, r1
 8003784:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	e000      	b.n	80037a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80037a2:	2302      	movs	r3, #2
  }
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	80002400 	.word	0x80002400
 80037b0:	fe00e800 	.word	0xfe00e800

080037b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	4608      	mov	r0, r1
 80037be:	4611      	mov	r1, r2
 80037c0:	461a      	mov	r2, r3
 80037c2:	4603      	mov	r3, r0
 80037c4:	817b      	strh	r3, [r7, #10]
 80037c6:	460b      	mov	r3, r1
 80037c8:	813b      	strh	r3, [r7, #8]
 80037ca:	4613      	mov	r3, r2
 80037cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80037ce:	88fb      	ldrh	r3, [r7, #6]
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	8979      	ldrh	r1, [r7, #10]
 80037d4:	4b20      	ldr	r3, [pc, #128]	; (8003858 <I2C_RequestMemoryWrite+0xa4>)
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 fa5d 	bl	8003c9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	69b9      	ldr	r1, [r7, #24]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f8f0 	bl	80039cc <I2C_WaitOnTXISFlagUntilTimeout>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e02c      	b.n	8003850 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d105      	bne.n	8003808 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037fc:	893b      	ldrh	r3, [r7, #8]
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	629a      	str	r2, [r3, #40]	; 0x28
 8003806:	e015      	b.n	8003834 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003808:	893b      	ldrh	r3, [r7, #8]
 800380a:	0a1b      	lsrs	r3, r3, #8
 800380c:	b29b      	uxth	r3, r3
 800380e:	b2da      	uxtb	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003816:	69fa      	ldr	r2, [r7, #28]
 8003818:	69b9      	ldr	r1, [r7, #24]
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f8d6 	bl	80039cc <I2C_WaitOnTXISFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e012      	b.n	8003850 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800382a:	893b      	ldrh	r3, [r7, #8]
 800382c:	b2da      	uxtb	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	2200      	movs	r2, #0
 800383c:	2180      	movs	r1, #128	; 0x80
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f884 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	80002000 	.word	0x80002000

0800385c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af02      	add	r7, sp, #8
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	4608      	mov	r0, r1
 8003866:	4611      	mov	r1, r2
 8003868:	461a      	mov	r2, r3
 800386a:	4603      	mov	r3, r0
 800386c:	817b      	strh	r3, [r7, #10]
 800386e:	460b      	mov	r3, r1
 8003870:	813b      	strh	r3, [r7, #8]
 8003872:	4613      	mov	r3, r2
 8003874:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	b2da      	uxtb	r2, r3
 800387a:	8979      	ldrh	r1, [r7, #10]
 800387c:	4b20      	ldr	r3, [pc, #128]	; (8003900 <I2C_RequestMemoryRead+0xa4>)
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	2300      	movs	r3, #0
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 fa0a 	bl	8003c9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	69b9      	ldr	r1, [r7, #24]
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 f89d 	bl	80039cc <I2C_WaitOnTXISFlagUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e02c      	b.n	80038f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800389c:	88fb      	ldrh	r3, [r7, #6]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d105      	bne.n	80038ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038a2:	893b      	ldrh	r3, [r7, #8]
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	629a      	str	r2, [r3, #40]	; 0x28
 80038ac:	e015      	b.n	80038da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038ae:	893b      	ldrh	r3, [r7, #8]
 80038b0:	0a1b      	lsrs	r3, r3, #8
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038bc:	69fa      	ldr	r2, [r7, #28]
 80038be:	69b9      	ldr	r1, [r7, #24]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f883 	bl	80039cc <I2C_WaitOnTXISFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e012      	b.n	80038f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038d0:	893b      	ldrh	r3, [r7, #8]
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	2200      	movs	r2, #0
 80038e2:	2140      	movs	r1, #64	; 0x40
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f831 	bl	800394c <I2C_WaitOnFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	80002000 	.word	0x80002000

08003904 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b02      	cmp	r3, #2
 8003918:	d103      	bne.n	8003922 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2200      	movs	r2, #0
 8003920:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b01      	cmp	r3, #1
 800392e:	d007      	beq.n	8003940 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	619a      	str	r2, [r3, #24]
  }
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	4613      	mov	r3, r2
 800395a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800395c:	e022      	b.n	80039a4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003964:	d01e      	beq.n	80039a4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003966:	f7fe ff77 	bl	8002858 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d302      	bcc.n	800397c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d113      	bne.n	80039a4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003980:	f043 0220 	orr.w	r2, r3, #32
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e00f      	b.n	80039c4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	4013      	ands	r3, r2
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	bf0c      	ite	eq
 80039b4:	2301      	moveq	r3, #1
 80039b6:	2300      	movne	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	461a      	mov	r2, r3
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d0cd      	beq.n	800395e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039d8:	e02c      	b.n	8003a34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	68b9      	ldr	r1, [r7, #8]
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f870 	bl	8003ac4 <I2C_IsErrorOccurred>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e02a      	b.n	8003a44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039f4:	d01e      	beq.n	8003a34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f6:	f7fe ff2f 	bl	8002858 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d302      	bcc.n	8003a0c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d113      	bne.n	8003a34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a10:	f043 0220 	orr.w	r2, r3, #32
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e007      	b.n	8003a44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d1cb      	bne.n	80039da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a58:	e028      	b.n	8003aac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	68b9      	ldr	r1, [r7, #8]
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 f830 	bl	8003ac4 <I2C_IsErrorOccurred>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e026      	b.n	8003abc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6e:	f7fe fef3 	bl	8002858 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d302      	bcc.n	8003a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d113      	bne.n	8003aac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a88:	f043 0220 	orr.w	r2, r3, #32
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e007      	b.n	8003abc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d1cf      	bne.n	8003a5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08a      	sub	sp, #40	; 0x28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d075      	beq.n	8003bdc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2210      	movs	r2, #16
 8003af6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003af8:	e056      	b.n	8003ba8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b00:	d052      	beq.n	8003ba8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b02:	f7fe fea9 	bl	8002858 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d302      	bcc.n	8003b18 <I2C_IsErrorOccurred+0x54>
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d147      	bne.n	8003ba8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b22:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b2a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b3a:	d12e      	bne.n	8003b9a <I2C_IsErrorOccurred+0xd6>
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b42:	d02a      	beq.n	8003b9a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003b44:	7cfb      	ldrb	r3, [r7, #19]
 8003b46:	2b20      	cmp	r3, #32
 8003b48:	d027      	beq.n	8003b9a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b58:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003b5a:	f7fe fe7d 	bl	8002858 <HAL_GetTick>
 8003b5e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b60:	e01b      	b.n	8003b9a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003b62:	f7fe fe79 	bl	8002858 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b19      	cmp	r3, #25
 8003b6e:	d914      	bls.n	8003b9a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b74:	f043 0220 	orr.w	r2, r3, #32
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d1dc      	bne.n	8003b62 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d003      	beq.n	8003bbe <I2C_IsErrorOccurred+0xfa>
 8003bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d09d      	beq.n	8003afa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d103      	bne.n	8003bce <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	f043 0304 	orr.w	r3, r3, #4
 8003bd4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00b      	beq.n	8003c06 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bfe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00b      	beq.n	8003c28 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	f043 0308 	orr.w	r3, r3, #8
 8003c16:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00b      	beq.n	8003c4a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	f043 0302 	orr.w	r3, r3, #2
 8003c38:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d01c      	beq.n	8003c8c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f7ff fe56 	bl	8003904 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6859      	ldr	r1, [r3, #4]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <I2C_IsErrorOccurred+0x1d4>)
 8003c64:	400b      	ands	r3, r1
 8003c66:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3728      	adds	r7, #40	; 0x28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	fe00e800 	.word	0xfe00e800

08003c9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	607b      	str	r3, [r7, #4]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	817b      	strh	r3, [r7, #10]
 8003caa:	4613      	mov	r3, r2
 8003cac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cae:	897b      	ldrh	r3, [r7, #10]
 8003cb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cb4:	7a7b      	ldrb	r3, [r7, #9]
 8003cb6:	041b      	lsls	r3, r3, #16
 8003cb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cbc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	0d5b      	lsrs	r3, r3, #21
 8003cd6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003cda:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <I2C_TransferConfig+0x60>)
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	ea02 0103 	and.w	r1, r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003cee:	bf00      	nop
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	03ff63ff 	.word	0x03ff63ff

08003d00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d138      	bne.n	8003d88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e032      	b.n	8003d8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2224      	movs	r2, #36	; 0x24
 8003d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0201 	bic.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6819      	ldr	r1, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0201 	orr.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	e000      	b.n	8003d8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d88:	2302      	movs	r3, #2
  }
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b085      	sub	sp, #20
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d139      	bne.n	8003e20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e033      	b.n	8003e22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2224      	movs	r2, #36	; 0x24
 8003dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0201 	bic.w	r2, r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003de8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	021b      	lsls	r3, r3, #8
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	e000      	b.n	8003e22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e20:	2302      	movs	r3, #2
  }
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b084      	sub	sp, #16
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e041      	b.n	8003ec4 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003e48:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f245 5255 	movw	r2, #21845	; 0x5555
 8003e52:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6852      	ldr	r2, [r2, #4]
 8003e5c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6892      	ldr	r2, [r2, #8]
 8003e66:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003e68:	f7fe fcf6 	bl	8002858 <HAL_GetTick>
 8003e6c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003e6e:	e00f      	b.n	8003e90 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003e70:	f7fe fcf2 	bl	8002858 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b31      	cmp	r3, #49	; 0x31
 8003e7c:	d908      	bls.n	8003e90 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e019      	b.n	8003ec4 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e8      	bne.n	8003e70 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d005      	beq.n	8003eb8 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	68d2      	ldr	r2, [r2, #12]
 8003eb4:	611a      	str	r2, [r3, #16]
 8003eb6:	e004      	b.n	8003ec2 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003ec0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003edc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a04      	ldr	r2, [pc, #16]	; (8003f08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efa:	6013      	str	r3, [r2, #0]
}
 8003efc:	bf00      	nop
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40007000 	.word	0x40007000

08003f0c <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8003f14:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f003 031f 	and.w	r3, r3, #31
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	401a      	ands	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	4908      	ldr	r1, [pc, #32]	; (8003f48 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8003f2c:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f003 031f 	and.w	r3, r3, #31
 8003f36:	4904      	ldr	r1, [pc, #16]	; (8003f48 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	608b      	str	r3, [r1, #8]


}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	40007000 	.word	0x40007000

08003f4c <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8003f54:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <HAL_PWR_DisableWakeUpPin+0x28>)
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	4904      	ldr	r1, [pc, #16]	; (8003f74 <HAL_PWR_DisableWakeUpPin+0x28>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40007000 	.word	0x40007000

08003f78 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8003f7c:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f023 0307 	bic.w	r3, r3, #7
 8003f84:	4a07      	ldr	r2, [pc, #28]	; (8003fa4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003f86:	f043 0303 	orr.w	r3, r3, #3
 8003f8a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	4a05      	ldr	r2, [pc, #20]	; (8003fa8 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8003f92:	f043 0304 	orr.w	r3, r3, #4
 8003f96:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003f98:	bf30      	wfi
}
 8003f9a:	bf00      	nop
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	40007000 	.word	0x40007000
 8003fa8:	e000ed00 	.word	0xe000ed00

08003fac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003fb0:	4b04      	ldr	r3, [pc, #16]	; (8003fc4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40007000 	.word	0x40007000

08003fc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fd6:	d130      	bne.n	800403a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fd8:	4b23      	ldr	r3, [pc, #140]	; (8004068 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fe4:	d038      	beq.n	8004058 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fe6:	4b20      	ldr	r3, [pc, #128]	; (8004068 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fee:	4a1e      	ldr	r2, [pc, #120]	; (8004068 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ff0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ff4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ff6:	4b1d      	ldr	r3, [pc, #116]	; (800406c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2232      	movs	r2, #50	; 0x32
 8003ffc:	fb02 f303 	mul.w	r3, r2, r3
 8004000:	4a1b      	ldr	r2, [pc, #108]	; (8004070 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	0c9b      	lsrs	r3, r3, #18
 8004008:	3301      	adds	r3, #1
 800400a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800400c:	e002      	b.n	8004014 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3b01      	subs	r3, #1
 8004012:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004014:	4b14      	ldr	r3, [pc, #80]	; (8004068 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004020:	d102      	bne.n	8004028 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1f2      	bne.n	800400e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004028:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004034:	d110      	bne.n	8004058 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e00f      	b.n	800405a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004046:	d007      	beq.n	8004058 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004048:	4b07      	ldr	r3, [pc, #28]	; (8004068 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004050:	4a05      	ldr	r2, [pc, #20]	; (8004068 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004052:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004056:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40007000 	.word	0x40007000
 800406c:	20000000 	.word	0x20000000
 8004070:	431bde83 	.word	0x431bde83

08004074 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e3ca      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004086:	4b97      	ldr	r3, [pc, #604]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004090:	4b94      	ldr	r3, [pc, #592]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0303 	and.w	r3, r3, #3
 8004098:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 80e4 	beq.w	8004270 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d007      	beq.n	80040be <HAL_RCC_OscConfig+0x4a>
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	2b0c      	cmp	r3, #12
 80040b2:	f040 808b 	bne.w	80041cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	f040 8087 	bne.w	80041cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040be:	4b89      	ldr	r3, [pc, #548]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_RCC_OscConfig+0x62>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e3a2      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1a      	ldr	r2, [r3, #32]
 80040da:	4b82      	ldr	r3, [pc, #520]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d004      	beq.n	80040f0 <HAL_RCC_OscConfig+0x7c>
 80040e6:	4b7f      	ldr	r3, [pc, #508]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ee:	e005      	b.n	80040fc <HAL_RCC_OscConfig+0x88>
 80040f0:	4b7c      	ldr	r3, [pc, #496]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80040f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f6:	091b      	lsrs	r3, r3, #4
 80040f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d223      	bcs.n	8004148 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	4618      	mov	r0, r3
 8004106:	f000 fd55 	bl	8004bb4 <RCC_SetFlashLatencyFromMSIRange>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e383      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004114:	4b73      	ldr	r3, [pc, #460]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a72      	ldr	r2, [pc, #456]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 800411a:	f043 0308 	orr.w	r3, r3, #8
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	4b70      	ldr	r3, [pc, #448]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	496d      	ldr	r1, [pc, #436]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 800412e:	4313      	orrs	r3, r2
 8004130:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004132:	4b6c      	ldr	r3, [pc, #432]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	021b      	lsls	r3, r3, #8
 8004140:	4968      	ldr	r1, [pc, #416]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004142:	4313      	orrs	r3, r2
 8004144:	604b      	str	r3, [r1, #4]
 8004146:	e025      	b.n	8004194 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004148:	4b66      	ldr	r3, [pc, #408]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a65      	ldr	r2, [pc, #404]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 800414e:	f043 0308 	orr.w	r3, r3, #8
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	4b63      	ldr	r3, [pc, #396]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	4960      	ldr	r1, [pc, #384]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004166:	4b5f      	ldr	r3, [pc, #380]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	495b      	ldr	r1, [pc, #364]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004176:	4313      	orrs	r3, r2
 8004178:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d109      	bne.n	8004194 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	4618      	mov	r0, r3
 8004186:	f000 fd15 	bl	8004bb4 <RCC_SetFlashLatencyFromMSIRange>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e343      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004194:	f000 fc4a 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 8004198:	4602      	mov	r2, r0
 800419a:	4b52      	ldr	r3, [pc, #328]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	091b      	lsrs	r3, r3, #4
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	4950      	ldr	r1, [pc, #320]	; (80042e8 <HAL_RCC_OscConfig+0x274>)
 80041a6:	5ccb      	ldrb	r3, [r1, r3]
 80041a8:	f003 031f 	and.w	r3, r3, #31
 80041ac:	fa22 f303 	lsr.w	r3, r2, r3
 80041b0:	4a4e      	ldr	r2, [pc, #312]	; (80042ec <HAL_RCC_OscConfig+0x278>)
 80041b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041b4:	4b4e      	ldr	r3, [pc, #312]	; (80042f0 <HAL_RCC_OscConfig+0x27c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fe fafd 	bl	80027b8 <HAL_InitTick>
 80041be:	4603      	mov	r3, r0
 80041c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d052      	beq.n	800426e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	e327      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d032      	beq.n	800423a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041d4:	4b43      	ldr	r3, [pc, #268]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a42      	ldr	r2, [pc, #264]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80041da:	f043 0301 	orr.w	r3, r3, #1
 80041de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041e0:	f7fe fb3a 	bl	8002858 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041e8:	f7fe fb36 	bl	8002858 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e310      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041fa:	4b3a      	ldr	r3, [pc, #232]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0f0      	beq.n	80041e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004206:	4b37      	ldr	r3, [pc, #220]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a36      	ldr	r2, [pc, #216]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 800420c:	f043 0308 	orr.w	r3, r3, #8
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	4b34      	ldr	r3, [pc, #208]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	4931      	ldr	r1, [pc, #196]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004220:	4313      	orrs	r3, r2
 8004222:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004224:	4b2f      	ldr	r3, [pc, #188]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	492c      	ldr	r1, [pc, #176]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004234:	4313      	orrs	r3, r2
 8004236:	604b      	str	r3, [r1, #4]
 8004238:	e01a      	b.n	8004270 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800423a:	4b2a      	ldr	r3, [pc, #168]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a29      	ldr	r2, [pc, #164]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004240:	f023 0301 	bic.w	r3, r3, #1
 8004244:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004246:	f7fe fb07 	bl	8002858 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800424e:	f7fe fb03 	bl	8002858 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e2dd      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004260:	4b20      	ldr	r3, [pc, #128]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1f0      	bne.n	800424e <HAL_RCC_OscConfig+0x1da>
 800426c:	e000      	b.n	8004270 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800426e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d074      	beq.n	8004366 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	2b08      	cmp	r3, #8
 8004280:	d005      	beq.n	800428e <HAL_RCC_OscConfig+0x21a>
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	2b0c      	cmp	r3, #12
 8004286:	d10e      	bne.n	80042a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2b03      	cmp	r3, #3
 800428c:	d10b      	bne.n	80042a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800428e:	4b15      	ldr	r3, [pc, #84]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d064      	beq.n	8004364 <HAL_RCC_OscConfig+0x2f0>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d160      	bne.n	8004364 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e2ba      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ae:	d106      	bne.n	80042be <HAL_RCC_OscConfig+0x24a>
 80042b0:	4b0c      	ldr	r3, [pc, #48]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a0b      	ldr	r2, [pc, #44]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80042b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	e026      	b.n	800430c <HAL_RCC_OscConfig+0x298>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042c6:	d115      	bne.n	80042f4 <HAL_RCC_OscConfig+0x280>
 80042c8:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a05      	ldr	r2, [pc, #20]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80042ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	4b03      	ldr	r3, [pc, #12]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a02      	ldr	r2, [pc, #8]	; (80042e4 <HAL_RCC_OscConfig+0x270>)
 80042da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042de:	6013      	str	r3, [r2, #0]
 80042e0:	e014      	b.n	800430c <HAL_RCC_OscConfig+0x298>
 80042e2:	bf00      	nop
 80042e4:	40021000 	.word	0x40021000
 80042e8:	080391e0 	.word	0x080391e0
 80042ec:	20000000 	.word	0x20000000
 80042f0:	20000004 	.word	0x20000004
 80042f4:	4ba0      	ldr	r3, [pc, #640]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a9f      	ldr	r2, [pc, #636]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 80042fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	4b9d      	ldr	r3, [pc, #628]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a9c      	ldr	r2, [pc, #624]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 8004306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800430a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d013      	beq.n	800433c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fe faa0 	bl	8002858 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800431c:	f7fe fa9c 	bl	8002858 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	; 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e276      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800432e:	4b92      	ldr	r3, [pc, #584]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0x2a8>
 800433a:	e014      	b.n	8004366 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fe fa8c 	bl	8002858 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004344:	f7fe fa88 	bl	8002858 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b64      	cmp	r3, #100	; 0x64
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e262      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004356:	4b88      	ldr	r3, [pc, #544]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x2d0>
 8004362:	e000      	b.n	8004366 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d060      	beq.n	8004434 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	2b04      	cmp	r3, #4
 8004376:	d005      	beq.n	8004384 <HAL_RCC_OscConfig+0x310>
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	2b0c      	cmp	r3, #12
 800437c:	d119      	bne.n	80043b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2b02      	cmp	r3, #2
 8004382:	d116      	bne.n	80043b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004384:	4b7c      	ldr	r3, [pc, #496]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <HAL_RCC_OscConfig+0x328>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e23f      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439c:	4b76      	ldr	r3, [pc, #472]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	061b      	lsls	r3, r3, #24
 80043aa:	4973      	ldr	r1, [pc, #460]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043b0:	e040      	b.n	8004434 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d023      	beq.n	8004402 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ba:	4b6f      	ldr	r3, [pc, #444]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a6e      	ldr	r2, [pc, #440]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 80043c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c6:	f7fe fa47 	bl	8002858 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ce:	f7fe fa43 	bl	8002858 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e21d      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043e0:	4b65      	ldr	r3, [pc, #404]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ec:	4b62      	ldr	r3, [pc, #392]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	061b      	lsls	r3, r3, #24
 80043fa:	495f      	ldr	r1, [pc, #380]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	604b      	str	r3, [r1, #4]
 8004400:	e018      	b.n	8004434 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004402:	4b5d      	ldr	r3, [pc, #372]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a5c      	ldr	r2, [pc, #368]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 8004408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800440c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440e:	f7fe fa23 	bl	8002858 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004416:	f7fe fa1f 	bl	8002858 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e1f9      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004428:	4b53      	ldr	r3, [pc, #332]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1f0      	bne.n	8004416 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b00      	cmp	r3, #0
 800443e:	d03c      	beq.n	80044ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01c      	beq.n	8004482 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004448:	4b4b      	ldr	r3, [pc, #300]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 800444a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800444e:	4a4a      	ldr	r2, [pc, #296]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004458:	f7fe f9fe 	bl	8002858 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004460:	f7fe f9fa 	bl	8002858 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e1d4      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004472:	4b41      	ldr	r3, [pc, #260]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 8004474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0ef      	beq.n	8004460 <HAL_RCC_OscConfig+0x3ec>
 8004480:	e01b      	b.n	80044ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004482:	4b3d      	ldr	r3, [pc, #244]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 8004484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004488:	4a3b      	ldr	r2, [pc, #236]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 800448a:	f023 0301 	bic.w	r3, r3, #1
 800448e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004492:	f7fe f9e1 	bl	8002858 <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800449a:	f7fe f9dd 	bl	8002858 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e1b7      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044ac:	4b32      	ldr	r3, [pc, #200]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 80044ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1ef      	bne.n	800449a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0304 	and.w	r3, r3, #4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 80a6 	beq.w	8004614 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044c8:	2300      	movs	r3, #0
 80044ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80044cc:	4b2a      	ldr	r3, [pc, #168]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 80044ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10d      	bne.n	80044f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044d8:	4b27      	ldr	r3, [pc, #156]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 80044da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044dc:	4a26      	ldr	r2, [pc, #152]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 80044de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e2:	6593      	str	r3, [r2, #88]	; 0x58
 80044e4:	4b24      	ldr	r3, [pc, #144]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 80044e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f0:	2301      	movs	r3, #1
 80044f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044f4:	4b21      	ldr	r3, [pc, #132]	; (800457c <HAL_RCC_OscConfig+0x508>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d118      	bne.n	8004532 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004500:	4b1e      	ldr	r3, [pc, #120]	; (800457c <HAL_RCC_OscConfig+0x508>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1d      	ldr	r2, [pc, #116]	; (800457c <HAL_RCC_OscConfig+0x508>)
 8004506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800450a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800450c:	f7fe f9a4 	bl	8002858 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004514:	f7fe f9a0 	bl	8002858 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e17a      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004526:	4b15      	ldr	r3, [pc, #84]	; (800457c <HAL_RCC_OscConfig+0x508>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d108      	bne.n	800454c <HAL_RCC_OscConfig+0x4d8>
 800453a:	4b0f      	ldr	r3, [pc, #60]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 800453c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004540:	4a0d      	ldr	r2, [pc, #52]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 8004542:	f043 0301 	orr.w	r3, r3, #1
 8004546:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800454a:	e029      	b.n	80045a0 <HAL_RCC_OscConfig+0x52c>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2b05      	cmp	r3, #5
 8004552:	d115      	bne.n	8004580 <HAL_RCC_OscConfig+0x50c>
 8004554:	4b08      	ldr	r3, [pc, #32]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455a:	4a07      	ldr	r2, [pc, #28]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 800455c:	f043 0304 	orr.w	r3, r3, #4
 8004560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004564:	4b04      	ldr	r3, [pc, #16]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456a:	4a03      	ldr	r2, [pc, #12]	; (8004578 <HAL_RCC_OscConfig+0x504>)
 800456c:	f043 0301 	orr.w	r3, r3, #1
 8004570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004574:	e014      	b.n	80045a0 <HAL_RCC_OscConfig+0x52c>
 8004576:	bf00      	nop
 8004578:	40021000 	.word	0x40021000
 800457c:	40007000 	.word	0x40007000
 8004580:	4b9c      	ldr	r3, [pc, #624]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 8004582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004586:	4a9b      	ldr	r2, [pc, #620]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004590:	4b98      	ldr	r3, [pc, #608]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004596:	4a97      	ldr	r2, [pc, #604]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 8004598:	f023 0304 	bic.w	r3, r3, #4
 800459c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d016      	beq.n	80045d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a8:	f7fe f956 	bl	8002858 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ae:	e00a      	b.n	80045c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b0:	f7fe f952 	bl	8002858 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80045be:	4293      	cmp	r3, r2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e12a      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c6:	4b8b      	ldr	r3, [pc, #556]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 80045c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0ed      	beq.n	80045b0 <HAL_RCC_OscConfig+0x53c>
 80045d4:	e015      	b.n	8004602 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d6:	f7fe f93f 	bl	8002858 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045dc:	e00a      	b.n	80045f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045de:	f7fe f93b 	bl	8002858 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e113      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045f4:	4b7f      	ldr	r3, [pc, #508]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1ed      	bne.n	80045de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004602:	7ffb      	ldrb	r3, [r7, #31]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d105      	bne.n	8004614 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004608:	4b7a      	ldr	r3, [pc, #488]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 800460a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460c:	4a79      	ldr	r2, [pc, #484]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 800460e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004612:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80fe 	beq.w	800481a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004622:	2b02      	cmp	r3, #2
 8004624:	f040 80d0 	bne.w	80047c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004628:	4b72      	ldr	r3, [pc, #456]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f003 0203 	and.w	r2, r3, #3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	429a      	cmp	r2, r3
 800463a:	d130      	bne.n	800469e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	3b01      	subs	r3, #1
 8004648:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800464a:	429a      	cmp	r2, r3
 800464c:	d127      	bne.n	800469e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004658:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800465a:	429a      	cmp	r2, r3
 800465c:	d11f      	bne.n	800469e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004668:	2a07      	cmp	r2, #7
 800466a:	bf14      	ite	ne
 800466c:	2201      	movne	r2, #1
 800466e:	2200      	moveq	r2, #0
 8004670:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004672:	4293      	cmp	r3, r2
 8004674:	d113      	bne.n	800469e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004680:	085b      	lsrs	r3, r3, #1
 8004682:	3b01      	subs	r3, #1
 8004684:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004686:	429a      	cmp	r2, r3
 8004688:	d109      	bne.n	800469e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	085b      	lsrs	r3, r3, #1
 8004696:	3b01      	subs	r3, #1
 8004698:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800469a:	429a      	cmp	r2, r3
 800469c:	d06e      	beq.n	800477c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	2b0c      	cmp	r3, #12
 80046a2:	d069      	beq.n	8004778 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046a4:	4b53      	ldr	r3, [pc, #332]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d105      	bne.n	80046bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80046b0:	4b50      	ldr	r3, [pc, #320]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e0ad      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046c0:	4b4c      	ldr	r3, [pc, #304]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a4b      	ldr	r2, [pc, #300]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 80046c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046cc:	f7fe f8c4 	bl	8002858 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d4:	f7fe f8c0 	bl	8002858 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e09a      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e6:	4b43      	ldr	r3, [pc, #268]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046f2:	4b40      	ldr	r3, [pc, #256]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	4b40      	ldr	r3, [pc, #256]	; (80047f8 <HAL_RCC_OscConfig+0x784>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004702:	3a01      	subs	r2, #1
 8004704:	0112      	lsls	r2, r2, #4
 8004706:	4311      	orrs	r1, r2
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800470c:	0212      	lsls	r2, r2, #8
 800470e:	4311      	orrs	r1, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004714:	0852      	lsrs	r2, r2, #1
 8004716:	3a01      	subs	r2, #1
 8004718:	0552      	lsls	r2, r2, #21
 800471a:	4311      	orrs	r1, r2
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004720:	0852      	lsrs	r2, r2, #1
 8004722:	3a01      	subs	r2, #1
 8004724:	0652      	lsls	r2, r2, #25
 8004726:	4311      	orrs	r1, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800472c:	0912      	lsrs	r2, r2, #4
 800472e:	0452      	lsls	r2, r2, #17
 8004730:	430a      	orrs	r2, r1
 8004732:	4930      	ldr	r1, [pc, #192]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 8004734:	4313      	orrs	r3, r2
 8004736:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004738:	4b2e      	ldr	r3, [pc, #184]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a2d      	ldr	r2, [pc, #180]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 800473e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004742:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004744:	4b2b      	ldr	r3, [pc, #172]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	4a2a      	ldr	r2, [pc, #168]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 800474a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800474e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004750:	f7fe f882 	bl	8002858 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004758:	f7fe f87e 	bl	8002858 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e058      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800476a:	4b22      	ldr	r3, [pc, #136]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004776:	e050      	b.n	800481a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e04f      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800477c:	4b1d      	ldr	r3, [pc, #116]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d148      	bne.n	800481a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004788:	4b1a      	ldr	r3, [pc, #104]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a19      	ldr	r2, [pc, #100]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 800478e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004792:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004794:	4b17      	ldr	r3, [pc, #92]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	4a16      	ldr	r2, [pc, #88]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 800479a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800479e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047a0:	f7fe f85a 	bl	8002858 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a8:	f7fe f856 	bl	8002858 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e030      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ba:	4b0e      	ldr	r3, [pc, #56]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0f0      	beq.n	80047a8 <HAL_RCC_OscConfig+0x734>
 80047c6:	e028      	b.n	800481a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	2b0c      	cmp	r3, #12
 80047cc:	d023      	beq.n	8004816 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ce:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a08      	ldr	r2, [pc, #32]	; (80047f4 <HAL_RCC_OscConfig+0x780>)
 80047d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047da:	f7fe f83d 	bl	8002858 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e0:	e00c      	b.n	80047fc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e2:	f7fe f839 	bl	8002858 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d905      	bls.n	80047fc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e013      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
 80047f4:	40021000 	.word	0x40021000
 80047f8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047fc:	4b09      	ldr	r3, [pc, #36]	; (8004824 <HAL_RCC_OscConfig+0x7b0>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1ec      	bne.n	80047e2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004808:	4b06      	ldr	r3, [pc, #24]	; (8004824 <HAL_RCC_OscConfig+0x7b0>)
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	4905      	ldr	r1, [pc, #20]	; (8004824 <HAL_RCC_OscConfig+0x7b0>)
 800480e:	4b06      	ldr	r3, [pc, #24]	; (8004828 <HAL_RCC_OscConfig+0x7b4>)
 8004810:	4013      	ands	r3, r2
 8004812:	60cb      	str	r3, [r1, #12]
 8004814:	e001      	b.n	800481a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3720      	adds	r7, #32
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40021000 	.word	0x40021000
 8004828:	feeefffc 	.word	0xfeeefffc

0800482c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0e7      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004840:	4b75      	ldr	r3, [pc, #468]	; (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d910      	bls.n	8004870 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b72      	ldr	r3, [pc, #456]	; (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f023 0207 	bic.w	r2, r3, #7
 8004856:	4970      	ldr	r1, [pc, #448]	; (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	4313      	orrs	r3, r2
 800485c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800485e:	4b6e      	ldr	r3, [pc, #440]	; (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d001      	beq.n	8004870 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0cf      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d010      	beq.n	800489e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	4b66      	ldr	r3, [pc, #408]	; (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004888:	429a      	cmp	r2, r3
 800488a:	d908      	bls.n	800489e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800488c:	4b63      	ldr	r3, [pc, #396]	; (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	4960      	ldr	r1, [pc, #384]	; (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 800489a:	4313      	orrs	r3, r2
 800489c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d04c      	beq.n	8004944 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d107      	bne.n	80048c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048b2:	4b5a      	ldr	r3, [pc, #360]	; (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d121      	bne.n	8004902 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e0a6      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d107      	bne.n	80048da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ca:	4b54      	ldr	r3, [pc, #336]	; (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d115      	bne.n	8004902 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e09a      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d107      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048e2:	4b4e      	ldr	r3, [pc, #312]	; (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d109      	bne.n	8004902 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e08e      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048f2:	4b4a      	ldr	r3, [pc, #296]	; (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e086      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004902:	4b46      	ldr	r3, [pc, #280]	; (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f023 0203 	bic.w	r2, r3, #3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4943      	ldr	r1, [pc, #268]	; (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 8004910:	4313      	orrs	r3, r2
 8004912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004914:	f7fd ffa0 	bl	8002858 <HAL_GetTick>
 8004918:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491a:	e00a      	b.n	8004932 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800491c:	f7fd ff9c 	bl	8002858 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f241 3288 	movw	r2, #5000	; 0x1388
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e06e      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004932:	4b3a      	ldr	r3, [pc, #232]	; (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 020c 	and.w	r2, r3, #12
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	429a      	cmp	r2, r3
 8004942:	d1eb      	bne.n	800491c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d010      	beq.n	8004972 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	4b31      	ldr	r3, [pc, #196]	; (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800495c:	429a      	cmp	r2, r3
 800495e:	d208      	bcs.n	8004972 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004960:	4b2e      	ldr	r3, [pc, #184]	; (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	492b      	ldr	r1, [pc, #172]	; (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 800496e:	4313      	orrs	r3, r2
 8004970:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004972:	4b29      	ldr	r3, [pc, #164]	; (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d210      	bcs.n	80049a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004980:	4b25      	ldr	r3, [pc, #148]	; (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f023 0207 	bic.w	r2, r3, #7
 8004988:	4923      	ldr	r1, [pc, #140]	; (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	4313      	orrs	r3, r2
 800498e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004990:	4b21      	ldr	r3, [pc, #132]	; (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d001      	beq.n	80049a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e036      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d008      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049ae:	4b1b      	ldr	r3, [pc, #108]	; (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	4918      	ldr	r1, [pc, #96]	; (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d009      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049cc:	4b13      	ldr	r3, [pc, #76]	; (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4910      	ldr	r1, [pc, #64]	; (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049e0:	f000 f824 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 80049e4:	4602      	mov	r2, r0
 80049e6:	4b0d      	ldr	r3, [pc, #52]	; (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	091b      	lsrs	r3, r3, #4
 80049ec:	f003 030f 	and.w	r3, r3, #15
 80049f0:	490b      	ldr	r1, [pc, #44]	; (8004a20 <HAL_RCC_ClockConfig+0x1f4>)
 80049f2:	5ccb      	ldrb	r3, [r1, r3]
 80049f4:	f003 031f 	and.w	r3, r3, #31
 80049f8:	fa22 f303 	lsr.w	r3, r2, r3
 80049fc:	4a09      	ldr	r2, [pc, #36]	; (8004a24 <HAL_RCC_ClockConfig+0x1f8>)
 80049fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a00:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <HAL_RCC_ClockConfig+0x1fc>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fd fed7 	bl	80027b8 <HAL_InitTick>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a0e:	7afb      	ldrb	r3, [r7, #11]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40022000 	.word	0x40022000
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	080391e0 	.word	0x080391e0
 8004a24:	20000000 	.word	0x20000000
 8004a28:	20000004 	.word	0x20000004

08004a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b089      	sub	sp, #36	; 0x24
 8004a30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	61fb      	str	r3, [r7, #28]
 8004a36:	2300      	movs	r3, #0
 8004a38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a3a:	4b3e      	ldr	r3, [pc, #248]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a44:	4b3b      	ldr	r3, [pc, #236]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_RCC_GetSysClockFreq+0x34>
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2b0c      	cmp	r3, #12
 8004a58:	d121      	bne.n	8004a9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d11e      	bne.n	8004a9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a60:	4b34      	ldr	r3, [pc, #208]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d107      	bne.n	8004a7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a6c:	4b31      	ldr	r3, [pc, #196]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	61fb      	str	r3, [r7, #28]
 8004a7a:	e005      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a7c:	4b2d      	ldr	r3, [pc, #180]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	091b      	lsrs	r3, r3, #4
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a88:	4a2b      	ldr	r2, [pc, #172]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10d      	bne.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a9c:	e00a      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d102      	bne.n	8004aaa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004aa4:	4b25      	ldr	r3, [pc, #148]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x110>)
 8004aa6:	61bb      	str	r3, [r7, #24]
 8004aa8:	e004      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d101      	bne.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ab0:	4b23      	ldr	r3, [pc, #140]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ab2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	2b0c      	cmp	r3, #12
 8004ab8:	d134      	bne.n	8004b24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004aba:	4b1e      	ldr	r3, [pc, #120]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d003      	beq.n	8004ad2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d003      	beq.n	8004ad8 <HAL_RCC_GetSysClockFreq+0xac>
 8004ad0:	e005      	b.n	8004ade <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ad2:	4b1a      	ldr	r3, [pc, #104]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x110>)
 8004ad4:	617b      	str	r3, [r7, #20]
      break;
 8004ad6:	e005      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ad8:	4b19      	ldr	r3, [pc, #100]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ada:	617b      	str	r3, [r7, #20]
      break;
 8004adc:	e002      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	617b      	str	r3, [r7, #20]
      break;
 8004ae2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ae4:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	3301      	adds	r3, #1
 8004af0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004af2:	4b10      	ldr	r3, [pc, #64]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	0a1b      	lsrs	r3, r3, #8
 8004af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	fb03 f202 	mul.w	r2, r3, r2
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b0a:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	0e5b      	lsrs	r3, r3, #25
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	3301      	adds	r3, #1
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b24:	69bb      	ldr	r3, [r7, #24]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3724      	adds	r7, #36	; 0x24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	40021000 	.word	0x40021000
 8004b38:	080391f8 	.word	0x080391f8
 8004b3c:	00f42400 	.word	0x00f42400
 8004b40:	007a1200 	.word	0x007a1200

08004b44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b48:	4b03      	ldr	r3, [pc, #12]	; (8004b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	20000000 	.word	0x20000000

08004b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b60:	f7ff fff0 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b06      	ldr	r3, [pc, #24]	; (8004b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	0a1b      	lsrs	r3, r3, #8
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4904      	ldr	r1, [pc, #16]	; (8004b84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b72:	5ccb      	ldrb	r3, [r1, r3]
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40021000 	.word	0x40021000
 8004b84:	080391f0 	.word	0x080391f0

08004b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b8c:	f7ff ffda 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 8004b90:	4602      	mov	r2, r0
 8004b92:	4b06      	ldr	r3, [pc, #24]	; (8004bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	0adb      	lsrs	r3, r3, #11
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	4904      	ldr	r1, [pc, #16]	; (8004bb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ba0:	f003 031f 	and.w	r3, r3, #31
 8004ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	080391f0 	.word	0x080391f0

08004bb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004bc0:	4b2a      	ldr	r3, [pc, #168]	; (8004c6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004bcc:	f7ff f9ee 	bl	8003fac <HAL_PWREx_GetVoltageRange>
 8004bd0:	6178      	str	r0, [r7, #20]
 8004bd2:	e014      	b.n	8004bfe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bd4:	4b25      	ldr	r3, [pc, #148]	; (8004c6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd8:	4a24      	ldr	r2, [pc, #144]	; (8004c6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bde:	6593      	str	r3, [r2, #88]	; 0x58
 8004be0:	4b22      	ldr	r3, [pc, #136]	; (8004c6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004bec:	f7ff f9de 	bl	8003fac <HAL_PWREx_GetVoltageRange>
 8004bf0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004bf2:	4b1e      	ldr	r3, [pc, #120]	; (8004c6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf6:	4a1d      	ldr	r2, [pc, #116]	; (8004c6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bfc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c04:	d10b      	bne.n	8004c1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b80      	cmp	r3, #128	; 0x80
 8004c0a:	d919      	bls.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2ba0      	cmp	r3, #160	; 0xa0
 8004c10:	d902      	bls.n	8004c18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c12:	2302      	movs	r3, #2
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	e013      	b.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c18:	2301      	movs	r3, #1
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	e010      	b.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b80      	cmp	r3, #128	; 0x80
 8004c22:	d902      	bls.n	8004c2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c24:	2303      	movs	r3, #3
 8004c26:	613b      	str	r3, [r7, #16]
 8004c28:	e00a      	b.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b80      	cmp	r3, #128	; 0x80
 8004c2e:	d102      	bne.n	8004c36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c30:	2302      	movs	r3, #2
 8004c32:	613b      	str	r3, [r7, #16]
 8004c34:	e004      	b.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b70      	cmp	r3, #112	; 0x70
 8004c3a:	d101      	bne.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c40:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f023 0207 	bic.w	r2, r3, #7
 8004c48:	4909      	ldr	r1, [pc, #36]	; (8004c70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c50:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d001      	beq.n	8004c62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	40022000 	.word	0x40022000

08004c74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c80:	2300      	movs	r3, #0
 8004c82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d041      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c98:	d02a      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004c9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c9e:	d824      	bhi.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ca0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ca4:	d008      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004ca6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004caa:	d81e      	bhi.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004cb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cb4:	d010      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004cb6:	e018      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004cb8:	4b86      	ldr	r3, [pc, #536]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4a85      	ldr	r2, [pc, #532]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cc4:	e015      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	2100      	movs	r1, #0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 facb 	bl	8005268 <RCCEx_PLLSAI1_Config>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cd6:	e00c      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3320      	adds	r3, #32
 8004cdc:	2100      	movs	r1, #0
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fbb6 	bl	8005450 <RCCEx_PLLSAI2_Config>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ce8:	e003      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	74fb      	strb	r3, [r7, #19]
      break;
 8004cee:	e000      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cf2:	7cfb      	ldrb	r3, [r7, #19]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10b      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cf8:	4b76      	ldr	r3, [pc, #472]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d06:	4973      	ldr	r1, [pc, #460]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d0e:	e001      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d10:	7cfb      	ldrb	r3, [r7, #19]
 8004d12:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d041      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d28:	d02a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004d2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d2e:	d824      	bhi.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d34:	d008      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d3a:	d81e      	bhi.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d44:	d010      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d46:	e018      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d48:	4b62      	ldr	r3, [pc, #392]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	4a61      	ldr	r2, [pc, #388]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d52:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d54:	e015      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fa83 	bl	8005268 <RCCEx_PLLSAI1_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d66:	e00c      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3320      	adds	r3, #32
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fb6e 	bl	8005450 <RCCEx_PLLSAI2_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d78:	e003      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	74fb      	strb	r3, [r7, #19]
      break;
 8004d7e:	e000      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004d80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d82:	7cfb      	ldrb	r3, [r7, #19]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10b      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d88:	4b52      	ldr	r3, [pc, #328]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d96:	494f      	ldr	r1, [pc, #316]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d9e:	e001      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da0:	7cfb      	ldrb	r3, [r7, #19]
 8004da2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80a0 	beq.w	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004db2:	2300      	movs	r3, #0
 8004db4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004db6:	4b47      	ldr	r3, [pc, #284]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00d      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dcc:	4b41      	ldr	r3, [pc, #260]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd0:	4a40      	ldr	r2, [pc, #256]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd6:	6593      	str	r3, [r2, #88]	; 0x58
 8004dd8:	4b3e      	ldr	r3, [pc, #248]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de0:	60bb      	str	r3, [r7, #8]
 8004de2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004de4:	2301      	movs	r3, #1
 8004de6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004de8:	4b3b      	ldr	r3, [pc, #236]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a3a      	ldr	r2, [pc, #232]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004df4:	f7fd fd30 	bl	8002858 <HAL_GetTick>
 8004df8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dfa:	e009      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dfc:	f7fd fd2c 	bl	8002858 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d902      	bls.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	74fb      	strb	r3, [r7, #19]
        break;
 8004e0e:	e005      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e10:	4b31      	ldr	r3, [pc, #196]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0ef      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004e1c:	7cfb      	ldrb	r3, [r7, #19]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d15c      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e22:	4b2c      	ldr	r3, [pc, #176]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d01f      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d019      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e40:	4b24      	ldr	r3, [pc, #144]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e4c:	4b21      	ldr	r3, [pc, #132]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e52:	4a20      	ldr	r2, [pc, #128]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e5c:	4b1d      	ldr	r3, [pc, #116]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e62:	4a1c      	ldr	r2, [pc, #112]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e6c:	4a19      	ldr	r2, [pc, #100]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d016      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7e:	f7fd fceb 	bl	8002858 <HAL_GetTick>
 8004e82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e84:	e00b      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e86:	f7fd fce7 	bl	8002858 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d902      	bls.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	74fb      	strb	r3, [r7, #19]
            break;
 8004e9c:	e006      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0ec      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004eac:	7cfb      	ldrb	r3, [r7, #19]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eb2:	4b08      	ldr	r3, [pc, #32]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ec2:	4904      	ldr	r1, [pc, #16]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004eca:	e009      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ecc:	7cfb      	ldrb	r3, [r7, #19]
 8004ece:	74bb      	strb	r3, [r7, #18]
 8004ed0:	e006      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004ed2:	bf00      	nop
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004edc:	7cfb      	ldrb	r3, [r7, #19]
 8004ede:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ee0:	7c7b      	ldrb	r3, [r7, #17]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d105      	bne.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee6:	4b9e      	ldr	r3, [pc, #632]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eea:	4a9d      	ldr	r2, [pc, #628]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ef0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004efe:	4b98      	ldr	r3, [pc, #608]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f04:	f023 0203 	bic.w	r2, r3, #3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0c:	4994      	ldr	r1, [pc, #592]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f20:	4b8f      	ldr	r3, [pc, #572]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f26:	f023 020c 	bic.w	r2, r3, #12
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2e:	498c      	ldr	r1, [pc, #560]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f42:	4b87      	ldr	r3, [pc, #540]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	4983      	ldr	r1, [pc, #524]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f64:	4b7e      	ldr	r3, [pc, #504]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	497b      	ldr	r1, [pc, #492]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0310 	and.w	r3, r3, #16
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f86:	4b76      	ldr	r3, [pc, #472]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f94:	4972      	ldr	r1, [pc, #456]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fa8:	4b6d      	ldr	r3, [pc, #436]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb6:	496a      	ldr	r1, [pc, #424]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fca:	4b65      	ldr	r3, [pc, #404]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd8:	4961      	ldr	r1, [pc, #388]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fec:	4b5c      	ldr	r3, [pc, #368]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ffa:	4959      	ldr	r1, [pc, #356]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800500e:	4b54      	ldr	r3, [pc, #336]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005014:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501c:	4950      	ldr	r1, [pc, #320]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005030:	4b4b      	ldr	r3, [pc, #300]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005036:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503e:	4948      	ldr	r1, [pc, #288]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005040:	4313      	orrs	r3, r2
 8005042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005052:	4b43      	ldr	r3, [pc, #268]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005058:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005060:	493f      	ldr	r1, [pc, #252]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d028      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005074:	4b3a      	ldr	r3, [pc, #232]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005082:	4937      	ldr	r1, [pc, #220]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800508e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005092:	d106      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005094:	4b32      	ldr	r3, [pc, #200]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	4a31      	ldr	r2, [pc, #196]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800509a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800509e:	60d3      	str	r3, [r2, #12]
 80050a0:	e011      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050aa:	d10c      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3304      	adds	r3, #4
 80050b0:	2101      	movs	r1, #1
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 f8d8 	bl	8005268 <RCCEx_PLLSAI1_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80050bc:	7cfb      	ldrb	r3, [r7, #19]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80050c2:	7cfb      	ldrb	r3, [r7, #19]
 80050c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d028      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050d2:	4b23      	ldr	r3, [pc, #140]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e0:	491f      	ldr	r1, [pc, #124]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050f0:	d106      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050f2:	4b1b      	ldr	r3, [pc, #108]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	4a1a      	ldr	r2, [pc, #104]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050fc:	60d3      	str	r3, [r2, #12]
 80050fe:	e011      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005104:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005108:	d10c      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	3304      	adds	r3, #4
 800510e:	2101      	movs	r1, #1
 8005110:	4618      	mov	r0, r3
 8005112:	f000 f8a9 	bl	8005268 <RCCEx_PLLSAI1_Config>
 8005116:	4603      	mov	r3, r0
 8005118:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800511a:	7cfb      	ldrb	r3, [r7, #19]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005120:	7cfb      	ldrb	r3, [r7, #19]
 8005122:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d02b      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005130:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005136:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800513e:	4908      	ldr	r1, [pc, #32]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800514a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800514e:	d109      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005150:	4b03      	ldr	r3, [pc, #12]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4a02      	ldr	r2, [pc, #8]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800515a:	60d3      	str	r3, [r2, #12]
 800515c:	e014      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800515e:	bf00      	nop
 8005160:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005168:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800516c:	d10c      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	3304      	adds	r3, #4
 8005172:	2101      	movs	r1, #1
 8005174:	4618      	mov	r0, r3
 8005176:	f000 f877 	bl	8005268 <RCCEx_PLLSAI1_Config>
 800517a:	4603      	mov	r3, r0
 800517c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800517e:	7cfb      	ldrb	r3, [r7, #19]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005184:	7cfb      	ldrb	r3, [r7, #19]
 8005186:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d02f      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005194:	4b2b      	ldr	r3, [pc, #172]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051a2:	4928      	ldr	r1, [pc, #160]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051b2:	d10d      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3304      	adds	r3, #4
 80051b8:	2102      	movs	r1, #2
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 f854 	bl	8005268 <RCCEx_PLLSAI1_Config>
 80051c0:	4603      	mov	r3, r0
 80051c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051c4:	7cfb      	ldrb	r3, [r7, #19]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d014      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80051ca:	7cfb      	ldrb	r3, [r7, #19]
 80051cc:	74bb      	strb	r3, [r7, #18]
 80051ce:	e011      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051d8:	d10c      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	3320      	adds	r3, #32
 80051de:	2102      	movs	r1, #2
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 f935 	bl	8005450 <RCCEx_PLLSAI2_Config>
 80051e6:	4603      	mov	r3, r0
 80051e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051ea:	7cfb      	ldrb	r3, [r7, #19]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80051f0:	7cfb      	ldrb	r3, [r7, #19]
 80051f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00a      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005200:	4b10      	ldr	r3, [pc, #64]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005206:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800520e:	490d      	ldr	r1, [pc, #52]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005210:	4313      	orrs	r3, r2
 8005212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00b      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005222:	4b08      	ldr	r3, [pc, #32]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005228:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005232:	4904      	ldr	r1, [pc, #16]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800523a:	7cbb      	ldrb	r3, [r7, #18]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40021000 	.word	0x40021000

08005248 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800524c:	4b05      	ldr	r3, [pc, #20]	; (8005264 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a04      	ldr	r2, [pc, #16]	; (8005264 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005252:	f043 0304 	orr.w	r3, r3, #4
 8005256:	6013      	str	r3, [r2, #0]
}
 8005258:	bf00      	nop
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	40021000 	.word	0x40021000

08005268 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005276:	4b75      	ldr	r3, [pc, #468]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d018      	beq.n	80052b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005282:	4b72      	ldr	r3, [pc, #456]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f003 0203 	and.w	r2, r3, #3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	429a      	cmp	r2, r3
 8005290:	d10d      	bne.n	80052ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
       ||
 8005296:	2b00      	cmp	r3, #0
 8005298:	d009      	beq.n	80052ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800529a:	4b6c      	ldr	r3, [pc, #432]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	091b      	lsrs	r3, r3, #4
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
       ||
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d047      	beq.n	800533e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	73fb      	strb	r3, [r7, #15]
 80052b2:	e044      	b.n	800533e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d018      	beq.n	80052ee <RCCEx_PLLSAI1_Config+0x86>
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d825      	bhi.n	800530c <RCCEx_PLLSAI1_Config+0xa4>
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d002      	beq.n	80052ca <RCCEx_PLLSAI1_Config+0x62>
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d009      	beq.n	80052dc <RCCEx_PLLSAI1_Config+0x74>
 80052c8:	e020      	b.n	800530c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052ca:	4b60      	ldr	r3, [pc, #384]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d11d      	bne.n	8005312 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052da:	e01a      	b.n	8005312 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052dc:	4b5b      	ldr	r3, [pc, #364]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d116      	bne.n	8005316 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052ec:	e013      	b.n	8005316 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052ee:	4b57      	ldr	r3, [pc, #348]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10f      	bne.n	800531a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052fa:	4b54      	ldr	r3, [pc, #336]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800530a:	e006      	b.n	800531a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	73fb      	strb	r3, [r7, #15]
      break;
 8005310:	e004      	b.n	800531c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005312:	bf00      	nop
 8005314:	e002      	b.n	800531c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005316:	bf00      	nop
 8005318:	e000      	b.n	800531c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800531a:	bf00      	nop
    }

    if(status == HAL_OK)
 800531c:	7bfb      	ldrb	r3, [r7, #15]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10d      	bne.n	800533e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005322:	4b4a      	ldr	r3, [pc, #296]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6819      	ldr	r1, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	3b01      	subs	r3, #1
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	430b      	orrs	r3, r1
 8005338:	4944      	ldr	r1, [pc, #272]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 800533a:	4313      	orrs	r3, r2
 800533c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800533e:	7bfb      	ldrb	r3, [r7, #15]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d17d      	bne.n	8005440 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005344:	4b41      	ldr	r3, [pc, #260]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a40      	ldr	r2, [pc, #256]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 800534a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800534e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005350:	f7fd fa82 	bl	8002858 <HAL_GetTick>
 8005354:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005356:	e009      	b.n	800536c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005358:	f7fd fa7e 	bl	8002858 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d902      	bls.n	800536c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	73fb      	strb	r3, [r7, #15]
        break;
 800536a:	e005      	b.n	8005378 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800536c:	4b37      	ldr	r3, [pc, #220]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1ef      	bne.n	8005358 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d160      	bne.n	8005440 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d111      	bne.n	80053a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005384:	4b31      	ldr	r3, [pc, #196]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800538c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6892      	ldr	r2, [r2, #8]
 8005394:	0211      	lsls	r1, r2, #8
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	68d2      	ldr	r2, [r2, #12]
 800539a:	0912      	lsrs	r2, r2, #4
 800539c:	0452      	lsls	r2, r2, #17
 800539e:	430a      	orrs	r2, r1
 80053a0:	492a      	ldr	r1, [pc, #168]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	610b      	str	r3, [r1, #16]
 80053a6:	e027      	b.n	80053f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d112      	bne.n	80053d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053ae:	4b27      	ldr	r3, [pc, #156]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80053b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	6892      	ldr	r2, [r2, #8]
 80053be:	0211      	lsls	r1, r2, #8
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6912      	ldr	r2, [r2, #16]
 80053c4:	0852      	lsrs	r2, r2, #1
 80053c6:	3a01      	subs	r2, #1
 80053c8:	0552      	lsls	r2, r2, #21
 80053ca:	430a      	orrs	r2, r1
 80053cc:	491f      	ldr	r1, [pc, #124]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	610b      	str	r3, [r1, #16]
 80053d2:	e011      	b.n	80053f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053d4:	4b1d      	ldr	r3, [pc, #116]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80053dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6892      	ldr	r2, [r2, #8]
 80053e4:	0211      	lsls	r1, r2, #8
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6952      	ldr	r2, [r2, #20]
 80053ea:	0852      	lsrs	r2, r2, #1
 80053ec:	3a01      	subs	r2, #1
 80053ee:	0652      	lsls	r2, r2, #25
 80053f0:	430a      	orrs	r2, r1
 80053f2:	4916      	ldr	r1, [pc, #88]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80053f8:	4b14      	ldr	r3, [pc, #80]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a13      	ldr	r2, [pc, #76]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 80053fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005402:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005404:	f7fd fa28 	bl	8002858 <HAL_GetTick>
 8005408:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800540a:	e009      	b.n	8005420 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800540c:	f7fd fa24 	bl	8002858 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d902      	bls.n	8005420 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	73fb      	strb	r3, [r7, #15]
          break;
 800541e:	e005      	b.n	800542c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005420:	4b0a      	ldr	r3, [pc, #40]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0ef      	beq.n	800540c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800542c:	7bfb      	ldrb	r3, [r7, #15]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d106      	bne.n	8005440 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005432:	4b06      	ldr	r3, [pc, #24]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	4904      	ldr	r1, [pc, #16]	; (800544c <RCCEx_PLLSAI1_Config+0x1e4>)
 800543c:	4313      	orrs	r3, r2
 800543e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005440:	7bfb      	ldrb	r3, [r7, #15]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	40021000 	.word	0x40021000

08005450 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800545e:	4b6a      	ldr	r3, [pc, #424]	; (8005608 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d018      	beq.n	800549c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800546a:	4b67      	ldr	r3, [pc, #412]	; (8005608 <RCCEx_PLLSAI2_Config+0x1b8>)
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f003 0203 	and.w	r2, r3, #3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d10d      	bne.n	8005496 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
       ||
 800547e:	2b00      	cmp	r3, #0
 8005480:	d009      	beq.n	8005496 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005482:	4b61      	ldr	r3, [pc, #388]	; (8005608 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	091b      	lsrs	r3, r3, #4
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	1c5a      	adds	r2, r3, #1
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
       ||
 8005492:	429a      	cmp	r2, r3
 8005494:	d047      	beq.n	8005526 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	73fb      	strb	r3, [r7, #15]
 800549a:	e044      	b.n	8005526 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	d018      	beq.n	80054d6 <RCCEx_PLLSAI2_Config+0x86>
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	d825      	bhi.n	80054f4 <RCCEx_PLLSAI2_Config+0xa4>
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d002      	beq.n	80054b2 <RCCEx_PLLSAI2_Config+0x62>
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d009      	beq.n	80054c4 <RCCEx_PLLSAI2_Config+0x74>
 80054b0:	e020      	b.n	80054f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054b2:	4b55      	ldr	r3, [pc, #340]	; (8005608 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d11d      	bne.n	80054fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054c2:	e01a      	b.n	80054fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054c4:	4b50      	ldr	r3, [pc, #320]	; (8005608 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d116      	bne.n	80054fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054d4:	e013      	b.n	80054fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054d6:	4b4c      	ldr	r3, [pc, #304]	; (8005608 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10f      	bne.n	8005502 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054e2:	4b49      	ldr	r3, [pc, #292]	; (8005608 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d109      	bne.n	8005502 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054f2:	e006      	b.n	8005502 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	73fb      	strb	r3, [r7, #15]
      break;
 80054f8:	e004      	b.n	8005504 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054fa:	bf00      	nop
 80054fc:	e002      	b.n	8005504 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054fe:	bf00      	nop
 8005500:	e000      	b.n	8005504 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005502:	bf00      	nop
    }

    if(status == HAL_OK)
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10d      	bne.n	8005526 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800550a:	4b3f      	ldr	r3, [pc, #252]	; (8005608 <RCCEx_PLLSAI2_Config+0x1b8>)
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6819      	ldr	r1, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	3b01      	subs	r3, #1
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	430b      	orrs	r3, r1
 8005520:	4939      	ldr	r1, [pc, #228]	; (8005608 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005522:	4313      	orrs	r3, r2
 8005524:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005526:	7bfb      	ldrb	r3, [r7, #15]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d167      	bne.n	80055fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800552c:	4b36      	ldr	r3, [pc, #216]	; (8005608 <RCCEx_PLLSAI2_Config+0x1b8>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a35      	ldr	r2, [pc, #212]	; (8005608 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005538:	f7fd f98e 	bl	8002858 <HAL_GetTick>
 800553c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800553e:	e009      	b.n	8005554 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005540:	f7fd f98a 	bl	8002858 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d902      	bls.n	8005554 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	73fb      	strb	r3, [r7, #15]
        break;
 8005552:	e005      	b.n	8005560 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005554:	4b2c      	ldr	r3, [pc, #176]	; (8005608 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1ef      	bne.n	8005540 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d14a      	bne.n	80055fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d111      	bne.n	8005590 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800556c:	4b26      	ldr	r3, [pc, #152]	; (8005608 <RCCEx_PLLSAI2_Config+0x1b8>)
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6892      	ldr	r2, [r2, #8]
 800557c:	0211      	lsls	r1, r2, #8
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	68d2      	ldr	r2, [r2, #12]
 8005582:	0912      	lsrs	r2, r2, #4
 8005584:	0452      	lsls	r2, r2, #17
 8005586:	430a      	orrs	r2, r1
 8005588:	491f      	ldr	r1, [pc, #124]	; (8005608 <RCCEx_PLLSAI2_Config+0x1b8>)
 800558a:	4313      	orrs	r3, r2
 800558c:	614b      	str	r3, [r1, #20]
 800558e:	e011      	b.n	80055b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005590:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005598:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6892      	ldr	r2, [r2, #8]
 80055a0:	0211      	lsls	r1, r2, #8
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6912      	ldr	r2, [r2, #16]
 80055a6:	0852      	lsrs	r2, r2, #1
 80055a8:	3a01      	subs	r2, #1
 80055aa:	0652      	lsls	r2, r2, #25
 80055ac:	430a      	orrs	r2, r1
 80055ae:	4916      	ldr	r1, [pc, #88]	; (8005608 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80055b4:	4b14      	ldr	r3, [pc, #80]	; (8005608 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a13      	ldr	r2, [pc, #76]	; (8005608 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c0:	f7fd f94a 	bl	8002858 <HAL_GetTick>
 80055c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055c6:	e009      	b.n	80055dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055c8:	f7fd f946 	bl	8002858 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d902      	bls.n	80055dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	73fb      	strb	r3, [r7, #15]
          break;
 80055da:	e005      	b.n	80055e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055dc:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0ef      	beq.n	80055c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80055ee:	4b06      	ldr	r3, [pc, #24]	; (8005608 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055f0:	695a      	ldr	r2, [r3, #20]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	4904      	ldr	r1, [pc, #16]	; (8005608 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40021000 	.word	0x40021000

0800560c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d06c      	beq.n	80056f8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d106      	bne.n	8005638 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7fc fcf2 	bl	800201c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	22ca      	movs	r2, #202	; 0xca
 8005646:	625a      	str	r2, [r3, #36]	; 0x24
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2253      	movs	r2, #83	; 0x53
 800564e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f9c2 	bl	80059da <RTC_EnterInitMode>
 8005656:	4603      	mov	r3, r0
 8005658:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800565a:	7bfb      	ldrb	r3, [r7, #15]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d14b      	bne.n	80056f8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	6812      	ldr	r2, [r2, #0]
 800566a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800566e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005672:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6899      	ldr	r1, [r3, #8]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	431a      	orrs	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	68d2      	ldr	r2, [r2, #12]
 800569a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6919      	ldr	r1, [r3, #16]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	041a      	lsls	r2, r3, #16
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f9c5 	bl	8005a40 <RTC_ExitInitMode>
 80056b6:	4603      	mov	r3, r0
 80056b8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d11b      	bne.n	80056f8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0203 	bic.w	r2, r2, #3
 80056ce:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	69da      	ldr	r2, [r3, #28]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	22ff      	movs	r2, #255	; 0xff
 80056ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005702:	b590      	push	{r4, r7, lr}
 8005704:	b087      	sub	sp, #28
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_RTC_SetTime+0x1a>
 8005718:	2302      	movs	r3, #2
 800571a:	e08b      	b.n	8005834 <HAL_RTC_SetTime+0x132>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	22ca      	movs	r2, #202	; 0xca
 8005732:	625a      	str	r2, [r3, #36]	; 0x24
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2253      	movs	r2, #83	; 0x53
 800573a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 f94c 	bl	80059da <RTC_EnterInitMode>
 8005742:	4603      	mov	r3, r0
 8005744:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005746:	7cfb      	ldrb	r3, [r7, #19]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d163      	bne.n	8005814 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d126      	bne.n	80057a0 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575c:	2b00      	cmp	r3, #0
 800575e:	d102      	bne.n	8005766 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2200      	movs	r2, #0
 8005764:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f000 f9a6 	bl	8005abc <RTC_ByteToBcd2>
 8005770:	4603      	mov	r3, r0
 8005772:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	785b      	ldrb	r3, [r3, #1]
 8005778:	4618      	mov	r0, r3
 800577a:	f000 f99f 	bl	8005abc <RTC_ByteToBcd2>
 800577e:	4603      	mov	r3, r0
 8005780:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005782:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	789b      	ldrb	r3, [r3, #2]
 8005788:	4618      	mov	r0, r3
 800578a:	f000 f997 	bl	8005abc <RTC_ByteToBcd2>
 800578e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005790:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	78db      	ldrb	r3, [r3, #3]
 8005798:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800579a:	4313      	orrs	r3, r2
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	e018      	b.n	80057d2 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d102      	bne.n	80057b4 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2200      	movs	r2, #0
 80057b2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	785b      	ldrb	r3, [r3, #1]
 80057be:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80057c0:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80057c6:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	78db      	ldrb	r3, [r3, #3]
 80057cc:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80057dc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80057e0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057f0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6899      	ldr	r1, [r3, #8]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	68da      	ldr	r2, [r3, #12]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	431a      	orrs	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 f918 	bl	8005a40 <RTC_ExitInitMode>
 8005810:	4603      	mov	r3, r0
 8005812:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	22ff      	movs	r2, #255	; 0xff
 800581a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800581c:	7cfb      	ldrb	r3, [r7, #19]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d103      	bne.n	800582a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005832:	7cfb      	ldrb	r3, [r7, #19]
}
 8005834:	4618      	mov	r0, r3
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	bd90      	pop	{r4, r7, pc}

0800583c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800586a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800586e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	0c1b      	lsrs	r3, r3, #16
 8005874:	b2db      	uxtb	r3, r3
 8005876:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800587a:	b2da      	uxtb	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	0a1b      	lsrs	r3, r3, #8
 8005884:	b2db      	uxtb	r3, r3
 8005886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800588a:	b2da      	uxtb	r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	b2db      	uxtb	r3, r3
 8005894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005898:	b2da      	uxtb	r2, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	0d9b      	lsrs	r3, r3, #22
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d11a      	bne.n	80058ea <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 f91f 	bl	8005afc <RTC_Bcd2ToByte>
 80058be:	4603      	mov	r3, r0
 80058c0:	461a      	mov	r2, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	785b      	ldrb	r3, [r3, #1]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 f916 	bl	8005afc <RTC_Bcd2ToByte>
 80058d0:	4603      	mov	r3, r0
 80058d2:	461a      	mov	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	789b      	ldrb	r3, [r3, #2]
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 f90d 	bl	8005afc <RTC_Bcd2ToByte>
 80058e2:	4603      	mov	r3, r0
 80058e4:	461a      	mov	r2, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800590a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800590e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	0c1b      	lsrs	r3, r3, #16
 8005914:	b2da      	uxtb	r2, r3
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	0a1b      	lsrs	r3, r3, #8
 800591e:	b2db      	uxtb	r3, r3
 8005920:	f003 031f 	and.w	r3, r3, #31
 8005924:	b2da      	uxtb	r2, r3
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	b2db      	uxtb	r3, r3
 800592e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005932:	b2da      	uxtb	r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	0b5b      	lsrs	r3, r3, #13
 800593c:	b2db      	uxtb	r3, r3
 800593e:	f003 0307 	and.w	r3, r3, #7
 8005942:	b2da      	uxtb	r2, r3
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d11a      	bne.n	8005984 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	78db      	ldrb	r3, [r3, #3]
 8005952:	4618      	mov	r0, r3
 8005954:	f000 f8d2 	bl	8005afc <RTC_Bcd2ToByte>
 8005958:	4603      	mov	r3, r0
 800595a:	461a      	mov	r2, r3
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	785b      	ldrb	r3, [r3, #1]
 8005964:	4618      	mov	r0, r3
 8005966:	f000 f8c9 	bl	8005afc <RTC_Bcd2ToByte>
 800596a:	4603      	mov	r3, r0
 800596c:	461a      	mov	r2, r3
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	789b      	ldrb	r3, [r3, #2]
 8005976:	4618      	mov	r0, r3
 8005978:	f000 f8c0 	bl	8005afc <RTC_Bcd2ToByte>
 800597c:	4603      	mov	r3, r0
 800597e:	461a      	mov	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059a4:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80059a6:	f7fc ff57 	bl	8002858 <HAL_GetTick>
 80059aa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80059ac:	e009      	b.n	80059c2 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80059ae:	f7fc ff53 	bl	8002858 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059bc:	d901      	bls.n	80059c2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e007      	b.n	80059d2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 0320 	and.w	r3, r3, #32
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0ee      	beq.n	80059ae <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d120      	bne.n	8005a36 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059fc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80059fe:	f7fc ff2b 	bl	8002858 <HAL_GetTick>
 8005a02:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005a04:	e00d      	b.n	8005a22 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005a06:	f7fc ff27 	bl	8002858 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a14:	d905      	bls.n	8005a22 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d102      	bne.n	8005a36 <RTC_EnterInitMode+0x5c>
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	d1e7      	bne.n	8005a06 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005a4c:	4b1a      	ldr	r3, [pc, #104]	; (8005ab8 <RTC_ExitInitMode+0x78>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	4a19      	ldr	r2, [pc, #100]	; (8005ab8 <RTC_ExitInitMode+0x78>)
 8005a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a56:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005a58:	4b17      	ldr	r3, [pc, #92]	; (8005ab8 <RTC_ExitInitMode+0x78>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10c      	bne.n	8005a7e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7ff ff92 	bl	800598e <HAL_RTC_WaitForSynchro>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01e      	beq.n	8005aae <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2203      	movs	r2, #3
 8005a74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	73fb      	strb	r3, [r7, #15]
 8005a7c:	e017      	b.n	8005aae <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005a7e:	4b0e      	ldr	r3, [pc, #56]	; (8005ab8 <RTC_ExitInitMode+0x78>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	4a0d      	ldr	r2, [pc, #52]	; (8005ab8 <RTC_ExitInitMode+0x78>)
 8005a84:	f023 0320 	bic.w	r3, r3, #32
 8005a88:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7ff ff7f 	bl	800598e <HAL_RTC_WaitForSynchro>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d005      	beq.n	8005aa2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2203      	movs	r2, #3
 8005a9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005aa2:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <RTC_ExitInitMode+0x78>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	4a04      	ldr	r2, [pc, #16]	; (8005ab8 <RTC_ExitInitMode+0x78>)
 8005aa8:	f043 0320 	orr.w	r3, r3, #32
 8005aac:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	40002800 	.word	0x40002800

08005abc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005ace:	e005      	b.n	8005adc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005ad6:	7afb      	ldrb	r3, [r7, #11]
 8005ad8:	3b0a      	subs	r3, #10
 8005ada:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005adc:	7afb      	ldrb	r3, [r7, #11]
 8005ade:	2b09      	cmp	r3, #9
 8005ae0:	d8f6      	bhi.n	8005ad0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	7afb      	ldrb	r3, [r7, #11]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	b2db      	uxtb	r3, r3
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	091b      	lsrs	r3, r3, #4
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	0092      	lsls	r2, r2, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	f003 030f 	and.w	r3, r3, #15
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
 8005b20:	4413      	add	r3, r2
 8005b22:	b2db      	uxtb	r3, r3
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d101      	bne.n	8005b4a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005b46:	2302      	movs	r3, #2
 8005b48:	e07f      	b.n	8005c4a <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2202      	movs	r2, #2
 8005b56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	22ca      	movs	r2, #202	; 0xca
 8005b60:	625a      	str	r2, [r3, #36]	; 0x24
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2253      	movs	r2, #83	; 0x53
 8005b68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b78:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005b8a:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d120      	bne.n	8005bdc <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8005b9a:	f7fc fe5d 	bl	8002858 <HAL_GetTick>
 8005b9e:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005ba0:	e015      	b.n	8005bce <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ba2:	f7fc fe59 	bl	8002858 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bb0:	d90d      	bls.n	8005bce <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	22ff      	movs	r2, #255	; 0xff
 8005bb8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2203      	movs	r2, #3
 8005bbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e03d      	b.n	8005c4a <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0e2      	beq.n	8005ba2 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f023 0107 	bic.w	r1, r3, #7
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005bf8:	4b16      	ldr	r3, [pc, #88]	; (8005c54 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a15      	ldr	r2, [pc, #84]	; (8005c54 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005bfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c02:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005c04:	4b13      	ldr	r3, [pc, #76]	; (8005c54 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	4a12      	ldr	r2, [pc, #72]	; (8005c54 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c0e:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c1e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689a      	ldr	r2, [r3, #8]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c2e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	22ff      	movs	r2, #255	; 0xff
 8005c36:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	40010400 	.word	0x40010400

08005c58 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005c60:	4b0f      	ldr	r3, [pc, #60]	; (8005ca0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8005c62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c66:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00b      	beq.n	8005c8e <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005c86:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f80b 	bl	8005ca4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8005c96:	bf00      	nop
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	40010400 	.word	0x40010400

08005ca4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e095      	b.n	8005df6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d108      	bne.n	8005ce4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cda:	d009      	beq.n	8005cf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	61da      	str	r2, [r3, #28]
 8005ce2:	e005      	b.n	8005cf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d106      	bne.n	8005d10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7fc f9fe 	bl	800210c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d30:	d902      	bls.n	8005d38 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d32:	2300      	movs	r3, #0
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	e002      	b.n	8005d3e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d3c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005d46:	d007      	beq.n	8005d58 <HAL_SPI_Init+0xa0>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d50:	d002      	beq.n	8005d58 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d90:	431a      	orrs	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9a:	ea42 0103 	orr.w	r1, r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	0c1b      	lsrs	r3, r3, #16
 8005db4:	f003 0204 	and.w	r2, r3, #4
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc6:	f003 0308 	and.w	r3, r3, #8
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005dd4:	ea42 0103 	orr.w	r1, r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b088      	sub	sp, #32
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	603b      	str	r3, [r7, #0]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d101      	bne.n	8005e20 <HAL_SPI_Transmit+0x22>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	e158      	b.n	80060d2 <HAL_SPI_Transmit+0x2d4>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e28:	f7fc fd16 	bl	8002858 <HAL_GetTick>
 8005e2c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e2e:	88fb      	ldrh	r3, [r7, #6]
 8005e30:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d002      	beq.n	8005e44 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e3e:	2302      	movs	r3, #2
 8005e40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e42:	e13d      	b.n	80060c0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <HAL_SPI_Transmit+0x52>
 8005e4a:	88fb      	ldrh	r3, [r7, #6]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d102      	bne.n	8005e56 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e54:	e134      	b.n	80060c0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2203      	movs	r2, #3
 8005e5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	88fa      	ldrh	r2, [r7, #6]
 8005e6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	88fa      	ldrh	r2, [r7, #6]
 8005e74:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea0:	d10f      	bne.n	8005ec2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ec0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	d007      	beq.n	8005ee0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ede:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ee8:	d94b      	bls.n	8005f82 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d002      	beq.n	8005ef8 <HAL_SPI_Transmit+0xfa>
 8005ef2:	8afb      	ldrh	r3, [r7, #22]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d13e      	bne.n	8005f76 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efc:	881a      	ldrh	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f08:	1c9a      	adds	r2, r3, #2
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f1c:	e02b      	b.n	8005f76 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d112      	bne.n	8005f52 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f30:	881a      	ldrh	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3c:	1c9a      	adds	r2, r3, #2
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f50:	e011      	b.n	8005f76 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f52:	f7fc fc81 	bl	8002858 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d803      	bhi.n	8005f6a <HAL_SPI_Transmit+0x16c>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f68:	d102      	bne.n	8005f70 <HAL_SPI_Transmit+0x172>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d102      	bne.n	8005f76 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f74:	e0a4      	b.n	80060c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1ce      	bne.n	8005f1e <HAL_SPI_Transmit+0x120>
 8005f80:	e07c      	b.n	800607c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d002      	beq.n	8005f90 <HAL_SPI_Transmit+0x192>
 8005f8a:	8afb      	ldrh	r3, [r7, #22]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d170      	bne.n	8006072 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d912      	bls.n	8005fc0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	881a      	ldrh	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	1c9a      	adds	r2, r3, #2
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	3b02      	subs	r3, #2
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fbe:	e058      	b.n	8006072 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	330c      	adds	r3, #12
 8005fca:	7812      	ldrb	r2, [r2, #0]
 8005fcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005fe6:	e044      	b.n	8006072 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d12b      	bne.n	800604e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d912      	bls.n	8006026 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	881a      	ldrh	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006010:	1c9a      	adds	r2, r3, #2
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800601a:	b29b      	uxth	r3, r3
 800601c:	3b02      	subs	r3, #2
 800601e:	b29a      	uxth	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006024:	e025      	b.n	8006072 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	330c      	adds	r3, #12
 8006030:	7812      	ldrb	r2, [r2, #0]
 8006032:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006042:	b29b      	uxth	r3, r3
 8006044:	3b01      	subs	r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800604c:	e011      	b.n	8006072 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800604e:	f7fc fc03 	bl	8002858 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d803      	bhi.n	8006066 <HAL_SPI_Transmit+0x268>
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006064:	d102      	bne.n	800606c <HAL_SPI_Transmit+0x26e>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d102      	bne.n	8006072 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006070:	e026      	b.n	80060c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006076:	b29b      	uxth	r3, r3
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1b5      	bne.n	8005fe8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	6839      	ldr	r1, [r7, #0]
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 fad3 	bl	800662c <SPI_EndRxTxTransaction>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2220      	movs	r2, #32
 8006090:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10a      	bne.n	80060b0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800609a:	2300      	movs	r3, #0
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	613b      	str	r3, [r7, #16]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	613b      	str	r3, [r7, #16]
 80060ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	77fb      	strb	r3, [r7, #31]
 80060bc:	e000      	b.n	80060c0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80060be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80060d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3720      	adds	r7, #32
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	4613      	mov	r3, r2
 80060e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <HAL_SPI_Transmit_DMA+0x20>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e0d8      	b.n	80062ae <HAL_SPI_Transmit_DMA+0x1d2>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b01      	cmp	r3, #1
 800610e:	d002      	beq.n	8006116 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006110:	2302      	movs	r3, #2
 8006112:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006114:	e0c6      	b.n	80062a4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <HAL_SPI_Transmit_DMA+0x46>
 800611c:	88fb      	ldrh	r3, [r7, #6]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d102      	bne.n	8006128 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006126:	e0bd      	b.n	80062a4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2203      	movs	r2, #3
 800612c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	88fa      	ldrh	r2, [r7, #6]
 8006140:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	88fa      	ldrh	r2, [r7, #6]
 8006146:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006172:	d10f      	bne.n	8006194 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006182:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006192:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006198:	4a47      	ldr	r2, [pc, #284]	; (80062b8 <HAL_SPI_Transmit_DMA+0x1dc>)
 800619a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a0:	4a46      	ldr	r2, [pc, #280]	; (80062bc <HAL_SPI_Transmit_DMA+0x1e0>)
 80061a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a8:	4a45      	ldr	r2, [pc, #276]	; (80062c0 <HAL_SPI_Transmit_DMA+0x1e4>)
 80061aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b0:	2200      	movs	r2, #0
 80061b2:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061c2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061cc:	d82d      	bhi.n	800622a <HAL_SPI_Transmit_DMA+0x14e>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d8:	d127      	bne.n	800622a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061de:	b29b      	uxth	r3, r3
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10f      	bne.n	8006208 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061f6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	085b      	lsrs	r3, r3, #1
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006206:	e010      	b.n	800622a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006216:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800621c:	b29b      	uxth	r3, r3
 800621e:	085b      	lsrs	r3, r3, #1
 8006220:	b29b      	uxth	r3, r3
 8006222:	3301      	adds	r3, #1
 8006224:	b29a      	uxth	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006232:	4619      	mov	r1, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	330c      	adds	r3, #12
 800623a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006240:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006242:	f7fc fcdf 	bl	8002c04 <HAL_DMA_Start_IT>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00c      	beq.n	8006266 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006250:	f043 0210 	orr.w	r2, r3, #16
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006264:	e01e      	b.n	80062a4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006270:	2b40      	cmp	r3, #64	; 0x40
 8006272:	d007      	beq.n	8006284 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006282:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0220 	orr.w	r2, r2, #32
 8006292:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0202 	orr.w	r2, r2, #2
 80062a2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80062ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	08006393 	.word	0x08006393
 80062bc:	080062ed 	.word	0x080062ed
 80062c0:	080063af 	.word	0x080063af

080062c4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062fa:	f7fc faad 	bl	8002858 <HAL_GetTick>
 80062fe:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b20      	cmp	r3, #32
 800630c:	d03b      	beq.n	8006386 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0220 	bic.w	r2, r2, #32
 800631c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0202 	bic.w	r2, r2, #2
 800632c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	2164      	movs	r1, #100	; 0x64
 8006332:	6978      	ldr	r0, [r7, #20]
 8006334:	f000 f97a 	bl	800662c <SPI_EndRxTxTransaction>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d005      	beq.n	800634a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006342:	f043 0220 	orr.w	r2, r3, #32
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10a      	bne.n	8006368 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006352:	2300      	movs	r3, #0
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	60fb      	str	r3, [r7, #12]
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	2200      	movs	r2, #0
 800636c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800637e:	6978      	ldr	r0, [r7, #20]
 8006380:	f7ff ffaa 	bl	80062d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006384:	e002      	b.n	800638c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006386:	6978      	ldr	r0, [r7, #20]
 8006388:	f7fb fcd4 	bl	8001d34 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f7ff ff8f 	bl	80062c4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063a6:	bf00      	nop
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 0203 	bic.w	r2, r2, #3
 80063ca:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d0:	f043 0210 	orr.w	r2, r3, #16
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f7ff ff79 	bl	80062d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063e6:	bf00      	nop
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
	...

080063f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b088      	sub	sp, #32
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	603b      	str	r3, [r7, #0]
 80063fc:	4613      	mov	r3, r2
 80063fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006400:	f7fc fa2a 	bl	8002858 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006408:	1a9b      	subs	r3, r3, r2
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	4413      	add	r3, r2
 800640e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006410:	f7fc fa22 	bl	8002858 <HAL_GetTick>
 8006414:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006416:	4b39      	ldr	r3, [pc, #228]	; (80064fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	015b      	lsls	r3, r3, #5
 800641c:	0d1b      	lsrs	r3, r3, #20
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	fb02 f303 	mul.w	r3, r2, r3
 8006424:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006426:	e054      	b.n	80064d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800642e:	d050      	beq.n	80064d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006430:	f7fc fa12 	bl	8002858 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	69fa      	ldr	r2, [r7, #28]
 800643c:	429a      	cmp	r2, r3
 800643e:	d902      	bls.n	8006446 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d13d      	bne.n	80064c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006454:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800645e:	d111      	bne.n	8006484 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006468:	d004      	beq.n	8006474 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006472:	d107      	bne.n	8006484 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006482:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800648c:	d10f      	bne.n	80064ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e017      	b.n	80064f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	3b01      	subs	r3, #1
 80064d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4013      	ands	r3, r2
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	429a      	cmp	r2, r3
 80064e0:	bf0c      	ite	eq
 80064e2:	2301      	moveq	r3, #1
 80064e4:	2300      	movne	r3, #0
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	461a      	mov	r2, r3
 80064ea:	79fb      	ldrb	r3, [r7, #7]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d19b      	bne.n	8006428 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3720      	adds	r7, #32
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20000000 	.word	0x20000000

08006500 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b08a      	sub	sp, #40	; 0x28
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800650e:	2300      	movs	r3, #0
 8006510:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006512:	f7fc f9a1 	bl	8002858 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651a:	1a9b      	subs	r3, r3, r2
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	4413      	add	r3, r2
 8006520:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006522:	f7fc f999 	bl	8002858 <HAL_GetTick>
 8006526:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	330c      	adds	r3, #12
 800652e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006530:	4b3d      	ldr	r3, [pc, #244]	; (8006628 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	4613      	mov	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	00da      	lsls	r2, r3, #3
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	0d1b      	lsrs	r3, r3, #20
 8006540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006542:	fb02 f303 	mul.w	r3, r2, r3
 8006546:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006548:	e060      	b.n	800660c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006550:	d107      	bne.n	8006562 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d104      	bne.n	8006562 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	b2db      	uxtb	r3, r3
 800655e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006560:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006568:	d050      	beq.n	800660c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800656a:	f7fc f975 	bl	8002858 <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006576:	429a      	cmp	r2, r3
 8006578:	d902      	bls.n	8006580 <SPI_WaitFifoStateUntilTimeout+0x80>
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	2b00      	cmp	r3, #0
 800657e:	d13d      	bne.n	80065fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800658e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006598:	d111      	bne.n	80065be <SPI_WaitFifoStateUntilTimeout+0xbe>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065a2:	d004      	beq.n	80065ae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ac:	d107      	bne.n	80065be <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065c6:	d10f      	bne.n	80065e8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e010      	b.n	800661e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	3b01      	subs	r3, #1
 800660a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689a      	ldr	r2, [r3, #8]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	4013      	ands	r3, r2
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	429a      	cmp	r2, r3
 800661a:	d196      	bne.n	800654a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3728      	adds	r7, #40	; 0x28
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	20000000 	.word	0x20000000

0800662c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af02      	add	r7, sp, #8
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2200      	movs	r2, #0
 8006640:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f7ff ff5b 	bl	8006500 <SPI_WaitFifoStateUntilTimeout>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d007      	beq.n	8006660 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006654:	f043 0220 	orr.w	r2, r3, #32
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e027      	b.n	80066b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2200      	movs	r2, #0
 8006668:	2180      	movs	r1, #128	; 0x80
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f7ff fec0 	bl	80063f0 <SPI_WaitFlagStateUntilTimeout>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d007      	beq.n	8006686 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800667a:	f043 0220 	orr.w	r2, r3, #32
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e014      	b.n	80066b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2200      	movs	r2, #0
 800668e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f7ff ff34 	bl	8006500 <SPI_WaitFifoStateUntilTimeout>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d007      	beq.n	80066ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a2:	f043 0220 	orr.w	r2, r3, #32
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e000      	b.n	80066b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d101      	bne.n	80066cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e097      	b.n	80067fc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d106      	bne.n	80066e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f7fb ff3b 	bl	800255c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2202      	movs	r2, #2
 80066ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6812      	ldr	r2, [r2, #0]
 80066f8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80066fc:	f023 0307 	bic.w	r3, r3, #7
 8006700:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	3304      	adds	r3, #4
 800670a:	4619      	mov	r1, r3
 800670c:	4610      	mov	r0, r2
 800670e:	f000 f907 	bl	8006920 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	4313      	orrs	r3, r2
 8006732:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800673a:	f023 0303 	bic.w	r3, r3, #3
 800673e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	689a      	ldr	r2, [r3, #8]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	021b      	lsls	r3, r3, #8
 800674a:	4313      	orrs	r3, r2
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006758:	f023 030c 	bic.w	r3, r3, #12
 800675c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006764:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006768:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	68da      	ldr	r2, [r3, #12]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	021b      	lsls	r3, r3, #8
 8006774:	4313      	orrs	r3, r2
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	4313      	orrs	r3, r2
 800677a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	011a      	lsls	r2, r3, #4
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	031b      	lsls	r3, r3, #12
 8006788:	4313      	orrs	r3, r2
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	4313      	orrs	r3, r2
 800678e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006796:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800679e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	011b      	lsls	r3, r3, #4
 80067aa:	4313      	orrs	r3, r2
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3718      	adds	r7, #24
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006814:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800681c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006824:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800682c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d110      	bne.n	8006856 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006834:	7bfb      	ldrb	r3, [r7, #15]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d102      	bne.n	8006840 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800683a:	7b7b      	ldrb	r3, [r7, #13]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d001      	beq.n	8006844 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e069      	b.n	8006918 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006854:	e031      	b.n	80068ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b04      	cmp	r3, #4
 800685a:	d110      	bne.n	800687e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800685c:	7bbb      	ldrb	r3, [r7, #14]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d102      	bne.n	8006868 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006862:	7b3b      	ldrb	r3, [r7, #12]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d001      	beq.n	800686c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e055      	b.n	8006918 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800687c:	e01d      	b.n	80068ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800687e:	7bfb      	ldrb	r3, [r7, #15]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d108      	bne.n	8006896 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006884:	7bbb      	ldrb	r3, [r7, #14]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d105      	bne.n	8006896 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800688a:	7b7b      	ldrb	r3, [r7, #13]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d102      	bne.n	8006896 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006890:	7b3b      	ldrb	r3, [r7, #12]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d001      	beq.n	800689a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e03e      	b.n	8006918 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2202      	movs	r2, #2
 800689e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2202      	movs	r2, #2
 80068a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2202      	movs	r2, #2
 80068ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2202      	movs	r2, #2
 80068b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <HAL_TIM_Encoder_Start+0xc4>
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d008      	beq.n	80068d8 <HAL_TIM_Encoder_Start+0xd4>
 80068c6:	e00f      	b.n	80068e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2201      	movs	r2, #1
 80068ce:	2100      	movs	r1, #0
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 f8bf 	bl	8006a54 <TIM_CCxChannelCmd>
      break;
 80068d6:	e016      	b.n	8006906 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2201      	movs	r2, #1
 80068de:	2104      	movs	r1, #4
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 f8b7 	bl	8006a54 <TIM_CCxChannelCmd>
      break;
 80068e6:	e00e      	b.n	8006906 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2201      	movs	r2, #1
 80068ee:	2100      	movs	r1, #0
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 f8af 	bl	8006a54 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2201      	movs	r2, #1
 80068fc:	2104      	movs	r1, #4
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 f8a8 	bl	8006a54 <TIM_CCxChannelCmd>
      break;
 8006904:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f042 0201 	orr.w	r2, r2, #1
 8006914:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a40      	ldr	r2, [pc, #256]	; (8006a34 <TIM_Base_SetConfig+0x114>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d013      	beq.n	8006960 <TIM_Base_SetConfig+0x40>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800693e:	d00f      	beq.n	8006960 <TIM_Base_SetConfig+0x40>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a3d      	ldr	r2, [pc, #244]	; (8006a38 <TIM_Base_SetConfig+0x118>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d00b      	beq.n	8006960 <TIM_Base_SetConfig+0x40>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a3c      	ldr	r2, [pc, #240]	; (8006a3c <TIM_Base_SetConfig+0x11c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d007      	beq.n	8006960 <TIM_Base_SetConfig+0x40>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a3b      	ldr	r2, [pc, #236]	; (8006a40 <TIM_Base_SetConfig+0x120>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d003      	beq.n	8006960 <TIM_Base_SetConfig+0x40>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a3a      	ldr	r2, [pc, #232]	; (8006a44 <TIM_Base_SetConfig+0x124>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d108      	bne.n	8006972 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a2f      	ldr	r2, [pc, #188]	; (8006a34 <TIM_Base_SetConfig+0x114>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d01f      	beq.n	80069ba <TIM_Base_SetConfig+0x9a>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006980:	d01b      	beq.n	80069ba <TIM_Base_SetConfig+0x9a>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a2c      	ldr	r2, [pc, #176]	; (8006a38 <TIM_Base_SetConfig+0x118>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d017      	beq.n	80069ba <TIM_Base_SetConfig+0x9a>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a2b      	ldr	r2, [pc, #172]	; (8006a3c <TIM_Base_SetConfig+0x11c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d013      	beq.n	80069ba <TIM_Base_SetConfig+0x9a>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a2a      	ldr	r2, [pc, #168]	; (8006a40 <TIM_Base_SetConfig+0x120>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d00f      	beq.n	80069ba <TIM_Base_SetConfig+0x9a>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a29      	ldr	r2, [pc, #164]	; (8006a44 <TIM_Base_SetConfig+0x124>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d00b      	beq.n	80069ba <TIM_Base_SetConfig+0x9a>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a28      	ldr	r2, [pc, #160]	; (8006a48 <TIM_Base_SetConfig+0x128>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d007      	beq.n	80069ba <TIM_Base_SetConfig+0x9a>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a27      	ldr	r2, [pc, #156]	; (8006a4c <TIM_Base_SetConfig+0x12c>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d003      	beq.n	80069ba <TIM_Base_SetConfig+0x9a>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a26      	ldr	r2, [pc, #152]	; (8006a50 <TIM_Base_SetConfig+0x130>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d108      	bne.n	80069cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a10      	ldr	r2, [pc, #64]	; (8006a34 <TIM_Base_SetConfig+0x114>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d00f      	beq.n	8006a18 <TIM_Base_SetConfig+0xf8>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a12      	ldr	r2, [pc, #72]	; (8006a44 <TIM_Base_SetConfig+0x124>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d00b      	beq.n	8006a18 <TIM_Base_SetConfig+0xf8>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a11      	ldr	r2, [pc, #68]	; (8006a48 <TIM_Base_SetConfig+0x128>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d007      	beq.n	8006a18 <TIM_Base_SetConfig+0xf8>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a10      	ldr	r2, [pc, #64]	; (8006a4c <TIM_Base_SetConfig+0x12c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d003      	beq.n	8006a18 <TIM_Base_SetConfig+0xf8>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a0f      	ldr	r2, [pc, #60]	; (8006a50 <TIM_Base_SetConfig+0x130>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d103      	bne.n	8006a20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	691a      	ldr	r2, [r3, #16]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	615a      	str	r2, [r3, #20]
}
 8006a26:	bf00      	nop
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	40012c00 	.word	0x40012c00
 8006a38:	40000400 	.word	0x40000400
 8006a3c:	40000800 	.word	0x40000800
 8006a40:	40000c00 	.word	0x40000c00
 8006a44:	40013400 	.word	0x40013400
 8006a48:	40014000 	.word	0x40014000
 8006a4c:	40014400 	.word	0x40014400
 8006a50:	40014800 	.word	0x40014800

08006a54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b087      	sub	sp, #28
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f003 031f 	and.w	r3, r3, #31
 8006a66:	2201      	movs	r2, #1
 8006a68:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6a1a      	ldr	r2, [r3, #32]
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	43db      	mvns	r3, r3
 8006a76:	401a      	ands	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6a1a      	ldr	r2, [r3, #32]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f003 031f 	and.w	r3, r3, #31
 8006a86:	6879      	ldr	r1, [r7, #4]
 8006a88:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	621a      	str	r2, [r3, #32]
}
 8006a92:	bf00      	nop
 8006a94:	371c      	adds	r7, #28
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
	...

08006aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d101      	bne.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e068      	b.n	8006b8a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a2e      	ldr	r2, [pc, #184]	; (8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d004      	beq.n	8006aec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a2d      	ldr	r2, [pc, #180]	; (8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d108      	bne.n	8006afe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006af2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a1e      	ldr	r2, [pc, #120]	; (8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d01d      	beq.n	8006b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2a:	d018      	beq.n	8006b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a1b      	ldr	r2, [pc, #108]	; (8006ba0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d013      	beq.n	8006b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a1a      	ldr	r2, [pc, #104]	; (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d00e      	beq.n	8006b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a18      	ldr	r2, [pc, #96]	; (8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d009      	beq.n	8006b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a13      	ldr	r2, [pc, #76]	; (8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d004      	beq.n	8006b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a14      	ldr	r2, [pc, #80]	; (8006bac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d10c      	bne.n	8006b78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	40012c00 	.word	0x40012c00
 8006b9c:	40013400 	.word	0x40013400
 8006ba0:	40000400 	.word	0x40000400
 8006ba4:	40000800 	.word	0x40000800
 8006ba8:	40000c00 	.word	0x40000c00
 8006bac:	40014000 	.word	0x40014000

08006bb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e040      	b.n	8006c44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d106      	bne.n	8006bd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7fb fd52 	bl	800267c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2224      	movs	r2, #36	; 0x24
 8006bdc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0201 	bic.w	r2, r2, #1
 8006bec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f8c0 	bl	8006d74 <UART_SetConfig>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d101      	bne.n	8006bfe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e022      	b.n	8006c44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fb6c 	bl	80072e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0201 	orr.w	r2, r2, #1
 8006c3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fbf3 	bl	8007428 <UART_CheckIdleState>
 8006c42:	4603      	mov	r3, r0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08a      	sub	sp, #40	; 0x28
 8006c50:	af02      	add	r7, sp, #8
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	603b      	str	r3, [r7, #0]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c60:	2b20      	cmp	r3, #32
 8006c62:	f040 8082 	bne.w	8006d6a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <HAL_UART_Transmit+0x26>
 8006c6c:	88fb      	ldrh	r3, [r7, #6]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e07a      	b.n	8006d6c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d101      	bne.n	8006c84 <HAL_UART_Transmit+0x38>
 8006c80:	2302      	movs	r3, #2
 8006c82:	e073      	b.n	8006d6c <HAL_UART_Transmit+0x120>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2221      	movs	r2, #33	; 0x21
 8006c98:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c9a:	f7fb fddd 	bl	8002858 <HAL_GetTick>
 8006c9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	88fa      	ldrh	r2, [r7, #6]
 8006ca4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	88fa      	ldrh	r2, [r7, #6]
 8006cac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb8:	d108      	bne.n	8006ccc <HAL_UART_Transmit+0x80>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d104      	bne.n	8006ccc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	e003      	b.n	8006cd4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006cdc:	e02d      	b.n	8006d3a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2180      	movs	r1, #128	; 0x80
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 fbe6 	bl	80074ba <UART_WaitOnFlagUntilTimeout>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d001      	beq.n	8006cf8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e039      	b.n	8006d6c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10b      	bne.n	8006d16 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	881a      	ldrh	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d0a:	b292      	uxth	r2, r2
 8006d0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	3302      	adds	r3, #2
 8006d12:	61bb      	str	r3, [r7, #24]
 8006d14:	e008      	b.n	8006d28 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	781a      	ldrb	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	b292      	uxth	r2, r2
 8006d20:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	3301      	adds	r3, #1
 8006d26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	3b01      	subs	r3, #1
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1cb      	bne.n	8006cde <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2140      	movs	r1, #64	; 0x40
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 fbb2 	bl	80074ba <UART_WaitOnFlagUntilTimeout>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e005      	b.n	8006d6c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2220      	movs	r2, #32
 8006d64:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	e000      	b.n	8006d6c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006d6a:	2302      	movs	r3, #2
  }
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3720      	adds	r7, #32
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d78:	b08a      	sub	sp, #40	; 0x28
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	431a      	orrs	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	4ba4      	ldr	r3, [pc, #656]	; (8007034 <UART_SetConfig+0x2c0>)
 8006da4:	4013      	ands	r3, r2
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	6812      	ldr	r2, [r2, #0]
 8006daa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dac:	430b      	orrs	r3, r1
 8006dae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	68da      	ldr	r2, [r3, #12]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a99      	ldr	r2, [pc, #612]	; (8007038 <UART_SetConfig+0x2c4>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d004      	beq.n	8006de0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df0:	430a      	orrs	r2, r1
 8006df2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a90      	ldr	r2, [pc, #576]	; (800703c <UART_SetConfig+0x2c8>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d126      	bne.n	8006e4c <UART_SetConfig+0xd8>
 8006dfe:	4b90      	ldr	r3, [pc, #576]	; (8007040 <UART_SetConfig+0x2cc>)
 8006e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e04:	f003 0303 	and.w	r3, r3, #3
 8006e08:	2b03      	cmp	r3, #3
 8006e0a:	d81b      	bhi.n	8006e44 <UART_SetConfig+0xd0>
 8006e0c:	a201      	add	r2, pc, #4	; (adr r2, 8006e14 <UART_SetConfig+0xa0>)
 8006e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e12:	bf00      	nop
 8006e14:	08006e25 	.word	0x08006e25
 8006e18:	08006e35 	.word	0x08006e35
 8006e1c:	08006e2d 	.word	0x08006e2d
 8006e20:	08006e3d 	.word	0x08006e3d
 8006e24:	2301      	movs	r3, #1
 8006e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e2a:	e116      	b.n	800705a <UART_SetConfig+0x2e6>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e32:	e112      	b.n	800705a <UART_SetConfig+0x2e6>
 8006e34:	2304      	movs	r3, #4
 8006e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e3a:	e10e      	b.n	800705a <UART_SetConfig+0x2e6>
 8006e3c:	2308      	movs	r3, #8
 8006e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e42:	e10a      	b.n	800705a <UART_SetConfig+0x2e6>
 8006e44:	2310      	movs	r3, #16
 8006e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e4a:	e106      	b.n	800705a <UART_SetConfig+0x2e6>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a7c      	ldr	r2, [pc, #496]	; (8007044 <UART_SetConfig+0x2d0>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d138      	bne.n	8006ec8 <UART_SetConfig+0x154>
 8006e56:	4b7a      	ldr	r3, [pc, #488]	; (8007040 <UART_SetConfig+0x2cc>)
 8006e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e5c:	f003 030c 	and.w	r3, r3, #12
 8006e60:	2b0c      	cmp	r3, #12
 8006e62:	d82d      	bhi.n	8006ec0 <UART_SetConfig+0x14c>
 8006e64:	a201      	add	r2, pc, #4	; (adr r2, 8006e6c <UART_SetConfig+0xf8>)
 8006e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6a:	bf00      	nop
 8006e6c:	08006ea1 	.word	0x08006ea1
 8006e70:	08006ec1 	.word	0x08006ec1
 8006e74:	08006ec1 	.word	0x08006ec1
 8006e78:	08006ec1 	.word	0x08006ec1
 8006e7c:	08006eb1 	.word	0x08006eb1
 8006e80:	08006ec1 	.word	0x08006ec1
 8006e84:	08006ec1 	.word	0x08006ec1
 8006e88:	08006ec1 	.word	0x08006ec1
 8006e8c:	08006ea9 	.word	0x08006ea9
 8006e90:	08006ec1 	.word	0x08006ec1
 8006e94:	08006ec1 	.word	0x08006ec1
 8006e98:	08006ec1 	.word	0x08006ec1
 8006e9c:	08006eb9 	.word	0x08006eb9
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ea6:	e0d8      	b.n	800705a <UART_SetConfig+0x2e6>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eae:	e0d4      	b.n	800705a <UART_SetConfig+0x2e6>
 8006eb0:	2304      	movs	r3, #4
 8006eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eb6:	e0d0      	b.n	800705a <UART_SetConfig+0x2e6>
 8006eb8:	2308      	movs	r3, #8
 8006eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ebe:	e0cc      	b.n	800705a <UART_SetConfig+0x2e6>
 8006ec0:	2310      	movs	r3, #16
 8006ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ec6:	e0c8      	b.n	800705a <UART_SetConfig+0x2e6>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a5e      	ldr	r2, [pc, #376]	; (8007048 <UART_SetConfig+0x2d4>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d125      	bne.n	8006f1e <UART_SetConfig+0x1aa>
 8006ed2:	4b5b      	ldr	r3, [pc, #364]	; (8007040 <UART_SetConfig+0x2cc>)
 8006ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ed8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006edc:	2b30      	cmp	r3, #48	; 0x30
 8006ede:	d016      	beq.n	8006f0e <UART_SetConfig+0x19a>
 8006ee0:	2b30      	cmp	r3, #48	; 0x30
 8006ee2:	d818      	bhi.n	8006f16 <UART_SetConfig+0x1a2>
 8006ee4:	2b20      	cmp	r3, #32
 8006ee6:	d00a      	beq.n	8006efe <UART_SetConfig+0x18a>
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d814      	bhi.n	8006f16 <UART_SetConfig+0x1a2>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <UART_SetConfig+0x182>
 8006ef0:	2b10      	cmp	r3, #16
 8006ef2:	d008      	beq.n	8006f06 <UART_SetConfig+0x192>
 8006ef4:	e00f      	b.n	8006f16 <UART_SetConfig+0x1a2>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006efc:	e0ad      	b.n	800705a <UART_SetConfig+0x2e6>
 8006efe:	2302      	movs	r3, #2
 8006f00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f04:	e0a9      	b.n	800705a <UART_SetConfig+0x2e6>
 8006f06:	2304      	movs	r3, #4
 8006f08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f0c:	e0a5      	b.n	800705a <UART_SetConfig+0x2e6>
 8006f0e:	2308      	movs	r3, #8
 8006f10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f14:	e0a1      	b.n	800705a <UART_SetConfig+0x2e6>
 8006f16:	2310      	movs	r3, #16
 8006f18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f1c:	e09d      	b.n	800705a <UART_SetConfig+0x2e6>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a4a      	ldr	r2, [pc, #296]	; (800704c <UART_SetConfig+0x2d8>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d125      	bne.n	8006f74 <UART_SetConfig+0x200>
 8006f28:	4b45      	ldr	r3, [pc, #276]	; (8007040 <UART_SetConfig+0x2cc>)
 8006f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f32:	2bc0      	cmp	r3, #192	; 0xc0
 8006f34:	d016      	beq.n	8006f64 <UART_SetConfig+0x1f0>
 8006f36:	2bc0      	cmp	r3, #192	; 0xc0
 8006f38:	d818      	bhi.n	8006f6c <UART_SetConfig+0x1f8>
 8006f3a:	2b80      	cmp	r3, #128	; 0x80
 8006f3c:	d00a      	beq.n	8006f54 <UART_SetConfig+0x1e0>
 8006f3e:	2b80      	cmp	r3, #128	; 0x80
 8006f40:	d814      	bhi.n	8006f6c <UART_SetConfig+0x1f8>
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d002      	beq.n	8006f4c <UART_SetConfig+0x1d8>
 8006f46:	2b40      	cmp	r3, #64	; 0x40
 8006f48:	d008      	beq.n	8006f5c <UART_SetConfig+0x1e8>
 8006f4a:	e00f      	b.n	8006f6c <UART_SetConfig+0x1f8>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f52:	e082      	b.n	800705a <UART_SetConfig+0x2e6>
 8006f54:	2302      	movs	r3, #2
 8006f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f5a:	e07e      	b.n	800705a <UART_SetConfig+0x2e6>
 8006f5c:	2304      	movs	r3, #4
 8006f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f62:	e07a      	b.n	800705a <UART_SetConfig+0x2e6>
 8006f64:	2308      	movs	r3, #8
 8006f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f6a:	e076      	b.n	800705a <UART_SetConfig+0x2e6>
 8006f6c:	2310      	movs	r3, #16
 8006f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f72:	e072      	b.n	800705a <UART_SetConfig+0x2e6>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a35      	ldr	r2, [pc, #212]	; (8007050 <UART_SetConfig+0x2dc>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d12a      	bne.n	8006fd4 <UART_SetConfig+0x260>
 8006f7e:	4b30      	ldr	r3, [pc, #192]	; (8007040 <UART_SetConfig+0x2cc>)
 8006f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f8c:	d01a      	beq.n	8006fc4 <UART_SetConfig+0x250>
 8006f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f92:	d81b      	bhi.n	8006fcc <UART_SetConfig+0x258>
 8006f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f98:	d00c      	beq.n	8006fb4 <UART_SetConfig+0x240>
 8006f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f9e:	d815      	bhi.n	8006fcc <UART_SetConfig+0x258>
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d003      	beq.n	8006fac <UART_SetConfig+0x238>
 8006fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fa8:	d008      	beq.n	8006fbc <UART_SetConfig+0x248>
 8006faa:	e00f      	b.n	8006fcc <UART_SetConfig+0x258>
 8006fac:	2300      	movs	r3, #0
 8006fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fb2:	e052      	b.n	800705a <UART_SetConfig+0x2e6>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fba:	e04e      	b.n	800705a <UART_SetConfig+0x2e6>
 8006fbc:	2304      	movs	r3, #4
 8006fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fc2:	e04a      	b.n	800705a <UART_SetConfig+0x2e6>
 8006fc4:	2308      	movs	r3, #8
 8006fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fca:	e046      	b.n	800705a <UART_SetConfig+0x2e6>
 8006fcc:	2310      	movs	r3, #16
 8006fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fd2:	e042      	b.n	800705a <UART_SetConfig+0x2e6>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a17      	ldr	r2, [pc, #92]	; (8007038 <UART_SetConfig+0x2c4>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d13a      	bne.n	8007054 <UART_SetConfig+0x2e0>
 8006fde:	4b18      	ldr	r3, [pc, #96]	; (8007040 <UART_SetConfig+0x2cc>)
 8006fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fec:	d01a      	beq.n	8007024 <UART_SetConfig+0x2b0>
 8006fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ff2:	d81b      	bhi.n	800702c <UART_SetConfig+0x2b8>
 8006ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ff8:	d00c      	beq.n	8007014 <UART_SetConfig+0x2a0>
 8006ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ffe:	d815      	bhi.n	800702c <UART_SetConfig+0x2b8>
 8007000:	2b00      	cmp	r3, #0
 8007002:	d003      	beq.n	800700c <UART_SetConfig+0x298>
 8007004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007008:	d008      	beq.n	800701c <UART_SetConfig+0x2a8>
 800700a:	e00f      	b.n	800702c <UART_SetConfig+0x2b8>
 800700c:	2300      	movs	r3, #0
 800700e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007012:	e022      	b.n	800705a <UART_SetConfig+0x2e6>
 8007014:	2302      	movs	r3, #2
 8007016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800701a:	e01e      	b.n	800705a <UART_SetConfig+0x2e6>
 800701c:	2304      	movs	r3, #4
 800701e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007022:	e01a      	b.n	800705a <UART_SetConfig+0x2e6>
 8007024:	2308      	movs	r3, #8
 8007026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800702a:	e016      	b.n	800705a <UART_SetConfig+0x2e6>
 800702c:	2310      	movs	r3, #16
 800702e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007032:	e012      	b.n	800705a <UART_SetConfig+0x2e6>
 8007034:	efff69f3 	.word	0xefff69f3
 8007038:	40008000 	.word	0x40008000
 800703c:	40013800 	.word	0x40013800
 8007040:	40021000 	.word	0x40021000
 8007044:	40004400 	.word	0x40004400
 8007048:	40004800 	.word	0x40004800
 800704c:	40004c00 	.word	0x40004c00
 8007050:	40005000 	.word	0x40005000
 8007054:	2310      	movs	r3, #16
 8007056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a9f      	ldr	r2, [pc, #636]	; (80072dc <UART_SetConfig+0x568>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d17a      	bne.n	800715a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007064:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007068:	2b08      	cmp	r3, #8
 800706a:	d824      	bhi.n	80070b6 <UART_SetConfig+0x342>
 800706c:	a201      	add	r2, pc, #4	; (adr r2, 8007074 <UART_SetConfig+0x300>)
 800706e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007072:	bf00      	nop
 8007074:	08007099 	.word	0x08007099
 8007078:	080070b7 	.word	0x080070b7
 800707c:	080070a1 	.word	0x080070a1
 8007080:	080070b7 	.word	0x080070b7
 8007084:	080070a7 	.word	0x080070a7
 8007088:	080070b7 	.word	0x080070b7
 800708c:	080070b7 	.word	0x080070b7
 8007090:	080070b7 	.word	0x080070b7
 8007094:	080070af 	.word	0x080070af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007098:	f7fd fd60 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 800709c:	61f8      	str	r0, [r7, #28]
        break;
 800709e:	e010      	b.n	80070c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070a0:	4b8f      	ldr	r3, [pc, #572]	; (80072e0 <UART_SetConfig+0x56c>)
 80070a2:	61fb      	str	r3, [r7, #28]
        break;
 80070a4:	e00d      	b.n	80070c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070a6:	f7fd fcc1 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 80070aa:	61f8      	str	r0, [r7, #28]
        break;
 80070ac:	e009      	b.n	80070c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070b2:	61fb      	str	r3, [r7, #28]
        break;
 80070b4:	e005      	b.n	80070c2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80070c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 80fb 	beq.w	80072c0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	4613      	mov	r3, r2
 80070d0:	005b      	lsls	r3, r3, #1
 80070d2:	4413      	add	r3, r2
 80070d4:	69fa      	ldr	r2, [r7, #28]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d305      	bcc.n	80070e6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070e0:	69fa      	ldr	r2, [r7, #28]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d903      	bls.n	80070ee <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80070ec:	e0e8      	b.n	80072c0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	2200      	movs	r2, #0
 80070f2:	461c      	mov	r4, r3
 80070f4:	4615      	mov	r5, r2
 80070f6:	f04f 0200 	mov.w	r2, #0
 80070fa:	f04f 0300 	mov.w	r3, #0
 80070fe:	022b      	lsls	r3, r5, #8
 8007100:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007104:	0222      	lsls	r2, r4, #8
 8007106:	68f9      	ldr	r1, [r7, #12]
 8007108:	6849      	ldr	r1, [r1, #4]
 800710a:	0849      	lsrs	r1, r1, #1
 800710c:	2000      	movs	r0, #0
 800710e:	4688      	mov	r8, r1
 8007110:	4681      	mov	r9, r0
 8007112:	eb12 0a08 	adds.w	sl, r2, r8
 8007116:	eb43 0b09 	adc.w	fp, r3, r9
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	603b      	str	r3, [r7, #0]
 8007122:	607a      	str	r2, [r7, #4]
 8007124:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007128:	4650      	mov	r0, sl
 800712a:	4659      	mov	r1, fp
 800712c:	f7f9 fd3c 	bl	8000ba8 <__aeabi_uldivmod>
 8007130:	4602      	mov	r2, r0
 8007132:	460b      	mov	r3, r1
 8007134:	4613      	mov	r3, r2
 8007136:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800713e:	d308      	bcc.n	8007152 <UART_SetConfig+0x3de>
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007146:	d204      	bcs.n	8007152 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	60da      	str	r2, [r3, #12]
 8007150:	e0b6      	b.n	80072c0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007158:	e0b2      	b.n	80072c0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007162:	d15e      	bne.n	8007222 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007164:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007168:	2b08      	cmp	r3, #8
 800716a:	d828      	bhi.n	80071be <UART_SetConfig+0x44a>
 800716c:	a201      	add	r2, pc, #4	; (adr r2, 8007174 <UART_SetConfig+0x400>)
 800716e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007172:	bf00      	nop
 8007174:	08007199 	.word	0x08007199
 8007178:	080071a1 	.word	0x080071a1
 800717c:	080071a9 	.word	0x080071a9
 8007180:	080071bf 	.word	0x080071bf
 8007184:	080071af 	.word	0x080071af
 8007188:	080071bf 	.word	0x080071bf
 800718c:	080071bf 	.word	0x080071bf
 8007190:	080071bf 	.word	0x080071bf
 8007194:	080071b7 	.word	0x080071b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007198:	f7fd fce0 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 800719c:	61f8      	str	r0, [r7, #28]
        break;
 800719e:	e014      	b.n	80071ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071a0:	f7fd fcf2 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 80071a4:	61f8      	str	r0, [r7, #28]
        break;
 80071a6:	e010      	b.n	80071ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071a8:	4b4d      	ldr	r3, [pc, #308]	; (80072e0 <UART_SetConfig+0x56c>)
 80071aa:	61fb      	str	r3, [r7, #28]
        break;
 80071ac:	e00d      	b.n	80071ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ae:	f7fd fc3d 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 80071b2:	61f8      	str	r0, [r7, #28]
        break;
 80071b4:	e009      	b.n	80071ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071ba:	61fb      	str	r3, [r7, #28]
        break;
 80071bc:	e005      	b.n	80071ca <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80071c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d077      	beq.n	80072c0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	005a      	lsls	r2, r3, #1
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	085b      	lsrs	r3, r3, #1
 80071da:	441a      	add	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	2b0f      	cmp	r3, #15
 80071ea:	d916      	bls.n	800721a <UART_SetConfig+0x4a6>
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071f2:	d212      	bcs.n	800721a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	f023 030f 	bic.w	r3, r3, #15
 80071fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	085b      	lsrs	r3, r3, #1
 8007202:	b29b      	uxth	r3, r3
 8007204:	f003 0307 	and.w	r3, r3, #7
 8007208:	b29a      	uxth	r2, r3
 800720a:	8afb      	ldrh	r3, [r7, #22]
 800720c:	4313      	orrs	r3, r2
 800720e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	8afa      	ldrh	r2, [r7, #22]
 8007216:	60da      	str	r2, [r3, #12]
 8007218:	e052      	b.n	80072c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007220:	e04e      	b.n	80072c0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007222:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007226:	2b08      	cmp	r3, #8
 8007228:	d827      	bhi.n	800727a <UART_SetConfig+0x506>
 800722a:	a201      	add	r2, pc, #4	; (adr r2, 8007230 <UART_SetConfig+0x4bc>)
 800722c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007230:	08007255 	.word	0x08007255
 8007234:	0800725d 	.word	0x0800725d
 8007238:	08007265 	.word	0x08007265
 800723c:	0800727b 	.word	0x0800727b
 8007240:	0800726b 	.word	0x0800726b
 8007244:	0800727b 	.word	0x0800727b
 8007248:	0800727b 	.word	0x0800727b
 800724c:	0800727b 	.word	0x0800727b
 8007250:	08007273 	.word	0x08007273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007254:	f7fd fc82 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 8007258:	61f8      	str	r0, [r7, #28]
        break;
 800725a:	e014      	b.n	8007286 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800725c:	f7fd fc94 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 8007260:	61f8      	str	r0, [r7, #28]
        break;
 8007262:	e010      	b.n	8007286 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007264:	4b1e      	ldr	r3, [pc, #120]	; (80072e0 <UART_SetConfig+0x56c>)
 8007266:	61fb      	str	r3, [r7, #28]
        break;
 8007268:	e00d      	b.n	8007286 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800726a:	f7fd fbdf 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 800726e:	61f8      	str	r0, [r7, #28]
        break;
 8007270:	e009      	b.n	8007286 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007276:	61fb      	str	r3, [r7, #28]
        break;
 8007278:	e005      	b.n	8007286 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800727a:	2300      	movs	r3, #0
 800727c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007284:	bf00      	nop
    }

    if (pclk != 0U)
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d019      	beq.n	80072c0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	085a      	lsrs	r2, r3, #1
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	441a      	add	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	fbb2 f3f3 	udiv	r3, r2, r3
 800729e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	2b0f      	cmp	r3, #15
 80072a4:	d909      	bls.n	80072ba <UART_SetConfig+0x546>
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ac:	d205      	bcs.n	80072ba <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	60da      	str	r2, [r3, #12]
 80072b8:	e002      	b.n	80072c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80072cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3728      	adds	r7, #40	; 0x28
 80072d4:	46bd      	mov	sp, r7
 80072d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072da:	bf00      	nop
 80072dc:	40008000 	.word	0x40008000
 80072e0:	00f42400 	.word	0x00f42400

080072e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00a      	beq.n	800730e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	f003 0302 	and.w	r3, r3, #2
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	f003 0304 	and.w	r3, r3, #4
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00a      	beq.n	8007352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	f003 0308 	and.w	r3, r3, #8
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00a      	beq.n	8007374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	f003 0310 	and.w	r3, r3, #16
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00a      	beq.n	8007396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	430a      	orrs	r2, r1
 8007394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	f003 0320 	and.w	r3, r3, #32
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00a      	beq.n	80073b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	430a      	orrs	r2, r1
 80073b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d01a      	beq.n	80073fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073e2:	d10a      	bne.n	80073fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	430a      	orrs	r2, r1
 800741a:	605a      	str	r2, [r3, #4]
  }
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af02      	add	r7, sp, #8
 800742e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007438:	f7fb fa0e 	bl	8002858 <HAL_GetTick>
 800743c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0308 	and.w	r3, r3, #8
 8007448:	2b08      	cmp	r3, #8
 800744a:	d10e      	bne.n	800746a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800744c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f82d 	bl	80074ba <UART_WaitOnFlagUntilTimeout>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e023      	b.n	80074b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0304 	and.w	r3, r3, #4
 8007474:	2b04      	cmp	r3, #4
 8007476:	d10e      	bne.n	8007496 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007478:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f817 	bl	80074ba <UART_WaitOnFlagUntilTimeout>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e00d      	b.n	80074b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2220      	movs	r2, #32
 800749a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2220      	movs	r2, #32
 80074a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b09c      	sub	sp, #112	; 0x70
 80074be:	af00      	add	r7, sp, #0
 80074c0:	60f8      	str	r0, [r7, #12]
 80074c2:	60b9      	str	r1, [r7, #8]
 80074c4:	603b      	str	r3, [r7, #0]
 80074c6:	4613      	mov	r3, r2
 80074c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ca:	e0a5      	b.n	8007618 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074d2:	f000 80a1 	beq.w	8007618 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074d6:	f7fb f9bf 	bl	8002858 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d302      	bcc.n	80074ec <UART_WaitOnFlagUntilTimeout+0x32>
 80074e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d13e      	bne.n	800756a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80074fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007500:	667b      	str	r3, [r7, #100]	; 0x64
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800750a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800750c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007510:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007512:	e841 2300 	strex	r3, r2, [r1]
 8007516:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1e6      	bne.n	80074ec <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3308      	adds	r3, #8
 8007524:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007528:	e853 3f00 	ldrex	r3, [r3]
 800752c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007530:	f023 0301 	bic.w	r3, r3, #1
 8007534:	663b      	str	r3, [r7, #96]	; 0x60
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	3308      	adds	r3, #8
 800753c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800753e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007540:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007542:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007546:	e841 2300 	strex	r3, r2, [r1]
 800754a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800754c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1e5      	bne.n	800751e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2220      	movs	r2, #32
 8007556:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2220      	movs	r2, #32
 800755c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e067      	b.n	800763a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0304 	and.w	r3, r3, #4
 8007574:	2b00      	cmp	r3, #0
 8007576:	d04f      	beq.n	8007618 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007586:	d147      	bne.n	8007618 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007590:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759a:	e853 3f00 	ldrex	r3, [r3]
 800759e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	461a      	mov	r2, r3
 80075ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075b0:	637b      	str	r3, [r7, #52]	; 0x34
 80075b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e6      	bne.n	8007592 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3308      	adds	r3, #8
 80075ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	e853 3f00 	ldrex	r3, [r3]
 80075d2:	613b      	str	r3, [r7, #16]
   return(result);
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	f023 0301 	bic.w	r3, r3, #1
 80075da:	66bb      	str	r3, [r7, #104]	; 0x68
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3308      	adds	r3, #8
 80075e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80075e4:	623a      	str	r2, [r7, #32]
 80075e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e8:	69f9      	ldr	r1, [r7, #28]
 80075ea:	6a3a      	ldr	r2, [r7, #32]
 80075ec:	e841 2300 	strex	r3, r2, [r1]
 80075f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1e5      	bne.n	80075c4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2220      	movs	r2, #32
 80075fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2220      	movs	r2, #32
 8007602:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2220      	movs	r2, #32
 8007608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e010      	b.n	800763a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	69da      	ldr	r2, [r3, #28]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	4013      	ands	r3, r2
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	429a      	cmp	r2, r3
 8007626:	bf0c      	ite	eq
 8007628:	2301      	moveq	r3, #1
 800762a:	2300      	movne	r3, #0
 800762c:	b2db      	uxtb	r3, r3
 800762e:	461a      	mov	r2, r3
 8007630:	79fb      	ldrb	r3, [r7, #7]
 8007632:	429a      	cmp	r2, r3
 8007634:	f43f af4a 	beq.w	80074cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3770      	adds	r7, #112	; 0x70
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8007642:	b480      	push	{r7}
 8007644:	b083      	sub	sp, #12
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	881a      	ldrh	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	799b      	ldrb	r3, [r3, #6]
 8007654:	08db      	lsrs	r3, r3, #3
 8007656:	b2db      	uxtb	r3, r3
 8007658:	b29b      	uxth	r3, r3
 800765a:	fb12 f303 	smulbb	r3, r2, r3
 800765e:	b29a      	uxth	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	889b      	ldrh	r3, [r3, #4]
 8007668:	461a      	mov	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	885b      	ldrh	r3, [r3, #2]
 800766e:	fb02 f303 	mul.w	r3, r2, r3
 8007672:	461a      	mov	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	683a      	ldr	r2, [r7, #0]
 800767c:	60da      	str	r2, [r3, #12]
}
 800767e:	bf00      	nop
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 800768a:	b490      	push	{r4, r7}
 800768c:	b086      	sub	sp, #24
 800768e:	af00      	add	r7, sp, #0
 8007690:	4604      	mov	r4, r0
 8007692:	4608      	mov	r0, r1
 8007694:	1d39      	adds	r1, r7, #4
 8007696:	e881 000c 	stmia.w	r1, {r2, r3}
 800769a:	4623      	mov	r3, r4
 800769c:	81fb      	strh	r3, [r7, #14]
 800769e:	4603      	mov	r3, r0
 80076a0:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 80076a2:	2300      	movs	r3, #0
 80076a4:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 80076a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80076aa:	88ba      	ldrh	r2, [r7, #4]
 80076ac:	4293      	cmp	r3, r2
 80076ae:	da04      	bge.n	80076ba <code+0x30>
        code |= LEFT;
 80076b0:	2201      	movs	r2, #1
 80076b2:	7dfb      	ldrb	r3, [r7, #23]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	75fb      	strb	r3, [r7, #23]
 80076b8:	e008      	b.n	80076cc <code+0x42>
    } else if (x0 > window.x1) {
 80076ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80076be:	893a      	ldrh	r2, [r7, #8]
 80076c0:	4293      	cmp	r3, r2
 80076c2:	dd03      	ble.n	80076cc <code+0x42>
        code |= RIGHT;
 80076c4:	2202      	movs	r2, #2
 80076c6:	7dfb      	ldrb	r3, [r7, #23]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 80076cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80076d0:	88fa      	ldrh	r2, [r7, #6]
 80076d2:	4293      	cmp	r3, r2
 80076d4:	da04      	bge.n	80076e0 <code+0x56>
        code |= BOTTOM;
 80076d6:	2204      	movs	r2, #4
 80076d8:	7dfb      	ldrb	r3, [r7, #23]
 80076da:	4313      	orrs	r3, r2
 80076dc:	75fb      	strb	r3, [r7, #23]
 80076de:	e008      	b.n	80076f2 <code+0x68>
    } else if (y0 > window.y1) {
 80076e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80076e4:	897a      	ldrh	r2, [r7, #10]
 80076e6:	4293      	cmp	r3, r2
 80076e8:	dd03      	ble.n	80076f2 <code+0x68>
        code |= TOP;
 80076ea:	2208      	movs	r2, #8
 80076ec:	7dfb      	ldrb	r3, [r7, #23]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 80076f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3718      	adds	r7, #24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bc90      	pop	{r4, r7}
 80076fc:	4770      	bx	lr

080076fe <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b088      	sub	sp, #32
 8007702:	af00      	add	r7, sp, #0
 8007704:	60f8      	str	r0, [r7, #12]
 8007706:	60b9      	str	r1, [r7, #8]
 8007708:	607a      	str	r2, [r7, #4]
 800770a:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007718:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800771c:	cb0c      	ldmia	r3, {r2, r3}
 800771e:	f7ff ffb4 	bl	800768a <code>
 8007722:	4603      	mov	r3, r0
 8007724:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f9b3 0000 	ldrsh.w	r0, [r3]
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007736:	cb0c      	ldmia	r3, {r2, r3}
 8007738:	f7ff ffa7 	bl	800768a <code>
 800773c:	4603      	mov	r3, r0
 800773e:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8007740:	2300      	movs	r3, #0
 8007742:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8007744:	7ffa      	ldrb	r2, [r7, #31]
 8007746:	7fbb      	ldrb	r3, [r7, #30]
 8007748:	4313      	orrs	r3, r2
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b00      	cmp	r3, #0
 800774e:	d102      	bne.n	8007756 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8007750:	2301      	movs	r3, #1
 8007752:	777b      	strb	r3, [r7, #29]
            break;
 8007754:	e0e9      	b.n	800792a <clip_line+0x22c>
        } else if (code0 & code1) {
 8007756:	7ffa      	ldrb	r2, [r7, #31]
 8007758:	7fbb      	ldrb	r3, [r7, #30]
 800775a:	4013      	ands	r3, r2
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	f040 80e2 	bne.w	8007928 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8007764:	2300      	movs	r3, #0
 8007766:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8007768:	2300      	movs	r3, #0
 800776a:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 800776c:	7ffb      	ldrb	r3, [r7, #31]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <clip_line+0x78>
 8007772:	7ffb      	ldrb	r3, [r7, #31]
 8007774:	e000      	b.n	8007778 <clip_line+0x7a>
 8007776:	7fbb      	ldrb	r3, [r7, #30]
 8007778:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 800777a:	2208      	movs	r2, #8
 800777c:	7dfb      	ldrb	r3, [r7, #23]
 800777e:	4013      	ands	r3, r2
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d024      	beq.n	80077d0 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800778c:	b29a      	uxth	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007794:	4619      	mov	r1, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f9b3 3000 	ldrsh.w	r3, [r3]
 800779c:	1acb      	subs	r3, r1, r3
 800779e:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80077a0:	4608      	mov	r0, r1
 80077a2:	68b9      	ldr	r1, [r7, #8]
 80077a4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80077a8:	1a41      	subs	r1, r0, r1
 80077aa:	fb03 f101 	mul.w	r1, r3, r1
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077b4:	4618      	mov	r0, r3
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077bc:	1ac3      	subs	r3, r0, r3
 80077be:	fb91 f3f3 	sdiv	r3, r1, r3
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	4413      	add	r3, r2
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 80077ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80077cc:	833b      	strh	r3, [r7, #24]
 80077ce:	e07f      	b.n	80078d0 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 80077d0:	2204      	movs	r2, #4
 80077d2:	7dfb      	ldrb	r3, [r7, #23]
 80077d4:	4013      	ands	r3, r2
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d024      	beq.n	8007826 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077ea:	4619      	mov	r1, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077f2:	1acb      	subs	r3, r1, r3
 80077f4:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80077f6:	4608      	mov	r0, r1
 80077f8:	68b9      	ldr	r1, [r7, #8]
 80077fa:	f9b1 1000 	ldrsh.w	r1, [r1]
 80077fe:	1a41      	subs	r1, r0, r1
 8007800:	fb03 f101 	mul.w	r1, r3, r1
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	f9b3 3000 	ldrsh.w	r3, [r3]
 800780a:	4618      	mov	r0, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007812:	1ac3      	subs	r3, r0, r3
 8007814:	fb91 f3f3 	sdiv	r3, r1, r3
 8007818:	b29b      	uxth	r3, r3
 800781a:	4413      	add	r3, r2
 800781c:	b29b      	uxth	r3, r3
 800781e:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8007820:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007822:	833b      	strh	r3, [r7, #24]
 8007824:	e054      	b.n	80078d0 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8007826:	2202      	movs	r2, #2
 8007828:	7dfb      	ldrb	r3, [r7, #23]
 800782a:	4013      	ands	r3, r2
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d024      	beq.n	800787c <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007838:	b29a      	uxth	r2, r3
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007840:	4619      	mov	r1, r3
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007848:	1acb      	subs	r3, r1, r3
 800784a:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800784c:	4608      	mov	r0, r1
 800784e:	68f9      	ldr	r1, [r7, #12]
 8007850:	f9b1 1000 	ldrsh.w	r1, [r1]
 8007854:	1a41      	subs	r1, r0, r1
 8007856:	fb03 f101 	mul.w	r1, r3, r1
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007860:	4618      	mov	r0, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007868:	1ac3      	subs	r3, r0, r3
 800786a:	fb91 f3f3 	sdiv	r3, r1, r3
 800786e:	b29b      	uxth	r3, r3
 8007870:	4413      	add	r3, r2
 8007872:	b29b      	uxth	r3, r3
 8007874:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8007876:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007878:	837b      	strh	r3, [r7, #26]
 800787a:	e029      	b.n	80078d0 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 800787c:	2201      	movs	r2, #1
 800787e:	7dfb      	ldrb	r3, [r7, #23]
 8007880:	4013      	ands	r3, r2
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b00      	cmp	r3, #0
 8007886:	d023      	beq.n	80078d0 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800788e:	b29a      	uxth	r2, r3
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007896:	4619      	mov	r1, r3
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800789e:	1acb      	subs	r3, r1, r3
 80078a0:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80078a2:	4608      	mov	r0, r1
 80078a4:	68f9      	ldr	r1, [r7, #12]
 80078a6:	f9b1 1000 	ldrsh.w	r1, [r1]
 80078aa:	1a41      	subs	r1, r0, r1
 80078ac:	fb03 f101 	mul.w	r1, r3, r1
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078b6:	4618      	mov	r0, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078be:	1ac3      	subs	r3, r0, r3
 80078c0:	fb91 f3f3 	sdiv	r3, r1, r3
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	4413      	add	r3, r2
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 80078cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078ce:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 80078d0:	7dfa      	ldrb	r2, [r7, #23]
 80078d2:	7ffb      	ldrb	r3, [r7, #31]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d113      	bne.n	8007900 <clip_line+0x202>
                *x0 = x;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	8b7a      	ldrh	r2, [r7, #26]
 80078dc:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	8b3a      	ldrh	r2, [r7, #24]
 80078e2:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	f9b3 1000 	ldrsh.w	r1, [r3]
 80078f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078f4:	cb0c      	ldmia	r3, {r2, r3}
 80078f6:	f7ff fec8 	bl	800768a <code>
 80078fa:	4603      	mov	r3, r0
 80078fc:	77fb      	strb	r3, [r7, #31]
 80078fe:	e721      	b.n	8007744 <clip_line+0x46>
            } else {
                *x1 = x;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	8b7a      	ldrh	r2, [r7, #26]
 8007904:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	8b3a      	ldrh	r2, [r7, #24]
 800790a:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007918:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800791c:	cb0c      	ldmia	r3, {r2, r3}
 800791e:	f7ff feb4 	bl	800768a <code>
 8007922:	4603      	mov	r3, r0
 8007924:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8007926:	e70d      	b.n	8007744 <clip_line+0x46>
            break;
 8007928:	bf00      	nop
            }
        }
    }

    return accept;
 800792a:	7f7b      	ldrb	r3, [r7, #29]
 800792c:	4618      	mov	r0, r3
 800792e:	3720      	adds	r7, #32
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	3306      	adds	r3, #6
 8007944:	2208      	movs	r2, #8
 8007946:	4619      	mov	r1, r3
 8007948:	f000 ff74 	bl	8008834 <memcpy>
    meta->width = font[FONTX_WIDTH];
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	7b9a      	ldrb	r2, [r3, #14]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	7bda      	ldrb	r2, [r3, #15]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	7c1a      	ldrb	r2, [r3, #16]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	72da      	strb	r2, [r3, #11]

    return 0;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 800796e:	b580      	push	{r7, lr}
 8007970:	b08e      	sub	sp, #56	; 0x38
 8007972:	af00      	add	r7, sp, #0
 8007974:	60f8      	str	r0, [r7, #12]
 8007976:	60b9      	str	r1, [r7, #8]
 8007978:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800797a:	f107 0314 	add.w	r3, r7, #20
 800797e:	6879      	ldr	r1, [r7, #4]
 8007980:	4618      	mov	r0, r3
 8007982:	f7ff ffd7 	bl	8007934 <fontx_meta>
 8007986:	4603      	mov	r3, r0
 8007988:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 800798c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <fontx_glyph+0x2c>
        return status;
 8007994:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007998:	e077      	b.n	8007a8a <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 800799a:	7f7a      	ldrb	r2, [r7, #29]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 80079a0:	7fba      	ldrb	r2, [r7, #30]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 80079a6:	7f7b      	ldrb	r3, [r7, #29]
 80079a8:	3307      	adds	r3, #7
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	da00      	bge.n	80079b0 <fontx_glyph+0x42>
 80079ae:	3307      	adds	r3, #7
 80079b0:	10db      	asrs	r3, r3, #3
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	78da      	ldrb	r2, [r3, #3]
 80079bc:	7fbb      	ldrb	r3, [r7, #30]
 80079be:	fb12 f303 	smulbb	r3, r2, r3
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 80079c8:	7ffb      	ldrb	r3, [r7, #31]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10f      	bne.n	80079ee <fontx_glyph+0x80>
        if (code < 0x100) {
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	2bff      	cmp	r3, #255	; 0xff
 80079d2:	d859      	bhi.n	8007a88 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	789b      	ldrb	r3, [r3, #2]
 80079d8:	461a      	mov	r2, r3
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	fb02 f303 	mul.w	r3, r2, r3
 80079e0:	3311      	adds	r3, #17
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	441a      	add	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	e04d      	b.n	8007a8a <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	3312      	adds	r3, #18
 80079f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 80079f4:	2300      	movs	r3, #0
 80079f6:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	3311      	adds	r3, #17
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 8007a00:	e03d      	b.n	8007a7e <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8007a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	021b      	lsls	r3, r3, #8
 8007a10:	4413      	add	r3, r2
 8007a12:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8007a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a16:	3302      	adds	r3, #2
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1e:	3303      	adds	r3, #3
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	021b      	lsls	r3, r3, #8
 8007a24:	4413      	add	r3, r2
 8007a26:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d31c      	bcc.n	8007a6a <fontx_glyph+0xfc>
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d818      	bhi.n	8007a6a <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a40:	4413      	add	r3, r2
 8007a42:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	3311      	adds	r3, #17
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	461a      	mov	r2, r3
                    nc * glyph->size
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	789b      	ldrb	r3, [r3, #2]
 8007a52:	4619      	mov	r1, r3
 8007a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a56:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8007a5a:	4413      	add	r3, r2
 8007a5c:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	441a      	add	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	e00f      	b.n	8007a8a <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8007a6a:	6a3a      	ldr	r2, [r7, #32]
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	1ad2      	subs	r2, r2, r3
 8007a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a72:	4413      	add	r3, r2
 8007a74:	3301      	adds	r3, #1
 8007a76:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 8007a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a80:	1e5a      	subs	r2, r3, #1
 8007a82:	633a      	str	r2, [r7, #48]	; 0x30
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1bc      	bne.n	8007a02 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3738      	adds	r7, #56	; 0x38
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8007a92:	b480      	push	{r7}
 8007a94:	b083      	sub	sp, #12
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	dd01      	ble.n	8007aa8 <min+0x16>
        return b;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	e000      	b.n	8007aaa <min+0x18>
    };
    return a;
 8007aa8:	687b      	ldr	r3, [r7, #4]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
	...

08007ab8 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	80fb      	strh	r3, [r7, #6]
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	80bb      	strh	r3, [r7, #4]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8007aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ace:	4a12      	ldr	r2, [pc, #72]	; (8007b18 <hagl_put_pixel+0x60>)
 8007ad0:	8812      	ldrh	r2, [r2, #0]
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	db1a      	blt.n	8007b0c <hagl_put_pixel+0x54>
 8007ad6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007ada:	4a0f      	ldr	r2, [pc, #60]	; (8007b18 <hagl_put_pixel+0x60>)
 8007adc:	8852      	ldrh	r2, [r2, #2]
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	db14      	blt.n	8007b0c <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8007ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ae6:	4a0c      	ldr	r2, [pc, #48]	; (8007b18 <hagl_put_pixel+0x60>)
 8007ae8:	8892      	ldrh	r2, [r2, #4]
 8007aea:	4293      	cmp	r3, r2
 8007aec:	dc10      	bgt.n	8007b10 <hagl_put_pixel+0x58>
 8007aee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007af2:	4a09      	ldr	r2, [pc, #36]	; (8007b18 <hagl_put_pixel+0x60>)
 8007af4:	88d2      	ldrh	r2, [r2, #6]
 8007af6:	4293      	cmp	r3, r2
 8007af8:	dc0a      	bgt.n	8007b10 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8007afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007afe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007b02:	887a      	ldrh	r2, [r7, #2]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7f9 fc15 	bl	8001334 <lcd_put_pixel>
 8007b0a:	e002      	b.n	8007b12 <hagl_put_pixel+0x5a>
        return;
 8007b0c:	bf00      	nop
 8007b0e:	e000      	b.n	8007b12 <hagl_put_pixel+0x5a>
        return;
 8007b10:	bf00      	nop
}
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	2000000c 	.word	0x2000000c

08007b1c <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8007b1c:	b590      	push	{r4, r7, lr}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af02      	add	r7, sp, #8
 8007b22:	4604      	mov	r4, r0
 8007b24:	4608      	mov	r0, r1
 8007b26:	4611      	mov	r1, r2
 8007b28:	461a      	mov	r2, r3
 8007b2a:	4623      	mov	r3, r4
 8007b2c:	80fb      	strh	r3, [r7, #6]
 8007b2e:	4603      	mov	r3, r0
 8007b30:	80bb      	strh	r3, [r7, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	807b      	strh	r3, [r7, #2]
 8007b36:	4613      	mov	r3, r2
 8007b38:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8007b3a:	88fa      	ldrh	r2, [r7, #6]
 8007b3c:	887b      	ldrh	r3, [r7, #2]
 8007b3e:	4413      	add	r3, r2
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	b21a      	sxth	r2, r3
 8007b44:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8007b48:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007b4c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007b50:	883b      	ldrh	r3, [r7, #0]
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	4623      	mov	r3, r4
 8007b56:	f000 f827 	bl	8007ba8 <hagl_draw_line>
#endif
}
 8007b5a:	bf00      	nop
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd90      	pop	{r4, r7, pc}

08007b62 <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8007b62:	b590      	push	{r4, r7, lr}
 8007b64:	b085      	sub	sp, #20
 8007b66:	af02      	add	r7, sp, #8
 8007b68:	4604      	mov	r4, r0
 8007b6a:	4608      	mov	r0, r1
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	461a      	mov	r2, r3
 8007b70:	4623      	mov	r3, r4
 8007b72:	80fb      	strh	r3, [r7, #6]
 8007b74:	4603      	mov	r3, r0
 8007b76:	80bb      	strh	r3, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	807b      	strh	r3, [r7, #2]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8007b80:	88ba      	ldrh	r2, [r7, #4]
 8007b82:	887b      	ldrh	r3, [r7, #2]
 8007b84:	4413      	add	r3, r2
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	b21c      	sxth	r4, r3
 8007b8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007b8e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007b92:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007b96:	883b      	ldrh	r3, [r7, #0]
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	4623      	mov	r3, r4
 8007b9c:	f000 f804 	bl	8007ba8 <hagl_draw_line>
#endif
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd90      	pop	{r4, r7, pc}

08007ba8 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8007ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007baa:	b089      	sub	sp, #36	; 0x24
 8007bac:	af02      	add	r7, sp, #8
 8007bae:	4604      	mov	r4, r0
 8007bb0:	4608      	mov	r0, r1
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	4623      	mov	r3, r4
 8007bb8:	80fb      	strh	r3, [r7, #6]
 8007bba:	4603      	mov	r3, r0
 8007bbc:	80bb      	strh	r3, [r7, #4]
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	807b      	strh	r3, [r7, #2]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8007bc6:	463b      	mov	r3, r7
 8007bc8:	1cba      	adds	r2, r7, #2
 8007bca:	1d3d      	adds	r5, r7, #4
 8007bcc:	1dbc      	adds	r4, r7, #6
 8007bce:	494a      	ldr	r1, [pc, #296]	; (8007cf8 <hagl_draw_line+0x150>)
 8007bd0:	466e      	mov	r6, sp
 8007bd2:	c903      	ldmia	r1, {r0, r1}
 8007bd4:	e886 0003 	stmia.w	r6, {r0, r1}
 8007bd8:	4629      	mov	r1, r5
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f7ff fd8f 	bl	80076fe <clip_line>
 8007be0:	4603      	mov	r3, r0
 8007be2:	f083 0301 	eor.w	r3, r3, #1
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d17e      	bne.n	8007cea <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8007bec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	bfb8      	it	lt
 8007bfc:	425b      	neglt	r3, r3
 8007bfe:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8007c00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007c04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	da01      	bge.n	8007c10 <hagl_draw_line+0x68>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e001      	b.n	8007c14 <hagl_draw_line+0x6c>
 8007c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c14:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8007c16:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	bfb8      	it	lt
 8007c26:	425b      	neglt	r3, r3
 8007c28:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8007c2a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007c2e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	da01      	bge.n	8007c3a <hagl_draw_line+0x92>
 8007c36:	2301      	movs	r3, #1
 8007c38:	e001      	b.n	8007c3e <hagl_draw_line+0x96>
 8007c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c3e:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8007c40:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007c44:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	dd06      	ble.n	8007c5a <hagl_draw_line+0xb2>
 8007c4c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007c50:	0fda      	lsrs	r2, r3, #31
 8007c52:	4413      	add	r3, r2
 8007c54:	105b      	asrs	r3, r3, #1
 8007c56:	b21b      	sxth	r3, r3
 8007c58:	e006      	b.n	8007c68 <hagl_draw_line+0xc0>
 8007c5a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007c5e:	0fda      	lsrs	r2, r3, #31
 8007c60:	4413      	add	r3, r2
 8007c62:	105b      	asrs	r3, r3, #1
 8007c64:	425b      	negs	r3, r3
 8007c66:	b21b      	sxth	r3, r3
 8007c68:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8007c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c6e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007c72:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7ff ff1f 	bl	8007ab8 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8007c7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007c7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d105      	bne.n	8007c92 <hagl_draw_line+0xea>
 8007c86:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007c8a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d02d      	beq.n	8007cee <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8007c92:	8afb      	ldrh	r3, [r7, #22]
 8007c94:	005b      	lsls	r3, r3, #1
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 8007c9a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007c9e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007ca2:	425b      	negs	r3, r3
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	dd0c      	ble.n	8007cc2 <hagl_draw_line+0x11a>
            err -= dy;
 8007ca8:	8afa      	ldrh	r2, [r7, #22]
 8007caa:	8a3b      	ldrh	r3, [r7, #16]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8007cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	8a7b      	ldrh	r3, [r7, #18]
 8007cba:	4413      	add	r3, r2
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	b21b      	sxth	r3, r3
 8007cc0:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8007cc2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007cc6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	dacd      	bge.n	8007c6a <hagl_draw_line+0xc2>
            err += dx;
 8007cce:	8afa      	ldrh	r2, [r7, #22]
 8007cd0:	8abb      	ldrh	r3, [r7, #20]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8007cd8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	89fb      	ldrh	r3, [r7, #14]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	b21b      	sxth	r3, r3
 8007ce6:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8007ce8:	e7bf      	b.n	8007c6a <hagl_draw_line+0xc2>
        return;
 8007cea:	bf00      	nop
 8007cec:	e000      	b.n	8007cf0 <hagl_draw_line+0x148>
            break;
 8007cee:	bf00      	nop
        }
    }
}
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	2000000c 	.word	0x2000000c

08007cfc <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8007cfc:	b590      	push	{r4, r7, lr}
 8007cfe:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8007d0a:	f844 0c24 	str.w	r0, [r4, #-36]
 8007d0e:	460c      	mov	r4, r1
 8007d10:	4610      	mov	r0, r2
 8007d12:	4619      	mov	r1, r3
 8007d14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d18:	4622      	mov	r2, r4
 8007d1a:	f823 2c26 	strh.w	r2, [r3, #-38]
 8007d1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d22:	4602      	mov	r2, r0
 8007d24:	f823 2c28 	strh.w	r2, [r3, #-40]
 8007d28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d2c:	460a      	mov	r2, r1
 8007d2e:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8007d32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d36:	4619      	mov	r1, r3
 8007d38:	f107 0310 	add.w	r3, r7, #16
 8007d3c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d40:	6812      	ldr	r2, [r2, #0]
 8007d42:	f851 1c24 	ldr.w	r1, [r1, #-36]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7ff fe11 	bl	800796e <fontx_glyph>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007d52:	f102 0209 	add.w	r2, r2, #9
 8007d56:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 8007d58:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007d5c:	f103 0309 	add.w	r3, r3, #9
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <hagl_put_char+0x6e>
        return 0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	e0c0      	b.n	8007eec <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 8007d6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d6e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d78:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 8007d7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d80:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d8a:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 8007d8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d92:	2210      	movs	r2, #16
 8007d94:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8007d98:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007d9c:	3a08      	subs	r2, #8
 8007d9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007da2:	3b18      	subs	r3, #24
 8007da4:	4611      	mov	r1, r2
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7ff fc4b 	bl	8007642 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8007dac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007db0:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8007db4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007db8:	f102 020c 	add.w	r2, r2, #12
 8007dbc:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007dc4:	f102 020b 	add.w	r2, r2, #11
 8007dc8:	7013      	strb	r3, [r2, #0]
 8007dca:	e071      	b.n	8007eb0 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8007dcc:	2300      	movs	r3, #0
 8007dce:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007dd2:	f102 020a 	add.w	r2, r2, #10
 8007dd6:	7013      	strb	r3, [r2, #0]
 8007dd8:	e047      	b.n	8007e6a <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8007dda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007dde:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	b25a      	sxtb	r2, r3
 8007de6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007dea:	f103 030a 	add.w	r3, r3, #10
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	f003 0307 	and.w	r3, r3, #7
 8007df4:	2180      	movs	r1, #128	; 0x80
 8007df6:	fa41 f303 	asr.w	r3, r1, r3
 8007dfa:	b25b      	sxtb	r3, r3
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	b25b      	sxtb	r3, r3
 8007e00:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007e04:	f102 0208 	add.w	r2, r2, #8
 8007e08:	7013      	strb	r3, [r2, #0]
            if (set) {
 8007e0a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007e0e:	f103 0308 	add.w	r3, r3, #8
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d010      	beq.n	8007e3a <hagl_put_char+0x13e>
                *(ptr++) = color;
 8007e18:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007e1c:	f103 030c 	add.w	r3, r3, #12
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	1c9a      	adds	r2, r3, #2
 8007e24:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8007e28:	f101 010c 	add.w	r1, r1, #12
 8007e2c:	600a      	str	r2, [r1, #0]
 8007e2e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007e32:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 8007e36:	801a      	strh	r2, [r3, #0]
 8007e38:	e00c      	b.n	8007e54 <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 8007e3a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007e3e:	f103 030c 	add.w	r3, r3, #12
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	1c9a      	adds	r2, r3, #2
 8007e46:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8007e4a:	f101 010c 	add.w	r1, r1, #12
 8007e4e:	600a      	str	r2, [r1, #0]
 8007e50:	2200      	movs	r2, #0
 8007e52:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8007e54:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007e58:	f103 030a 	add.w	r3, r3, #10
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007e64:	f102 020a 	add.w	r2, r2, #10
 8007e68:	7013      	strb	r3, [r2, #0]
 8007e6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e6e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007e72:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007e76:	f102 020a 	add.w	r2, r2, #10
 8007e7a:	7812      	ldrb	r2, [r2, #0]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d3ac      	bcc.n	8007dda <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 8007e80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e84:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8007e88:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007e8c:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8007e90:	4413      	add	r3, r2
 8007e92:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007e96:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8007e9a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007e9e:	f103 030b 	add.w	r3, r3, #11
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007eaa:	f102 020b 	add.w	r2, r2, #11
 8007eae:	7013      	strb	r3, [r2, #0]
 8007eb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007eb4:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8007eb8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007ebc:	f102 020b 	add.w	r2, r2, #11
 8007ec0:	7812      	ldrb	r2, [r2, #0]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d382      	bcc.n	8007dcc <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 8007ec6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007eca:	3b18      	subs	r3, #24
 8007ecc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007ed0:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8007ed4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007ed8:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8007edc:	461a      	mov	r2, r3
 8007ede:	f000 f85a 	bl	8007f96 <hagl_blit>

    return bitmap.width;
 8007ee2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ee6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007eea:	b2db      	uxtb	r3, r3
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd90      	pop	{r4, r7, pc}

08007ef8 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08c      	sub	sp, #48	; 0x30
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	4608      	mov	r0, r1
 8007f02:	4611      	mov	r1, r2
 8007f04:	461a      	mov	r2, r3
 8007f06:	4603      	mov	r3, r0
 8007f08:	817b      	strh	r3, [r7, #10]
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	813b      	strh	r3, [r7, #8]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8007f12:	897b      	ldrh	r3, [r7, #10]
 8007f14:	84fb      	strh	r3, [r7, #38]	; 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8007f16:	f107 0314 	add.w	r3, r7, #20
 8007f1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7ff fd09 	bl	8007934 <fontx_meta>
 8007f22:	4603      	mov	r3, r0
 8007f24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if (0 != status) {
 8007f28:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <hagl_put_text+0x3c>
        return 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	e02c      	b.n	8007f8e <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	1d1a      	adds	r2, r3, #4
 8007f38:	60fa      	str	r2, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	2b0d      	cmp	r3, #13
 8007f42:	d002      	beq.n	8007f4a <hagl_put_text+0x52>
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	2b0a      	cmp	r3, #10
 8007f48:	d108      	bne.n	8007f5c <hagl_put_text+0x64>
            x0 = 0;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8007f4e:	7fbb      	ldrb	r3, [r7, #30]
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	893b      	ldrh	r3, [r7, #8]
 8007f54:	4413      	add	r3, r2
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	813b      	strh	r3, [r7, #8]
 8007f5a:	e010      	b.n	8007f7e <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8007f5c:	88f8      	ldrh	r0, [r7, #6]
 8007f5e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007f62:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8007f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	6a38      	ldr	r0, [r7, #32]
 8007f6e:	f7ff fec5 	bl	8007cfc <hagl_put_char>
 8007f72:	4603      	mov	r3, r0
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	897b      	ldrh	r3, [r7, #10]
 8007f78:	4413      	add	r3, r2
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1d6      	bne.n	8007f34 <hagl_put_text+0x3c>

    return x0 - original;
 8007f86:	897a      	ldrh	r2, [r7, #10]
 8007f88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	b29b      	uxth	r3, r3
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3728      	adds	r7, #40	; 0x28
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b086      	sub	sp, #24
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	603a      	str	r2, [r7, #0]
 8007fa0:	80fb      	strh	r3, [r7, #6]
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8007fac:	2300      	movs	r3, #0
 8007fae:	827b      	strh	r3, [r7, #18]
 8007fb0:	e020      	b.n	8007ff4 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	823b      	strh	r3, [r7, #16]
 8007fb6:	e015      	b.n	8007fe4 <hagl_blit+0x4e>
            color = *(ptr++);
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	1c9a      	adds	r2, r3, #2
 8007fbc:	617a      	str	r2, [r7, #20]
 8007fbe:	881b      	ldrh	r3, [r3, #0]
 8007fc0:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8007fc2:	88fa      	ldrh	r2, [r7, #6]
 8007fc4:	8a3b      	ldrh	r3, [r7, #16]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	b218      	sxth	r0, r3
 8007fcc:	88ba      	ldrh	r2, [r7, #4]
 8007fce:	8a7b      	ldrh	r3, [r7, #18]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	b21b      	sxth	r3, r3
 8007fd6:	89fa      	ldrh	r2, [r7, #14]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	f7ff fd6d 	bl	8007ab8 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8007fde:	8a3b      	ldrh	r3, [r7, #16]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	823b      	strh	r3, [r7, #16]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	8a3a      	ldrh	r2, [r7, #16]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d3e4      	bcc.n	8007fb8 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8007fee:	8a7b      	ldrh	r3, [r7, #18]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	827b      	strh	r3, [r7, #18]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	885b      	ldrh	r3, [r3, #2]
 8007ff8:	8a7a      	ldrh	r2, [r7, #18]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d3d9      	bcc.n	8007fb2 <hagl_blit+0x1c>
        }
    }
#endif
};
 8007ffe:	bf00      	nop
 8008000:	bf00      	nop
 8008002:	3718      	adds	r7, #24
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <hagl_draw_rounded_rectangle>:
void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
    hagl_fill_polygon(3, vertices, color);
}

void hagl_draw_rounded_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t r, color_t color) {
 8008008:	b590      	push	{r4, r7, lr}
 800800a:	b087      	sub	sp, #28
 800800c:	af00      	add	r7, sp, #0
 800800e:	4604      	mov	r4, r0
 8008010:	4608      	mov	r0, r1
 8008012:	4611      	mov	r1, r2
 8008014:	461a      	mov	r2, r3
 8008016:	4623      	mov	r3, r4
 8008018:	80fb      	strh	r3, [r7, #6]
 800801a:	4603      	mov	r3, r0
 800801c:	80bb      	strh	r3, [r7, #4]
 800801e:	460b      	mov	r3, r1
 8008020:	807b      	strh	r3, [r7, #2]
 8008022:	4613      	mov	r3, r2
 8008024:	803b      	strh	r3, [r7, #0]

    uint16_t width, height;
    int16_t x, y, d;

    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8008026:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800802a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800802e:	429a      	cmp	r2, r3
 8008030:	dd0e      	ble.n	8008050 <hagl_draw_rounded_rectangle+0x48>
        x0 = x0 + x1;
 8008032:	88fa      	ldrh	r2, [r7, #6]
 8008034:	887b      	ldrh	r3, [r7, #2]
 8008036:	4413      	add	r3, r2
 8008038:	b29b      	uxth	r3, r3
 800803a:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800803c:	88fa      	ldrh	r2, [r7, #6]
 800803e:	887b      	ldrh	r3, [r7, #2]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	b29b      	uxth	r3, r3
 8008044:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8008046:	88fa      	ldrh	r2, [r7, #6]
 8008048:	887b      	ldrh	r3, [r7, #2]
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	b29b      	uxth	r3, r3
 800804e:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8008050:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008054:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008058:	429a      	cmp	r2, r3
 800805a:	dd0e      	ble.n	800807a <hagl_draw_rounded_rectangle+0x72>
        y0 = y0 + y1;
 800805c:	88ba      	ldrh	r2, [r7, #4]
 800805e:	883b      	ldrh	r3, [r7, #0]
 8008060:	4413      	add	r3, r2
 8008062:	b29b      	uxth	r3, r3
 8008064:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8008066:	88ba      	ldrh	r2, [r7, #4]
 8008068:	883b      	ldrh	r3, [r7, #0]
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	b29b      	uxth	r3, r3
 800806e:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8008070:	88ba      	ldrh	r2, [r7, #4]
 8008072:	883b      	ldrh	r3, [r7, #0]
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	b29b      	uxth	r3, r3
 8008078:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800807a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800807e:	4a52      	ldr	r2, [pc, #328]	; (80081c8 <hagl_draw_rounded_rectangle+0x1c0>)
 8008080:	8812      	ldrh	r2, [r2, #0]
 8008082:	4293      	cmp	r3, r2
 8008084:	f2c0 8153 	blt.w	800832e <hagl_draw_rounded_rectangle+0x326>
 8008088:	f9b7 3000 	ldrsh.w	r3, [r7]
 800808c:	4a4e      	ldr	r2, [pc, #312]	; (80081c8 <hagl_draw_rounded_rectangle+0x1c0>)
 800808e:	8852      	ldrh	r2, [r2, #2]
 8008090:	4293      	cmp	r3, r2
 8008092:	f2c0 814c 	blt.w	800832e <hagl_draw_rounded_rectangle+0x326>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8008096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800809a:	4a4b      	ldr	r2, [pc, #300]	; (80081c8 <hagl_draw_rounded_rectangle+0x1c0>)
 800809c:	8892      	ldrh	r2, [r2, #4]
 800809e:	4293      	cmp	r3, r2
 80080a0:	f300 8147 	bgt.w	8008332 <hagl_draw_rounded_rectangle+0x32a>
 80080a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80080a8:	4a47      	ldr	r2, [pc, #284]	; (80081c8 <hagl_draw_rounded_rectangle+0x1c0>)
 80080aa:	88d2      	ldrh	r2, [r2, #6]
 80080ac:	4293      	cmp	r3, r2
 80080ae:	f300 8140 	bgt.w	8008332 <hagl_draw_rounded_rectangle+0x32a>
        return;
    }

    /* Max radius is half of shortest edge. */
    width = x1 - x0 + 1;
 80080b2:	887a      	ldrh	r2, [r7, #2]
 80080b4:	88fb      	ldrh	r3, [r7, #6]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	3301      	adds	r3, #1
 80080bc:	823b      	strh	r3, [r7, #16]
    height = y1 - y0 + 1;
 80080be:	883a      	ldrh	r2, [r7, #0]
 80080c0:	88bb      	ldrh	r3, [r7, #4]
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	3301      	adds	r3, #1
 80080c8:	81fb      	strh	r3, [r7, #14]
    r = min(r, min(width / 2, height / 2));
 80080ca:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 80080ce:	8a3b      	ldrh	r3, [r7, #16]
 80080d0:	085b      	lsrs	r3, r3, #1
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	461a      	mov	r2, r3
 80080d6:	89fb      	ldrh	r3, [r7, #14]
 80080d8:	085b      	lsrs	r3, r3, #1
 80080da:	b29b      	uxth	r3, r3
 80080dc:	4619      	mov	r1, r3
 80080de:	4610      	mov	r0, r2
 80080e0:	f7ff fcd7 	bl	8007a92 <min>
 80080e4:	4603      	mov	r3, r0
 80080e6:	4619      	mov	r1, r3
 80080e8:	4620      	mov	r0, r4
 80080ea:	f7ff fcd2 	bl	8007a92 <min>
 80080ee:	4603      	mov	r3, r0
 80080f0:	853b      	strh	r3, [r7, #40]	; 0x28

    hagl_draw_hline(x0 + r, y0, width - 2 * r, color);
 80080f2:	88fa      	ldrh	r2, [r7, #6]
 80080f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080f6:	4413      	add	r3, r2
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	b218      	sxth	r0, r3
 80080fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080fe:	005b      	lsls	r3, r3, #1
 8008100:	b29b      	uxth	r3, r3
 8008102:	8a3a      	ldrh	r2, [r7, #16]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	b29a      	uxth	r2, r3
 8008108:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800810a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800810e:	f7ff fd05 	bl	8007b1c <hagl_draw_hline>
    hagl_draw_hline(x0 + r, y1, width - 2 * r, color);
 8008112:	88fa      	ldrh	r2, [r7, #6]
 8008114:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008116:	4413      	add	r3, r2
 8008118:	b29b      	uxth	r3, r3
 800811a:	b218      	sxth	r0, r3
 800811c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800811e:	005b      	lsls	r3, r3, #1
 8008120:	b29b      	uxth	r3, r3
 8008122:	8a3a      	ldrh	r2, [r7, #16]
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	b29a      	uxth	r2, r3
 8008128:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800812a:	f9b7 1000 	ldrsh.w	r1, [r7]
 800812e:	f7ff fcf5 	bl	8007b1c <hagl_draw_hline>
    hagl_draw_vline(x0, y0 + r, height - 2 * r, color);
 8008132:	88ba      	ldrh	r2, [r7, #4]
 8008134:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008136:	4413      	add	r3, r2
 8008138:	b29b      	uxth	r3, r3
 800813a:	b219      	sxth	r1, r3
 800813c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800813e:	005b      	lsls	r3, r3, #1
 8008140:	b29b      	uxth	r3, r3
 8008142:	89fa      	ldrh	r2, [r7, #14]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	b29a      	uxth	r2, r3
 8008148:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800814a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800814e:	f7ff fd08 	bl	8007b62 <hagl_draw_vline>
    hagl_draw_vline(x1, y0 + r, height - 2 * r, color);
 8008152:	88ba      	ldrh	r2, [r7, #4]
 8008154:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008156:	4413      	add	r3, r2
 8008158:	b29b      	uxth	r3, r3
 800815a:	b219      	sxth	r1, r3
 800815c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800815e:	005b      	lsls	r3, r3, #1
 8008160:	b29b      	uxth	r3, r3
 8008162:	89fa      	ldrh	r2, [r7, #14]
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	b29a      	uxth	r2, r3
 8008168:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800816a:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800816e:	f7ff fcf8 	bl	8007b62 <hagl_draw_vline>

    x = 0;
 8008172:	2300      	movs	r3, #0
 8008174:	82fb      	strh	r3, [r7, #22]
    y = r;
 8008176:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008178:	82bb      	strh	r3, [r7, #20]
    d = 3 - 2 * r;
 800817a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800817c:	005b      	lsls	r3, r3, #1
 800817e:	b29b      	uxth	r3, r3
 8008180:	f1c3 0303 	rsb	r3, r3, #3
 8008184:	b29b      	uxth	r3, r3
 8008186:	827b      	strh	r3, [r7, #18]

    while (y >= x) {
 8008188:	e0c9      	b.n	800831e <hagl_draw_rounded_rectangle+0x316>
        x++;
 800818a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800818e:	b29b      	uxth	r3, r3
 8008190:	3301      	adds	r3, #1
 8008192:	b29b      	uxth	r3, r3
 8008194:	82fb      	strh	r3, [r7, #22]

        if (d > 0) {
 8008196:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800819a:	2b00      	cmp	r3, #0
 800819c:	dd16      	ble.n	80081cc <hagl_draw_rounded_rectangle+0x1c4>
            y--;
 800819e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	3b01      	subs	r3, #1
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	82bb      	strh	r3, [r7, #20]
            d = d + 4 * (x - y) + 10;
 80081aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80081ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	8a7b      	ldrh	r3, [r7, #18]
 80081bc:	4413      	add	r3, r2
 80081be:	b29b      	uxth	r3, r3
 80081c0:	330a      	adds	r3, #10
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	827b      	strh	r3, [r7, #18]
 80081c6:	e00a      	b.n	80081de <hagl_draw_rounded_rectangle+0x1d6>
 80081c8:	2000000c 	.word	0x2000000c
        } else {
            d = d + 4 * x + 6;
 80081cc:	8afb      	ldrh	r3, [r7, #22]
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	8a7b      	ldrh	r3, [r7, #18]
 80081d4:	4413      	add	r3, r2
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	3306      	adds	r3, #6
 80081da:	b29b      	uxth	r3, r3
 80081dc:	827b      	strh	r3, [r7, #18]
        }

        /* Top right */
        hagl_put_pixel(x1 - r + x, y0 + r - y, color);
 80081de:	887a      	ldrh	r2, [r7, #2]
 80081e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	8afb      	ldrh	r3, [r7, #22]
 80081e8:	4413      	add	r3, r2
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	b218      	sxth	r0, r3
 80081ee:	88ba      	ldrh	r2, [r7, #4]
 80081f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081f2:	4413      	add	r3, r2
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	8abb      	ldrh	r3, [r7, #20]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	b21b      	sxth	r3, r3
 80081fe:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008200:	4619      	mov	r1, r3
 8008202:	f7ff fc59 	bl	8007ab8 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y0 + r - x, color);
 8008206:	887a      	ldrh	r2, [r7, #2]
 8008208:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	b29a      	uxth	r2, r3
 800820e:	8abb      	ldrh	r3, [r7, #20]
 8008210:	4413      	add	r3, r2
 8008212:	b29b      	uxth	r3, r3
 8008214:	b218      	sxth	r0, r3
 8008216:	88ba      	ldrh	r2, [r7, #4]
 8008218:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800821a:	4413      	add	r3, r2
 800821c:	b29a      	uxth	r2, r3
 800821e:	8afb      	ldrh	r3, [r7, #22]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	b29b      	uxth	r3, r3
 8008224:	b21b      	sxth	r3, r3
 8008226:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008228:	4619      	mov	r1, r3
 800822a:	f7ff fc45 	bl	8007ab8 <hagl_put_pixel>

        /* Top left */
        hagl_put_pixel(x0 + r - x, y0 + r - y, color);
 800822e:	88fa      	ldrh	r2, [r7, #6]
 8008230:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008232:	4413      	add	r3, r2
 8008234:	b29a      	uxth	r2, r3
 8008236:	8afb      	ldrh	r3, [r7, #22]
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	b29b      	uxth	r3, r3
 800823c:	b218      	sxth	r0, r3
 800823e:	88ba      	ldrh	r2, [r7, #4]
 8008240:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008242:	4413      	add	r3, r2
 8008244:	b29a      	uxth	r2, r3
 8008246:	8abb      	ldrh	r3, [r7, #20]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	b29b      	uxth	r3, r3
 800824c:	b21b      	sxth	r3, r3
 800824e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008250:	4619      	mov	r1, r3
 8008252:	f7ff fc31 	bl	8007ab8 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y0 + r - x, color);
 8008256:	88fa      	ldrh	r2, [r7, #6]
 8008258:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800825a:	4413      	add	r3, r2
 800825c:	b29a      	uxth	r2, r3
 800825e:	8abb      	ldrh	r3, [r7, #20]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	b29b      	uxth	r3, r3
 8008264:	b218      	sxth	r0, r3
 8008266:	88ba      	ldrh	r2, [r7, #4]
 8008268:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800826a:	4413      	add	r3, r2
 800826c:	b29a      	uxth	r2, r3
 800826e:	8afb      	ldrh	r3, [r7, #22]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	b29b      	uxth	r3, r3
 8008274:	b21b      	sxth	r3, r3
 8008276:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008278:	4619      	mov	r1, r3
 800827a:	f7ff fc1d 	bl	8007ab8 <hagl_put_pixel>

        /* Bottom right */
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 800827e:	887a      	ldrh	r2, [r7, #2]
 8008280:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008282:	1ad3      	subs	r3, r2, r3
 8008284:	b29a      	uxth	r2, r3
 8008286:	8afb      	ldrh	r3, [r7, #22]
 8008288:	4413      	add	r3, r2
 800828a:	b29b      	uxth	r3, r3
 800828c:	b218      	sxth	r0, r3
 800828e:	883a      	ldrh	r2, [r7, #0]
 8008290:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	b29a      	uxth	r2, r3
 8008296:	8abb      	ldrh	r3, [r7, #20]
 8008298:	4413      	add	r3, r2
 800829a:	b29b      	uxth	r3, r3
 800829c:	b21b      	sxth	r3, r3
 800829e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80082a0:	4619      	mov	r1, r3
 80082a2:	f7ff fc09 	bl	8007ab8 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y1 - r + x, color);
 80082a6:	887a      	ldrh	r2, [r7, #2]
 80082a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	8abb      	ldrh	r3, [r7, #20]
 80082b0:	4413      	add	r3, r2
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	b218      	sxth	r0, r3
 80082b6:	883a      	ldrh	r2, [r7, #0]
 80082b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	b29a      	uxth	r2, r3
 80082be:	8afb      	ldrh	r3, [r7, #22]
 80082c0:	4413      	add	r3, r2
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	b21b      	sxth	r3, r3
 80082c6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80082c8:	4619      	mov	r1, r3
 80082ca:	f7ff fbf5 	bl	8007ab8 <hagl_put_pixel>

        /* Bottom left */
        hagl_put_pixel(x0 + r - x, y1 - r + y, color);
 80082ce:	88fa      	ldrh	r2, [r7, #6]
 80082d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082d2:	4413      	add	r3, r2
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	8afb      	ldrh	r3, [r7, #22]
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	b29b      	uxth	r3, r3
 80082dc:	b218      	sxth	r0, r3
 80082de:	883a      	ldrh	r2, [r7, #0]
 80082e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	8abb      	ldrh	r3, [r7, #20]
 80082e8:	4413      	add	r3, r2
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	b21b      	sxth	r3, r3
 80082ee:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80082f0:	4619      	mov	r1, r3
 80082f2:	f7ff fbe1 	bl	8007ab8 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y1 - r + x, color);
 80082f6:	88fa      	ldrh	r2, [r7, #6]
 80082f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082fa:	4413      	add	r3, r2
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	8abb      	ldrh	r3, [r7, #20]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	b29b      	uxth	r3, r3
 8008304:	b218      	sxth	r0, r3
 8008306:	883a      	ldrh	r2, [r7, #0]
 8008308:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	b29a      	uxth	r2, r3
 800830e:	8afb      	ldrh	r3, [r7, #22]
 8008310:	4413      	add	r3, r2
 8008312:	b29b      	uxth	r3, r3
 8008314:	b21b      	sxth	r3, r3
 8008316:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008318:	4619      	mov	r1, r3
 800831a:	f7ff fbcd 	bl	8007ab8 <hagl_put_pixel>
    while (y >= x) {
 800831e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8008322:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008326:	429a      	cmp	r2, r3
 8008328:	f6bf af2f 	bge.w	800818a <hagl_draw_rounded_rectangle+0x182>
 800832c:	e002      	b.n	8008334 <hagl_draw_rounded_rectangle+0x32c>
        return;
 800832e:	bf00      	nop
 8008330:	e000      	b.n	8008334 <hagl_draw_rounded_rectangle+0x32c>
        return;
 8008332:	bf00      	nop
    }
};
 8008334:	371c      	adds	r7, #28
 8008336:	46bd      	mov	sp, r7
 8008338:	bd90      	pop	{r4, r7, pc}
 800833a:	bf00      	nop

0800833c <rgb565>:
#include <stdint.h>

#include "rgb565.h"

uint16_t rgb565(uint8_t r, uint8_t g, uint8_t b)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	4603      	mov	r3, r0
 8008344:	71fb      	strb	r3, [r7, #7]
 8008346:	460b      	mov	r3, r1
 8008348:	71bb      	strb	r3, [r7, #6]
 800834a:	4613      	mov	r3, r2
 800834c:	717b      	strb	r3, [r7, #5]
    uint16_t rgb;

    rgb = ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
 800834e:	79fb      	ldrb	r3, [r7, #7]
 8008350:	021b      	lsls	r3, r3, #8
 8008352:	b21b      	sxth	r3, r3
 8008354:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008358:	f023 0307 	bic.w	r3, r3, #7
 800835c:	b21a      	sxth	r2, r3
 800835e:	79bb      	ldrb	r3, [r7, #6]
 8008360:	00db      	lsls	r3, r3, #3
 8008362:	b21b      	sxth	r3, r3
 8008364:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8008368:	b21b      	sxth	r3, r3
 800836a:	4313      	orrs	r3, r2
 800836c:	b21a      	sxth	r2, r3
 800836e:	797b      	ldrb	r3, [r7, #5]
 8008370:	08db      	lsrs	r3, r3, #3
 8008372:	b2db      	uxtb	r3, r3
 8008374:	b21b      	sxth	r3, r3
 8008376:	4313      	orrs	r3, r2
 8008378:	b21b      	sxth	r3, r3
 800837a:	81fb      	strh	r3, [r7, #14]
    rgb = (((rgb) << 8) & 0xFF00) | (((rgb) >> 8) & 0xFF);
 800837c:	89fb      	ldrh	r3, [r7, #14]
 800837e:	021b      	lsls	r3, r3, #8
 8008380:	b21a      	sxth	r2, r3
 8008382:	89fb      	ldrh	r3, [r7, #14]
 8008384:	0a1b      	lsrs	r3, r3, #8
 8008386:	b29b      	uxth	r3, r3
 8008388:	b21b      	sxth	r3, r3
 800838a:	4313      	orrs	r3, r2
 800838c:	b21b      	sxth	r3, r3
 800838e:	81fb      	strh	r3, [r7, #14]

    return rgb;
 8008390:	89fb      	ldrh	r3, [r7, #14]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
	...

080083a0 <__errno>:
 80083a0:	4b01      	ldr	r3, [pc, #4]	; (80083a8 <__errno+0x8>)
 80083a2:	6818      	ldr	r0, [r3, #0]
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	20000014 	.word	0x20000014

080083ac <__sflush_r>:
 80083ac:	898a      	ldrh	r2, [r1, #12]
 80083ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083b2:	4605      	mov	r5, r0
 80083b4:	0710      	lsls	r0, r2, #28
 80083b6:	460c      	mov	r4, r1
 80083b8:	d458      	bmi.n	800846c <__sflush_r+0xc0>
 80083ba:	684b      	ldr	r3, [r1, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	dc05      	bgt.n	80083cc <__sflush_r+0x20>
 80083c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	dc02      	bgt.n	80083cc <__sflush_r+0x20>
 80083c6:	2000      	movs	r0, #0
 80083c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083ce:	2e00      	cmp	r6, #0
 80083d0:	d0f9      	beq.n	80083c6 <__sflush_r+0x1a>
 80083d2:	2300      	movs	r3, #0
 80083d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80083d8:	682f      	ldr	r7, [r5, #0]
 80083da:	602b      	str	r3, [r5, #0]
 80083dc:	d032      	beq.n	8008444 <__sflush_r+0x98>
 80083de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80083e0:	89a3      	ldrh	r3, [r4, #12]
 80083e2:	075a      	lsls	r2, r3, #29
 80083e4:	d505      	bpl.n	80083f2 <__sflush_r+0x46>
 80083e6:	6863      	ldr	r3, [r4, #4]
 80083e8:	1ac0      	subs	r0, r0, r3
 80083ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083ec:	b10b      	cbz	r3, 80083f2 <__sflush_r+0x46>
 80083ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083f0:	1ac0      	subs	r0, r0, r3
 80083f2:	2300      	movs	r3, #0
 80083f4:	4602      	mov	r2, r0
 80083f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083f8:	6a21      	ldr	r1, [r4, #32]
 80083fa:	4628      	mov	r0, r5
 80083fc:	47b0      	blx	r6
 80083fe:	1c43      	adds	r3, r0, #1
 8008400:	89a3      	ldrh	r3, [r4, #12]
 8008402:	d106      	bne.n	8008412 <__sflush_r+0x66>
 8008404:	6829      	ldr	r1, [r5, #0]
 8008406:	291d      	cmp	r1, #29
 8008408:	d82c      	bhi.n	8008464 <__sflush_r+0xb8>
 800840a:	4a2a      	ldr	r2, [pc, #168]	; (80084b4 <__sflush_r+0x108>)
 800840c:	40ca      	lsrs	r2, r1
 800840e:	07d6      	lsls	r6, r2, #31
 8008410:	d528      	bpl.n	8008464 <__sflush_r+0xb8>
 8008412:	2200      	movs	r2, #0
 8008414:	6062      	str	r2, [r4, #4]
 8008416:	04d9      	lsls	r1, r3, #19
 8008418:	6922      	ldr	r2, [r4, #16]
 800841a:	6022      	str	r2, [r4, #0]
 800841c:	d504      	bpl.n	8008428 <__sflush_r+0x7c>
 800841e:	1c42      	adds	r2, r0, #1
 8008420:	d101      	bne.n	8008426 <__sflush_r+0x7a>
 8008422:	682b      	ldr	r3, [r5, #0]
 8008424:	b903      	cbnz	r3, 8008428 <__sflush_r+0x7c>
 8008426:	6560      	str	r0, [r4, #84]	; 0x54
 8008428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800842a:	602f      	str	r7, [r5, #0]
 800842c:	2900      	cmp	r1, #0
 800842e:	d0ca      	beq.n	80083c6 <__sflush_r+0x1a>
 8008430:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008434:	4299      	cmp	r1, r3
 8008436:	d002      	beq.n	800843e <__sflush_r+0x92>
 8008438:	4628      	mov	r0, r5
 800843a:	f000 fa11 	bl	8008860 <_free_r>
 800843e:	2000      	movs	r0, #0
 8008440:	6360      	str	r0, [r4, #52]	; 0x34
 8008442:	e7c1      	b.n	80083c8 <__sflush_r+0x1c>
 8008444:	6a21      	ldr	r1, [r4, #32]
 8008446:	2301      	movs	r3, #1
 8008448:	4628      	mov	r0, r5
 800844a:	47b0      	blx	r6
 800844c:	1c41      	adds	r1, r0, #1
 800844e:	d1c7      	bne.n	80083e0 <__sflush_r+0x34>
 8008450:	682b      	ldr	r3, [r5, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d0c4      	beq.n	80083e0 <__sflush_r+0x34>
 8008456:	2b1d      	cmp	r3, #29
 8008458:	d001      	beq.n	800845e <__sflush_r+0xb2>
 800845a:	2b16      	cmp	r3, #22
 800845c:	d101      	bne.n	8008462 <__sflush_r+0xb6>
 800845e:	602f      	str	r7, [r5, #0]
 8008460:	e7b1      	b.n	80083c6 <__sflush_r+0x1a>
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008468:	81a3      	strh	r3, [r4, #12]
 800846a:	e7ad      	b.n	80083c8 <__sflush_r+0x1c>
 800846c:	690f      	ldr	r7, [r1, #16]
 800846e:	2f00      	cmp	r7, #0
 8008470:	d0a9      	beq.n	80083c6 <__sflush_r+0x1a>
 8008472:	0793      	lsls	r3, r2, #30
 8008474:	680e      	ldr	r6, [r1, #0]
 8008476:	bf08      	it	eq
 8008478:	694b      	ldreq	r3, [r1, #20]
 800847a:	600f      	str	r7, [r1, #0]
 800847c:	bf18      	it	ne
 800847e:	2300      	movne	r3, #0
 8008480:	eba6 0807 	sub.w	r8, r6, r7
 8008484:	608b      	str	r3, [r1, #8]
 8008486:	f1b8 0f00 	cmp.w	r8, #0
 800848a:	dd9c      	ble.n	80083c6 <__sflush_r+0x1a>
 800848c:	6a21      	ldr	r1, [r4, #32]
 800848e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008490:	4643      	mov	r3, r8
 8008492:	463a      	mov	r2, r7
 8008494:	4628      	mov	r0, r5
 8008496:	47b0      	blx	r6
 8008498:	2800      	cmp	r0, #0
 800849a:	dc06      	bgt.n	80084aa <__sflush_r+0xfe>
 800849c:	89a3      	ldrh	r3, [r4, #12]
 800849e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084a2:	81a3      	strh	r3, [r4, #12]
 80084a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084a8:	e78e      	b.n	80083c8 <__sflush_r+0x1c>
 80084aa:	4407      	add	r7, r0
 80084ac:	eba8 0800 	sub.w	r8, r8, r0
 80084b0:	e7e9      	b.n	8008486 <__sflush_r+0xda>
 80084b2:	bf00      	nop
 80084b4:	20400001 	.word	0x20400001

080084b8 <_fflush_r>:
 80084b8:	b538      	push	{r3, r4, r5, lr}
 80084ba:	690b      	ldr	r3, [r1, #16]
 80084bc:	4605      	mov	r5, r0
 80084be:	460c      	mov	r4, r1
 80084c0:	b913      	cbnz	r3, 80084c8 <_fflush_r+0x10>
 80084c2:	2500      	movs	r5, #0
 80084c4:	4628      	mov	r0, r5
 80084c6:	bd38      	pop	{r3, r4, r5, pc}
 80084c8:	b118      	cbz	r0, 80084d2 <_fflush_r+0x1a>
 80084ca:	6983      	ldr	r3, [r0, #24]
 80084cc:	b90b      	cbnz	r3, 80084d2 <_fflush_r+0x1a>
 80084ce:	f000 f887 	bl	80085e0 <__sinit>
 80084d2:	4b14      	ldr	r3, [pc, #80]	; (8008524 <_fflush_r+0x6c>)
 80084d4:	429c      	cmp	r4, r3
 80084d6:	d11b      	bne.n	8008510 <_fflush_r+0x58>
 80084d8:	686c      	ldr	r4, [r5, #4]
 80084da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d0ef      	beq.n	80084c2 <_fflush_r+0xa>
 80084e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80084e4:	07d0      	lsls	r0, r2, #31
 80084e6:	d404      	bmi.n	80084f2 <_fflush_r+0x3a>
 80084e8:	0599      	lsls	r1, r3, #22
 80084ea:	d402      	bmi.n	80084f2 <_fflush_r+0x3a>
 80084ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084ee:	f000 f93a 	bl	8008766 <__retarget_lock_acquire_recursive>
 80084f2:	4628      	mov	r0, r5
 80084f4:	4621      	mov	r1, r4
 80084f6:	f7ff ff59 	bl	80083ac <__sflush_r>
 80084fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084fc:	07da      	lsls	r2, r3, #31
 80084fe:	4605      	mov	r5, r0
 8008500:	d4e0      	bmi.n	80084c4 <_fflush_r+0xc>
 8008502:	89a3      	ldrh	r3, [r4, #12]
 8008504:	059b      	lsls	r3, r3, #22
 8008506:	d4dd      	bmi.n	80084c4 <_fflush_r+0xc>
 8008508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800850a:	f000 f92d 	bl	8008768 <__retarget_lock_release_recursive>
 800850e:	e7d9      	b.n	80084c4 <_fflush_r+0xc>
 8008510:	4b05      	ldr	r3, [pc, #20]	; (8008528 <_fflush_r+0x70>)
 8008512:	429c      	cmp	r4, r3
 8008514:	d101      	bne.n	800851a <_fflush_r+0x62>
 8008516:	68ac      	ldr	r4, [r5, #8]
 8008518:	e7df      	b.n	80084da <_fflush_r+0x22>
 800851a:	4b04      	ldr	r3, [pc, #16]	; (800852c <_fflush_r+0x74>)
 800851c:	429c      	cmp	r4, r3
 800851e:	bf08      	it	eq
 8008520:	68ec      	ldreq	r4, [r5, #12]
 8008522:	e7da      	b.n	80084da <_fflush_r+0x22>
 8008524:	08039248 	.word	0x08039248
 8008528:	08039268 	.word	0x08039268
 800852c:	08039228 	.word	0x08039228

08008530 <std>:
 8008530:	2300      	movs	r3, #0
 8008532:	b510      	push	{r4, lr}
 8008534:	4604      	mov	r4, r0
 8008536:	e9c0 3300 	strd	r3, r3, [r0]
 800853a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800853e:	6083      	str	r3, [r0, #8]
 8008540:	8181      	strh	r1, [r0, #12]
 8008542:	6643      	str	r3, [r0, #100]	; 0x64
 8008544:	81c2      	strh	r2, [r0, #14]
 8008546:	6183      	str	r3, [r0, #24]
 8008548:	4619      	mov	r1, r3
 800854a:	2208      	movs	r2, #8
 800854c:	305c      	adds	r0, #92	; 0x5c
 800854e:	f000 f97f 	bl	8008850 <memset>
 8008552:	4b05      	ldr	r3, [pc, #20]	; (8008568 <std+0x38>)
 8008554:	6263      	str	r3, [r4, #36]	; 0x24
 8008556:	4b05      	ldr	r3, [pc, #20]	; (800856c <std+0x3c>)
 8008558:	62a3      	str	r3, [r4, #40]	; 0x28
 800855a:	4b05      	ldr	r3, [pc, #20]	; (8008570 <std+0x40>)
 800855c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800855e:	4b05      	ldr	r3, [pc, #20]	; (8008574 <std+0x44>)
 8008560:	6224      	str	r4, [r4, #32]
 8008562:	6323      	str	r3, [r4, #48]	; 0x30
 8008564:	bd10      	pop	{r4, pc}
 8008566:	bf00      	nop
 8008568:	08009431 	.word	0x08009431
 800856c:	08009453 	.word	0x08009453
 8008570:	0800948b 	.word	0x0800948b
 8008574:	080094af 	.word	0x080094af

08008578 <_cleanup_r>:
 8008578:	4901      	ldr	r1, [pc, #4]	; (8008580 <_cleanup_r+0x8>)
 800857a:	f000 b8af 	b.w	80086dc <_fwalk_reent>
 800857e:	bf00      	nop
 8008580:	080084b9 	.word	0x080084b9

08008584 <__sfmoreglue>:
 8008584:	b570      	push	{r4, r5, r6, lr}
 8008586:	2268      	movs	r2, #104	; 0x68
 8008588:	1e4d      	subs	r5, r1, #1
 800858a:	4355      	muls	r5, r2
 800858c:	460e      	mov	r6, r1
 800858e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008592:	f000 f9d1 	bl	8008938 <_malloc_r>
 8008596:	4604      	mov	r4, r0
 8008598:	b140      	cbz	r0, 80085ac <__sfmoreglue+0x28>
 800859a:	2100      	movs	r1, #0
 800859c:	e9c0 1600 	strd	r1, r6, [r0]
 80085a0:	300c      	adds	r0, #12
 80085a2:	60a0      	str	r0, [r4, #8]
 80085a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085a8:	f000 f952 	bl	8008850 <memset>
 80085ac:	4620      	mov	r0, r4
 80085ae:	bd70      	pop	{r4, r5, r6, pc}

080085b0 <__sfp_lock_acquire>:
 80085b0:	4801      	ldr	r0, [pc, #4]	; (80085b8 <__sfp_lock_acquire+0x8>)
 80085b2:	f000 b8d8 	b.w	8008766 <__retarget_lock_acquire_recursive>
 80085b6:	bf00      	nop
 80085b8:	2000a415 	.word	0x2000a415

080085bc <__sfp_lock_release>:
 80085bc:	4801      	ldr	r0, [pc, #4]	; (80085c4 <__sfp_lock_release+0x8>)
 80085be:	f000 b8d3 	b.w	8008768 <__retarget_lock_release_recursive>
 80085c2:	bf00      	nop
 80085c4:	2000a415 	.word	0x2000a415

080085c8 <__sinit_lock_acquire>:
 80085c8:	4801      	ldr	r0, [pc, #4]	; (80085d0 <__sinit_lock_acquire+0x8>)
 80085ca:	f000 b8cc 	b.w	8008766 <__retarget_lock_acquire_recursive>
 80085ce:	bf00      	nop
 80085d0:	2000a416 	.word	0x2000a416

080085d4 <__sinit_lock_release>:
 80085d4:	4801      	ldr	r0, [pc, #4]	; (80085dc <__sinit_lock_release+0x8>)
 80085d6:	f000 b8c7 	b.w	8008768 <__retarget_lock_release_recursive>
 80085da:	bf00      	nop
 80085dc:	2000a416 	.word	0x2000a416

080085e0 <__sinit>:
 80085e0:	b510      	push	{r4, lr}
 80085e2:	4604      	mov	r4, r0
 80085e4:	f7ff fff0 	bl	80085c8 <__sinit_lock_acquire>
 80085e8:	69a3      	ldr	r3, [r4, #24]
 80085ea:	b11b      	cbz	r3, 80085f4 <__sinit+0x14>
 80085ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085f0:	f7ff bff0 	b.w	80085d4 <__sinit_lock_release>
 80085f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80085f8:	6523      	str	r3, [r4, #80]	; 0x50
 80085fa:	4b13      	ldr	r3, [pc, #76]	; (8008648 <__sinit+0x68>)
 80085fc:	4a13      	ldr	r2, [pc, #76]	; (800864c <__sinit+0x6c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	62a2      	str	r2, [r4, #40]	; 0x28
 8008602:	42a3      	cmp	r3, r4
 8008604:	bf04      	itt	eq
 8008606:	2301      	moveq	r3, #1
 8008608:	61a3      	streq	r3, [r4, #24]
 800860a:	4620      	mov	r0, r4
 800860c:	f000 f820 	bl	8008650 <__sfp>
 8008610:	6060      	str	r0, [r4, #4]
 8008612:	4620      	mov	r0, r4
 8008614:	f000 f81c 	bl	8008650 <__sfp>
 8008618:	60a0      	str	r0, [r4, #8]
 800861a:	4620      	mov	r0, r4
 800861c:	f000 f818 	bl	8008650 <__sfp>
 8008620:	2200      	movs	r2, #0
 8008622:	60e0      	str	r0, [r4, #12]
 8008624:	2104      	movs	r1, #4
 8008626:	6860      	ldr	r0, [r4, #4]
 8008628:	f7ff ff82 	bl	8008530 <std>
 800862c:	68a0      	ldr	r0, [r4, #8]
 800862e:	2201      	movs	r2, #1
 8008630:	2109      	movs	r1, #9
 8008632:	f7ff ff7d 	bl	8008530 <std>
 8008636:	68e0      	ldr	r0, [r4, #12]
 8008638:	2202      	movs	r2, #2
 800863a:	2112      	movs	r1, #18
 800863c:	f7ff ff78 	bl	8008530 <std>
 8008640:	2301      	movs	r3, #1
 8008642:	61a3      	str	r3, [r4, #24]
 8008644:	e7d2      	b.n	80085ec <__sinit+0xc>
 8008646:	bf00      	nop
 8008648:	08039288 	.word	0x08039288
 800864c:	08008579 	.word	0x08008579

08008650 <__sfp>:
 8008650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008652:	4607      	mov	r7, r0
 8008654:	f7ff ffac 	bl	80085b0 <__sfp_lock_acquire>
 8008658:	4b1e      	ldr	r3, [pc, #120]	; (80086d4 <__sfp+0x84>)
 800865a:	681e      	ldr	r6, [r3, #0]
 800865c:	69b3      	ldr	r3, [r6, #24]
 800865e:	b913      	cbnz	r3, 8008666 <__sfp+0x16>
 8008660:	4630      	mov	r0, r6
 8008662:	f7ff ffbd 	bl	80085e0 <__sinit>
 8008666:	3648      	adds	r6, #72	; 0x48
 8008668:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800866c:	3b01      	subs	r3, #1
 800866e:	d503      	bpl.n	8008678 <__sfp+0x28>
 8008670:	6833      	ldr	r3, [r6, #0]
 8008672:	b30b      	cbz	r3, 80086b8 <__sfp+0x68>
 8008674:	6836      	ldr	r6, [r6, #0]
 8008676:	e7f7      	b.n	8008668 <__sfp+0x18>
 8008678:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800867c:	b9d5      	cbnz	r5, 80086b4 <__sfp+0x64>
 800867e:	4b16      	ldr	r3, [pc, #88]	; (80086d8 <__sfp+0x88>)
 8008680:	60e3      	str	r3, [r4, #12]
 8008682:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008686:	6665      	str	r5, [r4, #100]	; 0x64
 8008688:	f000 f86c 	bl	8008764 <__retarget_lock_init_recursive>
 800868c:	f7ff ff96 	bl	80085bc <__sfp_lock_release>
 8008690:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008694:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008698:	6025      	str	r5, [r4, #0]
 800869a:	61a5      	str	r5, [r4, #24]
 800869c:	2208      	movs	r2, #8
 800869e:	4629      	mov	r1, r5
 80086a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086a4:	f000 f8d4 	bl	8008850 <memset>
 80086a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086b0:	4620      	mov	r0, r4
 80086b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086b4:	3468      	adds	r4, #104	; 0x68
 80086b6:	e7d9      	b.n	800866c <__sfp+0x1c>
 80086b8:	2104      	movs	r1, #4
 80086ba:	4638      	mov	r0, r7
 80086bc:	f7ff ff62 	bl	8008584 <__sfmoreglue>
 80086c0:	4604      	mov	r4, r0
 80086c2:	6030      	str	r0, [r6, #0]
 80086c4:	2800      	cmp	r0, #0
 80086c6:	d1d5      	bne.n	8008674 <__sfp+0x24>
 80086c8:	f7ff ff78 	bl	80085bc <__sfp_lock_release>
 80086cc:	230c      	movs	r3, #12
 80086ce:	603b      	str	r3, [r7, #0]
 80086d0:	e7ee      	b.n	80086b0 <__sfp+0x60>
 80086d2:	bf00      	nop
 80086d4:	08039288 	.word	0x08039288
 80086d8:	ffff0001 	.word	0xffff0001

080086dc <_fwalk_reent>:
 80086dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086e0:	4606      	mov	r6, r0
 80086e2:	4688      	mov	r8, r1
 80086e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80086e8:	2700      	movs	r7, #0
 80086ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086ee:	f1b9 0901 	subs.w	r9, r9, #1
 80086f2:	d505      	bpl.n	8008700 <_fwalk_reent+0x24>
 80086f4:	6824      	ldr	r4, [r4, #0]
 80086f6:	2c00      	cmp	r4, #0
 80086f8:	d1f7      	bne.n	80086ea <_fwalk_reent+0xe>
 80086fa:	4638      	mov	r0, r7
 80086fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008700:	89ab      	ldrh	r3, [r5, #12]
 8008702:	2b01      	cmp	r3, #1
 8008704:	d907      	bls.n	8008716 <_fwalk_reent+0x3a>
 8008706:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800870a:	3301      	adds	r3, #1
 800870c:	d003      	beq.n	8008716 <_fwalk_reent+0x3a>
 800870e:	4629      	mov	r1, r5
 8008710:	4630      	mov	r0, r6
 8008712:	47c0      	blx	r8
 8008714:	4307      	orrs	r7, r0
 8008716:	3568      	adds	r5, #104	; 0x68
 8008718:	e7e9      	b.n	80086ee <_fwalk_reent+0x12>
	...

0800871c <__libc_init_array>:
 800871c:	b570      	push	{r4, r5, r6, lr}
 800871e:	4d0d      	ldr	r5, [pc, #52]	; (8008754 <__libc_init_array+0x38>)
 8008720:	4c0d      	ldr	r4, [pc, #52]	; (8008758 <__libc_init_array+0x3c>)
 8008722:	1b64      	subs	r4, r4, r5
 8008724:	10a4      	asrs	r4, r4, #2
 8008726:	2600      	movs	r6, #0
 8008728:	42a6      	cmp	r6, r4
 800872a:	d109      	bne.n	8008740 <__libc_init_array+0x24>
 800872c:	4d0b      	ldr	r5, [pc, #44]	; (800875c <__libc_init_array+0x40>)
 800872e:	4c0c      	ldr	r4, [pc, #48]	; (8008760 <__libc_init_array+0x44>)
 8008730:	f003 fb38 	bl	800bda4 <_init>
 8008734:	1b64      	subs	r4, r4, r5
 8008736:	10a4      	asrs	r4, r4, #2
 8008738:	2600      	movs	r6, #0
 800873a:	42a6      	cmp	r6, r4
 800873c:	d105      	bne.n	800874a <__libc_init_array+0x2e>
 800873e:	bd70      	pop	{r4, r5, r6, pc}
 8008740:	f855 3b04 	ldr.w	r3, [r5], #4
 8008744:	4798      	blx	r3
 8008746:	3601      	adds	r6, #1
 8008748:	e7ee      	b.n	8008728 <__libc_init_array+0xc>
 800874a:	f855 3b04 	ldr.w	r3, [r5], #4
 800874e:	4798      	blx	r3
 8008750:	3601      	adds	r6, #1
 8008752:	e7f2      	b.n	800873a <__libc_init_array+0x1e>
 8008754:	080397bc 	.word	0x080397bc
 8008758:	080397bc 	.word	0x080397bc
 800875c:	080397bc 	.word	0x080397bc
 8008760:	080397c0 	.word	0x080397c0

08008764 <__retarget_lock_init_recursive>:
 8008764:	4770      	bx	lr

08008766 <__retarget_lock_acquire_recursive>:
 8008766:	4770      	bx	lr

08008768 <__retarget_lock_release_recursive>:
 8008768:	4770      	bx	lr

0800876a <__swhatbuf_r>:
 800876a:	b570      	push	{r4, r5, r6, lr}
 800876c:	460e      	mov	r6, r1
 800876e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008772:	2900      	cmp	r1, #0
 8008774:	b096      	sub	sp, #88	; 0x58
 8008776:	4614      	mov	r4, r2
 8008778:	461d      	mov	r5, r3
 800877a:	da08      	bge.n	800878e <__swhatbuf_r+0x24>
 800877c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	602a      	str	r2, [r5, #0]
 8008784:	061a      	lsls	r2, r3, #24
 8008786:	d410      	bmi.n	80087aa <__swhatbuf_r+0x40>
 8008788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800878c:	e00e      	b.n	80087ac <__swhatbuf_r+0x42>
 800878e:	466a      	mov	r2, sp
 8008790:	f001 fe24 	bl	800a3dc <_fstat_r>
 8008794:	2800      	cmp	r0, #0
 8008796:	dbf1      	blt.n	800877c <__swhatbuf_r+0x12>
 8008798:	9a01      	ldr	r2, [sp, #4]
 800879a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800879e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80087a2:	425a      	negs	r2, r3
 80087a4:	415a      	adcs	r2, r3
 80087a6:	602a      	str	r2, [r5, #0]
 80087a8:	e7ee      	b.n	8008788 <__swhatbuf_r+0x1e>
 80087aa:	2340      	movs	r3, #64	; 0x40
 80087ac:	2000      	movs	r0, #0
 80087ae:	6023      	str	r3, [r4, #0]
 80087b0:	b016      	add	sp, #88	; 0x58
 80087b2:	bd70      	pop	{r4, r5, r6, pc}

080087b4 <__smakebuf_r>:
 80087b4:	898b      	ldrh	r3, [r1, #12]
 80087b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087b8:	079d      	lsls	r5, r3, #30
 80087ba:	4606      	mov	r6, r0
 80087bc:	460c      	mov	r4, r1
 80087be:	d507      	bpl.n	80087d0 <__smakebuf_r+0x1c>
 80087c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	6123      	str	r3, [r4, #16]
 80087c8:	2301      	movs	r3, #1
 80087ca:	6163      	str	r3, [r4, #20]
 80087cc:	b002      	add	sp, #8
 80087ce:	bd70      	pop	{r4, r5, r6, pc}
 80087d0:	ab01      	add	r3, sp, #4
 80087d2:	466a      	mov	r2, sp
 80087d4:	f7ff ffc9 	bl	800876a <__swhatbuf_r>
 80087d8:	9900      	ldr	r1, [sp, #0]
 80087da:	4605      	mov	r5, r0
 80087dc:	4630      	mov	r0, r6
 80087de:	f000 f8ab 	bl	8008938 <_malloc_r>
 80087e2:	b948      	cbnz	r0, 80087f8 <__smakebuf_r+0x44>
 80087e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087e8:	059a      	lsls	r2, r3, #22
 80087ea:	d4ef      	bmi.n	80087cc <__smakebuf_r+0x18>
 80087ec:	f023 0303 	bic.w	r3, r3, #3
 80087f0:	f043 0302 	orr.w	r3, r3, #2
 80087f4:	81a3      	strh	r3, [r4, #12]
 80087f6:	e7e3      	b.n	80087c0 <__smakebuf_r+0xc>
 80087f8:	4b0d      	ldr	r3, [pc, #52]	; (8008830 <__smakebuf_r+0x7c>)
 80087fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	6020      	str	r0, [r4, #0]
 8008800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008804:	81a3      	strh	r3, [r4, #12]
 8008806:	9b00      	ldr	r3, [sp, #0]
 8008808:	6163      	str	r3, [r4, #20]
 800880a:	9b01      	ldr	r3, [sp, #4]
 800880c:	6120      	str	r0, [r4, #16]
 800880e:	b15b      	cbz	r3, 8008828 <__smakebuf_r+0x74>
 8008810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008814:	4630      	mov	r0, r6
 8008816:	f001 fdf3 	bl	800a400 <_isatty_r>
 800881a:	b128      	cbz	r0, 8008828 <__smakebuf_r+0x74>
 800881c:	89a3      	ldrh	r3, [r4, #12]
 800881e:	f023 0303 	bic.w	r3, r3, #3
 8008822:	f043 0301 	orr.w	r3, r3, #1
 8008826:	81a3      	strh	r3, [r4, #12]
 8008828:	89a0      	ldrh	r0, [r4, #12]
 800882a:	4305      	orrs	r5, r0
 800882c:	81a5      	strh	r5, [r4, #12]
 800882e:	e7cd      	b.n	80087cc <__smakebuf_r+0x18>
 8008830:	08008579 	.word	0x08008579

08008834 <memcpy>:
 8008834:	440a      	add	r2, r1
 8008836:	4291      	cmp	r1, r2
 8008838:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800883c:	d100      	bne.n	8008840 <memcpy+0xc>
 800883e:	4770      	bx	lr
 8008840:	b510      	push	{r4, lr}
 8008842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800884a:	4291      	cmp	r1, r2
 800884c:	d1f9      	bne.n	8008842 <memcpy+0xe>
 800884e:	bd10      	pop	{r4, pc}

08008850 <memset>:
 8008850:	4402      	add	r2, r0
 8008852:	4603      	mov	r3, r0
 8008854:	4293      	cmp	r3, r2
 8008856:	d100      	bne.n	800885a <memset+0xa>
 8008858:	4770      	bx	lr
 800885a:	f803 1b01 	strb.w	r1, [r3], #1
 800885e:	e7f9      	b.n	8008854 <memset+0x4>

08008860 <_free_r>:
 8008860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008862:	2900      	cmp	r1, #0
 8008864:	d044      	beq.n	80088f0 <_free_r+0x90>
 8008866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800886a:	9001      	str	r0, [sp, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	f1a1 0404 	sub.w	r4, r1, #4
 8008872:	bfb8      	it	lt
 8008874:	18e4      	addlt	r4, r4, r3
 8008876:	f001 fdf1 	bl	800a45c <__malloc_lock>
 800887a:	4a1e      	ldr	r2, [pc, #120]	; (80088f4 <_free_r+0x94>)
 800887c:	9801      	ldr	r0, [sp, #4]
 800887e:	6813      	ldr	r3, [r2, #0]
 8008880:	b933      	cbnz	r3, 8008890 <_free_r+0x30>
 8008882:	6063      	str	r3, [r4, #4]
 8008884:	6014      	str	r4, [r2, #0]
 8008886:	b003      	add	sp, #12
 8008888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800888c:	f001 bdec 	b.w	800a468 <__malloc_unlock>
 8008890:	42a3      	cmp	r3, r4
 8008892:	d908      	bls.n	80088a6 <_free_r+0x46>
 8008894:	6825      	ldr	r5, [r4, #0]
 8008896:	1961      	adds	r1, r4, r5
 8008898:	428b      	cmp	r3, r1
 800889a:	bf01      	itttt	eq
 800889c:	6819      	ldreq	r1, [r3, #0]
 800889e:	685b      	ldreq	r3, [r3, #4]
 80088a0:	1949      	addeq	r1, r1, r5
 80088a2:	6021      	streq	r1, [r4, #0]
 80088a4:	e7ed      	b.n	8008882 <_free_r+0x22>
 80088a6:	461a      	mov	r2, r3
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	b10b      	cbz	r3, 80088b0 <_free_r+0x50>
 80088ac:	42a3      	cmp	r3, r4
 80088ae:	d9fa      	bls.n	80088a6 <_free_r+0x46>
 80088b0:	6811      	ldr	r1, [r2, #0]
 80088b2:	1855      	adds	r5, r2, r1
 80088b4:	42a5      	cmp	r5, r4
 80088b6:	d10b      	bne.n	80088d0 <_free_r+0x70>
 80088b8:	6824      	ldr	r4, [r4, #0]
 80088ba:	4421      	add	r1, r4
 80088bc:	1854      	adds	r4, r2, r1
 80088be:	42a3      	cmp	r3, r4
 80088c0:	6011      	str	r1, [r2, #0]
 80088c2:	d1e0      	bne.n	8008886 <_free_r+0x26>
 80088c4:	681c      	ldr	r4, [r3, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	6053      	str	r3, [r2, #4]
 80088ca:	4421      	add	r1, r4
 80088cc:	6011      	str	r1, [r2, #0]
 80088ce:	e7da      	b.n	8008886 <_free_r+0x26>
 80088d0:	d902      	bls.n	80088d8 <_free_r+0x78>
 80088d2:	230c      	movs	r3, #12
 80088d4:	6003      	str	r3, [r0, #0]
 80088d6:	e7d6      	b.n	8008886 <_free_r+0x26>
 80088d8:	6825      	ldr	r5, [r4, #0]
 80088da:	1961      	adds	r1, r4, r5
 80088dc:	428b      	cmp	r3, r1
 80088de:	bf04      	itt	eq
 80088e0:	6819      	ldreq	r1, [r3, #0]
 80088e2:	685b      	ldreq	r3, [r3, #4]
 80088e4:	6063      	str	r3, [r4, #4]
 80088e6:	bf04      	itt	eq
 80088e8:	1949      	addeq	r1, r1, r5
 80088ea:	6021      	streq	r1, [r4, #0]
 80088ec:	6054      	str	r4, [r2, #4]
 80088ee:	e7ca      	b.n	8008886 <_free_r+0x26>
 80088f0:	b003      	add	sp, #12
 80088f2:	bd30      	pop	{r4, r5, pc}
 80088f4:	2000a418 	.word	0x2000a418

080088f8 <sbrk_aligned>:
 80088f8:	b570      	push	{r4, r5, r6, lr}
 80088fa:	4e0e      	ldr	r6, [pc, #56]	; (8008934 <sbrk_aligned+0x3c>)
 80088fc:	460c      	mov	r4, r1
 80088fe:	6831      	ldr	r1, [r6, #0]
 8008900:	4605      	mov	r5, r0
 8008902:	b911      	cbnz	r1, 800890a <sbrk_aligned+0x12>
 8008904:	f000 fd84 	bl	8009410 <_sbrk_r>
 8008908:	6030      	str	r0, [r6, #0]
 800890a:	4621      	mov	r1, r4
 800890c:	4628      	mov	r0, r5
 800890e:	f000 fd7f 	bl	8009410 <_sbrk_r>
 8008912:	1c43      	adds	r3, r0, #1
 8008914:	d00a      	beq.n	800892c <sbrk_aligned+0x34>
 8008916:	1cc4      	adds	r4, r0, #3
 8008918:	f024 0403 	bic.w	r4, r4, #3
 800891c:	42a0      	cmp	r0, r4
 800891e:	d007      	beq.n	8008930 <sbrk_aligned+0x38>
 8008920:	1a21      	subs	r1, r4, r0
 8008922:	4628      	mov	r0, r5
 8008924:	f000 fd74 	bl	8009410 <_sbrk_r>
 8008928:	3001      	adds	r0, #1
 800892a:	d101      	bne.n	8008930 <sbrk_aligned+0x38>
 800892c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008930:	4620      	mov	r0, r4
 8008932:	bd70      	pop	{r4, r5, r6, pc}
 8008934:	2000a41c 	.word	0x2000a41c

08008938 <_malloc_r>:
 8008938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800893c:	1ccd      	adds	r5, r1, #3
 800893e:	f025 0503 	bic.w	r5, r5, #3
 8008942:	3508      	adds	r5, #8
 8008944:	2d0c      	cmp	r5, #12
 8008946:	bf38      	it	cc
 8008948:	250c      	movcc	r5, #12
 800894a:	2d00      	cmp	r5, #0
 800894c:	4607      	mov	r7, r0
 800894e:	db01      	blt.n	8008954 <_malloc_r+0x1c>
 8008950:	42a9      	cmp	r1, r5
 8008952:	d905      	bls.n	8008960 <_malloc_r+0x28>
 8008954:	230c      	movs	r3, #12
 8008956:	603b      	str	r3, [r7, #0]
 8008958:	2600      	movs	r6, #0
 800895a:	4630      	mov	r0, r6
 800895c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008960:	4e2e      	ldr	r6, [pc, #184]	; (8008a1c <_malloc_r+0xe4>)
 8008962:	f001 fd7b 	bl	800a45c <__malloc_lock>
 8008966:	6833      	ldr	r3, [r6, #0]
 8008968:	461c      	mov	r4, r3
 800896a:	bb34      	cbnz	r4, 80089ba <_malloc_r+0x82>
 800896c:	4629      	mov	r1, r5
 800896e:	4638      	mov	r0, r7
 8008970:	f7ff ffc2 	bl	80088f8 <sbrk_aligned>
 8008974:	1c43      	adds	r3, r0, #1
 8008976:	4604      	mov	r4, r0
 8008978:	d14d      	bne.n	8008a16 <_malloc_r+0xde>
 800897a:	6834      	ldr	r4, [r6, #0]
 800897c:	4626      	mov	r6, r4
 800897e:	2e00      	cmp	r6, #0
 8008980:	d140      	bne.n	8008a04 <_malloc_r+0xcc>
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	4631      	mov	r1, r6
 8008986:	4638      	mov	r0, r7
 8008988:	eb04 0803 	add.w	r8, r4, r3
 800898c:	f000 fd40 	bl	8009410 <_sbrk_r>
 8008990:	4580      	cmp	r8, r0
 8008992:	d13a      	bne.n	8008a0a <_malloc_r+0xd2>
 8008994:	6821      	ldr	r1, [r4, #0]
 8008996:	3503      	adds	r5, #3
 8008998:	1a6d      	subs	r5, r5, r1
 800899a:	f025 0503 	bic.w	r5, r5, #3
 800899e:	3508      	adds	r5, #8
 80089a0:	2d0c      	cmp	r5, #12
 80089a2:	bf38      	it	cc
 80089a4:	250c      	movcc	r5, #12
 80089a6:	4629      	mov	r1, r5
 80089a8:	4638      	mov	r0, r7
 80089aa:	f7ff ffa5 	bl	80088f8 <sbrk_aligned>
 80089ae:	3001      	adds	r0, #1
 80089b0:	d02b      	beq.n	8008a0a <_malloc_r+0xd2>
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	442b      	add	r3, r5
 80089b6:	6023      	str	r3, [r4, #0]
 80089b8:	e00e      	b.n	80089d8 <_malloc_r+0xa0>
 80089ba:	6822      	ldr	r2, [r4, #0]
 80089bc:	1b52      	subs	r2, r2, r5
 80089be:	d41e      	bmi.n	80089fe <_malloc_r+0xc6>
 80089c0:	2a0b      	cmp	r2, #11
 80089c2:	d916      	bls.n	80089f2 <_malloc_r+0xba>
 80089c4:	1961      	adds	r1, r4, r5
 80089c6:	42a3      	cmp	r3, r4
 80089c8:	6025      	str	r5, [r4, #0]
 80089ca:	bf18      	it	ne
 80089cc:	6059      	strne	r1, [r3, #4]
 80089ce:	6863      	ldr	r3, [r4, #4]
 80089d0:	bf08      	it	eq
 80089d2:	6031      	streq	r1, [r6, #0]
 80089d4:	5162      	str	r2, [r4, r5]
 80089d6:	604b      	str	r3, [r1, #4]
 80089d8:	4638      	mov	r0, r7
 80089da:	f104 060b 	add.w	r6, r4, #11
 80089de:	f001 fd43 	bl	800a468 <__malloc_unlock>
 80089e2:	f026 0607 	bic.w	r6, r6, #7
 80089e6:	1d23      	adds	r3, r4, #4
 80089e8:	1af2      	subs	r2, r6, r3
 80089ea:	d0b6      	beq.n	800895a <_malloc_r+0x22>
 80089ec:	1b9b      	subs	r3, r3, r6
 80089ee:	50a3      	str	r3, [r4, r2]
 80089f0:	e7b3      	b.n	800895a <_malloc_r+0x22>
 80089f2:	6862      	ldr	r2, [r4, #4]
 80089f4:	42a3      	cmp	r3, r4
 80089f6:	bf0c      	ite	eq
 80089f8:	6032      	streq	r2, [r6, #0]
 80089fa:	605a      	strne	r2, [r3, #4]
 80089fc:	e7ec      	b.n	80089d8 <_malloc_r+0xa0>
 80089fe:	4623      	mov	r3, r4
 8008a00:	6864      	ldr	r4, [r4, #4]
 8008a02:	e7b2      	b.n	800896a <_malloc_r+0x32>
 8008a04:	4634      	mov	r4, r6
 8008a06:	6876      	ldr	r6, [r6, #4]
 8008a08:	e7b9      	b.n	800897e <_malloc_r+0x46>
 8008a0a:	230c      	movs	r3, #12
 8008a0c:	603b      	str	r3, [r7, #0]
 8008a0e:	4638      	mov	r0, r7
 8008a10:	f001 fd2a 	bl	800a468 <__malloc_unlock>
 8008a14:	e7a1      	b.n	800895a <_malloc_r+0x22>
 8008a16:	6025      	str	r5, [r4, #0]
 8008a18:	e7de      	b.n	80089d8 <_malloc_r+0xa0>
 8008a1a:	bf00      	nop
 8008a1c:	2000a418 	.word	0x2000a418

08008a20 <__cvt>:
 8008a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a24:	ec55 4b10 	vmov	r4, r5, d0
 8008a28:	2d00      	cmp	r5, #0
 8008a2a:	460e      	mov	r6, r1
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	462b      	mov	r3, r5
 8008a30:	bfbb      	ittet	lt
 8008a32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008a36:	461d      	movlt	r5, r3
 8008a38:	2300      	movge	r3, #0
 8008a3a:	232d      	movlt	r3, #45	; 0x2d
 8008a3c:	700b      	strb	r3, [r1, #0]
 8008a3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008a44:	4691      	mov	r9, r2
 8008a46:	f023 0820 	bic.w	r8, r3, #32
 8008a4a:	bfbc      	itt	lt
 8008a4c:	4622      	movlt	r2, r4
 8008a4e:	4614      	movlt	r4, r2
 8008a50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a54:	d005      	beq.n	8008a62 <__cvt+0x42>
 8008a56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a5a:	d100      	bne.n	8008a5e <__cvt+0x3e>
 8008a5c:	3601      	adds	r6, #1
 8008a5e:	2102      	movs	r1, #2
 8008a60:	e000      	b.n	8008a64 <__cvt+0x44>
 8008a62:	2103      	movs	r1, #3
 8008a64:	ab03      	add	r3, sp, #12
 8008a66:	9301      	str	r3, [sp, #4]
 8008a68:	ab02      	add	r3, sp, #8
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	ec45 4b10 	vmov	d0, r4, r5
 8008a70:	4653      	mov	r3, sl
 8008a72:	4632      	mov	r2, r6
 8008a74:	f000 fec4 	bl	8009800 <_dtoa_r>
 8008a78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008a7c:	4607      	mov	r7, r0
 8008a7e:	d102      	bne.n	8008a86 <__cvt+0x66>
 8008a80:	f019 0f01 	tst.w	r9, #1
 8008a84:	d022      	beq.n	8008acc <__cvt+0xac>
 8008a86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a8a:	eb07 0906 	add.w	r9, r7, r6
 8008a8e:	d110      	bne.n	8008ab2 <__cvt+0x92>
 8008a90:	783b      	ldrb	r3, [r7, #0]
 8008a92:	2b30      	cmp	r3, #48	; 0x30
 8008a94:	d10a      	bne.n	8008aac <__cvt+0x8c>
 8008a96:	2200      	movs	r2, #0
 8008a98:	2300      	movs	r3, #0
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	f7f8 f813 	bl	8000ac8 <__aeabi_dcmpeq>
 8008aa2:	b918      	cbnz	r0, 8008aac <__cvt+0x8c>
 8008aa4:	f1c6 0601 	rsb	r6, r6, #1
 8008aa8:	f8ca 6000 	str.w	r6, [sl]
 8008aac:	f8da 3000 	ldr.w	r3, [sl]
 8008ab0:	4499      	add	r9, r3
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	4629      	mov	r1, r5
 8008aba:	f7f8 f805 	bl	8000ac8 <__aeabi_dcmpeq>
 8008abe:	b108      	cbz	r0, 8008ac4 <__cvt+0xa4>
 8008ac0:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ac4:	2230      	movs	r2, #48	; 0x30
 8008ac6:	9b03      	ldr	r3, [sp, #12]
 8008ac8:	454b      	cmp	r3, r9
 8008aca:	d307      	bcc.n	8008adc <__cvt+0xbc>
 8008acc:	9b03      	ldr	r3, [sp, #12]
 8008ace:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ad0:	1bdb      	subs	r3, r3, r7
 8008ad2:	4638      	mov	r0, r7
 8008ad4:	6013      	str	r3, [r2, #0]
 8008ad6:	b004      	add	sp, #16
 8008ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008adc:	1c59      	adds	r1, r3, #1
 8008ade:	9103      	str	r1, [sp, #12]
 8008ae0:	701a      	strb	r2, [r3, #0]
 8008ae2:	e7f0      	b.n	8008ac6 <__cvt+0xa6>

08008ae4 <__exponent>:
 8008ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2900      	cmp	r1, #0
 8008aea:	bfb8      	it	lt
 8008aec:	4249      	neglt	r1, r1
 8008aee:	f803 2b02 	strb.w	r2, [r3], #2
 8008af2:	bfb4      	ite	lt
 8008af4:	222d      	movlt	r2, #45	; 0x2d
 8008af6:	222b      	movge	r2, #43	; 0x2b
 8008af8:	2909      	cmp	r1, #9
 8008afa:	7042      	strb	r2, [r0, #1]
 8008afc:	dd2a      	ble.n	8008b54 <__exponent+0x70>
 8008afe:	f10d 0407 	add.w	r4, sp, #7
 8008b02:	46a4      	mov	ip, r4
 8008b04:	270a      	movs	r7, #10
 8008b06:	46a6      	mov	lr, r4
 8008b08:	460a      	mov	r2, r1
 8008b0a:	fb91 f6f7 	sdiv	r6, r1, r7
 8008b0e:	fb07 1516 	mls	r5, r7, r6, r1
 8008b12:	3530      	adds	r5, #48	; 0x30
 8008b14:	2a63      	cmp	r2, #99	; 0x63
 8008b16:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008b1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008b1e:	4631      	mov	r1, r6
 8008b20:	dcf1      	bgt.n	8008b06 <__exponent+0x22>
 8008b22:	3130      	adds	r1, #48	; 0x30
 8008b24:	f1ae 0502 	sub.w	r5, lr, #2
 8008b28:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008b2c:	1c44      	adds	r4, r0, #1
 8008b2e:	4629      	mov	r1, r5
 8008b30:	4561      	cmp	r1, ip
 8008b32:	d30a      	bcc.n	8008b4a <__exponent+0x66>
 8008b34:	f10d 0209 	add.w	r2, sp, #9
 8008b38:	eba2 020e 	sub.w	r2, r2, lr
 8008b3c:	4565      	cmp	r5, ip
 8008b3e:	bf88      	it	hi
 8008b40:	2200      	movhi	r2, #0
 8008b42:	4413      	add	r3, r2
 8008b44:	1a18      	subs	r0, r3, r0
 8008b46:	b003      	add	sp, #12
 8008b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008b52:	e7ed      	b.n	8008b30 <__exponent+0x4c>
 8008b54:	2330      	movs	r3, #48	; 0x30
 8008b56:	3130      	adds	r1, #48	; 0x30
 8008b58:	7083      	strb	r3, [r0, #2]
 8008b5a:	70c1      	strb	r1, [r0, #3]
 8008b5c:	1d03      	adds	r3, r0, #4
 8008b5e:	e7f1      	b.n	8008b44 <__exponent+0x60>

08008b60 <_printf_float>:
 8008b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b64:	ed2d 8b02 	vpush	{d8}
 8008b68:	b08d      	sub	sp, #52	; 0x34
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008b70:	4616      	mov	r6, r2
 8008b72:	461f      	mov	r7, r3
 8008b74:	4605      	mov	r5, r0
 8008b76:	f001 fc53 	bl	800a420 <_localeconv_r>
 8008b7a:	f8d0 a000 	ldr.w	sl, [r0]
 8008b7e:	4650      	mov	r0, sl
 8008b80:	f7f7 fb26 	bl	80001d0 <strlen>
 8008b84:	2300      	movs	r3, #0
 8008b86:	930a      	str	r3, [sp, #40]	; 0x28
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	9305      	str	r3, [sp, #20]
 8008b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b90:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008b94:	3307      	adds	r3, #7
 8008b96:	f023 0307 	bic.w	r3, r3, #7
 8008b9a:	f103 0208 	add.w	r2, r3, #8
 8008b9e:	f8c8 2000 	str.w	r2, [r8]
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008baa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008bae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008bb2:	9307      	str	r3, [sp, #28]
 8008bb4:	f8cd 8018 	str.w	r8, [sp, #24]
 8008bb8:	ee08 0a10 	vmov	s16, r0
 8008bbc:	4b9f      	ldr	r3, [pc, #636]	; (8008e3c <_printf_float+0x2dc>)
 8008bbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bc6:	f7f7 ffb1 	bl	8000b2c <__aeabi_dcmpun>
 8008bca:	bb88      	cbnz	r0, 8008c30 <_printf_float+0xd0>
 8008bcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bd0:	4b9a      	ldr	r3, [pc, #616]	; (8008e3c <_printf_float+0x2dc>)
 8008bd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bd6:	f7f7 ff8b 	bl	8000af0 <__aeabi_dcmple>
 8008bda:	bb48      	cbnz	r0, 8008c30 <_printf_float+0xd0>
 8008bdc:	2200      	movs	r2, #0
 8008bde:	2300      	movs	r3, #0
 8008be0:	4640      	mov	r0, r8
 8008be2:	4649      	mov	r1, r9
 8008be4:	f7f7 ff7a 	bl	8000adc <__aeabi_dcmplt>
 8008be8:	b110      	cbz	r0, 8008bf0 <_printf_float+0x90>
 8008bea:	232d      	movs	r3, #45	; 0x2d
 8008bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bf0:	4b93      	ldr	r3, [pc, #588]	; (8008e40 <_printf_float+0x2e0>)
 8008bf2:	4894      	ldr	r0, [pc, #592]	; (8008e44 <_printf_float+0x2e4>)
 8008bf4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008bf8:	bf94      	ite	ls
 8008bfa:	4698      	movls	r8, r3
 8008bfc:	4680      	movhi	r8, r0
 8008bfe:	2303      	movs	r3, #3
 8008c00:	6123      	str	r3, [r4, #16]
 8008c02:	9b05      	ldr	r3, [sp, #20]
 8008c04:	f023 0204 	bic.w	r2, r3, #4
 8008c08:	6022      	str	r2, [r4, #0]
 8008c0a:	f04f 0900 	mov.w	r9, #0
 8008c0e:	9700      	str	r7, [sp, #0]
 8008c10:	4633      	mov	r3, r6
 8008c12:	aa0b      	add	r2, sp, #44	; 0x2c
 8008c14:	4621      	mov	r1, r4
 8008c16:	4628      	mov	r0, r5
 8008c18:	f000 f9d8 	bl	8008fcc <_printf_common>
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	f040 8090 	bne.w	8008d42 <_printf_float+0x1e2>
 8008c22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c26:	b00d      	add	sp, #52	; 0x34
 8008c28:	ecbd 8b02 	vpop	{d8}
 8008c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c30:	4642      	mov	r2, r8
 8008c32:	464b      	mov	r3, r9
 8008c34:	4640      	mov	r0, r8
 8008c36:	4649      	mov	r1, r9
 8008c38:	f7f7 ff78 	bl	8000b2c <__aeabi_dcmpun>
 8008c3c:	b140      	cbz	r0, 8008c50 <_printf_float+0xf0>
 8008c3e:	464b      	mov	r3, r9
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	bfbc      	itt	lt
 8008c44:	232d      	movlt	r3, #45	; 0x2d
 8008c46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c4a:	487f      	ldr	r0, [pc, #508]	; (8008e48 <_printf_float+0x2e8>)
 8008c4c:	4b7f      	ldr	r3, [pc, #508]	; (8008e4c <_printf_float+0x2ec>)
 8008c4e:	e7d1      	b.n	8008bf4 <_printf_float+0x94>
 8008c50:	6863      	ldr	r3, [r4, #4]
 8008c52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008c56:	9206      	str	r2, [sp, #24]
 8008c58:	1c5a      	adds	r2, r3, #1
 8008c5a:	d13f      	bne.n	8008cdc <_printf_float+0x17c>
 8008c5c:	2306      	movs	r3, #6
 8008c5e:	6063      	str	r3, [r4, #4]
 8008c60:	9b05      	ldr	r3, [sp, #20]
 8008c62:	6861      	ldr	r1, [r4, #4]
 8008c64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008c68:	2300      	movs	r3, #0
 8008c6a:	9303      	str	r3, [sp, #12]
 8008c6c:	ab0a      	add	r3, sp, #40	; 0x28
 8008c6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008c72:	ab09      	add	r3, sp, #36	; 0x24
 8008c74:	ec49 8b10 	vmov	d0, r8, r9
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	6022      	str	r2, [r4, #0]
 8008c7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c80:	4628      	mov	r0, r5
 8008c82:	f7ff fecd 	bl	8008a20 <__cvt>
 8008c86:	9b06      	ldr	r3, [sp, #24]
 8008c88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c8a:	2b47      	cmp	r3, #71	; 0x47
 8008c8c:	4680      	mov	r8, r0
 8008c8e:	d108      	bne.n	8008ca2 <_printf_float+0x142>
 8008c90:	1cc8      	adds	r0, r1, #3
 8008c92:	db02      	blt.n	8008c9a <_printf_float+0x13a>
 8008c94:	6863      	ldr	r3, [r4, #4]
 8008c96:	4299      	cmp	r1, r3
 8008c98:	dd41      	ble.n	8008d1e <_printf_float+0x1be>
 8008c9a:	f1ab 0b02 	sub.w	fp, fp, #2
 8008c9e:	fa5f fb8b 	uxtb.w	fp, fp
 8008ca2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008ca6:	d820      	bhi.n	8008cea <_printf_float+0x18a>
 8008ca8:	3901      	subs	r1, #1
 8008caa:	465a      	mov	r2, fp
 8008cac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008cb0:	9109      	str	r1, [sp, #36]	; 0x24
 8008cb2:	f7ff ff17 	bl	8008ae4 <__exponent>
 8008cb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cb8:	1813      	adds	r3, r2, r0
 8008cba:	2a01      	cmp	r2, #1
 8008cbc:	4681      	mov	r9, r0
 8008cbe:	6123      	str	r3, [r4, #16]
 8008cc0:	dc02      	bgt.n	8008cc8 <_printf_float+0x168>
 8008cc2:	6822      	ldr	r2, [r4, #0]
 8008cc4:	07d2      	lsls	r2, r2, #31
 8008cc6:	d501      	bpl.n	8008ccc <_printf_float+0x16c>
 8008cc8:	3301      	adds	r3, #1
 8008cca:	6123      	str	r3, [r4, #16]
 8008ccc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d09c      	beq.n	8008c0e <_printf_float+0xae>
 8008cd4:	232d      	movs	r3, #45	; 0x2d
 8008cd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cda:	e798      	b.n	8008c0e <_printf_float+0xae>
 8008cdc:	9a06      	ldr	r2, [sp, #24]
 8008cde:	2a47      	cmp	r2, #71	; 0x47
 8008ce0:	d1be      	bne.n	8008c60 <_printf_float+0x100>
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1bc      	bne.n	8008c60 <_printf_float+0x100>
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e7b9      	b.n	8008c5e <_printf_float+0xfe>
 8008cea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008cee:	d118      	bne.n	8008d22 <_printf_float+0x1c2>
 8008cf0:	2900      	cmp	r1, #0
 8008cf2:	6863      	ldr	r3, [r4, #4]
 8008cf4:	dd0b      	ble.n	8008d0e <_printf_float+0x1ae>
 8008cf6:	6121      	str	r1, [r4, #16]
 8008cf8:	b913      	cbnz	r3, 8008d00 <_printf_float+0x1a0>
 8008cfa:	6822      	ldr	r2, [r4, #0]
 8008cfc:	07d0      	lsls	r0, r2, #31
 8008cfe:	d502      	bpl.n	8008d06 <_printf_float+0x1a6>
 8008d00:	3301      	adds	r3, #1
 8008d02:	440b      	add	r3, r1
 8008d04:	6123      	str	r3, [r4, #16]
 8008d06:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d08:	f04f 0900 	mov.w	r9, #0
 8008d0c:	e7de      	b.n	8008ccc <_printf_float+0x16c>
 8008d0e:	b913      	cbnz	r3, 8008d16 <_printf_float+0x1b6>
 8008d10:	6822      	ldr	r2, [r4, #0]
 8008d12:	07d2      	lsls	r2, r2, #31
 8008d14:	d501      	bpl.n	8008d1a <_printf_float+0x1ba>
 8008d16:	3302      	adds	r3, #2
 8008d18:	e7f4      	b.n	8008d04 <_printf_float+0x1a4>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e7f2      	b.n	8008d04 <_printf_float+0x1a4>
 8008d1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d24:	4299      	cmp	r1, r3
 8008d26:	db05      	blt.n	8008d34 <_printf_float+0x1d4>
 8008d28:	6823      	ldr	r3, [r4, #0]
 8008d2a:	6121      	str	r1, [r4, #16]
 8008d2c:	07d8      	lsls	r0, r3, #31
 8008d2e:	d5ea      	bpl.n	8008d06 <_printf_float+0x1a6>
 8008d30:	1c4b      	adds	r3, r1, #1
 8008d32:	e7e7      	b.n	8008d04 <_printf_float+0x1a4>
 8008d34:	2900      	cmp	r1, #0
 8008d36:	bfd4      	ite	le
 8008d38:	f1c1 0202 	rsble	r2, r1, #2
 8008d3c:	2201      	movgt	r2, #1
 8008d3e:	4413      	add	r3, r2
 8008d40:	e7e0      	b.n	8008d04 <_printf_float+0x1a4>
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	055a      	lsls	r2, r3, #21
 8008d46:	d407      	bmi.n	8008d58 <_printf_float+0x1f8>
 8008d48:	6923      	ldr	r3, [r4, #16]
 8008d4a:	4642      	mov	r2, r8
 8008d4c:	4631      	mov	r1, r6
 8008d4e:	4628      	mov	r0, r5
 8008d50:	47b8      	blx	r7
 8008d52:	3001      	adds	r0, #1
 8008d54:	d12c      	bne.n	8008db0 <_printf_float+0x250>
 8008d56:	e764      	b.n	8008c22 <_printf_float+0xc2>
 8008d58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d5c:	f240 80e0 	bls.w	8008f20 <_printf_float+0x3c0>
 8008d60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d64:	2200      	movs	r2, #0
 8008d66:	2300      	movs	r3, #0
 8008d68:	f7f7 feae 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	d034      	beq.n	8008dda <_printf_float+0x27a>
 8008d70:	4a37      	ldr	r2, [pc, #220]	; (8008e50 <_printf_float+0x2f0>)
 8008d72:	2301      	movs	r3, #1
 8008d74:	4631      	mov	r1, r6
 8008d76:	4628      	mov	r0, r5
 8008d78:	47b8      	blx	r7
 8008d7a:	3001      	adds	r0, #1
 8008d7c:	f43f af51 	beq.w	8008c22 <_printf_float+0xc2>
 8008d80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d84:	429a      	cmp	r2, r3
 8008d86:	db02      	blt.n	8008d8e <_printf_float+0x22e>
 8008d88:	6823      	ldr	r3, [r4, #0]
 8008d8a:	07d8      	lsls	r0, r3, #31
 8008d8c:	d510      	bpl.n	8008db0 <_printf_float+0x250>
 8008d8e:	ee18 3a10 	vmov	r3, s16
 8008d92:	4652      	mov	r2, sl
 8008d94:	4631      	mov	r1, r6
 8008d96:	4628      	mov	r0, r5
 8008d98:	47b8      	blx	r7
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	f43f af41 	beq.w	8008c22 <_printf_float+0xc2>
 8008da0:	f04f 0800 	mov.w	r8, #0
 8008da4:	f104 091a 	add.w	r9, r4, #26
 8008da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008daa:	3b01      	subs	r3, #1
 8008dac:	4543      	cmp	r3, r8
 8008dae:	dc09      	bgt.n	8008dc4 <_printf_float+0x264>
 8008db0:	6823      	ldr	r3, [r4, #0]
 8008db2:	079b      	lsls	r3, r3, #30
 8008db4:	f100 8105 	bmi.w	8008fc2 <_printf_float+0x462>
 8008db8:	68e0      	ldr	r0, [r4, #12]
 8008dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dbc:	4298      	cmp	r0, r3
 8008dbe:	bfb8      	it	lt
 8008dc0:	4618      	movlt	r0, r3
 8008dc2:	e730      	b.n	8008c26 <_printf_float+0xc6>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	464a      	mov	r2, r9
 8008dc8:	4631      	mov	r1, r6
 8008dca:	4628      	mov	r0, r5
 8008dcc:	47b8      	blx	r7
 8008dce:	3001      	adds	r0, #1
 8008dd0:	f43f af27 	beq.w	8008c22 <_printf_float+0xc2>
 8008dd4:	f108 0801 	add.w	r8, r8, #1
 8008dd8:	e7e6      	b.n	8008da8 <_printf_float+0x248>
 8008dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	dc39      	bgt.n	8008e54 <_printf_float+0x2f4>
 8008de0:	4a1b      	ldr	r2, [pc, #108]	; (8008e50 <_printf_float+0x2f0>)
 8008de2:	2301      	movs	r3, #1
 8008de4:	4631      	mov	r1, r6
 8008de6:	4628      	mov	r0, r5
 8008de8:	47b8      	blx	r7
 8008dea:	3001      	adds	r0, #1
 8008dec:	f43f af19 	beq.w	8008c22 <_printf_float+0xc2>
 8008df0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008df4:	4313      	orrs	r3, r2
 8008df6:	d102      	bne.n	8008dfe <_printf_float+0x29e>
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	07d9      	lsls	r1, r3, #31
 8008dfc:	d5d8      	bpl.n	8008db0 <_printf_float+0x250>
 8008dfe:	ee18 3a10 	vmov	r3, s16
 8008e02:	4652      	mov	r2, sl
 8008e04:	4631      	mov	r1, r6
 8008e06:	4628      	mov	r0, r5
 8008e08:	47b8      	blx	r7
 8008e0a:	3001      	adds	r0, #1
 8008e0c:	f43f af09 	beq.w	8008c22 <_printf_float+0xc2>
 8008e10:	f04f 0900 	mov.w	r9, #0
 8008e14:	f104 0a1a 	add.w	sl, r4, #26
 8008e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e1a:	425b      	negs	r3, r3
 8008e1c:	454b      	cmp	r3, r9
 8008e1e:	dc01      	bgt.n	8008e24 <_printf_float+0x2c4>
 8008e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e22:	e792      	b.n	8008d4a <_printf_float+0x1ea>
 8008e24:	2301      	movs	r3, #1
 8008e26:	4652      	mov	r2, sl
 8008e28:	4631      	mov	r1, r6
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	47b8      	blx	r7
 8008e2e:	3001      	adds	r0, #1
 8008e30:	f43f aef7 	beq.w	8008c22 <_printf_float+0xc2>
 8008e34:	f109 0901 	add.w	r9, r9, #1
 8008e38:	e7ee      	b.n	8008e18 <_printf_float+0x2b8>
 8008e3a:	bf00      	nop
 8008e3c:	7fefffff 	.word	0x7fefffff
 8008e40:	0803928c 	.word	0x0803928c
 8008e44:	08039290 	.word	0x08039290
 8008e48:	08039298 	.word	0x08039298
 8008e4c:	08039294 	.word	0x08039294
 8008e50:	0803929c 	.word	0x0803929c
 8008e54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	bfa8      	it	ge
 8008e5c:	461a      	movge	r2, r3
 8008e5e:	2a00      	cmp	r2, #0
 8008e60:	4691      	mov	r9, r2
 8008e62:	dc37      	bgt.n	8008ed4 <_printf_float+0x374>
 8008e64:	f04f 0b00 	mov.w	fp, #0
 8008e68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e6c:	f104 021a 	add.w	r2, r4, #26
 8008e70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e72:	9305      	str	r3, [sp, #20]
 8008e74:	eba3 0309 	sub.w	r3, r3, r9
 8008e78:	455b      	cmp	r3, fp
 8008e7a:	dc33      	bgt.n	8008ee4 <_printf_float+0x384>
 8008e7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e80:	429a      	cmp	r2, r3
 8008e82:	db3b      	blt.n	8008efc <_printf_float+0x39c>
 8008e84:	6823      	ldr	r3, [r4, #0]
 8008e86:	07da      	lsls	r2, r3, #31
 8008e88:	d438      	bmi.n	8008efc <_printf_float+0x39c>
 8008e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e8c:	9a05      	ldr	r2, [sp, #20]
 8008e8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e90:	1a9a      	subs	r2, r3, r2
 8008e92:	eba3 0901 	sub.w	r9, r3, r1
 8008e96:	4591      	cmp	r9, r2
 8008e98:	bfa8      	it	ge
 8008e9a:	4691      	movge	r9, r2
 8008e9c:	f1b9 0f00 	cmp.w	r9, #0
 8008ea0:	dc35      	bgt.n	8008f0e <_printf_float+0x3ae>
 8008ea2:	f04f 0800 	mov.w	r8, #0
 8008ea6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008eaa:	f104 0a1a 	add.w	sl, r4, #26
 8008eae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008eb2:	1a9b      	subs	r3, r3, r2
 8008eb4:	eba3 0309 	sub.w	r3, r3, r9
 8008eb8:	4543      	cmp	r3, r8
 8008eba:	f77f af79 	ble.w	8008db0 <_printf_float+0x250>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	4652      	mov	r2, sl
 8008ec2:	4631      	mov	r1, r6
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	47b8      	blx	r7
 8008ec8:	3001      	adds	r0, #1
 8008eca:	f43f aeaa 	beq.w	8008c22 <_printf_float+0xc2>
 8008ece:	f108 0801 	add.w	r8, r8, #1
 8008ed2:	e7ec      	b.n	8008eae <_printf_float+0x34e>
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	4631      	mov	r1, r6
 8008ed8:	4642      	mov	r2, r8
 8008eda:	4628      	mov	r0, r5
 8008edc:	47b8      	blx	r7
 8008ede:	3001      	adds	r0, #1
 8008ee0:	d1c0      	bne.n	8008e64 <_printf_float+0x304>
 8008ee2:	e69e      	b.n	8008c22 <_printf_float+0xc2>
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	4631      	mov	r1, r6
 8008ee8:	4628      	mov	r0, r5
 8008eea:	9205      	str	r2, [sp, #20]
 8008eec:	47b8      	blx	r7
 8008eee:	3001      	adds	r0, #1
 8008ef0:	f43f ae97 	beq.w	8008c22 <_printf_float+0xc2>
 8008ef4:	9a05      	ldr	r2, [sp, #20]
 8008ef6:	f10b 0b01 	add.w	fp, fp, #1
 8008efa:	e7b9      	b.n	8008e70 <_printf_float+0x310>
 8008efc:	ee18 3a10 	vmov	r3, s16
 8008f00:	4652      	mov	r2, sl
 8008f02:	4631      	mov	r1, r6
 8008f04:	4628      	mov	r0, r5
 8008f06:	47b8      	blx	r7
 8008f08:	3001      	adds	r0, #1
 8008f0a:	d1be      	bne.n	8008e8a <_printf_float+0x32a>
 8008f0c:	e689      	b.n	8008c22 <_printf_float+0xc2>
 8008f0e:	9a05      	ldr	r2, [sp, #20]
 8008f10:	464b      	mov	r3, r9
 8008f12:	4442      	add	r2, r8
 8008f14:	4631      	mov	r1, r6
 8008f16:	4628      	mov	r0, r5
 8008f18:	47b8      	blx	r7
 8008f1a:	3001      	adds	r0, #1
 8008f1c:	d1c1      	bne.n	8008ea2 <_printf_float+0x342>
 8008f1e:	e680      	b.n	8008c22 <_printf_float+0xc2>
 8008f20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f22:	2a01      	cmp	r2, #1
 8008f24:	dc01      	bgt.n	8008f2a <_printf_float+0x3ca>
 8008f26:	07db      	lsls	r3, r3, #31
 8008f28:	d538      	bpl.n	8008f9c <_printf_float+0x43c>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	4642      	mov	r2, r8
 8008f2e:	4631      	mov	r1, r6
 8008f30:	4628      	mov	r0, r5
 8008f32:	47b8      	blx	r7
 8008f34:	3001      	adds	r0, #1
 8008f36:	f43f ae74 	beq.w	8008c22 <_printf_float+0xc2>
 8008f3a:	ee18 3a10 	vmov	r3, s16
 8008f3e:	4652      	mov	r2, sl
 8008f40:	4631      	mov	r1, r6
 8008f42:	4628      	mov	r0, r5
 8008f44:	47b8      	blx	r7
 8008f46:	3001      	adds	r0, #1
 8008f48:	f43f ae6b 	beq.w	8008c22 <_printf_float+0xc2>
 8008f4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f50:	2200      	movs	r2, #0
 8008f52:	2300      	movs	r3, #0
 8008f54:	f7f7 fdb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f58:	b9d8      	cbnz	r0, 8008f92 <_printf_float+0x432>
 8008f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f5c:	f108 0201 	add.w	r2, r8, #1
 8008f60:	3b01      	subs	r3, #1
 8008f62:	4631      	mov	r1, r6
 8008f64:	4628      	mov	r0, r5
 8008f66:	47b8      	blx	r7
 8008f68:	3001      	adds	r0, #1
 8008f6a:	d10e      	bne.n	8008f8a <_printf_float+0x42a>
 8008f6c:	e659      	b.n	8008c22 <_printf_float+0xc2>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	4652      	mov	r2, sl
 8008f72:	4631      	mov	r1, r6
 8008f74:	4628      	mov	r0, r5
 8008f76:	47b8      	blx	r7
 8008f78:	3001      	adds	r0, #1
 8008f7a:	f43f ae52 	beq.w	8008c22 <_printf_float+0xc2>
 8008f7e:	f108 0801 	add.w	r8, r8, #1
 8008f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f84:	3b01      	subs	r3, #1
 8008f86:	4543      	cmp	r3, r8
 8008f88:	dcf1      	bgt.n	8008f6e <_printf_float+0x40e>
 8008f8a:	464b      	mov	r3, r9
 8008f8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f90:	e6dc      	b.n	8008d4c <_printf_float+0x1ec>
 8008f92:	f04f 0800 	mov.w	r8, #0
 8008f96:	f104 0a1a 	add.w	sl, r4, #26
 8008f9a:	e7f2      	b.n	8008f82 <_printf_float+0x422>
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	4642      	mov	r2, r8
 8008fa0:	e7df      	b.n	8008f62 <_printf_float+0x402>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	464a      	mov	r2, r9
 8008fa6:	4631      	mov	r1, r6
 8008fa8:	4628      	mov	r0, r5
 8008faa:	47b8      	blx	r7
 8008fac:	3001      	adds	r0, #1
 8008fae:	f43f ae38 	beq.w	8008c22 <_printf_float+0xc2>
 8008fb2:	f108 0801 	add.w	r8, r8, #1
 8008fb6:	68e3      	ldr	r3, [r4, #12]
 8008fb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fba:	1a5b      	subs	r3, r3, r1
 8008fbc:	4543      	cmp	r3, r8
 8008fbe:	dcf0      	bgt.n	8008fa2 <_printf_float+0x442>
 8008fc0:	e6fa      	b.n	8008db8 <_printf_float+0x258>
 8008fc2:	f04f 0800 	mov.w	r8, #0
 8008fc6:	f104 0919 	add.w	r9, r4, #25
 8008fca:	e7f4      	b.n	8008fb6 <_printf_float+0x456>

08008fcc <_printf_common>:
 8008fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd0:	4616      	mov	r6, r2
 8008fd2:	4699      	mov	r9, r3
 8008fd4:	688a      	ldr	r2, [r1, #8]
 8008fd6:	690b      	ldr	r3, [r1, #16]
 8008fd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	bfb8      	it	lt
 8008fe0:	4613      	movlt	r3, r2
 8008fe2:	6033      	str	r3, [r6, #0]
 8008fe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fe8:	4607      	mov	r7, r0
 8008fea:	460c      	mov	r4, r1
 8008fec:	b10a      	cbz	r2, 8008ff2 <_printf_common+0x26>
 8008fee:	3301      	adds	r3, #1
 8008ff0:	6033      	str	r3, [r6, #0]
 8008ff2:	6823      	ldr	r3, [r4, #0]
 8008ff4:	0699      	lsls	r1, r3, #26
 8008ff6:	bf42      	ittt	mi
 8008ff8:	6833      	ldrmi	r3, [r6, #0]
 8008ffa:	3302      	addmi	r3, #2
 8008ffc:	6033      	strmi	r3, [r6, #0]
 8008ffe:	6825      	ldr	r5, [r4, #0]
 8009000:	f015 0506 	ands.w	r5, r5, #6
 8009004:	d106      	bne.n	8009014 <_printf_common+0x48>
 8009006:	f104 0a19 	add.w	sl, r4, #25
 800900a:	68e3      	ldr	r3, [r4, #12]
 800900c:	6832      	ldr	r2, [r6, #0]
 800900e:	1a9b      	subs	r3, r3, r2
 8009010:	42ab      	cmp	r3, r5
 8009012:	dc26      	bgt.n	8009062 <_printf_common+0x96>
 8009014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009018:	1e13      	subs	r3, r2, #0
 800901a:	6822      	ldr	r2, [r4, #0]
 800901c:	bf18      	it	ne
 800901e:	2301      	movne	r3, #1
 8009020:	0692      	lsls	r2, r2, #26
 8009022:	d42b      	bmi.n	800907c <_printf_common+0xb0>
 8009024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009028:	4649      	mov	r1, r9
 800902a:	4638      	mov	r0, r7
 800902c:	47c0      	blx	r8
 800902e:	3001      	adds	r0, #1
 8009030:	d01e      	beq.n	8009070 <_printf_common+0xa4>
 8009032:	6823      	ldr	r3, [r4, #0]
 8009034:	68e5      	ldr	r5, [r4, #12]
 8009036:	6832      	ldr	r2, [r6, #0]
 8009038:	f003 0306 	and.w	r3, r3, #6
 800903c:	2b04      	cmp	r3, #4
 800903e:	bf08      	it	eq
 8009040:	1aad      	subeq	r5, r5, r2
 8009042:	68a3      	ldr	r3, [r4, #8]
 8009044:	6922      	ldr	r2, [r4, #16]
 8009046:	bf0c      	ite	eq
 8009048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800904c:	2500      	movne	r5, #0
 800904e:	4293      	cmp	r3, r2
 8009050:	bfc4      	itt	gt
 8009052:	1a9b      	subgt	r3, r3, r2
 8009054:	18ed      	addgt	r5, r5, r3
 8009056:	2600      	movs	r6, #0
 8009058:	341a      	adds	r4, #26
 800905a:	42b5      	cmp	r5, r6
 800905c:	d11a      	bne.n	8009094 <_printf_common+0xc8>
 800905e:	2000      	movs	r0, #0
 8009060:	e008      	b.n	8009074 <_printf_common+0xa8>
 8009062:	2301      	movs	r3, #1
 8009064:	4652      	mov	r2, sl
 8009066:	4649      	mov	r1, r9
 8009068:	4638      	mov	r0, r7
 800906a:	47c0      	blx	r8
 800906c:	3001      	adds	r0, #1
 800906e:	d103      	bne.n	8009078 <_printf_common+0xac>
 8009070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009078:	3501      	adds	r5, #1
 800907a:	e7c6      	b.n	800900a <_printf_common+0x3e>
 800907c:	18e1      	adds	r1, r4, r3
 800907e:	1c5a      	adds	r2, r3, #1
 8009080:	2030      	movs	r0, #48	; 0x30
 8009082:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009086:	4422      	add	r2, r4
 8009088:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800908c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009090:	3302      	adds	r3, #2
 8009092:	e7c7      	b.n	8009024 <_printf_common+0x58>
 8009094:	2301      	movs	r3, #1
 8009096:	4622      	mov	r2, r4
 8009098:	4649      	mov	r1, r9
 800909a:	4638      	mov	r0, r7
 800909c:	47c0      	blx	r8
 800909e:	3001      	adds	r0, #1
 80090a0:	d0e6      	beq.n	8009070 <_printf_common+0xa4>
 80090a2:	3601      	adds	r6, #1
 80090a4:	e7d9      	b.n	800905a <_printf_common+0x8e>
	...

080090a8 <_printf_i>:
 80090a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090ac:	7e0f      	ldrb	r7, [r1, #24]
 80090ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090b0:	2f78      	cmp	r7, #120	; 0x78
 80090b2:	4691      	mov	r9, r2
 80090b4:	4680      	mov	r8, r0
 80090b6:	460c      	mov	r4, r1
 80090b8:	469a      	mov	sl, r3
 80090ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090be:	d807      	bhi.n	80090d0 <_printf_i+0x28>
 80090c0:	2f62      	cmp	r7, #98	; 0x62
 80090c2:	d80a      	bhi.n	80090da <_printf_i+0x32>
 80090c4:	2f00      	cmp	r7, #0
 80090c6:	f000 80d8 	beq.w	800927a <_printf_i+0x1d2>
 80090ca:	2f58      	cmp	r7, #88	; 0x58
 80090cc:	f000 80a3 	beq.w	8009216 <_printf_i+0x16e>
 80090d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090d8:	e03a      	b.n	8009150 <_printf_i+0xa8>
 80090da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090de:	2b15      	cmp	r3, #21
 80090e0:	d8f6      	bhi.n	80090d0 <_printf_i+0x28>
 80090e2:	a101      	add	r1, pc, #4	; (adr r1, 80090e8 <_printf_i+0x40>)
 80090e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090e8:	08009141 	.word	0x08009141
 80090ec:	08009155 	.word	0x08009155
 80090f0:	080090d1 	.word	0x080090d1
 80090f4:	080090d1 	.word	0x080090d1
 80090f8:	080090d1 	.word	0x080090d1
 80090fc:	080090d1 	.word	0x080090d1
 8009100:	08009155 	.word	0x08009155
 8009104:	080090d1 	.word	0x080090d1
 8009108:	080090d1 	.word	0x080090d1
 800910c:	080090d1 	.word	0x080090d1
 8009110:	080090d1 	.word	0x080090d1
 8009114:	08009261 	.word	0x08009261
 8009118:	08009185 	.word	0x08009185
 800911c:	08009243 	.word	0x08009243
 8009120:	080090d1 	.word	0x080090d1
 8009124:	080090d1 	.word	0x080090d1
 8009128:	08009283 	.word	0x08009283
 800912c:	080090d1 	.word	0x080090d1
 8009130:	08009185 	.word	0x08009185
 8009134:	080090d1 	.word	0x080090d1
 8009138:	080090d1 	.word	0x080090d1
 800913c:	0800924b 	.word	0x0800924b
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	1d1a      	adds	r2, r3, #4
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	602a      	str	r2, [r5, #0]
 8009148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800914c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009150:	2301      	movs	r3, #1
 8009152:	e0a3      	b.n	800929c <_printf_i+0x1f4>
 8009154:	6820      	ldr	r0, [r4, #0]
 8009156:	6829      	ldr	r1, [r5, #0]
 8009158:	0606      	lsls	r6, r0, #24
 800915a:	f101 0304 	add.w	r3, r1, #4
 800915e:	d50a      	bpl.n	8009176 <_printf_i+0xce>
 8009160:	680e      	ldr	r6, [r1, #0]
 8009162:	602b      	str	r3, [r5, #0]
 8009164:	2e00      	cmp	r6, #0
 8009166:	da03      	bge.n	8009170 <_printf_i+0xc8>
 8009168:	232d      	movs	r3, #45	; 0x2d
 800916a:	4276      	negs	r6, r6
 800916c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009170:	485e      	ldr	r0, [pc, #376]	; (80092ec <_printf_i+0x244>)
 8009172:	230a      	movs	r3, #10
 8009174:	e019      	b.n	80091aa <_printf_i+0x102>
 8009176:	680e      	ldr	r6, [r1, #0]
 8009178:	602b      	str	r3, [r5, #0]
 800917a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800917e:	bf18      	it	ne
 8009180:	b236      	sxthne	r6, r6
 8009182:	e7ef      	b.n	8009164 <_printf_i+0xbc>
 8009184:	682b      	ldr	r3, [r5, #0]
 8009186:	6820      	ldr	r0, [r4, #0]
 8009188:	1d19      	adds	r1, r3, #4
 800918a:	6029      	str	r1, [r5, #0]
 800918c:	0601      	lsls	r1, r0, #24
 800918e:	d501      	bpl.n	8009194 <_printf_i+0xec>
 8009190:	681e      	ldr	r6, [r3, #0]
 8009192:	e002      	b.n	800919a <_printf_i+0xf2>
 8009194:	0646      	lsls	r6, r0, #25
 8009196:	d5fb      	bpl.n	8009190 <_printf_i+0xe8>
 8009198:	881e      	ldrh	r6, [r3, #0]
 800919a:	4854      	ldr	r0, [pc, #336]	; (80092ec <_printf_i+0x244>)
 800919c:	2f6f      	cmp	r7, #111	; 0x6f
 800919e:	bf0c      	ite	eq
 80091a0:	2308      	moveq	r3, #8
 80091a2:	230a      	movne	r3, #10
 80091a4:	2100      	movs	r1, #0
 80091a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091aa:	6865      	ldr	r5, [r4, #4]
 80091ac:	60a5      	str	r5, [r4, #8]
 80091ae:	2d00      	cmp	r5, #0
 80091b0:	bfa2      	ittt	ge
 80091b2:	6821      	ldrge	r1, [r4, #0]
 80091b4:	f021 0104 	bicge.w	r1, r1, #4
 80091b8:	6021      	strge	r1, [r4, #0]
 80091ba:	b90e      	cbnz	r6, 80091c0 <_printf_i+0x118>
 80091bc:	2d00      	cmp	r5, #0
 80091be:	d04d      	beq.n	800925c <_printf_i+0x1b4>
 80091c0:	4615      	mov	r5, r2
 80091c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80091c6:	fb03 6711 	mls	r7, r3, r1, r6
 80091ca:	5dc7      	ldrb	r7, [r0, r7]
 80091cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091d0:	4637      	mov	r7, r6
 80091d2:	42bb      	cmp	r3, r7
 80091d4:	460e      	mov	r6, r1
 80091d6:	d9f4      	bls.n	80091c2 <_printf_i+0x11a>
 80091d8:	2b08      	cmp	r3, #8
 80091da:	d10b      	bne.n	80091f4 <_printf_i+0x14c>
 80091dc:	6823      	ldr	r3, [r4, #0]
 80091de:	07de      	lsls	r6, r3, #31
 80091e0:	d508      	bpl.n	80091f4 <_printf_i+0x14c>
 80091e2:	6923      	ldr	r3, [r4, #16]
 80091e4:	6861      	ldr	r1, [r4, #4]
 80091e6:	4299      	cmp	r1, r3
 80091e8:	bfde      	ittt	le
 80091ea:	2330      	movle	r3, #48	; 0x30
 80091ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091f0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80091f4:	1b52      	subs	r2, r2, r5
 80091f6:	6122      	str	r2, [r4, #16]
 80091f8:	f8cd a000 	str.w	sl, [sp]
 80091fc:	464b      	mov	r3, r9
 80091fe:	aa03      	add	r2, sp, #12
 8009200:	4621      	mov	r1, r4
 8009202:	4640      	mov	r0, r8
 8009204:	f7ff fee2 	bl	8008fcc <_printf_common>
 8009208:	3001      	adds	r0, #1
 800920a:	d14c      	bne.n	80092a6 <_printf_i+0x1fe>
 800920c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009210:	b004      	add	sp, #16
 8009212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009216:	4835      	ldr	r0, [pc, #212]	; (80092ec <_printf_i+0x244>)
 8009218:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800921c:	6829      	ldr	r1, [r5, #0]
 800921e:	6823      	ldr	r3, [r4, #0]
 8009220:	f851 6b04 	ldr.w	r6, [r1], #4
 8009224:	6029      	str	r1, [r5, #0]
 8009226:	061d      	lsls	r5, r3, #24
 8009228:	d514      	bpl.n	8009254 <_printf_i+0x1ac>
 800922a:	07df      	lsls	r7, r3, #31
 800922c:	bf44      	itt	mi
 800922e:	f043 0320 	orrmi.w	r3, r3, #32
 8009232:	6023      	strmi	r3, [r4, #0]
 8009234:	b91e      	cbnz	r6, 800923e <_printf_i+0x196>
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	f023 0320 	bic.w	r3, r3, #32
 800923c:	6023      	str	r3, [r4, #0]
 800923e:	2310      	movs	r3, #16
 8009240:	e7b0      	b.n	80091a4 <_printf_i+0xfc>
 8009242:	6823      	ldr	r3, [r4, #0]
 8009244:	f043 0320 	orr.w	r3, r3, #32
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	2378      	movs	r3, #120	; 0x78
 800924c:	4828      	ldr	r0, [pc, #160]	; (80092f0 <_printf_i+0x248>)
 800924e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009252:	e7e3      	b.n	800921c <_printf_i+0x174>
 8009254:	0659      	lsls	r1, r3, #25
 8009256:	bf48      	it	mi
 8009258:	b2b6      	uxthmi	r6, r6
 800925a:	e7e6      	b.n	800922a <_printf_i+0x182>
 800925c:	4615      	mov	r5, r2
 800925e:	e7bb      	b.n	80091d8 <_printf_i+0x130>
 8009260:	682b      	ldr	r3, [r5, #0]
 8009262:	6826      	ldr	r6, [r4, #0]
 8009264:	6961      	ldr	r1, [r4, #20]
 8009266:	1d18      	adds	r0, r3, #4
 8009268:	6028      	str	r0, [r5, #0]
 800926a:	0635      	lsls	r5, r6, #24
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	d501      	bpl.n	8009274 <_printf_i+0x1cc>
 8009270:	6019      	str	r1, [r3, #0]
 8009272:	e002      	b.n	800927a <_printf_i+0x1d2>
 8009274:	0670      	lsls	r0, r6, #25
 8009276:	d5fb      	bpl.n	8009270 <_printf_i+0x1c8>
 8009278:	8019      	strh	r1, [r3, #0]
 800927a:	2300      	movs	r3, #0
 800927c:	6123      	str	r3, [r4, #16]
 800927e:	4615      	mov	r5, r2
 8009280:	e7ba      	b.n	80091f8 <_printf_i+0x150>
 8009282:	682b      	ldr	r3, [r5, #0]
 8009284:	1d1a      	adds	r2, r3, #4
 8009286:	602a      	str	r2, [r5, #0]
 8009288:	681d      	ldr	r5, [r3, #0]
 800928a:	6862      	ldr	r2, [r4, #4]
 800928c:	2100      	movs	r1, #0
 800928e:	4628      	mov	r0, r5
 8009290:	f7f6 ffa6 	bl	80001e0 <memchr>
 8009294:	b108      	cbz	r0, 800929a <_printf_i+0x1f2>
 8009296:	1b40      	subs	r0, r0, r5
 8009298:	6060      	str	r0, [r4, #4]
 800929a:	6863      	ldr	r3, [r4, #4]
 800929c:	6123      	str	r3, [r4, #16]
 800929e:	2300      	movs	r3, #0
 80092a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092a4:	e7a8      	b.n	80091f8 <_printf_i+0x150>
 80092a6:	6923      	ldr	r3, [r4, #16]
 80092a8:	462a      	mov	r2, r5
 80092aa:	4649      	mov	r1, r9
 80092ac:	4640      	mov	r0, r8
 80092ae:	47d0      	blx	sl
 80092b0:	3001      	adds	r0, #1
 80092b2:	d0ab      	beq.n	800920c <_printf_i+0x164>
 80092b4:	6823      	ldr	r3, [r4, #0]
 80092b6:	079b      	lsls	r3, r3, #30
 80092b8:	d413      	bmi.n	80092e2 <_printf_i+0x23a>
 80092ba:	68e0      	ldr	r0, [r4, #12]
 80092bc:	9b03      	ldr	r3, [sp, #12]
 80092be:	4298      	cmp	r0, r3
 80092c0:	bfb8      	it	lt
 80092c2:	4618      	movlt	r0, r3
 80092c4:	e7a4      	b.n	8009210 <_printf_i+0x168>
 80092c6:	2301      	movs	r3, #1
 80092c8:	4632      	mov	r2, r6
 80092ca:	4649      	mov	r1, r9
 80092cc:	4640      	mov	r0, r8
 80092ce:	47d0      	blx	sl
 80092d0:	3001      	adds	r0, #1
 80092d2:	d09b      	beq.n	800920c <_printf_i+0x164>
 80092d4:	3501      	adds	r5, #1
 80092d6:	68e3      	ldr	r3, [r4, #12]
 80092d8:	9903      	ldr	r1, [sp, #12]
 80092da:	1a5b      	subs	r3, r3, r1
 80092dc:	42ab      	cmp	r3, r5
 80092de:	dcf2      	bgt.n	80092c6 <_printf_i+0x21e>
 80092e0:	e7eb      	b.n	80092ba <_printf_i+0x212>
 80092e2:	2500      	movs	r5, #0
 80092e4:	f104 0619 	add.w	r6, r4, #25
 80092e8:	e7f5      	b.n	80092d6 <_printf_i+0x22e>
 80092ea:	bf00      	nop
 80092ec:	0803929e 	.word	0x0803929e
 80092f0:	080392af 	.word	0x080392af

080092f4 <iprintf>:
 80092f4:	b40f      	push	{r0, r1, r2, r3}
 80092f6:	4b0a      	ldr	r3, [pc, #40]	; (8009320 <iprintf+0x2c>)
 80092f8:	b513      	push	{r0, r1, r4, lr}
 80092fa:	681c      	ldr	r4, [r3, #0]
 80092fc:	b124      	cbz	r4, 8009308 <iprintf+0x14>
 80092fe:	69a3      	ldr	r3, [r4, #24]
 8009300:	b913      	cbnz	r3, 8009308 <iprintf+0x14>
 8009302:	4620      	mov	r0, r4
 8009304:	f7ff f96c 	bl	80085e0 <__sinit>
 8009308:	ab05      	add	r3, sp, #20
 800930a:	9a04      	ldr	r2, [sp, #16]
 800930c:	68a1      	ldr	r1, [r4, #8]
 800930e:	9301      	str	r3, [sp, #4]
 8009310:	4620      	mov	r0, r4
 8009312:	f001 fc73 	bl	800abfc <_vfiprintf_r>
 8009316:	b002      	add	sp, #8
 8009318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800931c:	b004      	add	sp, #16
 800931e:	4770      	bx	lr
 8009320:	20000014 	.word	0x20000014

08009324 <_puts_r>:
 8009324:	b570      	push	{r4, r5, r6, lr}
 8009326:	460e      	mov	r6, r1
 8009328:	4605      	mov	r5, r0
 800932a:	b118      	cbz	r0, 8009334 <_puts_r+0x10>
 800932c:	6983      	ldr	r3, [r0, #24]
 800932e:	b90b      	cbnz	r3, 8009334 <_puts_r+0x10>
 8009330:	f7ff f956 	bl	80085e0 <__sinit>
 8009334:	69ab      	ldr	r3, [r5, #24]
 8009336:	68ac      	ldr	r4, [r5, #8]
 8009338:	b913      	cbnz	r3, 8009340 <_puts_r+0x1c>
 800933a:	4628      	mov	r0, r5
 800933c:	f7ff f950 	bl	80085e0 <__sinit>
 8009340:	4b2c      	ldr	r3, [pc, #176]	; (80093f4 <_puts_r+0xd0>)
 8009342:	429c      	cmp	r4, r3
 8009344:	d120      	bne.n	8009388 <_puts_r+0x64>
 8009346:	686c      	ldr	r4, [r5, #4]
 8009348:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800934a:	07db      	lsls	r3, r3, #31
 800934c:	d405      	bmi.n	800935a <_puts_r+0x36>
 800934e:	89a3      	ldrh	r3, [r4, #12]
 8009350:	0598      	lsls	r0, r3, #22
 8009352:	d402      	bmi.n	800935a <_puts_r+0x36>
 8009354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009356:	f7ff fa06 	bl	8008766 <__retarget_lock_acquire_recursive>
 800935a:	89a3      	ldrh	r3, [r4, #12]
 800935c:	0719      	lsls	r1, r3, #28
 800935e:	d51d      	bpl.n	800939c <_puts_r+0x78>
 8009360:	6923      	ldr	r3, [r4, #16]
 8009362:	b1db      	cbz	r3, 800939c <_puts_r+0x78>
 8009364:	3e01      	subs	r6, #1
 8009366:	68a3      	ldr	r3, [r4, #8]
 8009368:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800936c:	3b01      	subs	r3, #1
 800936e:	60a3      	str	r3, [r4, #8]
 8009370:	bb39      	cbnz	r1, 80093c2 <_puts_r+0x9e>
 8009372:	2b00      	cmp	r3, #0
 8009374:	da38      	bge.n	80093e8 <_puts_r+0xc4>
 8009376:	4622      	mov	r2, r4
 8009378:	210a      	movs	r1, #10
 800937a:	4628      	mov	r0, r5
 800937c:	f000 f8d0 	bl	8009520 <__swbuf_r>
 8009380:	3001      	adds	r0, #1
 8009382:	d011      	beq.n	80093a8 <_puts_r+0x84>
 8009384:	250a      	movs	r5, #10
 8009386:	e011      	b.n	80093ac <_puts_r+0x88>
 8009388:	4b1b      	ldr	r3, [pc, #108]	; (80093f8 <_puts_r+0xd4>)
 800938a:	429c      	cmp	r4, r3
 800938c:	d101      	bne.n	8009392 <_puts_r+0x6e>
 800938e:	68ac      	ldr	r4, [r5, #8]
 8009390:	e7da      	b.n	8009348 <_puts_r+0x24>
 8009392:	4b1a      	ldr	r3, [pc, #104]	; (80093fc <_puts_r+0xd8>)
 8009394:	429c      	cmp	r4, r3
 8009396:	bf08      	it	eq
 8009398:	68ec      	ldreq	r4, [r5, #12]
 800939a:	e7d5      	b.n	8009348 <_puts_r+0x24>
 800939c:	4621      	mov	r1, r4
 800939e:	4628      	mov	r0, r5
 80093a0:	f000 f922 	bl	80095e8 <__swsetup_r>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	d0dd      	beq.n	8009364 <_puts_r+0x40>
 80093a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80093ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093ae:	07da      	lsls	r2, r3, #31
 80093b0:	d405      	bmi.n	80093be <_puts_r+0x9a>
 80093b2:	89a3      	ldrh	r3, [r4, #12]
 80093b4:	059b      	lsls	r3, r3, #22
 80093b6:	d402      	bmi.n	80093be <_puts_r+0x9a>
 80093b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093ba:	f7ff f9d5 	bl	8008768 <__retarget_lock_release_recursive>
 80093be:	4628      	mov	r0, r5
 80093c0:	bd70      	pop	{r4, r5, r6, pc}
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	da04      	bge.n	80093d0 <_puts_r+0xac>
 80093c6:	69a2      	ldr	r2, [r4, #24]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	dc06      	bgt.n	80093da <_puts_r+0xb6>
 80093cc:	290a      	cmp	r1, #10
 80093ce:	d004      	beq.n	80093da <_puts_r+0xb6>
 80093d0:	6823      	ldr	r3, [r4, #0]
 80093d2:	1c5a      	adds	r2, r3, #1
 80093d4:	6022      	str	r2, [r4, #0]
 80093d6:	7019      	strb	r1, [r3, #0]
 80093d8:	e7c5      	b.n	8009366 <_puts_r+0x42>
 80093da:	4622      	mov	r2, r4
 80093dc:	4628      	mov	r0, r5
 80093de:	f000 f89f 	bl	8009520 <__swbuf_r>
 80093e2:	3001      	adds	r0, #1
 80093e4:	d1bf      	bne.n	8009366 <_puts_r+0x42>
 80093e6:	e7df      	b.n	80093a8 <_puts_r+0x84>
 80093e8:	6823      	ldr	r3, [r4, #0]
 80093ea:	250a      	movs	r5, #10
 80093ec:	1c5a      	adds	r2, r3, #1
 80093ee:	6022      	str	r2, [r4, #0]
 80093f0:	701d      	strb	r5, [r3, #0]
 80093f2:	e7db      	b.n	80093ac <_puts_r+0x88>
 80093f4:	08039248 	.word	0x08039248
 80093f8:	08039268 	.word	0x08039268
 80093fc:	08039228 	.word	0x08039228

08009400 <puts>:
 8009400:	4b02      	ldr	r3, [pc, #8]	; (800940c <puts+0xc>)
 8009402:	4601      	mov	r1, r0
 8009404:	6818      	ldr	r0, [r3, #0]
 8009406:	f7ff bf8d 	b.w	8009324 <_puts_r>
 800940a:	bf00      	nop
 800940c:	20000014 	.word	0x20000014

08009410 <_sbrk_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4d06      	ldr	r5, [pc, #24]	; (800942c <_sbrk_r+0x1c>)
 8009414:	2300      	movs	r3, #0
 8009416:	4604      	mov	r4, r0
 8009418:	4608      	mov	r0, r1
 800941a:	602b      	str	r3, [r5, #0]
 800941c:	f7f9 f800 	bl	8002420 <_sbrk>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	d102      	bne.n	800942a <_sbrk_r+0x1a>
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	b103      	cbz	r3, 800942a <_sbrk_r+0x1a>
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	2000a420 	.word	0x2000a420

08009430 <__sread>:
 8009430:	b510      	push	{r4, lr}
 8009432:	460c      	mov	r4, r1
 8009434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009438:	f001 fd10 	bl	800ae5c <_read_r>
 800943c:	2800      	cmp	r0, #0
 800943e:	bfab      	itete	ge
 8009440:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009442:	89a3      	ldrhlt	r3, [r4, #12]
 8009444:	181b      	addge	r3, r3, r0
 8009446:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800944a:	bfac      	ite	ge
 800944c:	6563      	strge	r3, [r4, #84]	; 0x54
 800944e:	81a3      	strhlt	r3, [r4, #12]
 8009450:	bd10      	pop	{r4, pc}

08009452 <__swrite>:
 8009452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009456:	461f      	mov	r7, r3
 8009458:	898b      	ldrh	r3, [r1, #12]
 800945a:	05db      	lsls	r3, r3, #23
 800945c:	4605      	mov	r5, r0
 800945e:	460c      	mov	r4, r1
 8009460:	4616      	mov	r6, r2
 8009462:	d505      	bpl.n	8009470 <__swrite+0x1e>
 8009464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009468:	2302      	movs	r3, #2
 800946a:	2200      	movs	r2, #0
 800946c:	f000 ffdc 	bl	800a428 <_lseek_r>
 8009470:	89a3      	ldrh	r3, [r4, #12]
 8009472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800947a:	81a3      	strh	r3, [r4, #12]
 800947c:	4632      	mov	r2, r6
 800947e:	463b      	mov	r3, r7
 8009480:	4628      	mov	r0, r5
 8009482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009486:	f000 b89d 	b.w	80095c4 <_write_r>

0800948a <__sseek>:
 800948a:	b510      	push	{r4, lr}
 800948c:	460c      	mov	r4, r1
 800948e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009492:	f000 ffc9 	bl	800a428 <_lseek_r>
 8009496:	1c43      	adds	r3, r0, #1
 8009498:	89a3      	ldrh	r3, [r4, #12]
 800949a:	bf15      	itete	ne
 800949c:	6560      	strne	r0, [r4, #84]	; 0x54
 800949e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094a6:	81a3      	strheq	r3, [r4, #12]
 80094a8:	bf18      	it	ne
 80094aa:	81a3      	strhne	r3, [r4, #12]
 80094ac:	bd10      	pop	{r4, pc}

080094ae <__sclose>:
 80094ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b2:	f000 b907 	b.w	80096c4 <_close_r>
	...

080094b8 <swprintf>:
 80094b8:	b40c      	push	{r2, r3}
 80094ba:	b530      	push	{r4, r5, lr}
 80094bc:	4b17      	ldr	r3, [pc, #92]	; (800951c <swprintf+0x64>)
 80094be:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80094c2:	681d      	ldr	r5, [r3, #0]
 80094c4:	b09d      	sub	sp, #116	; 0x74
 80094c6:	460c      	mov	r4, r1
 80094c8:	d308      	bcc.n	80094dc <swprintf+0x24>
 80094ca:	238b      	movs	r3, #139	; 0x8b
 80094cc:	602b      	str	r3, [r5, #0]
 80094ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094d2:	b01d      	add	sp, #116	; 0x74
 80094d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094d8:	b002      	add	sp, #8
 80094da:	4770      	bx	lr
 80094dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80094e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80094e4:	9002      	str	r0, [sp, #8]
 80094e6:	9006      	str	r0, [sp, #24]
 80094e8:	b1b1      	cbz	r1, 8009518 <swprintf+0x60>
 80094ea:	1e4b      	subs	r3, r1, #1
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	9304      	str	r3, [sp, #16]
 80094f0:	9307      	str	r3, [sp, #28]
 80094f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80094f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80094fa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80094fc:	ab21      	add	r3, sp, #132	; 0x84
 80094fe:	a902      	add	r1, sp, #8
 8009500:	4628      	mov	r0, r5
 8009502:	9301      	str	r3, [sp, #4]
 8009504:	f001 fd2c 	bl	800af60 <_svfwprintf_r>
 8009508:	2c00      	cmp	r4, #0
 800950a:	d0de      	beq.n	80094ca <swprintf+0x12>
 800950c:	9b02      	ldr	r3, [sp, #8]
 800950e:	2200      	movs	r2, #0
 8009510:	42a0      	cmp	r0, r4
 8009512:	601a      	str	r2, [r3, #0]
 8009514:	d3dd      	bcc.n	80094d2 <swprintf+0x1a>
 8009516:	e7d8      	b.n	80094ca <swprintf+0x12>
 8009518:	460b      	mov	r3, r1
 800951a:	e7e8      	b.n	80094ee <swprintf+0x36>
 800951c:	20000014 	.word	0x20000014

08009520 <__swbuf_r>:
 8009520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009522:	460e      	mov	r6, r1
 8009524:	4614      	mov	r4, r2
 8009526:	4605      	mov	r5, r0
 8009528:	b118      	cbz	r0, 8009532 <__swbuf_r+0x12>
 800952a:	6983      	ldr	r3, [r0, #24]
 800952c:	b90b      	cbnz	r3, 8009532 <__swbuf_r+0x12>
 800952e:	f7ff f857 	bl	80085e0 <__sinit>
 8009532:	4b21      	ldr	r3, [pc, #132]	; (80095b8 <__swbuf_r+0x98>)
 8009534:	429c      	cmp	r4, r3
 8009536:	d12b      	bne.n	8009590 <__swbuf_r+0x70>
 8009538:	686c      	ldr	r4, [r5, #4]
 800953a:	69a3      	ldr	r3, [r4, #24]
 800953c:	60a3      	str	r3, [r4, #8]
 800953e:	89a3      	ldrh	r3, [r4, #12]
 8009540:	071a      	lsls	r2, r3, #28
 8009542:	d52f      	bpl.n	80095a4 <__swbuf_r+0x84>
 8009544:	6923      	ldr	r3, [r4, #16]
 8009546:	b36b      	cbz	r3, 80095a4 <__swbuf_r+0x84>
 8009548:	6923      	ldr	r3, [r4, #16]
 800954a:	6820      	ldr	r0, [r4, #0]
 800954c:	1ac0      	subs	r0, r0, r3
 800954e:	6963      	ldr	r3, [r4, #20]
 8009550:	b2f6      	uxtb	r6, r6
 8009552:	4283      	cmp	r3, r0
 8009554:	4637      	mov	r7, r6
 8009556:	dc04      	bgt.n	8009562 <__swbuf_r+0x42>
 8009558:	4621      	mov	r1, r4
 800955a:	4628      	mov	r0, r5
 800955c:	f7fe ffac 	bl	80084b8 <_fflush_r>
 8009560:	bb30      	cbnz	r0, 80095b0 <__swbuf_r+0x90>
 8009562:	68a3      	ldr	r3, [r4, #8]
 8009564:	3b01      	subs	r3, #1
 8009566:	60a3      	str	r3, [r4, #8]
 8009568:	6823      	ldr	r3, [r4, #0]
 800956a:	1c5a      	adds	r2, r3, #1
 800956c:	6022      	str	r2, [r4, #0]
 800956e:	701e      	strb	r6, [r3, #0]
 8009570:	6963      	ldr	r3, [r4, #20]
 8009572:	3001      	adds	r0, #1
 8009574:	4283      	cmp	r3, r0
 8009576:	d004      	beq.n	8009582 <__swbuf_r+0x62>
 8009578:	89a3      	ldrh	r3, [r4, #12]
 800957a:	07db      	lsls	r3, r3, #31
 800957c:	d506      	bpl.n	800958c <__swbuf_r+0x6c>
 800957e:	2e0a      	cmp	r6, #10
 8009580:	d104      	bne.n	800958c <__swbuf_r+0x6c>
 8009582:	4621      	mov	r1, r4
 8009584:	4628      	mov	r0, r5
 8009586:	f7fe ff97 	bl	80084b8 <_fflush_r>
 800958a:	b988      	cbnz	r0, 80095b0 <__swbuf_r+0x90>
 800958c:	4638      	mov	r0, r7
 800958e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009590:	4b0a      	ldr	r3, [pc, #40]	; (80095bc <__swbuf_r+0x9c>)
 8009592:	429c      	cmp	r4, r3
 8009594:	d101      	bne.n	800959a <__swbuf_r+0x7a>
 8009596:	68ac      	ldr	r4, [r5, #8]
 8009598:	e7cf      	b.n	800953a <__swbuf_r+0x1a>
 800959a:	4b09      	ldr	r3, [pc, #36]	; (80095c0 <__swbuf_r+0xa0>)
 800959c:	429c      	cmp	r4, r3
 800959e:	bf08      	it	eq
 80095a0:	68ec      	ldreq	r4, [r5, #12]
 80095a2:	e7ca      	b.n	800953a <__swbuf_r+0x1a>
 80095a4:	4621      	mov	r1, r4
 80095a6:	4628      	mov	r0, r5
 80095a8:	f000 f81e 	bl	80095e8 <__swsetup_r>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	d0cb      	beq.n	8009548 <__swbuf_r+0x28>
 80095b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80095b4:	e7ea      	b.n	800958c <__swbuf_r+0x6c>
 80095b6:	bf00      	nop
 80095b8:	08039248 	.word	0x08039248
 80095bc:	08039268 	.word	0x08039268
 80095c0:	08039228 	.word	0x08039228

080095c4 <_write_r>:
 80095c4:	b538      	push	{r3, r4, r5, lr}
 80095c6:	4d07      	ldr	r5, [pc, #28]	; (80095e4 <_write_r+0x20>)
 80095c8:	4604      	mov	r4, r0
 80095ca:	4608      	mov	r0, r1
 80095cc:	4611      	mov	r1, r2
 80095ce:	2200      	movs	r2, #0
 80095d0:	602a      	str	r2, [r5, #0]
 80095d2:	461a      	mov	r2, r3
 80095d4:	f7f8 fed3 	bl	800237e <_write>
 80095d8:	1c43      	adds	r3, r0, #1
 80095da:	d102      	bne.n	80095e2 <_write_r+0x1e>
 80095dc:	682b      	ldr	r3, [r5, #0]
 80095de:	b103      	cbz	r3, 80095e2 <_write_r+0x1e>
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	bd38      	pop	{r3, r4, r5, pc}
 80095e4:	2000a420 	.word	0x2000a420

080095e8 <__swsetup_r>:
 80095e8:	4b32      	ldr	r3, [pc, #200]	; (80096b4 <__swsetup_r+0xcc>)
 80095ea:	b570      	push	{r4, r5, r6, lr}
 80095ec:	681d      	ldr	r5, [r3, #0]
 80095ee:	4606      	mov	r6, r0
 80095f0:	460c      	mov	r4, r1
 80095f2:	b125      	cbz	r5, 80095fe <__swsetup_r+0x16>
 80095f4:	69ab      	ldr	r3, [r5, #24]
 80095f6:	b913      	cbnz	r3, 80095fe <__swsetup_r+0x16>
 80095f8:	4628      	mov	r0, r5
 80095fa:	f7fe fff1 	bl	80085e0 <__sinit>
 80095fe:	4b2e      	ldr	r3, [pc, #184]	; (80096b8 <__swsetup_r+0xd0>)
 8009600:	429c      	cmp	r4, r3
 8009602:	d10f      	bne.n	8009624 <__swsetup_r+0x3c>
 8009604:	686c      	ldr	r4, [r5, #4]
 8009606:	89a3      	ldrh	r3, [r4, #12]
 8009608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800960c:	0719      	lsls	r1, r3, #28
 800960e:	d42c      	bmi.n	800966a <__swsetup_r+0x82>
 8009610:	06dd      	lsls	r5, r3, #27
 8009612:	d411      	bmi.n	8009638 <__swsetup_r+0x50>
 8009614:	2309      	movs	r3, #9
 8009616:	6033      	str	r3, [r6, #0]
 8009618:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800961c:	81a3      	strh	r3, [r4, #12]
 800961e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009622:	e03e      	b.n	80096a2 <__swsetup_r+0xba>
 8009624:	4b25      	ldr	r3, [pc, #148]	; (80096bc <__swsetup_r+0xd4>)
 8009626:	429c      	cmp	r4, r3
 8009628:	d101      	bne.n	800962e <__swsetup_r+0x46>
 800962a:	68ac      	ldr	r4, [r5, #8]
 800962c:	e7eb      	b.n	8009606 <__swsetup_r+0x1e>
 800962e:	4b24      	ldr	r3, [pc, #144]	; (80096c0 <__swsetup_r+0xd8>)
 8009630:	429c      	cmp	r4, r3
 8009632:	bf08      	it	eq
 8009634:	68ec      	ldreq	r4, [r5, #12]
 8009636:	e7e6      	b.n	8009606 <__swsetup_r+0x1e>
 8009638:	0758      	lsls	r0, r3, #29
 800963a:	d512      	bpl.n	8009662 <__swsetup_r+0x7a>
 800963c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800963e:	b141      	cbz	r1, 8009652 <__swsetup_r+0x6a>
 8009640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009644:	4299      	cmp	r1, r3
 8009646:	d002      	beq.n	800964e <__swsetup_r+0x66>
 8009648:	4630      	mov	r0, r6
 800964a:	f7ff f909 	bl	8008860 <_free_r>
 800964e:	2300      	movs	r3, #0
 8009650:	6363      	str	r3, [r4, #52]	; 0x34
 8009652:	89a3      	ldrh	r3, [r4, #12]
 8009654:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009658:	81a3      	strh	r3, [r4, #12]
 800965a:	2300      	movs	r3, #0
 800965c:	6063      	str	r3, [r4, #4]
 800965e:	6923      	ldr	r3, [r4, #16]
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	f043 0308 	orr.w	r3, r3, #8
 8009668:	81a3      	strh	r3, [r4, #12]
 800966a:	6923      	ldr	r3, [r4, #16]
 800966c:	b94b      	cbnz	r3, 8009682 <__swsetup_r+0x9a>
 800966e:	89a3      	ldrh	r3, [r4, #12]
 8009670:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009678:	d003      	beq.n	8009682 <__swsetup_r+0x9a>
 800967a:	4621      	mov	r1, r4
 800967c:	4630      	mov	r0, r6
 800967e:	f7ff f899 	bl	80087b4 <__smakebuf_r>
 8009682:	89a0      	ldrh	r0, [r4, #12]
 8009684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009688:	f010 0301 	ands.w	r3, r0, #1
 800968c:	d00a      	beq.n	80096a4 <__swsetup_r+0xbc>
 800968e:	2300      	movs	r3, #0
 8009690:	60a3      	str	r3, [r4, #8]
 8009692:	6963      	ldr	r3, [r4, #20]
 8009694:	425b      	negs	r3, r3
 8009696:	61a3      	str	r3, [r4, #24]
 8009698:	6923      	ldr	r3, [r4, #16]
 800969a:	b943      	cbnz	r3, 80096ae <__swsetup_r+0xc6>
 800969c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096a0:	d1ba      	bne.n	8009618 <__swsetup_r+0x30>
 80096a2:	bd70      	pop	{r4, r5, r6, pc}
 80096a4:	0781      	lsls	r1, r0, #30
 80096a6:	bf58      	it	pl
 80096a8:	6963      	ldrpl	r3, [r4, #20]
 80096aa:	60a3      	str	r3, [r4, #8]
 80096ac:	e7f4      	b.n	8009698 <__swsetup_r+0xb0>
 80096ae:	2000      	movs	r0, #0
 80096b0:	e7f7      	b.n	80096a2 <__swsetup_r+0xba>
 80096b2:	bf00      	nop
 80096b4:	20000014 	.word	0x20000014
 80096b8:	08039248 	.word	0x08039248
 80096bc:	08039268 	.word	0x08039268
 80096c0:	08039228 	.word	0x08039228

080096c4 <_close_r>:
 80096c4:	b538      	push	{r3, r4, r5, lr}
 80096c6:	4d06      	ldr	r5, [pc, #24]	; (80096e0 <_close_r+0x1c>)
 80096c8:	2300      	movs	r3, #0
 80096ca:	4604      	mov	r4, r0
 80096cc:	4608      	mov	r0, r1
 80096ce:	602b      	str	r3, [r5, #0]
 80096d0:	f7f8 fe71 	bl	80023b6 <_close>
 80096d4:	1c43      	adds	r3, r0, #1
 80096d6:	d102      	bne.n	80096de <_close_r+0x1a>
 80096d8:	682b      	ldr	r3, [r5, #0]
 80096da:	b103      	cbz	r3, 80096de <_close_r+0x1a>
 80096dc:	6023      	str	r3, [r4, #0]
 80096de:	bd38      	pop	{r3, r4, r5, pc}
 80096e0:	2000a420 	.word	0x2000a420

080096e4 <quorem>:
 80096e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e8:	6903      	ldr	r3, [r0, #16]
 80096ea:	690c      	ldr	r4, [r1, #16]
 80096ec:	42a3      	cmp	r3, r4
 80096ee:	4607      	mov	r7, r0
 80096f0:	f2c0 8081 	blt.w	80097f6 <quorem+0x112>
 80096f4:	3c01      	subs	r4, #1
 80096f6:	f101 0814 	add.w	r8, r1, #20
 80096fa:	f100 0514 	add.w	r5, r0, #20
 80096fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009702:	9301      	str	r3, [sp, #4]
 8009704:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009708:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800970c:	3301      	adds	r3, #1
 800970e:	429a      	cmp	r2, r3
 8009710:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009714:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009718:	fbb2 f6f3 	udiv	r6, r2, r3
 800971c:	d331      	bcc.n	8009782 <quorem+0x9e>
 800971e:	f04f 0e00 	mov.w	lr, #0
 8009722:	4640      	mov	r0, r8
 8009724:	46ac      	mov	ip, r5
 8009726:	46f2      	mov	sl, lr
 8009728:	f850 2b04 	ldr.w	r2, [r0], #4
 800972c:	b293      	uxth	r3, r2
 800972e:	fb06 e303 	mla	r3, r6, r3, lr
 8009732:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009736:	b29b      	uxth	r3, r3
 8009738:	ebaa 0303 	sub.w	r3, sl, r3
 800973c:	f8dc a000 	ldr.w	sl, [ip]
 8009740:	0c12      	lsrs	r2, r2, #16
 8009742:	fa13 f38a 	uxtah	r3, r3, sl
 8009746:	fb06 e202 	mla	r2, r6, r2, lr
 800974a:	9300      	str	r3, [sp, #0]
 800974c:	9b00      	ldr	r3, [sp, #0]
 800974e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009752:	b292      	uxth	r2, r2
 8009754:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009758:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800975c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009760:	4581      	cmp	r9, r0
 8009762:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009766:	f84c 3b04 	str.w	r3, [ip], #4
 800976a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800976e:	d2db      	bcs.n	8009728 <quorem+0x44>
 8009770:	f855 300b 	ldr.w	r3, [r5, fp]
 8009774:	b92b      	cbnz	r3, 8009782 <quorem+0x9e>
 8009776:	9b01      	ldr	r3, [sp, #4]
 8009778:	3b04      	subs	r3, #4
 800977a:	429d      	cmp	r5, r3
 800977c:	461a      	mov	r2, r3
 800977e:	d32e      	bcc.n	80097de <quorem+0xfa>
 8009780:	613c      	str	r4, [r7, #16]
 8009782:	4638      	mov	r0, r7
 8009784:	f001 f8f8 	bl	800a978 <__mcmp>
 8009788:	2800      	cmp	r0, #0
 800978a:	db24      	blt.n	80097d6 <quorem+0xf2>
 800978c:	3601      	adds	r6, #1
 800978e:	4628      	mov	r0, r5
 8009790:	f04f 0c00 	mov.w	ip, #0
 8009794:	f858 2b04 	ldr.w	r2, [r8], #4
 8009798:	f8d0 e000 	ldr.w	lr, [r0]
 800979c:	b293      	uxth	r3, r2
 800979e:	ebac 0303 	sub.w	r3, ip, r3
 80097a2:	0c12      	lsrs	r2, r2, #16
 80097a4:	fa13 f38e 	uxtah	r3, r3, lr
 80097a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80097ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097b6:	45c1      	cmp	r9, r8
 80097b8:	f840 3b04 	str.w	r3, [r0], #4
 80097bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097c0:	d2e8      	bcs.n	8009794 <quorem+0xb0>
 80097c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097ca:	b922      	cbnz	r2, 80097d6 <quorem+0xf2>
 80097cc:	3b04      	subs	r3, #4
 80097ce:	429d      	cmp	r5, r3
 80097d0:	461a      	mov	r2, r3
 80097d2:	d30a      	bcc.n	80097ea <quorem+0x106>
 80097d4:	613c      	str	r4, [r7, #16]
 80097d6:	4630      	mov	r0, r6
 80097d8:	b003      	add	sp, #12
 80097da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097de:	6812      	ldr	r2, [r2, #0]
 80097e0:	3b04      	subs	r3, #4
 80097e2:	2a00      	cmp	r2, #0
 80097e4:	d1cc      	bne.n	8009780 <quorem+0x9c>
 80097e6:	3c01      	subs	r4, #1
 80097e8:	e7c7      	b.n	800977a <quorem+0x96>
 80097ea:	6812      	ldr	r2, [r2, #0]
 80097ec:	3b04      	subs	r3, #4
 80097ee:	2a00      	cmp	r2, #0
 80097f0:	d1f0      	bne.n	80097d4 <quorem+0xf0>
 80097f2:	3c01      	subs	r4, #1
 80097f4:	e7eb      	b.n	80097ce <quorem+0xea>
 80097f6:	2000      	movs	r0, #0
 80097f8:	e7ee      	b.n	80097d8 <quorem+0xf4>
 80097fa:	0000      	movs	r0, r0
 80097fc:	0000      	movs	r0, r0
	...

08009800 <_dtoa_r>:
 8009800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009804:	ed2d 8b04 	vpush	{d8-d9}
 8009808:	ec57 6b10 	vmov	r6, r7, d0
 800980c:	b093      	sub	sp, #76	; 0x4c
 800980e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009810:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009814:	9106      	str	r1, [sp, #24]
 8009816:	ee10 aa10 	vmov	sl, s0
 800981a:	4604      	mov	r4, r0
 800981c:	9209      	str	r2, [sp, #36]	; 0x24
 800981e:	930c      	str	r3, [sp, #48]	; 0x30
 8009820:	46bb      	mov	fp, r7
 8009822:	b975      	cbnz	r5, 8009842 <_dtoa_r+0x42>
 8009824:	2010      	movs	r0, #16
 8009826:	f000 fe11 	bl	800a44c <malloc>
 800982a:	4602      	mov	r2, r0
 800982c:	6260      	str	r0, [r4, #36]	; 0x24
 800982e:	b920      	cbnz	r0, 800983a <_dtoa_r+0x3a>
 8009830:	4ba7      	ldr	r3, [pc, #668]	; (8009ad0 <_dtoa_r+0x2d0>)
 8009832:	21ea      	movs	r1, #234	; 0xea
 8009834:	48a7      	ldr	r0, [pc, #668]	; (8009ad4 <_dtoa_r+0x2d4>)
 8009836:	f002 f925 	bl	800ba84 <__assert_func>
 800983a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800983e:	6005      	str	r5, [r0, #0]
 8009840:	60c5      	str	r5, [r0, #12]
 8009842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009844:	6819      	ldr	r1, [r3, #0]
 8009846:	b151      	cbz	r1, 800985e <_dtoa_r+0x5e>
 8009848:	685a      	ldr	r2, [r3, #4]
 800984a:	604a      	str	r2, [r1, #4]
 800984c:	2301      	movs	r3, #1
 800984e:	4093      	lsls	r3, r2
 8009850:	608b      	str	r3, [r1, #8]
 8009852:	4620      	mov	r0, r4
 8009854:	f000 fe4e 	bl	800a4f4 <_Bfree>
 8009858:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800985a:	2200      	movs	r2, #0
 800985c:	601a      	str	r2, [r3, #0]
 800985e:	1e3b      	subs	r3, r7, #0
 8009860:	bfaa      	itet	ge
 8009862:	2300      	movge	r3, #0
 8009864:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009868:	f8c8 3000 	strge.w	r3, [r8]
 800986c:	4b9a      	ldr	r3, [pc, #616]	; (8009ad8 <_dtoa_r+0x2d8>)
 800986e:	bfbc      	itt	lt
 8009870:	2201      	movlt	r2, #1
 8009872:	f8c8 2000 	strlt.w	r2, [r8]
 8009876:	ea33 030b 	bics.w	r3, r3, fp
 800987a:	d11b      	bne.n	80098b4 <_dtoa_r+0xb4>
 800987c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800987e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009882:	6013      	str	r3, [r2, #0]
 8009884:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009888:	4333      	orrs	r3, r6
 800988a:	f000 8592 	beq.w	800a3b2 <_dtoa_r+0xbb2>
 800988e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009890:	b963      	cbnz	r3, 80098ac <_dtoa_r+0xac>
 8009892:	4b92      	ldr	r3, [pc, #584]	; (8009adc <_dtoa_r+0x2dc>)
 8009894:	e022      	b.n	80098dc <_dtoa_r+0xdc>
 8009896:	4b92      	ldr	r3, [pc, #584]	; (8009ae0 <_dtoa_r+0x2e0>)
 8009898:	9301      	str	r3, [sp, #4]
 800989a:	3308      	adds	r3, #8
 800989c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800989e:	6013      	str	r3, [r2, #0]
 80098a0:	9801      	ldr	r0, [sp, #4]
 80098a2:	b013      	add	sp, #76	; 0x4c
 80098a4:	ecbd 8b04 	vpop	{d8-d9}
 80098a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ac:	4b8b      	ldr	r3, [pc, #556]	; (8009adc <_dtoa_r+0x2dc>)
 80098ae:	9301      	str	r3, [sp, #4]
 80098b0:	3303      	adds	r3, #3
 80098b2:	e7f3      	b.n	800989c <_dtoa_r+0x9c>
 80098b4:	2200      	movs	r2, #0
 80098b6:	2300      	movs	r3, #0
 80098b8:	4650      	mov	r0, sl
 80098ba:	4659      	mov	r1, fp
 80098bc:	f7f7 f904 	bl	8000ac8 <__aeabi_dcmpeq>
 80098c0:	ec4b ab19 	vmov	d9, sl, fp
 80098c4:	4680      	mov	r8, r0
 80098c6:	b158      	cbz	r0, 80098e0 <_dtoa_r+0xe0>
 80098c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098ca:	2301      	movs	r3, #1
 80098cc:	6013      	str	r3, [r2, #0]
 80098ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f000 856b 	beq.w	800a3ac <_dtoa_r+0xbac>
 80098d6:	4883      	ldr	r0, [pc, #524]	; (8009ae4 <_dtoa_r+0x2e4>)
 80098d8:	6018      	str	r0, [r3, #0]
 80098da:	1e43      	subs	r3, r0, #1
 80098dc:	9301      	str	r3, [sp, #4]
 80098de:	e7df      	b.n	80098a0 <_dtoa_r+0xa0>
 80098e0:	ec4b ab10 	vmov	d0, sl, fp
 80098e4:	aa10      	add	r2, sp, #64	; 0x40
 80098e6:	a911      	add	r1, sp, #68	; 0x44
 80098e8:	4620      	mov	r0, r4
 80098ea:	f001 f8eb 	bl	800aac4 <__d2b>
 80098ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80098f2:	ee08 0a10 	vmov	s16, r0
 80098f6:	2d00      	cmp	r5, #0
 80098f8:	f000 8084 	beq.w	8009a04 <_dtoa_r+0x204>
 80098fc:	ee19 3a90 	vmov	r3, s19
 8009900:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009904:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009908:	4656      	mov	r6, sl
 800990a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800990e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009912:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009916:	4b74      	ldr	r3, [pc, #464]	; (8009ae8 <_dtoa_r+0x2e8>)
 8009918:	2200      	movs	r2, #0
 800991a:	4630      	mov	r0, r6
 800991c:	4639      	mov	r1, r7
 800991e:	f7f6 fcb3 	bl	8000288 <__aeabi_dsub>
 8009922:	a365      	add	r3, pc, #404	; (adr r3, 8009ab8 <_dtoa_r+0x2b8>)
 8009924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009928:	f7f6 fe66 	bl	80005f8 <__aeabi_dmul>
 800992c:	a364      	add	r3, pc, #400	; (adr r3, 8009ac0 <_dtoa_r+0x2c0>)
 800992e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009932:	f7f6 fcab 	bl	800028c <__adddf3>
 8009936:	4606      	mov	r6, r0
 8009938:	4628      	mov	r0, r5
 800993a:	460f      	mov	r7, r1
 800993c:	f7f6 fdf2 	bl	8000524 <__aeabi_i2d>
 8009940:	a361      	add	r3, pc, #388	; (adr r3, 8009ac8 <_dtoa_r+0x2c8>)
 8009942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009946:	f7f6 fe57 	bl	80005f8 <__aeabi_dmul>
 800994a:	4602      	mov	r2, r0
 800994c:	460b      	mov	r3, r1
 800994e:	4630      	mov	r0, r6
 8009950:	4639      	mov	r1, r7
 8009952:	f7f6 fc9b 	bl	800028c <__adddf3>
 8009956:	4606      	mov	r6, r0
 8009958:	460f      	mov	r7, r1
 800995a:	f7f7 f8fd 	bl	8000b58 <__aeabi_d2iz>
 800995e:	2200      	movs	r2, #0
 8009960:	9000      	str	r0, [sp, #0]
 8009962:	2300      	movs	r3, #0
 8009964:	4630      	mov	r0, r6
 8009966:	4639      	mov	r1, r7
 8009968:	f7f7 f8b8 	bl	8000adc <__aeabi_dcmplt>
 800996c:	b150      	cbz	r0, 8009984 <_dtoa_r+0x184>
 800996e:	9800      	ldr	r0, [sp, #0]
 8009970:	f7f6 fdd8 	bl	8000524 <__aeabi_i2d>
 8009974:	4632      	mov	r2, r6
 8009976:	463b      	mov	r3, r7
 8009978:	f7f7 f8a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800997c:	b910      	cbnz	r0, 8009984 <_dtoa_r+0x184>
 800997e:	9b00      	ldr	r3, [sp, #0]
 8009980:	3b01      	subs	r3, #1
 8009982:	9300      	str	r3, [sp, #0]
 8009984:	9b00      	ldr	r3, [sp, #0]
 8009986:	2b16      	cmp	r3, #22
 8009988:	d85a      	bhi.n	8009a40 <_dtoa_r+0x240>
 800998a:	9a00      	ldr	r2, [sp, #0]
 800998c:	4b57      	ldr	r3, [pc, #348]	; (8009aec <_dtoa_r+0x2ec>)
 800998e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009996:	ec51 0b19 	vmov	r0, r1, d9
 800999a:	f7f7 f89f 	bl	8000adc <__aeabi_dcmplt>
 800999e:	2800      	cmp	r0, #0
 80099a0:	d050      	beq.n	8009a44 <_dtoa_r+0x244>
 80099a2:	9b00      	ldr	r3, [sp, #0]
 80099a4:	3b01      	subs	r3, #1
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	2300      	movs	r3, #0
 80099aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80099ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099ae:	1b5d      	subs	r5, r3, r5
 80099b0:	1e6b      	subs	r3, r5, #1
 80099b2:	9305      	str	r3, [sp, #20]
 80099b4:	bf45      	ittet	mi
 80099b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80099ba:	9304      	strmi	r3, [sp, #16]
 80099bc:	2300      	movpl	r3, #0
 80099be:	2300      	movmi	r3, #0
 80099c0:	bf4c      	ite	mi
 80099c2:	9305      	strmi	r3, [sp, #20]
 80099c4:	9304      	strpl	r3, [sp, #16]
 80099c6:	9b00      	ldr	r3, [sp, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	db3d      	blt.n	8009a48 <_dtoa_r+0x248>
 80099cc:	9b05      	ldr	r3, [sp, #20]
 80099ce:	9a00      	ldr	r2, [sp, #0]
 80099d0:	920a      	str	r2, [sp, #40]	; 0x28
 80099d2:	4413      	add	r3, r2
 80099d4:	9305      	str	r3, [sp, #20]
 80099d6:	2300      	movs	r3, #0
 80099d8:	9307      	str	r3, [sp, #28]
 80099da:	9b06      	ldr	r3, [sp, #24]
 80099dc:	2b09      	cmp	r3, #9
 80099de:	f200 8089 	bhi.w	8009af4 <_dtoa_r+0x2f4>
 80099e2:	2b05      	cmp	r3, #5
 80099e4:	bfc4      	itt	gt
 80099e6:	3b04      	subgt	r3, #4
 80099e8:	9306      	strgt	r3, [sp, #24]
 80099ea:	9b06      	ldr	r3, [sp, #24]
 80099ec:	f1a3 0302 	sub.w	r3, r3, #2
 80099f0:	bfcc      	ite	gt
 80099f2:	2500      	movgt	r5, #0
 80099f4:	2501      	movle	r5, #1
 80099f6:	2b03      	cmp	r3, #3
 80099f8:	f200 8087 	bhi.w	8009b0a <_dtoa_r+0x30a>
 80099fc:	e8df f003 	tbb	[pc, r3]
 8009a00:	59383a2d 	.word	0x59383a2d
 8009a04:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009a08:	441d      	add	r5, r3
 8009a0a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009a0e:	2b20      	cmp	r3, #32
 8009a10:	bfc1      	itttt	gt
 8009a12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a16:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009a1a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009a1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a22:	bfda      	itte	le
 8009a24:	f1c3 0320 	rsble	r3, r3, #32
 8009a28:	fa06 f003 	lslle.w	r0, r6, r3
 8009a2c:	4318      	orrgt	r0, r3
 8009a2e:	f7f6 fd69 	bl	8000504 <__aeabi_ui2d>
 8009a32:	2301      	movs	r3, #1
 8009a34:	4606      	mov	r6, r0
 8009a36:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009a3a:	3d01      	subs	r5, #1
 8009a3c:	930e      	str	r3, [sp, #56]	; 0x38
 8009a3e:	e76a      	b.n	8009916 <_dtoa_r+0x116>
 8009a40:	2301      	movs	r3, #1
 8009a42:	e7b2      	b.n	80099aa <_dtoa_r+0x1aa>
 8009a44:	900b      	str	r0, [sp, #44]	; 0x2c
 8009a46:	e7b1      	b.n	80099ac <_dtoa_r+0x1ac>
 8009a48:	9b04      	ldr	r3, [sp, #16]
 8009a4a:	9a00      	ldr	r2, [sp, #0]
 8009a4c:	1a9b      	subs	r3, r3, r2
 8009a4e:	9304      	str	r3, [sp, #16]
 8009a50:	4253      	negs	r3, r2
 8009a52:	9307      	str	r3, [sp, #28]
 8009a54:	2300      	movs	r3, #0
 8009a56:	930a      	str	r3, [sp, #40]	; 0x28
 8009a58:	e7bf      	b.n	80099da <_dtoa_r+0x1da>
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	9308      	str	r3, [sp, #32]
 8009a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	dc55      	bgt.n	8009b10 <_dtoa_r+0x310>
 8009a64:	2301      	movs	r3, #1
 8009a66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a6e:	e00c      	b.n	8009a8a <_dtoa_r+0x28a>
 8009a70:	2301      	movs	r3, #1
 8009a72:	e7f3      	b.n	8009a5c <_dtoa_r+0x25c>
 8009a74:	2300      	movs	r3, #0
 8009a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a78:	9308      	str	r3, [sp, #32]
 8009a7a:	9b00      	ldr	r3, [sp, #0]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	9302      	str	r3, [sp, #8]
 8009a80:	3301      	adds	r3, #1
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	9303      	str	r3, [sp, #12]
 8009a86:	bfb8      	it	lt
 8009a88:	2301      	movlt	r3, #1
 8009a8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	6042      	str	r2, [r0, #4]
 8009a90:	2204      	movs	r2, #4
 8009a92:	f102 0614 	add.w	r6, r2, #20
 8009a96:	429e      	cmp	r6, r3
 8009a98:	6841      	ldr	r1, [r0, #4]
 8009a9a:	d93d      	bls.n	8009b18 <_dtoa_r+0x318>
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	f000 fce9 	bl	800a474 <_Balloc>
 8009aa2:	9001      	str	r0, [sp, #4]
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d13b      	bne.n	8009b20 <_dtoa_r+0x320>
 8009aa8:	4b11      	ldr	r3, [pc, #68]	; (8009af0 <_dtoa_r+0x2f0>)
 8009aaa:	4602      	mov	r2, r0
 8009aac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009ab0:	e6c0      	b.n	8009834 <_dtoa_r+0x34>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e7df      	b.n	8009a76 <_dtoa_r+0x276>
 8009ab6:	bf00      	nop
 8009ab8:	636f4361 	.word	0x636f4361
 8009abc:	3fd287a7 	.word	0x3fd287a7
 8009ac0:	8b60c8b3 	.word	0x8b60c8b3
 8009ac4:	3fc68a28 	.word	0x3fc68a28
 8009ac8:	509f79fb 	.word	0x509f79fb
 8009acc:	3fd34413 	.word	0x3fd34413
 8009ad0:	080392cd 	.word	0x080392cd
 8009ad4:	080392e4 	.word	0x080392e4
 8009ad8:	7ff00000 	.word	0x7ff00000
 8009adc:	080392c9 	.word	0x080392c9
 8009ae0:	080392c0 	.word	0x080392c0
 8009ae4:	0803929d 	.word	0x0803929d
 8009ae8:	3ff80000 	.word	0x3ff80000
 8009aec:	080393d8 	.word	0x080393d8
 8009af0:	0803933f 	.word	0x0803933f
 8009af4:	2501      	movs	r5, #1
 8009af6:	2300      	movs	r3, #0
 8009af8:	9306      	str	r3, [sp, #24]
 8009afa:	9508      	str	r5, [sp, #32]
 8009afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b00:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009b04:	2200      	movs	r2, #0
 8009b06:	2312      	movs	r3, #18
 8009b08:	e7b0      	b.n	8009a6c <_dtoa_r+0x26c>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	9308      	str	r3, [sp, #32]
 8009b0e:	e7f5      	b.n	8009afc <_dtoa_r+0x2fc>
 8009b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009b16:	e7b8      	b.n	8009a8a <_dtoa_r+0x28a>
 8009b18:	3101      	adds	r1, #1
 8009b1a:	6041      	str	r1, [r0, #4]
 8009b1c:	0052      	lsls	r2, r2, #1
 8009b1e:	e7b8      	b.n	8009a92 <_dtoa_r+0x292>
 8009b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b22:	9a01      	ldr	r2, [sp, #4]
 8009b24:	601a      	str	r2, [r3, #0]
 8009b26:	9b03      	ldr	r3, [sp, #12]
 8009b28:	2b0e      	cmp	r3, #14
 8009b2a:	f200 809d 	bhi.w	8009c68 <_dtoa_r+0x468>
 8009b2e:	2d00      	cmp	r5, #0
 8009b30:	f000 809a 	beq.w	8009c68 <_dtoa_r+0x468>
 8009b34:	9b00      	ldr	r3, [sp, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	dd32      	ble.n	8009ba0 <_dtoa_r+0x3a0>
 8009b3a:	4ab7      	ldr	r2, [pc, #732]	; (8009e18 <_dtoa_r+0x618>)
 8009b3c:	f003 030f 	and.w	r3, r3, #15
 8009b40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b48:	9b00      	ldr	r3, [sp, #0]
 8009b4a:	05d8      	lsls	r0, r3, #23
 8009b4c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009b50:	d516      	bpl.n	8009b80 <_dtoa_r+0x380>
 8009b52:	4bb2      	ldr	r3, [pc, #712]	; (8009e1c <_dtoa_r+0x61c>)
 8009b54:	ec51 0b19 	vmov	r0, r1, d9
 8009b58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b5c:	f7f6 fe76 	bl	800084c <__aeabi_ddiv>
 8009b60:	f007 070f 	and.w	r7, r7, #15
 8009b64:	4682      	mov	sl, r0
 8009b66:	468b      	mov	fp, r1
 8009b68:	2503      	movs	r5, #3
 8009b6a:	4eac      	ldr	r6, [pc, #688]	; (8009e1c <_dtoa_r+0x61c>)
 8009b6c:	b957      	cbnz	r7, 8009b84 <_dtoa_r+0x384>
 8009b6e:	4642      	mov	r2, r8
 8009b70:	464b      	mov	r3, r9
 8009b72:	4650      	mov	r0, sl
 8009b74:	4659      	mov	r1, fp
 8009b76:	f7f6 fe69 	bl	800084c <__aeabi_ddiv>
 8009b7a:	4682      	mov	sl, r0
 8009b7c:	468b      	mov	fp, r1
 8009b7e:	e028      	b.n	8009bd2 <_dtoa_r+0x3d2>
 8009b80:	2502      	movs	r5, #2
 8009b82:	e7f2      	b.n	8009b6a <_dtoa_r+0x36a>
 8009b84:	07f9      	lsls	r1, r7, #31
 8009b86:	d508      	bpl.n	8009b9a <_dtoa_r+0x39a>
 8009b88:	4640      	mov	r0, r8
 8009b8a:	4649      	mov	r1, r9
 8009b8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b90:	f7f6 fd32 	bl	80005f8 <__aeabi_dmul>
 8009b94:	3501      	adds	r5, #1
 8009b96:	4680      	mov	r8, r0
 8009b98:	4689      	mov	r9, r1
 8009b9a:	107f      	asrs	r7, r7, #1
 8009b9c:	3608      	adds	r6, #8
 8009b9e:	e7e5      	b.n	8009b6c <_dtoa_r+0x36c>
 8009ba0:	f000 809b 	beq.w	8009cda <_dtoa_r+0x4da>
 8009ba4:	9b00      	ldr	r3, [sp, #0]
 8009ba6:	4f9d      	ldr	r7, [pc, #628]	; (8009e1c <_dtoa_r+0x61c>)
 8009ba8:	425e      	negs	r6, r3
 8009baa:	4b9b      	ldr	r3, [pc, #620]	; (8009e18 <_dtoa_r+0x618>)
 8009bac:	f006 020f 	and.w	r2, r6, #15
 8009bb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb8:	ec51 0b19 	vmov	r0, r1, d9
 8009bbc:	f7f6 fd1c 	bl	80005f8 <__aeabi_dmul>
 8009bc0:	1136      	asrs	r6, r6, #4
 8009bc2:	4682      	mov	sl, r0
 8009bc4:	468b      	mov	fp, r1
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	2502      	movs	r5, #2
 8009bca:	2e00      	cmp	r6, #0
 8009bcc:	d17a      	bne.n	8009cc4 <_dtoa_r+0x4c4>
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1d3      	bne.n	8009b7a <_dtoa_r+0x37a>
 8009bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	f000 8082 	beq.w	8009cde <_dtoa_r+0x4de>
 8009bda:	4b91      	ldr	r3, [pc, #580]	; (8009e20 <_dtoa_r+0x620>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	4650      	mov	r0, sl
 8009be0:	4659      	mov	r1, fp
 8009be2:	f7f6 ff7b 	bl	8000adc <__aeabi_dcmplt>
 8009be6:	2800      	cmp	r0, #0
 8009be8:	d079      	beq.n	8009cde <_dtoa_r+0x4de>
 8009bea:	9b03      	ldr	r3, [sp, #12]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d076      	beq.n	8009cde <_dtoa_r+0x4de>
 8009bf0:	9b02      	ldr	r3, [sp, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	dd36      	ble.n	8009c64 <_dtoa_r+0x464>
 8009bf6:	9b00      	ldr	r3, [sp, #0]
 8009bf8:	4650      	mov	r0, sl
 8009bfa:	4659      	mov	r1, fp
 8009bfc:	1e5f      	subs	r7, r3, #1
 8009bfe:	2200      	movs	r2, #0
 8009c00:	4b88      	ldr	r3, [pc, #544]	; (8009e24 <_dtoa_r+0x624>)
 8009c02:	f7f6 fcf9 	bl	80005f8 <__aeabi_dmul>
 8009c06:	9e02      	ldr	r6, [sp, #8]
 8009c08:	4682      	mov	sl, r0
 8009c0a:	468b      	mov	fp, r1
 8009c0c:	3501      	adds	r5, #1
 8009c0e:	4628      	mov	r0, r5
 8009c10:	f7f6 fc88 	bl	8000524 <__aeabi_i2d>
 8009c14:	4652      	mov	r2, sl
 8009c16:	465b      	mov	r3, fp
 8009c18:	f7f6 fcee 	bl	80005f8 <__aeabi_dmul>
 8009c1c:	4b82      	ldr	r3, [pc, #520]	; (8009e28 <_dtoa_r+0x628>)
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f7f6 fb34 	bl	800028c <__adddf3>
 8009c24:	46d0      	mov	r8, sl
 8009c26:	46d9      	mov	r9, fp
 8009c28:	4682      	mov	sl, r0
 8009c2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009c2e:	2e00      	cmp	r6, #0
 8009c30:	d158      	bne.n	8009ce4 <_dtoa_r+0x4e4>
 8009c32:	4b7e      	ldr	r3, [pc, #504]	; (8009e2c <_dtoa_r+0x62c>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	4640      	mov	r0, r8
 8009c38:	4649      	mov	r1, r9
 8009c3a:	f7f6 fb25 	bl	8000288 <__aeabi_dsub>
 8009c3e:	4652      	mov	r2, sl
 8009c40:	465b      	mov	r3, fp
 8009c42:	4680      	mov	r8, r0
 8009c44:	4689      	mov	r9, r1
 8009c46:	f7f6 ff67 	bl	8000b18 <__aeabi_dcmpgt>
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	f040 8295 	bne.w	800a17a <_dtoa_r+0x97a>
 8009c50:	4652      	mov	r2, sl
 8009c52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009c56:	4640      	mov	r0, r8
 8009c58:	4649      	mov	r1, r9
 8009c5a:	f7f6 ff3f 	bl	8000adc <__aeabi_dcmplt>
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	f040 8289 	bne.w	800a176 <_dtoa_r+0x976>
 8009c64:	ec5b ab19 	vmov	sl, fp, d9
 8009c68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f2c0 8148 	blt.w	8009f00 <_dtoa_r+0x700>
 8009c70:	9a00      	ldr	r2, [sp, #0]
 8009c72:	2a0e      	cmp	r2, #14
 8009c74:	f300 8144 	bgt.w	8009f00 <_dtoa_r+0x700>
 8009c78:	4b67      	ldr	r3, [pc, #412]	; (8009e18 <_dtoa_r+0x618>)
 8009c7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f280 80d5 	bge.w	8009e34 <_dtoa_r+0x634>
 8009c8a:	9b03      	ldr	r3, [sp, #12]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f300 80d1 	bgt.w	8009e34 <_dtoa_r+0x634>
 8009c92:	f040 826f 	bne.w	800a174 <_dtoa_r+0x974>
 8009c96:	4b65      	ldr	r3, [pc, #404]	; (8009e2c <_dtoa_r+0x62c>)
 8009c98:	2200      	movs	r2, #0
 8009c9a:	4640      	mov	r0, r8
 8009c9c:	4649      	mov	r1, r9
 8009c9e:	f7f6 fcab 	bl	80005f8 <__aeabi_dmul>
 8009ca2:	4652      	mov	r2, sl
 8009ca4:	465b      	mov	r3, fp
 8009ca6:	f7f6 ff2d 	bl	8000b04 <__aeabi_dcmpge>
 8009caa:	9e03      	ldr	r6, [sp, #12]
 8009cac:	4637      	mov	r7, r6
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	f040 8245 	bne.w	800a13e <_dtoa_r+0x93e>
 8009cb4:	9d01      	ldr	r5, [sp, #4]
 8009cb6:	2331      	movs	r3, #49	; 0x31
 8009cb8:	f805 3b01 	strb.w	r3, [r5], #1
 8009cbc:	9b00      	ldr	r3, [sp, #0]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	9300      	str	r3, [sp, #0]
 8009cc2:	e240      	b.n	800a146 <_dtoa_r+0x946>
 8009cc4:	07f2      	lsls	r2, r6, #31
 8009cc6:	d505      	bpl.n	8009cd4 <_dtoa_r+0x4d4>
 8009cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ccc:	f7f6 fc94 	bl	80005f8 <__aeabi_dmul>
 8009cd0:	3501      	adds	r5, #1
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	1076      	asrs	r6, r6, #1
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	e777      	b.n	8009bca <_dtoa_r+0x3ca>
 8009cda:	2502      	movs	r5, #2
 8009cdc:	e779      	b.n	8009bd2 <_dtoa_r+0x3d2>
 8009cde:	9f00      	ldr	r7, [sp, #0]
 8009ce0:	9e03      	ldr	r6, [sp, #12]
 8009ce2:	e794      	b.n	8009c0e <_dtoa_r+0x40e>
 8009ce4:	9901      	ldr	r1, [sp, #4]
 8009ce6:	4b4c      	ldr	r3, [pc, #304]	; (8009e18 <_dtoa_r+0x618>)
 8009ce8:	4431      	add	r1, r6
 8009cea:	910d      	str	r1, [sp, #52]	; 0x34
 8009cec:	9908      	ldr	r1, [sp, #32]
 8009cee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009cf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009cf6:	2900      	cmp	r1, #0
 8009cf8:	d043      	beq.n	8009d82 <_dtoa_r+0x582>
 8009cfa:	494d      	ldr	r1, [pc, #308]	; (8009e30 <_dtoa_r+0x630>)
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	f7f6 fda5 	bl	800084c <__aeabi_ddiv>
 8009d02:	4652      	mov	r2, sl
 8009d04:	465b      	mov	r3, fp
 8009d06:	f7f6 fabf 	bl	8000288 <__aeabi_dsub>
 8009d0a:	9d01      	ldr	r5, [sp, #4]
 8009d0c:	4682      	mov	sl, r0
 8009d0e:	468b      	mov	fp, r1
 8009d10:	4649      	mov	r1, r9
 8009d12:	4640      	mov	r0, r8
 8009d14:	f7f6 ff20 	bl	8000b58 <__aeabi_d2iz>
 8009d18:	4606      	mov	r6, r0
 8009d1a:	f7f6 fc03 	bl	8000524 <__aeabi_i2d>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	460b      	mov	r3, r1
 8009d22:	4640      	mov	r0, r8
 8009d24:	4649      	mov	r1, r9
 8009d26:	f7f6 faaf 	bl	8000288 <__aeabi_dsub>
 8009d2a:	3630      	adds	r6, #48	; 0x30
 8009d2c:	f805 6b01 	strb.w	r6, [r5], #1
 8009d30:	4652      	mov	r2, sl
 8009d32:	465b      	mov	r3, fp
 8009d34:	4680      	mov	r8, r0
 8009d36:	4689      	mov	r9, r1
 8009d38:	f7f6 fed0 	bl	8000adc <__aeabi_dcmplt>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	d163      	bne.n	8009e08 <_dtoa_r+0x608>
 8009d40:	4642      	mov	r2, r8
 8009d42:	464b      	mov	r3, r9
 8009d44:	4936      	ldr	r1, [pc, #216]	; (8009e20 <_dtoa_r+0x620>)
 8009d46:	2000      	movs	r0, #0
 8009d48:	f7f6 fa9e 	bl	8000288 <__aeabi_dsub>
 8009d4c:	4652      	mov	r2, sl
 8009d4e:	465b      	mov	r3, fp
 8009d50:	f7f6 fec4 	bl	8000adc <__aeabi_dcmplt>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	f040 80b5 	bne.w	8009ec4 <_dtoa_r+0x6c4>
 8009d5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d5c:	429d      	cmp	r5, r3
 8009d5e:	d081      	beq.n	8009c64 <_dtoa_r+0x464>
 8009d60:	4b30      	ldr	r3, [pc, #192]	; (8009e24 <_dtoa_r+0x624>)
 8009d62:	2200      	movs	r2, #0
 8009d64:	4650      	mov	r0, sl
 8009d66:	4659      	mov	r1, fp
 8009d68:	f7f6 fc46 	bl	80005f8 <__aeabi_dmul>
 8009d6c:	4b2d      	ldr	r3, [pc, #180]	; (8009e24 <_dtoa_r+0x624>)
 8009d6e:	4682      	mov	sl, r0
 8009d70:	468b      	mov	fp, r1
 8009d72:	4640      	mov	r0, r8
 8009d74:	4649      	mov	r1, r9
 8009d76:	2200      	movs	r2, #0
 8009d78:	f7f6 fc3e 	bl	80005f8 <__aeabi_dmul>
 8009d7c:	4680      	mov	r8, r0
 8009d7e:	4689      	mov	r9, r1
 8009d80:	e7c6      	b.n	8009d10 <_dtoa_r+0x510>
 8009d82:	4650      	mov	r0, sl
 8009d84:	4659      	mov	r1, fp
 8009d86:	f7f6 fc37 	bl	80005f8 <__aeabi_dmul>
 8009d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d8c:	9d01      	ldr	r5, [sp, #4]
 8009d8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d90:	4682      	mov	sl, r0
 8009d92:	468b      	mov	fp, r1
 8009d94:	4649      	mov	r1, r9
 8009d96:	4640      	mov	r0, r8
 8009d98:	f7f6 fede 	bl	8000b58 <__aeabi_d2iz>
 8009d9c:	4606      	mov	r6, r0
 8009d9e:	f7f6 fbc1 	bl	8000524 <__aeabi_i2d>
 8009da2:	3630      	adds	r6, #48	; 0x30
 8009da4:	4602      	mov	r2, r0
 8009da6:	460b      	mov	r3, r1
 8009da8:	4640      	mov	r0, r8
 8009daa:	4649      	mov	r1, r9
 8009dac:	f7f6 fa6c 	bl	8000288 <__aeabi_dsub>
 8009db0:	f805 6b01 	strb.w	r6, [r5], #1
 8009db4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009db6:	429d      	cmp	r5, r3
 8009db8:	4680      	mov	r8, r0
 8009dba:	4689      	mov	r9, r1
 8009dbc:	f04f 0200 	mov.w	r2, #0
 8009dc0:	d124      	bne.n	8009e0c <_dtoa_r+0x60c>
 8009dc2:	4b1b      	ldr	r3, [pc, #108]	; (8009e30 <_dtoa_r+0x630>)
 8009dc4:	4650      	mov	r0, sl
 8009dc6:	4659      	mov	r1, fp
 8009dc8:	f7f6 fa60 	bl	800028c <__adddf3>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4640      	mov	r0, r8
 8009dd2:	4649      	mov	r1, r9
 8009dd4:	f7f6 fea0 	bl	8000b18 <__aeabi_dcmpgt>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d173      	bne.n	8009ec4 <_dtoa_r+0x6c4>
 8009ddc:	4652      	mov	r2, sl
 8009dde:	465b      	mov	r3, fp
 8009de0:	4913      	ldr	r1, [pc, #76]	; (8009e30 <_dtoa_r+0x630>)
 8009de2:	2000      	movs	r0, #0
 8009de4:	f7f6 fa50 	bl	8000288 <__aeabi_dsub>
 8009de8:	4602      	mov	r2, r0
 8009dea:	460b      	mov	r3, r1
 8009dec:	4640      	mov	r0, r8
 8009dee:	4649      	mov	r1, r9
 8009df0:	f7f6 fe74 	bl	8000adc <__aeabi_dcmplt>
 8009df4:	2800      	cmp	r0, #0
 8009df6:	f43f af35 	beq.w	8009c64 <_dtoa_r+0x464>
 8009dfa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009dfc:	1e6b      	subs	r3, r5, #1
 8009dfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e04:	2b30      	cmp	r3, #48	; 0x30
 8009e06:	d0f8      	beq.n	8009dfa <_dtoa_r+0x5fa>
 8009e08:	9700      	str	r7, [sp, #0]
 8009e0a:	e049      	b.n	8009ea0 <_dtoa_r+0x6a0>
 8009e0c:	4b05      	ldr	r3, [pc, #20]	; (8009e24 <_dtoa_r+0x624>)
 8009e0e:	f7f6 fbf3 	bl	80005f8 <__aeabi_dmul>
 8009e12:	4680      	mov	r8, r0
 8009e14:	4689      	mov	r9, r1
 8009e16:	e7bd      	b.n	8009d94 <_dtoa_r+0x594>
 8009e18:	080393d8 	.word	0x080393d8
 8009e1c:	080393b0 	.word	0x080393b0
 8009e20:	3ff00000 	.word	0x3ff00000
 8009e24:	40240000 	.word	0x40240000
 8009e28:	401c0000 	.word	0x401c0000
 8009e2c:	40140000 	.word	0x40140000
 8009e30:	3fe00000 	.word	0x3fe00000
 8009e34:	9d01      	ldr	r5, [sp, #4]
 8009e36:	4656      	mov	r6, sl
 8009e38:	465f      	mov	r7, fp
 8009e3a:	4642      	mov	r2, r8
 8009e3c:	464b      	mov	r3, r9
 8009e3e:	4630      	mov	r0, r6
 8009e40:	4639      	mov	r1, r7
 8009e42:	f7f6 fd03 	bl	800084c <__aeabi_ddiv>
 8009e46:	f7f6 fe87 	bl	8000b58 <__aeabi_d2iz>
 8009e4a:	4682      	mov	sl, r0
 8009e4c:	f7f6 fb6a 	bl	8000524 <__aeabi_i2d>
 8009e50:	4642      	mov	r2, r8
 8009e52:	464b      	mov	r3, r9
 8009e54:	f7f6 fbd0 	bl	80005f8 <__aeabi_dmul>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	4639      	mov	r1, r7
 8009e60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009e64:	f7f6 fa10 	bl	8000288 <__aeabi_dsub>
 8009e68:	f805 6b01 	strb.w	r6, [r5], #1
 8009e6c:	9e01      	ldr	r6, [sp, #4]
 8009e6e:	9f03      	ldr	r7, [sp, #12]
 8009e70:	1bae      	subs	r6, r5, r6
 8009e72:	42b7      	cmp	r7, r6
 8009e74:	4602      	mov	r2, r0
 8009e76:	460b      	mov	r3, r1
 8009e78:	d135      	bne.n	8009ee6 <_dtoa_r+0x6e6>
 8009e7a:	f7f6 fa07 	bl	800028c <__adddf3>
 8009e7e:	4642      	mov	r2, r8
 8009e80:	464b      	mov	r3, r9
 8009e82:	4606      	mov	r6, r0
 8009e84:	460f      	mov	r7, r1
 8009e86:	f7f6 fe47 	bl	8000b18 <__aeabi_dcmpgt>
 8009e8a:	b9d0      	cbnz	r0, 8009ec2 <_dtoa_r+0x6c2>
 8009e8c:	4642      	mov	r2, r8
 8009e8e:	464b      	mov	r3, r9
 8009e90:	4630      	mov	r0, r6
 8009e92:	4639      	mov	r1, r7
 8009e94:	f7f6 fe18 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e98:	b110      	cbz	r0, 8009ea0 <_dtoa_r+0x6a0>
 8009e9a:	f01a 0f01 	tst.w	sl, #1
 8009e9e:	d110      	bne.n	8009ec2 <_dtoa_r+0x6c2>
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	ee18 1a10 	vmov	r1, s16
 8009ea6:	f000 fb25 	bl	800a4f4 <_Bfree>
 8009eaa:	2300      	movs	r3, #0
 8009eac:	9800      	ldr	r0, [sp, #0]
 8009eae:	702b      	strb	r3, [r5, #0]
 8009eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009eb2:	3001      	adds	r0, #1
 8009eb4:	6018      	str	r0, [r3, #0]
 8009eb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f43f acf1 	beq.w	80098a0 <_dtoa_r+0xa0>
 8009ebe:	601d      	str	r5, [r3, #0]
 8009ec0:	e4ee      	b.n	80098a0 <_dtoa_r+0xa0>
 8009ec2:	9f00      	ldr	r7, [sp, #0]
 8009ec4:	462b      	mov	r3, r5
 8009ec6:	461d      	mov	r5, r3
 8009ec8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ecc:	2a39      	cmp	r2, #57	; 0x39
 8009ece:	d106      	bne.n	8009ede <_dtoa_r+0x6de>
 8009ed0:	9a01      	ldr	r2, [sp, #4]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d1f7      	bne.n	8009ec6 <_dtoa_r+0x6c6>
 8009ed6:	9901      	ldr	r1, [sp, #4]
 8009ed8:	2230      	movs	r2, #48	; 0x30
 8009eda:	3701      	adds	r7, #1
 8009edc:	700a      	strb	r2, [r1, #0]
 8009ede:	781a      	ldrb	r2, [r3, #0]
 8009ee0:	3201      	adds	r2, #1
 8009ee2:	701a      	strb	r2, [r3, #0]
 8009ee4:	e790      	b.n	8009e08 <_dtoa_r+0x608>
 8009ee6:	4ba6      	ldr	r3, [pc, #664]	; (800a180 <_dtoa_r+0x980>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f7f6 fb85 	bl	80005f8 <__aeabi_dmul>
 8009eee:	2200      	movs	r2, #0
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	460f      	mov	r7, r1
 8009ef6:	f7f6 fde7 	bl	8000ac8 <__aeabi_dcmpeq>
 8009efa:	2800      	cmp	r0, #0
 8009efc:	d09d      	beq.n	8009e3a <_dtoa_r+0x63a>
 8009efe:	e7cf      	b.n	8009ea0 <_dtoa_r+0x6a0>
 8009f00:	9a08      	ldr	r2, [sp, #32]
 8009f02:	2a00      	cmp	r2, #0
 8009f04:	f000 80d7 	beq.w	800a0b6 <_dtoa_r+0x8b6>
 8009f08:	9a06      	ldr	r2, [sp, #24]
 8009f0a:	2a01      	cmp	r2, #1
 8009f0c:	f300 80ba 	bgt.w	800a084 <_dtoa_r+0x884>
 8009f10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f12:	2a00      	cmp	r2, #0
 8009f14:	f000 80b2 	beq.w	800a07c <_dtoa_r+0x87c>
 8009f18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f1c:	9e07      	ldr	r6, [sp, #28]
 8009f1e:	9d04      	ldr	r5, [sp, #16]
 8009f20:	9a04      	ldr	r2, [sp, #16]
 8009f22:	441a      	add	r2, r3
 8009f24:	9204      	str	r2, [sp, #16]
 8009f26:	9a05      	ldr	r2, [sp, #20]
 8009f28:	2101      	movs	r1, #1
 8009f2a:	441a      	add	r2, r3
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	9205      	str	r2, [sp, #20]
 8009f30:	f000 fb98 	bl	800a664 <__i2b>
 8009f34:	4607      	mov	r7, r0
 8009f36:	2d00      	cmp	r5, #0
 8009f38:	dd0c      	ble.n	8009f54 <_dtoa_r+0x754>
 8009f3a:	9b05      	ldr	r3, [sp, #20]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	dd09      	ble.n	8009f54 <_dtoa_r+0x754>
 8009f40:	42ab      	cmp	r3, r5
 8009f42:	9a04      	ldr	r2, [sp, #16]
 8009f44:	bfa8      	it	ge
 8009f46:	462b      	movge	r3, r5
 8009f48:	1ad2      	subs	r2, r2, r3
 8009f4a:	9204      	str	r2, [sp, #16]
 8009f4c:	9a05      	ldr	r2, [sp, #20]
 8009f4e:	1aed      	subs	r5, r5, r3
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	9305      	str	r3, [sp, #20]
 8009f54:	9b07      	ldr	r3, [sp, #28]
 8009f56:	b31b      	cbz	r3, 8009fa0 <_dtoa_r+0x7a0>
 8009f58:	9b08      	ldr	r3, [sp, #32]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f000 80af 	beq.w	800a0be <_dtoa_r+0x8be>
 8009f60:	2e00      	cmp	r6, #0
 8009f62:	dd13      	ble.n	8009f8c <_dtoa_r+0x78c>
 8009f64:	4639      	mov	r1, r7
 8009f66:	4632      	mov	r2, r6
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f000 fc3b 	bl	800a7e4 <__pow5mult>
 8009f6e:	ee18 2a10 	vmov	r2, s16
 8009f72:	4601      	mov	r1, r0
 8009f74:	4607      	mov	r7, r0
 8009f76:	4620      	mov	r0, r4
 8009f78:	f000 fb8a 	bl	800a690 <__multiply>
 8009f7c:	ee18 1a10 	vmov	r1, s16
 8009f80:	4680      	mov	r8, r0
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 fab6 	bl	800a4f4 <_Bfree>
 8009f88:	ee08 8a10 	vmov	s16, r8
 8009f8c:	9b07      	ldr	r3, [sp, #28]
 8009f8e:	1b9a      	subs	r2, r3, r6
 8009f90:	d006      	beq.n	8009fa0 <_dtoa_r+0x7a0>
 8009f92:	ee18 1a10 	vmov	r1, s16
 8009f96:	4620      	mov	r0, r4
 8009f98:	f000 fc24 	bl	800a7e4 <__pow5mult>
 8009f9c:	ee08 0a10 	vmov	s16, r0
 8009fa0:	2101      	movs	r1, #1
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f000 fb5e 	bl	800a664 <__i2b>
 8009fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	4606      	mov	r6, r0
 8009fae:	f340 8088 	ble.w	800a0c2 <_dtoa_r+0x8c2>
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	4601      	mov	r1, r0
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	f000 fc14 	bl	800a7e4 <__pow5mult>
 8009fbc:	9b06      	ldr	r3, [sp, #24]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	4606      	mov	r6, r0
 8009fc2:	f340 8081 	ble.w	800a0c8 <_dtoa_r+0x8c8>
 8009fc6:	f04f 0800 	mov.w	r8, #0
 8009fca:	6933      	ldr	r3, [r6, #16]
 8009fcc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009fd0:	6918      	ldr	r0, [r3, #16]
 8009fd2:	f000 faf7 	bl	800a5c4 <__hi0bits>
 8009fd6:	f1c0 0020 	rsb	r0, r0, #32
 8009fda:	9b05      	ldr	r3, [sp, #20]
 8009fdc:	4418      	add	r0, r3
 8009fde:	f010 001f 	ands.w	r0, r0, #31
 8009fe2:	f000 8092 	beq.w	800a10a <_dtoa_r+0x90a>
 8009fe6:	f1c0 0320 	rsb	r3, r0, #32
 8009fea:	2b04      	cmp	r3, #4
 8009fec:	f340 808a 	ble.w	800a104 <_dtoa_r+0x904>
 8009ff0:	f1c0 001c 	rsb	r0, r0, #28
 8009ff4:	9b04      	ldr	r3, [sp, #16]
 8009ff6:	4403      	add	r3, r0
 8009ff8:	9304      	str	r3, [sp, #16]
 8009ffa:	9b05      	ldr	r3, [sp, #20]
 8009ffc:	4403      	add	r3, r0
 8009ffe:	4405      	add	r5, r0
 800a000:	9305      	str	r3, [sp, #20]
 800a002:	9b04      	ldr	r3, [sp, #16]
 800a004:	2b00      	cmp	r3, #0
 800a006:	dd07      	ble.n	800a018 <_dtoa_r+0x818>
 800a008:	ee18 1a10 	vmov	r1, s16
 800a00c:	461a      	mov	r2, r3
 800a00e:	4620      	mov	r0, r4
 800a010:	f000 fc42 	bl	800a898 <__lshift>
 800a014:	ee08 0a10 	vmov	s16, r0
 800a018:	9b05      	ldr	r3, [sp, #20]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	dd05      	ble.n	800a02a <_dtoa_r+0x82a>
 800a01e:	4631      	mov	r1, r6
 800a020:	461a      	mov	r2, r3
 800a022:	4620      	mov	r0, r4
 800a024:	f000 fc38 	bl	800a898 <__lshift>
 800a028:	4606      	mov	r6, r0
 800a02a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d06e      	beq.n	800a10e <_dtoa_r+0x90e>
 800a030:	ee18 0a10 	vmov	r0, s16
 800a034:	4631      	mov	r1, r6
 800a036:	f000 fc9f 	bl	800a978 <__mcmp>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	da67      	bge.n	800a10e <_dtoa_r+0x90e>
 800a03e:	9b00      	ldr	r3, [sp, #0]
 800a040:	3b01      	subs	r3, #1
 800a042:	ee18 1a10 	vmov	r1, s16
 800a046:	9300      	str	r3, [sp, #0]
 800a048:	220a      	movs	r2, #10
 800a04a:	2300      	movs	r3, #0
 800a04c:	4620      	mov	r0, r4
 800a04e:	f000 fa73 	bl	800a538 <__multadd>
 800a052:	9b08      	ldr	r3, [sp, #32]
 800a054:	ee08 0a10 	vmov	s16, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	f000 81b1 	beq.w	800a3c0 <_dtoa_r+0xbc0>
 800a05e:	2300      	movs	r3, #0
 800a060:	4639      	mov	r1, r7
 800a062:	220a      	movs	r2, #10
 800a064:	4620      	mov	r0, r4
 800a066:	f000 fa67 	bl	800a538 <__multadd>
 800a06a:	9b02      	ldr	r3, [sp, #8]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	4607      	mov	r7, r0
 800a070:	f300 808e 	bgt.w	800a190 <_dtoa_r+0x990>
 800a074:	9b06      	ldr	r3, [sp, #24]
 800a076:	2b02      	cmp	r3, #2
 800a078:	dc51      	bgt.n	800a11e <_dtoa_r+0x91e>
 800a07a:	e089      	b.n	800a190 <_dtoa_r+0x990>
 800a07c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a07e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a082:	e74b      	b.n	8009f1c <_dtoa_r+0x71c>
 800a084:	9b03      	ldr	r3, [sp, #12]
 800a086:	1e5e      	subs	r6, r3, #1
 800a088:	9b07      	ldr	r3, [sp, #28]
 800a08a:	42b3      	cmp	r3, r6
 800a08c:	bfbf      	itttt	lt
 800a08e:	9b07      	ldrlt	r3, [sp, #28]
 800a090:	9607      	strlt	r6, [sp, #28]
 800a092:	1af2      	sublt	r2, r6, r3
 800a094:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a096:	bfb6      	itet	lt
 800a098:	189b      	addlt	r3, r3, r2
 800a09a:	1b9e      	subge	r6, r3, r6
 800a09c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a09e:	9b03      	ldr	r3, [sp, #12]
 800a0a0:	bfb8      	it	lt
 800a0a2:	2600      	movlt	r6, #0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	bfb7      	itett	lt
 800a0a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a0ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a0b0:	1a9d      	sublt	r5, r3, r2
 800a0b2:	2300      	movlt	r3, #0
 800a0b4:	e734      	b.n	8009f20 <_dtoa_r+0x720>
 800a0b6:	9e07      	ldr	r6, [sp, #28]
 800a0b8:	9d04      	ldr	r5, [sp, #16]
 800a0ba:	9f08      	ldr	r7, [sp, #32]
 800a0bc:	e73b      	b.n	8009f36 <_dtoa_r+0x736>
 800a0be:	9a07      	ldr	r2, [sp, #28]
 800a0c0:	e767      	b.n	8009f92 <_dtoa_r+0x792>
 800a0c2:	9b06      	ldr	r3, [sp, #24]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	dc18      	bgt.n	800a0fa <_dtoa_r+0x8fa>
 800a0c8:	f1ba 0f00 	cmp.w	sl, #0
 800a0cc:	d115      	bne.n	800a0fa <_dtoa_r+0x8fa>
 800a0ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0d2:	b993      	cbnz	r3, 800a0fa <_dtoa_r+0x8fa>
 800a0d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a0d8:	0d1b      	lsrs	r3, r3, #20
 800a0da:	051b      	lsls	r3, r3, #20
 800a0dc:	b183      	cbz	r3, 800a100 <_dtoa_r+0x900>
 800a0de:	9b04      	ldr	r3, [sp, #16]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	9304      	str	r3, [sp, #16]
 800a0e4:	9b05      	ldr	r3, [sp, #20]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	9305      	str	r3, [sp, #20]
 800a0ea:	f04f 0801 	mov.w	r8, #1
 800a0ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f47f af6a 	bne.w	8009fca <_dtoa_r+0x7ca>
 800a0f6:	2001      	movs	r0, #1
 800a0f8:	e76f      	b.n	8009fda <_dtoa_r+0x7da>
 800a0fa:	f04f 0800 	mov.w	r8, #0
 800a0fe:	e7f6      	b.n	800a0ee <_dtoa_r+0x8ee>
 800a100:	4698      	mov	r8, r3
 800a102:	e7f4      	b.n	800a0ee <_dtoa_r+0x8ee>
 800a104:	f43f af7d 	beq.w	800a002 <_dtoa_r+0x802>
 800a108:	4618      	mov	r0, r3
 800a10a:	301c      	adds	r0, #28
 800a10c:	e772      	b.n	8009ff4 <_dtoa_r+0x7f4>
 800a10e:	9b03      	ldr	r3, [sp, #12]
 800a110:	2b00      	cmp	r3, #0
 800a112:	dc37      	bgt.n	800a184 <_dtoa_r+0x984>
 800a114:	9b06      	ldr	r3, [sp, #24]
 800a116:	2b02      	cmp	r3, #2
 800a118:	dd34      	ble.n	800a184 <_dtoa_r+0x984>
 800a11a:	9b03      	ldr	r3, [sp, #12]
 800a11c:	9302      	str	r3, [sp, #8]
 800a11e:	9b02      	ldr	r3, [sp, #8]
 800a120:	b96b      	cbnz	r3, 800a13e <_dtoa_r+0x93e>
 800a122:	4631      	mov	r1, r6
 800a124:	2205      	movs	r2, #5
 800a126:	4620      	mov	r0, r4
 800a128:	f000 fa06 	bl	800a538 <__multadd>
 800a12c:	4601      	mov	r1, r0
 800a12e:	4606      	mov	r6, r0
 800a130:	ee18 0a10 	vmov	r0, s16
 800a134:	f000 fc20 	bl	800a978 <__mcmp>
 800a138:	2800      	cmp	r0, #0
 800a13a:	f73f adbb 	bgt.w	8009cb4 <_dtoa_r+0x4b4>
 800a13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a140:	9d01      	ldr	r5, [sp, #4]
 800a142:	43db      	mvns	r3, r3
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	f04f 0800 	mov.w	r8, #0
 800a14a:	4631      	mov	r1, r6
 800a14c:	4620      	mov	r0, r4
 800a14e:	f000 f9d1 	bl	800a4f4 <_Bfree>
 800a152:	2f00      	cmp	r7, #0
 800a154:	f43f aea4 	beq.w	8009ea0 <_dtoa_r+0x6a0>
 800a158:	f1b8 0f00 	cmp.w	r8, #0
 800a15c:	d005      	beq.n	800a16a <_dtoa_r+0x96a>
 800a15e:	45b8      	cmp	r8, r7
 800a160:	d003      	beq.n	800a16a <_dtoa_r+0x96a>
 800a162:	4641      	mov	r1, r8
 800a164:	4620      	mov	r0, r4
 800a166:	f000 f9c5 	bl	800a4f4 <_Bfree>
 800a16a:	4639      	mov	r1, r7
 800a16c:	4620      	mov	r0, r4
 800a16e:	f000 f9c1 	bl	800a4f4 <_Bfree>
 800a172:	e695      	b.n	8009ea0 <_dtoa_r+0x6a0>
 800a174:	2600      	movs	r6, #0
 800a176:	4637      	mov	r7, r6
 800a178:	e7e1      	b.n	800a13e <_dtoa_r+0x93e>
 800a17a:	9700      	str	r7, [sp, #0]
 800a17c:	4637      	mov	r7, r6
 800a17e:	e599      	b.n	8009cb4 <_dtoa_r+0x4b4>
 800a180:	40240000 	.word	0x40240000
 800a184:	9b08      	ldr	r3, [sp, #32]
 800a186:	2b00      	cmp	r3, #0
 800a188:	f000 80ca 	beq.w	800a320 <_dtoa_r+0xb20>
 800a18c:	9b03      	ldr	r3, [sp, #12]
 800a18e:	9302      	str	r3, [sp, #8]
 800a190:	2d00      	cmp	r5, #0
 800a192:	dd05      	ble.n	800a1a0 <_dtoa_r+0x9a0>
 800a194:	4639      	mov	r1, r7
 800a196:	462a      	mov	r2, r5
 800a198:	4620      	mov	r0, r4
 800a19a:	f000 fb7d 	bl	800a898 <__lshift>
 800a19e:	4607      	mov	r7, r0
 800a1a0:	f1b8 0f00 	cmp.w	r8, #0
 800a1a4:	d05b      	beq.n	800a25e <_dtoa_r+0xa5e>
 800a1a6:	6879      	ldr	r1, [r7, #4]
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	f000 f963 	bl	800a474 <_Balloc>
 800a1ae:	4605      	mov	r5, r0
 800a1b0:	b928      	cbnz	r0, 800a1be <_dtoa_r+0x9be>
 800a1b2:	4b87      	ldr	r3, [pc, #540]	; (800a3d0 <_dtoa_r+0xbd0>)
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a1ba:	f7ff bb3b 	b.w	8009834 <_dtoa_r+0x34>
 800a1be:	693a      	ldr	r2, [r7, #16]
 800a1c0:	3202      	adds	r2, #2
 800a1c2:	0092      	lsls	r2, r2, #2
 800a1c4:	f107 010c 	add.w	r1, r7, #12
 800a1c8:	300c      	adds	r0, #12
 800a1ca:	f7fe fb33 	bl	8008834 <memcpy>
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	4629      	mov	r1, r5
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	f000 fb60 	bl	800a898 <__lshift>
 800a1d8:	9b01      	ldr	r3, [sp, #4]
 800a1da:	f103 0901 	add.w	r9, r3, #1
 800a1de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	9305      	str	r3, [sp, #20]
 800a1e6:	f00a 0301 	and.w	r3, sl, #1
 800a1ea:	46b8      	mov	r8, r7
 800a1ec:	9304      	str	r3, [sp, #16]
 800a1ee:	4607      	mov	r7, r0
 800a1f0:	4631      	mov	r1, r6
 800a1f2:	ee18 0a10 	vmov	r0, s16
 800a1f6:	f7ff fa75 	bl	80096e4 <quorem>
 800a1fa:	4641      	mov	r1, r8
 800a1fc:	9002      	str	r0, [sp, #8]
 800a1fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a202:	ee18 0a10 	vmov	r0, s16
 800a206:	f000 fbb7 	bl	800a978 <__mcmp>
 800a20a:	463a      	mov	r2, r7
 800a20c:	9003      	str	r0, [sp, #12]
 800a20e:	4631      	mov	r1, r6
 800a210:	4620      	mov	r0, r4
 800a212:	f000 fbcd 	bl	800a9b0 <__mdiff>
 800a216:	68c2      	ldr	r2, [r0, #12]
 800a218:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800a21c:	4605      	mov	r5, r0
 800a21e:	bb02      	cbnz	r2, 800a262 <_dtoa_r+0xa62>
 800a220:	4601      	mov	r1, r0
 800a222:	ee18 0a10 	vmov	r0, s16
 800a226:	f000 fba7 	bl	800a978 <__mcmp>
 800a22a:	4602      	mov	r2, r0
 800a22c:	4629      	mov	r1, r5
 800a22e:	4620      	mov	r0, r4
 800a230:	9207      	str	r2, [sp, #28]
 800a232:	f000 f95f 	bl	800a4f4 <_Bfree>
 800a236:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a23a:	ea43 0102 	orr.w	r1, r3, r2
 800a23e:	9b04      	ldr	r3, [sp, #16]
 800a240:	430b      	orrs	r3, r1
 800a242:	464d      	mov	r5, r9
 800a244:	d10f      	bne.n	800a266 <_dtoa_r+0xa66>
 800a246:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a24a:	d02a      	beq.n	800a2a2 <_dtoa_r+0xaa2>
 800a24c:	9b03      	ldr	r3, [sp, #12]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	dd02      	ble.n	800a258 <_dtoa_r+0xa58>
 800a252:	9b02      	ldr	r3, [sp, #8]
 800a254:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a258:	f88b a000 	strb.w	sl, [fp]
 800a25c:	e775      	b.n	800a14a <_dtoa_r+0x94a>
 800a25e:	4638      	mov	r0, r7
 800a260:	e7ba      	b.n	800a1d8 <_dtoa_r+0x9d8>
 800a262:	2201      	movs	r2, #1
 800a264:	e7e2      	b.n	800a22c <_dtoa_r+0xa2c>
 800a266:	9b03      	ldr	r3, [sp, #12]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	db04      	blt.n	800a276 <_dtoa_r+0xa76>
 800a26c:	9906      	ldr	r1, [sp, #24]
 800a26e:	430b      	orrs	r3, r1
 800a270:	9904      	ldr	r1, [sp, #16]
 800a272:	430b      	orrs	r3, r1
 800a274:	d122      	bne.n	800a2bc <_dtoa_r+0xabc>
 800a276:	2a00      	cmp	r2, #0
 800a278:	ddee      	ble.n	800a258 <_dtoa_r+0xa58>
 800a27a:	ee18 1a10 	vmov	r1, s16
 800a27e:	2201      	movs	r2, #1
 800a280:	4620      	mov	r0, r4
 800a282:	f000 fb09 	bl	800a898 <__lshift>
 800a286:	4631      	mov	r1, r6
 800a288:	ee08 0a10 	vmov	s16, r0
 800a28c:	f000 fb74 	bl	800a978 <__mcmp>
 800a290:	2800      	cmp	r0, #0
 800a292:	dc03      	bgt.n	800a29c <_dtoa_r+0xa9c>
 800a294:	d1e0      	bne.n	800a258 <_dtoa_r+0xa58>
 800a296:	f01a 0f01 	tst.w	sl, #1
 800a29a:	d0dd      	beq.n	800a258 <_dtoa_r+0xa58>
 800a29c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a2a0:	d1d7      	bne.n	800a252 <_dtoa_r+0xa52>
 800a2a2:	2339      	movs	r3, #57	; 0x39
 800a2a4:	f88b 3000 	strb.w	r3, [fp]
 800a2a8:	462b      	mov	r3, r5
 800a2aa:	461d      	mov	r5, r3
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a2b2:	2a39      	cmp	r2, #57	; 0x39
 800a2b4:	d071      	beq.n	800a39a <_dtoa_r+0xb9a>
 800a2b6:	3201      	adds	r2, #1
 800a2b8:	701a      	strb	r2, [r3, #0]
 800a2ba:	e746      	b.n	800a14a <_dtoa_r+0x94a>
 800a2bc:	2a00      	cmp	r2, #0
 800a2be:	dd07      	ble.n	800a2d0 <_dtoa_r+0xad0>
 800a2c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a2c4:	d0ed      	beq.n	800a2a2 <_dtoa_r+0xaa2>
 800a2c6:	f10a 0301 	add.w	r3, sl, #1
 800a2ca:	f88b 3000 	strb.w	r3, [fp]
 800a2ce:	e73c      	b.n	800a14a <_dtoa_r+0x94a>
 800a2d0:	9b05      	ldr	r3, [sp, #20]
 800a2d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a2d6:	4599      	cmp	r9, r3
 800a2d8:	d047      	beq.n	800a36a <_dtoa_r+0xb6a>
 800a2da:	ee18 1a10 	vmov	r1, s16
 800a2de:	2300      	movs	r3, #0
 800a2e0:	220a      	movs	r2, #10
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	f000 f928 	bl	800a538 <__multadd>
 800a2e8:	45b8      	cmp	r8, r7
 800a2ea:	ee08 0a10 	vmov	s16, r0
 800a2ee:	f04f 0300 	mov.w	r3, #0
 800a2f2:	f04f 020a 	mov.w	r2, #10
 800a2f6:	4641      	mov	r1, r8
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	d106      	bne.n	800a30a <_dtoa_r+0xb0a>
 800a2fc:	f000 f91c 	bl	800a538 <__multadd>
 800a300:	4680      	mov	r8, r0
 800a302:	4607      	mov	r7, r0
 800a304:	f109 0901 	add.w	r9, r9, #1
 800a308:	e772      	b.n	800a1f0 <_dtoa_r+0x9f0>
 800a30a:	f000 f915 	bl	800a538 <__multadd>
 800a30e:	4639      	mov	r1, r7
 800a310:	4680      	mov	r8, r0
 800a312:	2300      	movs	r3, #0
 800a314:	220a      	movs	r2, #10
 800a316:	4620      	mov	r0, r4
 800a318:	f000 f90e 	bl	800a538 <__multadd>
 800a31c:	4607      	mov	r7, r0
 800a31e:	e7f1      	b.n	800a304 <_dtoa_r+0xb04>
 800a320:	9b03      	ldr	r3, [sp, #12]
 800a322:	9302      	str	r3, [sp, #8]
 800a324:	9d01      	ldr	r5, [sp, #4]
 800a326:	ee18 0a10 	vmov	r0, s16
 800a32a:	4631      	mov	r1, r6
 800a32c:	f7ff f9da 	bl	80096e4 <quorem>
 800a330:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a334:	9b01      	ldr	r3, [sp, #4]
 800a336:	f805 ab01 	strb.w	sl, [r5], #1
 800a33a:	1aea      	subs	r2, r5, r3
 800a33c:	9b02      	ldr	r3, [sp, #8]
 800a33e:	4293      	cmp	r3, r2
 800a340:	dd09      	ble.n	800a356 <_dtoa_r+0xb56>
 800a342:	ee18 1a10 	vmov	r1, s16
 800a346:	2300      	movs	r3, #0
 800a348:	220a      	movs	r2, #10
 800a34a:	4620      	mov	r0, r4
 800a34c:	f000 f8f4 	bl	800a538 <__multadd>
 800a350:	ee08 0a10 	vmov	s16, r0
 800a354:	e7e7      	b.n	800a326 <_dtoa_r+0xb26>
 800a356:	9b02      	ldr	r3, [sp, #8]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	bfc8      	it	gt
 800a35c:	461d      	movgt	r5, r3
 800a35e:	9b01      	ldr	r3, [sp, #4]
 800a360:	bfd8      	it	le
 800a362:	2501      	movle	r5, #1
 800a364:	441d      	add	r5, r3
 800a366:	f04f 0800 	mov.w	r8, #0
 800a36a:	ee18 1a10 	vmov	r1, s16
 800a36e:	2201      	movs	r2, #1
 800a370:	4620      	mov	r0, r4
 800a372:	f000 fa91 	bl	800a898 <__lshift>
 800a376:	4631      	mov	r1, r6
 800a378:	ee08 0a10 	vmov	s16, r0
 800a37c:	f000 fafc 	bl	800a978 <__mcmp>
 800a380:	2800      	cmp	r0, #0
 800a382:	dc91      	bgt.n	800a2a8 <_dtoa_r+0xaa8>
 800a384:	d102      	bne.n	800a38c <_dtoa_r+0xb8c>
 800a386:	f01a 0f01 	tst.w	sl, #1
 800a38a:	d18d      	bne.n	800a2a8 <_dtoa_r+0xaa8>
 800a38c:	462b      	mov	r3, r5
 800a38e:	461d      	mov	r5, r3
 800a390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a394:	2a30      	cmp	r2, #48	; 0x30
 800a396:	d0fa      	beq.n	800a38e <_dtoa_r+0xb8e>
 800a398:	e6d7      	b.n	800a14a <_dtoa_r+0x94a>
 800a39a:	9a01      	ldr	r2, [sp, #4]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d184      	bne.n	800a2aa <_dtoa_r+0xaaa>
 800a3a0:	9b00      	ldr	r3, [sp, #0]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	2331      	movs	r3, #49	; 0x31
 800a3a8:	7013      	strb	r3, [r2, #0]
 800a3aa:	e6ce      	b.n	800a14a <_dtoa_r+0x94a>
 800a3ac:	4b09      	ldr	r3, [pc, #36]	; (800a3d4 <_dtoa_r+0xbd4>)
 800a3ae:	f7ff ba95 	b.w	80098dc <_dtoa_r+0xdc>
 800a3b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f47f aa6e 	bne.w	8009896 <_dtoa_r+0x96>
 800a3ba:	4b07      	ldr	r3, [pc, #28]	; (800a3d8 <_dtoa_r+0xbd8>)
 800a3bc:	f7ff ba8e 	b.w	80098dc <_dtoa_r+0xdc>
 800a3c0:	9b02      	ldr	r3, [sp, #8]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	dcae      	bgt.n	800a324 <_dtoa_r+0xb24>
 800a3c6:	9b06      	ldr	r3, [sp, #24]
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	f73f aea8 	bgt.w	800a11e <_dtoa_r+0x91e>
 800a3ce:	e7a9      	b.n	800a324 <_dtoa_r+0xb24>
 800a3d0:	0803933f 	.word	0x0803933f
 800a3d4:	0803929c 	.word	0x0803929c
 800a3d8:	080392c0 	.word	0x080392c0

0800a3dc <_fstat_r>:
 800a3dc:	b538      	push	{r3, r4, r5, lr}
 800a3de:	4d07      	ldr	r5, [pc, #28]	; (800a3fc <_fstat_r+0x20>)
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	4608      	mov	r0, r1
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	602b      	str	r3, [r5, #0]
 800a3ea:	f7f7 fff0 	bl	80023ce <_fstat>
 800a3ee:	1c43      	adds	r3, r0, #1
 800a3f0:	d102      	bne.n	800a3f8 <_fstat_r+0x1c>
 800a3f2:	682b      	ldr	r3, [r5, #0]
 800a3f4:	b103      	cbz	r3, 800a3f8 <_fstat_r+0x1c>
 800a3f6:	6023      	str	r3, [r4, #0]
 800a3f8:	bd38      	pop	{r3, r4, r5, pc}
 800a3fa:	bf00      	nop
 800a3fc:	2000a420 	.word	0x2000a420

0800a400 <_isatty_r>:
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	4d06      	ldr	r5, [pc, #24]	; (800a41c <_isatty_r+0x1c>)
 800a404:	2300      	movs	r3, #0
 800a406:	4604      	mov	r4, r0
 800a408:	4608      	mov	r0, r1
 800a40a:	602b      	str	r3, [r5, #0]
 800a40c:	f7f7 ffef 	bl	80023ee <_isatty>
 800a410:	1c43      	adds	r3, r0, #1
 800a412:	d102      	bne.n	800a41a <_isatty_r+0x1a>
 800a414:	682b      	ldr	r3, [r5, #0]
 800a416:	b103      	cbz	r3, 800a41a <_isatty_r+0x1a>
 800a418:	6023      	str	r3, [r4, #0]
 800a41a:	bd38      	pop	{r3, r4, r5, pc}
 800a41c:	2000a420 	.word	0x2000a420

0800a420 <_localeconv_r>:
 800a420:	4800      	ldr	r0, [pc, #0]	; (800a424 <_localeconv_r+0x4>)
 800a422:	4770      	bx	lr
 800a424:	20000168 	.word	0x20000168

0800a428 <_lseek_r>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	4d07      	ldr	r5, [pc, #28]	; (800a448 <_lseek_r+0x20>)
 800a42c:	4604      	mov	r4, r0
 800a42e:	4608      	mov	r0, r1
 800a430:	4611      	mov	r1, r2
 800a432:	2200      	movs	r2, #0
 800a434:	602a      	str	r2, [r5, #0]
 800a436:	461a      	mov	r2, r3
 800a438:	f7f7 ffe4 	bl	8002404 <_lseek>
 800a43c:	1c43      	adds	r3, r0, #1
 800a43e:	d102      	bne.n	800a446 <_lseek_r+0x1e>
 800a440:	682b      	ldr	r3, [r5, #0]
 800a442:	b103      	cbz	r3, 800a446 <_lseek_r+0x1e>
 800a444:	6023      	str	r3, [r4, #0]
 800a446:	bd38      	pop	{r3, r4, r5, pc}
 800a448:	2000a420 	.word	0x2000a420

0800a44c <malloc>:
 800a44c:	4b02      	ldr	r3, [pc, #8]	; (800a458 <malloc+0xc>)
 800a44e:	4601      	mov	r1, r0
 800a450:	6818      	ldr	r0, [r3, #0]
 800a452:	f7fe ba71 	b.w	8008938 <_malloc_r>
 800a456:	bf00      	nop
 800a458:	20000014 	.word	0x20000014

0800a45c <__malloc_lock>:
 800a45c:	4801      	ldr	r0, [pc, #4]	; (800a464 <__malloc_lock+0x8>)
 800a45e:	f7fe b982 	b.w	8008766 <__retarget_lock_acquire_recursive>
 800a462:	bf00      	nop
 800a464:	2000a414 	.word	0x2000a414

0800a468 <__malloc_unlock>:
 800a468:	4801      	ldr	r0, [pc, #4]	; (800a470 <__malloc_unlock+0x8>)
 800a46a:	f7fe b97d 	b.w	8008768 <__retarget_lock_release_recursive>
 800a46e:	bf00      	nop
 800a470:	2000a414 	.word	0x2000a414

0800a474 <_Balloc>:
 800a474:	b570      	push	{r4, r5, r6, lr}
 800a476:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a478:	4604      	mov	r4, r0
 800a47a:	460d      	mov	r5, r1
 800a47c:	b976      	cbnz	r6, 800a49c <_Balloc+0x28>
 800a47e:	2010      	movs	r0, #16
 800a480:	f7ff ffe4 	bl	800a44c <malloc>
 800a484:	4602      	mov	r2, r0
 800a486:	6260      	str	r0, [r4, #36]	; 0x24
 800a488:	b920      	cbnz	r0, 800a494 <_Balloc+0x20>
 800a48a:	4b18      	ldr	r3, [pc, #96]	; (800a4ec <_Balloc+0x78>)
 800a48c:	4818      	ldr	r0, [pc, #96]	; (800a4f0 <_Balloc+0x7c>)
 800a48e:	2166      	movs	r1, #102	; 0x66
 800a490:	f001 faf8 	bl	800ba84 <__assert_func>
 800a494:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a498:	6006      	str	r6, [r0, #0]
 800a49a:	60c6      	str	r6, [r0, #12]
 800a49c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a49e:	68f3      	ldr	r3, [r6, #12]
 800a4a0:	b183      	cbz	r3, 800a4c4 <_Balloc+0x50>
 800a4a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4aa:	b9b8      	cbnz	r0, 800a4dc <_Balloc+0x68>
 800a4ac:	2101      	movs	r1, #1
 800a4ae:	fa01 f605 	lsl.w	r6, r1, r5
 800a4b2:	1d72      	adds	r2, r6, #5
 800a4b4:	0092      	lsls	r2, r2, #2
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f000 fb60 	bl	800ab7c <_calloc_r>
 800a4bc:	b160      	cbz	r0, 800a4d8 <_Balloc+0x64>
 800a4be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4c2:	e00e      	b.n	800a4e2 <_Balloc+0x6e>
 800a4c4:	2221      	movs	r2, #33	; 0x21
 800a4c6:	2104      	movs	r1, #4
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	f000 fb57 	bl	800ab7c <_calloc_r>
 800a4ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4d0:	60f0      	str	r0, [r6, #12]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d1e4      	bne.n	800a4a2 <_Balloc+0x2e>
 800a4d8:	2000      	movs	r0, #0
 800a4da:	bd70      	pop	{r4, r5, r6, pc}
 800a4dc:	6802      	ldr	r2, [r0, #0]
 800a4de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4e8:	e7f7      	b.n	800a4da <_Balloc+0x66>
 800a4ea:	bf00      	nop
 800a4ec:	080392cd 	.word	0x080392cd
 800a4f0:	08039350 	.word	0x08039350

0800a4f4 <_Bfree>:
 800a4f4:	b570      	push	{r4, r5, r6, lr}
 800a4f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a4f8:	4605      	mov	r5, r0
 800a4fa:	460c      	mov	r4, r1
 800a4fc:	b976      	cbnz	r6, 800a51c <_Bfree+0x28>
 800a4fe:	2010      	movs	r0, #16
 800a500:	f7ff ffa4 	bl	800a44c <malloc>
 800a504:	4602      	mov	r2, r0
 800a506:	6268      	str	r0, [r5, #36]	; 0x24
 800a508:	b920      	cbnz	r0, 800a514 <_Bfree+0x20>
 800a50a:	4b09      	ldr	r3, [pc, #36]	; (800a530 <_Bfree+0x3c>)
 800a50c:	4809      	ldr	r0, [pc, #36]	; (800a534 <_Bfree+0x40>)
 800a50e:	218a      	movs	r1, #138	; 0x8a
 800a510:	f001 fab8 	bl	800ba84 <__assert_func>
 800a514:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a518:	6006      	str	r6, [r0, #0]
 800a51a:	60c6      	str	r6, [r0, #12]
 800a51c:	b13c      	cbz	r4, 800a52e <_Bfree+0x3a>
 800a51e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a520:	6862      	ldr	r2, [r4, #4]
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a528:	6021      	str	r1, [r4, #0]
 800a52a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a52e:	bd70      	pop	{r4, r5, r6, pc}
 800a530:	080392cd 	.word	0x080392cd
 800a534:	08039350 	.word	0x08039350

0800a538 <__multadd>:
 800a538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a53c:	690d      	ldr	r5, [r1, #16]
 800a53e:	4607      	mov	r7, r0
 800a540:	460c      	mov	r4, r1
 800a542:	461e      	mov	r6, r3
 800a544:	f101 0c14 	add.w	ip, r1, #20
 800a548:	2000      	movs	r0, #0
 800a54a:	f8dc 3000 	ldr.w	r3, [ip]
 800a54e:	b299      	uxth	r1, r3
 800a550:	fb02 6101 	mla	r1, r2, r1, r6
 800a554:	0c1e      	lsrs	r6, r3, #16
 800a556:	0c0b      	lsrs	r3, r1, #16
 800a558:	fb02 3306 	mla	r3, r2, r6, r3
 800a55c:	b289      	uxth	r1, r1
 800a55e:	3001      	adds	r0, #1
 800a560:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a564:	4285      	cmp	r5, r0
 800a566:	f84c 1b04 	str.w	r1, [ip], #4
 800a56a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a56e:	dcec      	bgt.n	800a54a <__multadd+0x12>
 800a570:	b30e      	cbz	r6, 800a5b6 <__multadd+0x7e>
 800a572:	68a3      	ldr	r3, [r4, #8]
 800a574:	42ab      	cmp	r3, r5
 800a576:	dc19      	bgt.n	800a5ac <__multadd+0x74>
 800a578:	6861      	ldr	r1, [r4, #4]
 800a57a:	4638      	mov	r0, r7
 800a57c:	3101      	adds	r1, #1
 800a57e:	f7ff ff79 	bl	800a474 <_Balloc>
 800a582:	4680      	mov	r8, r0
 800a584:	b928      	cbnz	r0, 800a592 <__multadd+0x5a>
 800a586:	4602      	mov	r2, r0
 800a588:	4b0c      	ldr	r3, [pc, #48]	; (800a5bc <__multadd+0x84>)
 800a58a:	480d      	ldr	r0, [pc, #52]	; (800a5c0 <__multadd+0x88>)
 800a58c:	21b5      	movs	r1, #181	; 0xb5
 800a58e:	f001 fa79 	bl	800ba84 <__assert_func>
 800a592:	6922      	ldr	r2, [r4, #16]
 800a594:	3202      	adds	r2, #2
 800a596:	f104 010c 	add.w	r1, r4, #12
 800a59a:	0092      	lsls	r2, r2, #2
 800a59c:	300c      	adds	r0, #12
 800a59e:	f7fe f949 	bl	8008834 <memcpy>
 800a5a2:	4621      	mov	r1, r4
 800a5a4:	4638      	mov	r0, r7
 800a5a6:	f7ff ffa5 	bl	800a4f4 <_Bfree>
 800a5aa:	4644      	mov	r4, r8
 800a5ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a5b0:	3501      	adds	r5, #1
 800a5b2:	615e      	str	r6, [r3, #20]
 800a5b4:	6125      	str	r5, [r4, #16]
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5bc:	0803933f 	.word	0x0803933f
 800a5c0:	08039350 	.word	0x08039350

0800a5c4 <__hi0bits>:
 800a5c4:	0c03      	lsrs	r3, r0, #16
 800a5c6:	041b      	lsls	r3, r3, #16
 800a5c8:	b9d3      	cbnz	r3, 800a600 <__hi0bits+0x3c>
 800a5ca:	0400      	lsls	r0, r0, #16
 800a5cc:	2310      	movs	r3, #16
 800a5ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a5d2:	bf04      	itt	eq
 800a5d4:	0200      	lsleq	r0, r0, #8
 800a5d6:	3308      	addeq	r3, #8
 800a5d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a5dc:	bf04      	itt	eq
 800a5de:	0100      	lsleq	r0, r0, #4
 800a5e0:	3304      	addeq	r3, #4
 800a5e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a5e6:	bf04      	itt	eq
 800a5e8:	0080      	lsleq	r0, r0, #2
 800a5ea:	3302      	addeq	r3, #2
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	db05      	blt.n	800a5fc <__hi0bits+0x38>
 800a5f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a5f4:	f103 0301 	add.w	r3, r3, #1
 800a5f8:	bf08      	it	eq
 800a5fa:	2320      	moveq	r3, #32
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	4770      	bx	lr
 800a600:	2300      	movs	r3, #0
 800a602:	e7e4      	b.n	800a5ce <__hi0bits+0xa>

0800a604 <__lo0bits>:
 800a604:	6803      	ldr	r3, [r0, #0]
 800a606:	f013 0207 	ands.w	r2, r3, #7
 800a60a:	4601      	mov	r1, r0
 800a60c:	d00b      	beq.n	800a626 <__lo0bits+0x22>
 800a60e:	07da      	lsls	r2, r3, #31
 800a610:	d423      	bmi.n	800a65a <__lo0bits+0x56>
 800a612:	0798      	lsls	r0, r3, #30
 800a614:	bf49      	itett	mi
 800a616:	085b      	lsrmi	r3, r3, #1
 800a618:	089b      	lsrpl	r3, r3, #2
 800a61a:	2001      	movmi	r0, #1
 800a61c:	600b      	strmi	r3, [r1, #0]
 800a61e:	bf5c      	itt	pl
 800a620:	600b      	strpl	r3, [r1, #0]
 800a622:	2002      	movpl	r0, #2
 800a624:	4770      	bx	lr
 800a626:	b298      	uxth	r0, r3
 800a628:	b9a8      	cbnz	r0, 800a656 <__lo0bits+0x52>
 800a62a:	0c1b      	lsrs	r3, r3, #16
 800a62c:	2010      	movs	r0, #16
 800a62e:	b2da      	uxtb	r2, r3
 800a630:	b90a      	cbnz	r2, 800a636 <__lo0bits+0x32>
 800a632:	3008      	adds	r0, #8
 800a634:	0a1b      	lsrs	r3, r3, #8
 800a636:	071a      	lsls	r2, r3, #28
 800a638:	bf04      	itt	eq
 800a63a:	091b      	lsreq	r3, r3, #4
 800a63c:	3004      	addeq	r0, #4
 800a63e:	079a      	lsls	r2, r3, #30
 800a640:	bf04      	itt	eq
 800a642:	089b      	lsreq	r3, r3, #2
 800a644:	3002      	addeq	r0, #2
 800a646:	07da      	lsls	r2, r3, #31
 800a648:	d403      	bmi.n	800a652 <__lo0bits+0x4e>
 800a64a:	085b      	lsrs	r3, r3, #1
 800a64c:	f100 0001 	add.w	r0, r0, #1
 800a650:	d005      	beq.n	800a65e <__lo0bits+0x5a>
 800a652:	600b      	str	r3, [r1, #0]
 800a654:	4770      	bx	lr
 800a656:	4610      	mov	r0, r2
 800a658:	e7e9      	b.n	800a62e <__lo0bits+0x2a>
 800a65a:	2000      	movs	r0, #0
 800a65c:	4770      	bx	lr
 800a65e:	2020      	movs	r0, #32
 800a660:	4770      	bx	lr
	...

0800a664 <__i2b>:
 800a664:	b510      	push	{r4, lr}
 800a666:	460c      	mov	r4, r1
 800a668:	2101      	movs	r1, #1
 800a66a:	f7ff ff03 	bl	800a474 <_Balloc>
 800a66e:	4602      	mov	r2, r0
 800a670:	b928      	cbnz	r0, 800a67e <__i2b+0x1a>
 800a672:	4b05      	ldr	r3, [pc, #20]	; (800a688 <__i2b+0x24>)
 800a674:	4805      	ldr	r0, [pc, #20]	; (800a68c <__i2b+0x28>)
 800a676:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a67a:	f001 fa03 	bl	800ba84 <__assert_func>
 800a67e:	2301      	movs	r3, #1
 800a680:	6144      	str	r4, [r0, #20]
 800a682:	6103      	str	r3, [r0, #16]
 800a684:	bd10      	pop	{r4, pc}
 800a686:	bf00      	nop
 800a688:	0803933f 	.word	0x0803933f
 800a68c:	08039350 	.word	0x08039350

0800a690 <__multiply>:
 800a690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a694:	4691      	mov	r9, r2
 800a696:	690a      	ldr	r2, [r1, #16]
 800a698:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	bfb8      	it	lt
 800a6a0:	460b      	movlt	r3, r1
 800a6a2:	460c      	mov	r4, r1
 800a6a4:	bfbc      	itt	lt
 800a6a6:	464c      	movlt	r4, r9
 800a6a8:	4699      	movlt	r9, r3
 800a6aa:	6927      	ldr	r7, [r4, #16]
 800a6ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a6b0:	68a3      	ldr	r3, [r4, #8]
 800a6b2:	6861      	ldr	r1, [r4, #4]
 800a6b4:	eb07 060a 	add.w	r6, r7, sl
 800a6b8:	42b3      	cmp	r3, r6
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	bfb8      	it	lt
 800a6be:	3101      	addlt	r1, #1
 800a6c0:	f7ff fed8 	bl	800a474 <_Balloc>
 800a6c4:	b930      	cbnz	r0, 800a6d4 <__multiply+0x44>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	4b44      	ldr	r3, [pc, #272]	; (800a7dc <__multiply+0x14c>)
 800a6ca:	4845      	ldr	r0, [pc, #276]	; (800a7e0 <__multiply+0x150>)
 800a6cc:	f240 115d 	movw	r1, #349	; 0x15d
 800a6d0:	f001 f9d8 	bl	800ba84 <__assert_func>
 800a6d4:	f100 0514 	add.w	r5, r0, #20
 800a6d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a6dc:	462b      	mov	r3, r5
 800a6de:	2200      	movs	r2, #0
 800a6e0:	4543      	cmp	r3, r8
 800a6e2:	d321      	bcc.n	800a728 <__multiply+0x98>
 800a6e4:	f104 0314 	add.w	r3, r4, #20
 800a6e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a6ec:	f109 0314 	add.w	r3, r9, #20
 800a6f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a6f4:	9202      	str	r2, [sp, #8]
 800a6f6:	1b3a      	subs	r2, r7, r4
 800a6f8:	3a15      	subs	r2, #21
 800a6fa:	f022 0203 	bic.w	r2, r2, #3
 800a6fe:	3204      	adds	r2, #4
 800a700:	f104 0115 	add.w	r1, r4, #21
 800a704:	428f      	cmp	r7, r1
 800a706:	bf38      	it	cc
 800a708:	2204      	movcc	r2, #4
 800a70a:	9201      	str	r2, [sp, #4]
 800a70c:	9a02      	ldr	r2, [sp, #8]
 800a70e:	9303      	str	r3, [sp, #12]
 800a710:	429a      	cmp	r2, r3
 800a712:	d80c      	bhi.n	800a72e <__multiply+0x9e>
 800a714:	2e00      	cmp	r6, #0
 800a716:	dd03      	ble.n	800a720 <__multiply+0x90>
 800a718:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d05a      	beq.n	800a7d6 <__multiply+0x146>
 800a720:	6106      	str	r6, [r0, #16]
 800a722:	b005      	add	sp, #20
 800a724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a728:	f843 2b04 	str.w	r2, [r3], #4
 800a72c:	e7d8      	b.n	800a6e0 <__multiply+0x50>
 800a72e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a732:	f1ba 0f00 	cmp.w	sl, #0
 800a736:	d024      	beq.n	800a782 <__multiply+0xf2>
 800a738:	f104 0e14 	add.w	lr, r4, #20
 800a73c:	46a9      	mov	r9, r5
 800a73e:	f04f 0c00 	mov.w	ip, #0
 800a742:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a746:	f8d9 1000 	ldr.w	r1, [r9]
 800a74a:	fa1f fb82 	uxth.w	fp, r2
 800a74e:	b289      	uxth	r1, r1
 800a750:	fb0a 110b 	mla	r1, sl, fp, r1
 800a754:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a758:	f8d9 2000 	ldr.w	r2, [r9]
 800a75c:	4461      	add	r1, ip
 800a75e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a762:	fb0a c20b 	mla	r2, sl, fp, ip
 800a766:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a76a:	b289      	uxth	r1, r1
 800a76c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a770:	4577      	cmp	r7, lr
 800a772:	f849 1b04 	str.w	r1, [r9], #4
 800a776:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a77a:	d8e2      	bhi.n	800a742 <__multiply+0xb2>
 800a77c:	9a01      	ldr	r2, [sp, #4]
 800a77e:	f845 c002 	str.w	ip, [r5, r2]
 800a782:	9a03      	ldr	r2, [sp, #12]
 800a784:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a788:	3304      	adds	r3, #4
 800a78a:	f1b9 0f00 	cmp.w	r9, #0
 800a78e:	d020      	beq.n	800a7d2 <__multiply+0x142>
 800a790:	6829      	ldr	r1, [r5, #0]
 800a792:	f104 0c14 	add.w	ip, r4, #20
 800a796:	46ae      	mov	lr, r5
 800a798:	f04f 0a00 	mov.w	sl, #0
 800a79c:	f8bc b000 	ldrh.w	fp, [ip]
 800a7a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a7a4:	fb09 220b 	mla	r2, r9, fp, r2
 800a7a8:	4492      	add	sl, r2
 800a7aa:	b289      	uxth	r1, r1
 800a7ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a7b0:	f84e 1b04 	str.w	r1, [lr], #4
 800a7b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a7b8:	f8be 1000 	ldrh.w	r1, [lr]
 800a7bc:	0c12      	lsrs	r2, r2, #16
 800a7be:	fb09 1102 	mla	r1, r9, r2, r1
 800a7c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a7c6:	4567      	cmp	r7, ip
 800a7c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a7cc:	d8e6      	bhi.n	800a79c <__multiply+0x10c>
 800a7ce:	9a01      	ldr	r2, [sp, #4]
 800a7d0:	50a9      	str	r1, [r5, r2]
 800a7d2:	3504      	adds	r5, #4
 800a7d4:	e79a      	b.n	800a70c <__multiply+0x7c>
 800a7d6:	3e01      	subs	r6, #1
 800a7d8:	e79c      	b.n	800a714 <__multiply+0x84>
 800a7da:	bf00      	nop
 800a7dc:	0803933f 	.word	0x0803933f
 800a7e0:	08039350 	.word	0x08039350

0800a7e4 <__pow5mult>:
 800a7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7e8:	4615      	mov	r5, r2
 800a7ea:	f012 0203 	ands.w	r2, r2, #3
 800a7ee:	4606      	mov	r6, r0
 800a7f0:	460f      	mov	r7, r1
 800a7f2:	d007      	beq.n	800a804 <__pow5mult+0x20>
 800a7f4:	4c25      	ldr	r4, [pc, #148]	; (800a88c <__pow5mult+0xa8>)
 800a7f6:	3a01      	subs	r2, #1
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7fe:	f7ff fe9b 	bl	800a538 <__multadd>
 800a802:	4607      	mov	r7, r0
 800a804:	10ad      	asrs	r5, r5, #2
 800a806:	d03d      	beq.n	800a884 <__pow5mult+0xa0>
 800a808:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a80a:	b97c      	cbnz	r4, 800a82c <__pow5mult+0x48>
 800a80c:	2010      	movs	r0, #16
 800a80e:	f7ff fe1d 	bl	800a44c <malloc>
 800a812:	4602      	mov	r2, r0
 800a814:	6270      	str	r0, [r6, #36]	; 0x24
 800a816:	b928      	cbnz	r0, 800a824 <__pow5mult+0x40>
 800a818:	4b1d      	ldr	r3, [pc, #116]	; (800a890 <__pow5mult+0xac>)
 800a81a:	481e      	ldr	r0, [pc, #120]	; (800a894 <__pow5mult+0xb0>)
 800a81c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a820:	f001 f930 	bl	800ba84 <__assert_func>
 800a824:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a828:	6004      	str	r4, [r0, #0]
 800a82a:	60c4      	str	r4, [r0, #12]
 800a82c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a830:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a834:	b94c      	cbnz	r4, 800a84a <__pow5mult+0x66>
 800a836:	f240 2171 	movw	r1, #625	; 0x271
 800a83a:	4630      	mov	r0, r6
 800a83c:	f7ff ff12 	bl	800a664 <__i2b>
 800a840:	2300      	movs	r3, #0
 800a842:	f8c8 0008 	str.w	r0, [r8, #8]
 800a846:	4604      	mov	r4, r0
 800a848:	6003      	str	r3, [r0, #0]
 800a84a:	f04f 0900 	mov.w	r9, #0
 800a84e:	07eb      	lsls	r3, r5, #31
 800a850:	d50a      	bpl.n	800a868 <__pow5mult+0x84>
 800a852:	4639      	mov	r1, r7
 800a854:	4622      	mov	r2, r4
 800a856:	4630      	mov	r0, r6
 800a858:	f7ff ff1a 	bl	800a690 <__multiply>
 800a85c:	4639      	mov	r1, r7
 800a85e:	4680      	mov	r8, r0
 800a860:	4630      	mov	r0, r6
 800a862:	f7ff fe47 	bl	800a4f4 <_Bfree>
 800a866:	4647      	mov	r7, r8
 800a868:	106d      	asrs	r5, r5, #1
 800a86a:	d00b      	beq.n	800a884 <__pow5mult+0xa0>
 800a86c:	6820      	ldr	r0, [r4, #0]
 800a86e:	b938      	cbnz	r0, 800a880 <__pow5mult+0x9c>
 800a870:	4622      	mov	r2, r4
 800a872:	4621      	mov	r1, r4
 800a874:	4630      	mov	r0, r6
 800a876:	f7ff ff0b 	bl	800a690 <__multiply>
 800a87a:	6020      	str	r0, [r4, #0]
 800a87c:	f8c0 9000 	str.w	r9, [r0]
 800a880:	4604      	mov	r4, r0
 800a882:	e7e4      	b.n	800a84e <__pow5mult+0x6a>
 800a884:	4638      	mov	r0, r7
 800a886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a88a:	bf00      	nop
 800a88c:	080394a0 	.word	0x080394a0
 800a890:	080392cd 	.word	0x080392cd
 800a894:	08039350 	.word	0x08039350

0800a898 <__lshift>:
 800a898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a89c:	460c      	mov	r4, r1
 800a89e:	6849      	ldr	r1, [r1, #4]
 800a8a0:	6923      	ldr	r3, [r4, #16]
 800a8a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8a6:	68a3      	ldr	r3, [r4, #8]
 800a8a8:	4607      	mov	r7, r0
 800a8aa:	4691      	mov	r9, r2
 800a8ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8b0:	f108 0601 	add.w	r6, r8, #1
 800a8b4:	42b3      	cmp	r3, r6
 800a8b6:	db0b      	blt.n	800a8d0 <__lshift+0x38>
 800a8b8:	4638      	mov	r0, r7
 800a8ba:	f7ff fddb 	bl	800a474 <_Balloc>
 800a8be:	4605      	mov	r5, r0
 800a8c0:	b948      	cbnz	r0, 800a8d6 <__lshift+0x3e>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	4b2a      	ldr	r3, [pc, #168]	; (800a970 <__lshift+0xd8>)
 800a8c6:	482b      	ldr	r0, [pc, #172]	; (800a974 <__lshift+0xdc>)
 800a8c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a8cc:	f001 f8da 	bl	800ba84 <__assert_func>
 800a8d0:	3101      	adds	r1, #1
 800a8d2:	005b      	lsls	r3, r3, #1
 800a8d4:	e7ee      	b.n	800a8b4 <__lshift+0x1c>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f100 0114 	add.w	r1, r0, #20
 800a8dc:	f100 0210 	add.w	r2, r0, #16
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	4553      	cmp	r3, sl
 800a8e4:	db37      	blt.n	800a956 <__lshift+0xbe>
 800a8e6:	6920      	ldr	r0, [r4, #16]
 800a8e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8ec:	f104 0314 	add.w	r3, r4, #20
 800a8f0:	f019 091f 	ands.w	r9, r9, #31
 800a8f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a8fc:	d02f      	beq.n	800a95e <__lshift+0xc6>
 800a8fe:	f1c9 0e20 	rsb	lr, r9, #32
 800a902:	468a      	mov	sl, r1
 800a904:	f04f 0c00 	mov.w	ip, #0
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	fa02 f209 	lsl.w	r2, r2, r9
 800a90e:	ea42 020c 	orr.w	r2, r2, ip
 800a912:	f84a 2b04 	str.w	r2, [sl], #4
 800a916:	f853 2b04 	ldr.w	r2, [r3], #4
 800a91a:	4298      	cmp	r0, r3
 800a91c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a920:	d8f2      	bhi.n	800a908 <__lshift+0x70>
 800a922:	1b03      	subs	r3, r0, r4
 800a924:	3b15      	subs	r3, #21
 800a926:	f023 0303 	bic.w	r3, r3, #3
 800a92a:	3304      	adds	r3, #4
 800a92c:	f104 0215 	add.w	r2, r4, #21
 800a930:	4290      	cmp	r0, r2
 800a932:	bf38      	it	cc
 800a934:	2304      	movcc	r3, #4
 800a936:	f841 c003 	str.w	ip, [r1, r3]
 800a93a:	f1bc 0f00 	cmp.w	ip, #0
 800a93e:	d001      	beq.n	800a944 <__lshift+0xac>
 800a940:	f108 0602 	add.w	r6, r8, #2
 800a944:	3e01      	subs	r6, #1
 800a946:	4638      	mov	r0, r7
 800a948:	612e      	str	r6, [r5, #16]
 800a94a:	4621      	mov	r1, r4
 800a94c:	f7ff fdd2 	bl	800a4f4 <_Bfree>
 800a950:	4628      	mov	r0, r5
 800a952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a956:	f842 0f04 	str.w	r0, [r2, #4]!
 800a95a:	3301      	adds	r3, #1
 800a95c:	e7c1      	b.n	800a8e2 <__lshift+0x4a>
 800a95e:	3904      	subs	r1, #4
 800a960:	f853 2b04 	ldr.w	r2, [r3], #4
 800a964:	f841 2f04 	str.w	r2, [r1, #4]!
 800a968:	4298      	cmp	r0, r3
 800a96a:	d8f9      	bhi.n	800a960 <__lshift+0xc8>
 800a96c:	e7ea      	b.n	800a944 <__lshift+0xac>
 800a96e:	bf00      	nop
 800a970:	0803933f 	.word	0x0803933f
 800a974:	08039350 	.word	0x08039350

0800a978 <__mcmp>:
 800a978:	b530      	push	{r4, r5, lr}
 800a97a:	6902      	ldr	r2, [r0, #16]
 800a97c:	690c      	ldr	r4, [r1, #16]
 800a97e:	1b12      	subs	r2, r2, r4
 800a980:	d10e      	bne.n	800a9a0 <__mcmp+0x28>
 800a982:	f100 0314 	add.w	r3, r0, #20
 800a986:	3114      	adds	r1, #20
 800a988:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a98c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a990:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a994:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a998:	42a5      	cmp	r5, r4
 800a99a:	d003      	beq.n	800a9a4 <__mcmp+0x2c>
 800a99c:	d305      	bcc.n	800a9aa <__mcmp+0x32>
 800a99e:	2201      	movs	r2, #1
 800a9a0:	4610      	mov	r0, r2
 800a9a2:	bd30      	pop	{r4, r5, pc}
 800a9a4:	4283      	cmp	r3, r0
 800a9a6:	d3f3      	bcc.n	800a990 <__mcmp+0x18>
 800a9a8:	e7fa      	b.n	800a9a0 <__mcmp+0x28>
 800a9aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9ae:	e7f7      	b.n	800a9a0 <__mcmp+0x28>

0800a9b0 <__mdiff>:
 800a9b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b4:	460c      	mov	r4, r1
 800a9b6:	4606      	mov	r6, r0
 800a9b8:	4611      	mov	r1, r2
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	4690      	mov	r8, r2
 800a9be:	f7ff ffdb 	bl	800a978 <__mcmp>
 800a9c2:	1e05      	subs	r5, r0, #0
 800a9c4:	d110      	bne.n	800a9e8 <__mdiff+0x38>
 800a9c6:	4629      	mov	r1, r5
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	f7ff fd53 	bl	800a474 <_Balloc>
 800a9ce:	b930      	cbnz	r0, 800a9de <__mdiff+0x2e>
 800a9d0:	4b3a      	ldr	r3, [pc, #232]	; (800aabc <__mdiff+0x10c>)
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	f240 2132 	movw	r1, #562	; 0x232
 800a9d8:	4839      	ldr	r0, [pc, #228]	; (800aac0 <__mdiff+0x110>)
 800a9da:	f001 f853 	bl	800ba84 <__assert_func>
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e8:	bfa4      	itt	ge
 800a9ea:	4643      	movge	r3, r8
 800a9ec:	46a0      	movge	r8, r4
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a9f4:	bfa6      	itte	ge
 800a9f6:	461c      	movge	r4, r3
 800a9f8:	2500      	movge	r5, #0
 800a9fa:	2501      	movlt	r5, #1
 800a9fc:	f7ff fd3a 	bl	800a474 <_Balloc>
 800aa00:	b920      	cbnz	r0, 800aa0c <__mdiff+0x5c>
 800aa02:	4b2e      	ldr	r3, [pc, #184]	; (800aabc <__mdiff+0x10c>)
 800aa04:	4602      	mov	r2, r0
 800aa06:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aa0a:	e7e5      	b.n	800a9d8 <__mdiff+0x28>
 800aa0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aa10:	6926      	ldr	r6, [r4, #16]
 800aa12:	60c5      	str	r5, [r0, #12]
 800aa14:	f104 0914 	add.w	r9, r4, #20
 800aa18:	f108 0514 	add.w	r5, r8, #20
 800aa1c:	f100 0e14 	add.w	lr, r0, #20
 800aa20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aa24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aa28:	f108 0210 	add.w	r2, r8, #16
 800aa2c:	46f2      	mov	sl, lr
 800aa2e:	2100      	movs	r1, #0
 800aa30:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aa38:	fa1f f883 	uxth.w	r8, r3
 800aa3c:	fa11 f18b 	uxtah	r1, r1, fp
 800aa40:	0c1b      	lsrs	r3, r3, #16
 800aa42:	eba1 0808 	sub.w	r8, r1, r8
 800aa46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa4e:	fa1f f888 	uxth.w	r8, r8
 800aa52:	1419      	asrs	r1, r3, #16
 800aa54:	454e      	cmp	r6, r9
 800aa56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa5a:	f84a 3b04 	str.w	r3, [sl], #4
 800aa5e:	d8e7      	bhi.n	800aa30 <__mdiff+0x80>
 800aa60:	1b33      	subs	r3, r6, r4
 800aa62:	3b15      	subs	r3, #21
 800aa64:	f023 0303 	bic.w	r3, r3, #3
 800aa68:	3304      	adds	r3, #4
 800aa6a:	3415      	adds	r4, #21
 800aa6c:	42a6      	cmp	r6, r4
 800aa6e:	bf38      	it	cc
 800aa70:	2304      	movcc	r3, #4
 800aa72:	441d      	add	r5, r3
 800aa74:	4473      	add	r3, lr
 800aa76:	469e      	mov	lr, r3
 800aa78:	462e      	mov	r6, r5
 800aa7a:	4566      	cmp	r6, ip
 800aa7c:	d30e      	bcc.n	800aa9c <__mdiff+0xec>
 800aa7e:	f10c 0203 	add.w	r2, ip, #3
 800aa82:	1b52      	subs	r2, r2, r5
 800aa84:	f022 0203 	bic.w	r2, r2, #3
 800aa88:	3d03      	subs	r5, #3
 800aa8a:	45ac      	cmp	ip, r5
 800aa8c:	bf38      	it	cc
 800aa8e:	2200      	movcc	r2, #0
 800aa90:	441a      	add	r2, r3
 800aa92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aa96:	b17b      	cbz	r3, 800aab8 <__mdiff+0x108>
 800aa98:	6107      	str	r7, [r0, #16]
 800aa9a:	e7a3      	b.n	800a9e4 <__mdiff+0x34>
 800aa9c:	f856 8b04 	ldr.w	r8, [r6], #4
 800aaa0:	fa11 f288 	uxtah	r2, r1, r8
 800aaa4:	1414      	asrs	r4, r2, #16
 800aaa6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aaaa:	b292      	uxth	r2, r2
 800aaac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aab0:	f84e 2b04 	str.w	r2, [lr], #4
 800aab4:	1421      	asrs	r1, r4, #16
 800aab6:	e7e0      	b.n	800aa7a <__mdiff+0xca>
 800aab8:	3f01      	subs	r7, #1
 800aaba:	e7ea      	b.n	800aa92 <__mdiff+0xe2>
 800aabc:	0803933f 	.word	0x0803933f
 800aac0:	08039350 	.word	0x08039350

0800aac4 <__d2b>:
 800aac4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aac8:	4689      	mov	r9, r1
 800aaca:	2101      	movs	r1, #1
 800aacc:	ec57 6b10 	vmov	r6, r7, d0
 800aad0:	4690      	mov	r8, r2
 800aad2:	f7ff fccf 	bl	800a474 <_Balloc>
 800aad6:	4604      	mov	r4, r0
 800aad8:	b930      	cbnz	r0, 800aae8 <__d2b+0x24>
 800aada:	4602      	mov	r2, r0
 800aadc:	4b25      	ldr	r3, [pc, #148]	; (800ab74 <__d2b+0xb0>)
 800aade:	4826      	ldr	r0, [pc, #152]	; (800ab78 <__d2b+0xb4>)
 800aae0:	f240 310a 	movw	r1, #778	; 0x30a
 800aae4:	f000 ffce 	bl	800ba84 <__assert_func>
 800aae8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aaec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aaf0:	bb35      	cbnz	r5, 800ab40 <__d2b+0x7c>
 800aaf2:	2e00      	cmp	r6, #0
 800aaf4:	9301      	str	r3, [sp, #4]
 800aaf6:	d028      	beq.n	800ab4a <__d2b+0x86>
 800aaf8:	4668      	mov	r0, sp
 800aafa:	9600      	str	r6, [sp, #0]
 800aafc:	f7ff fd82 	bl	800a604 <__lo0bits>
 800ab00:	9900      	ldr	r1, [sp, #0]
 800ab02:	b300      	cbz	r0, 800ab46 <__d2b+0x82>
 800ab04:	9a01      	ldr	r2, [sp, #4]
 800ab06:	f1c0 0320 	rsb	r3, r0, #32
 800ab0a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab0e:	430b      	orrs	r3, r1
 800ab10:	40c2      	lsrs	r2, r0
 800ab12:	6163      	str	r3, [r4, #20]
 800ab14:	9201      	str	r2, [sp, #4]
 800ab16:	9b01      	ldr	r3, [sp, #4]
 800ab18:	61a3      	str	r3, [r4, #24]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	bf14      	ite	ne
 800ab1e:	2202      	movne	r2, #2
 800ab20:	2201      	moveq	r2, #1
 800ab22:	6122      	str	r2, [r4, #16]
 800ab24:	b1d5      	cbz	r5, 800ab5c <__d2b+0x98>
 800ab26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab2a:	4405      	add	r5, r0
 800ab2c:	f8c9 5000 	str.w	r5, [r9]
 800ab30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab34:	f8c8 0000 	str.w	r0, [r8]
 800ab38:	4620      	mov	r0, r4
 800ab3a:	b003      	add	sp, #12
 800ab3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab44:	e7d5      	b.n	800aaf2 <__d2b+0x2e>
 800ab46:	6161      	str	r1, [r4, #20]
 800ab48:	e7e5      	b.n	800ab16 <__d2b+0x52>
 800ab4a:	a801      	add	r0, sp, #4
 800ab4c:	f7ff fd5a 	bl	800a604 <__lo0bits>
 800ab50:	9b01      	ldr	r3, [sp, #4]
 800ab52:	6163      	str	r3, [r4, #20]
 800ab54:	2201      	movs	r2, #1
 800ab56:	6122      	str	r2, [r4, #16]
 800ab58:	3020      	adds	r0, #32
 800ab5a:	e7e3      	b.n	800ab24 <__d2b+0x60>
 800ab5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab64:	f8c9 0000 	str.w	r0, [r9]
 800ab68:	6918      	ldr	r0, [r3, #16]
 800ab6a:	f7ff fd2b 	bl	800a5c4 <__hi0bits>
 800ab6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab72:	e7df      	b.n	800ab34 <__d2b+0x70>
 800ab74:	0803933f 	.word	0x0803933f
 800ab78:	08039350 	.word	0x08039350

0800ab7c <_calloc_r>:
 800ab7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab7e:	fba1 2402 	umull	r2, r4, r1, r2
 800ab82:	b94c      	cbnz	r4, 800ab98 <_calloc_r+0x1c>
 800ab84:	4611      	mov	r1, r2
 800ab86:	9201      	str	r2, [sp, #4]
 800ab88:	f7fd fed6 	bl	8008938 <_malloc_r>
 800ab8c:	9a01      	ldr	r2, [sp, #4]
 800ab8e:	4605      	mov	r5, r0
 800ab90:	b930      	cbnz	r0, 800aba0 <_calloc_r+0x24>
 800ab92:	4628      	mov	r0, r5
 800ab94:	b003      	add	sp, #12
 800ab96:	bd30      	pop	{r4, r5, pc}
 800ab98:	220c      	movs	r2, #12
 800ab9a:	6002      	str	r2, [r0, #0]
 800ab9c:	2500      	movs	r5, #0
 800ab9e:	e7f8      	b.n	800ab92 <_calloc_r+0x16>
 800aba0:	4621      	mov	r1, r4
 800aba2:	f7fd fe55 	bl	8008850 <memset>
 800aba6:	e7f4      	b.n	800ab92 <_calloc_r+0x16>

0800aba8 <__sfputc_r>:
 800aba8:	6893      	ldr	r3, [r2, #8]
 800abaa:	3b01      	subs	r3, #1
 800abac:	2b00      	cmp	r3, #0
 800abae:	b410      	push	{r4}
 800abb0:	6093      	str	r3, [r2, #8]
 800abb2:	da08      	bge.n	800abc6 <__sfputc_r+0x1e>
 800abb4:	6994      	ldr	r4, [r2, #24]
 800abb6:	42a3      	cmp	r3, r4
 800abb8:	db01      	blt.n	800abbe <__sfputc_r+0x16>
 800abba:	290a      	cmp	r1, #10
 800abbc:	d103      	bne.n	800abc6 <__sfputc_r+0x1e>
 800abbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abc2:	f7fe bcad 	b.w	8009520 <__swbuf_r>
 800abc6:	6813      	ldr	r3, [r2, #0]
 800abc8:	1c58      	adds	r0, r3, #1
 800abca:	6010      	str	r0, [r2, #0]
 800abcc:	7019      	strb	r1, [r3, #0]
 800abce:	4608      	mov	r0, r1
 800abd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abd4:	4770      	bx	lr

0800abd6 <__sfputs_r>:
 800abd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd8:	4606      	mov	r6, r0
 800abda:	460f      	mov	r7, r1
 800abdc:	4614      	mov	r4, r2
 800abde:	18d5      	adds	r5, r2, r3
 800abe0:	42ac      	cmp	r4, r5
 800abe2:	d101      	bne.n	800abe8 <__sfputs_r+0x12>
 800abe4:	2000      	movs	r0, #0
 800abe6:	e007      	b.n	800abf8 <__sfputs_r+0x22>
 800abe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abec:	463a      	mov	r2, r7
 800abee:	4630      	mov	r0, r6
 800abf0:	f7ff ffda 	bl	800aba8 <__sfputc_r>
 800abf4:	1c43      	adds	r3, r0, #1
 800abf6:	d1f3      	bne.n	800abe0 <__sfputs_r+0xa>
 800abf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800abfc <_vfiprintf_r>:
 800abfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac00:	460d      	mov	r5, r1
 800ac02:	b09d      	sub	sp, #116	; 0x74
 800ac04:	4614      	mov	r4, r2
 800ac06:	4698      	mov	r8, r3
 800ac08:	4606      	mov	r6, r0
 800ac0a:	b118      	cbz	r0, 800ac14 <_vfiprintf_r+0x18>
 800ac0c:	6983      	ldr	r3, [r0, #24]
 800ac0e:	b90b      	cbnz	r3, 800ac14 <_vfiprintf_r+0x18>
 800ac10:	f7fd fce6 	bl	80085e0 <__sinit>
 800ac14:	4b89      	ldr	r3, [pc, #548]	; (800ae3c <_vfiprintf_r+0x240>)
 800ac16:	429d      	cmp	r5, r3
 800ac18:	d11b      	bne.n	800ac52 <_vfiprintf_r+0x56>
 800ac1a:	6875      	ldr	r5, [r6, #4]
 800ac1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac1e:	07d9      	lsls	r1, r3, #31
 800ac20:	d405      	bmi.n	800ac2e <_vfiprintf_r+0x32>
 800ac22:	89ab      	ldrh	r3, [r5, #12]
 800ac24:	059a      	lsls	r2, r3, #22
 800ac26:	d402      	bmi.n	800ac2e <_vfiprintf_r+0x32>
 800ac28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac2a:	f7fd fd9c 	bl	8008766 <__retarget_lock_acquire_recursive>
 800ac2e:	89ab      	ldrh	r3, [r5, #12]
 800ac30:	071b      	lsls	r3, r3, #28
 800ac32:	d501      	bpl.n	800ac38 <_vfiprintf_r+0x3c>
 800ac34:	692b      	ldr	r3, [r5, #16]
 800ac36:	b9eb      	cbnz	r3, 800ac74 <_vfiprintf_r+0x78>
 800ac38:	4629      	mov	r1, r5
 800ac3a:	4630      	mov	r0, r6
 800ac3c:	f7fe fcd4 	bl	80095e8 <__swsetup_r>
 800ac40:	b1c0      	cbz	r0, 800ac74 <_vfiprintf_r+0x78>
 800ac42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac44:	07dc      	lsls	r4, r3, #31
 800ac46:	d50e      	bpl.n	800ac66 <_vfiprintf_r+0x6a>
 800ac48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac4c:	b01d      	add	sp, #116	; 0x74
 800ac4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac52:	4b7b      	ldr	r3, [pc, #492]	; (800ae40 <_vfiprintf_r+0x244>)
 800ac54:	429d      	cmp	r5, r3
 800ac56:	d101      	bne.n	800ac5c <_vfiprintf_r+0x60>
 800ac58:	68b5      	ldr	r5, [r6, #8]
 800ac5a:	e7df      	b.n	800ac1c <_vfiprintf_r+0x20>
 800ac5c:	4b79      	ldr	r3, [pc, #484]	; (800ae44 <_vfiprintf_r+0x248>)
 800ac5e:	429d      	cmp	r5, r3
 800ac60:	bf08      	it	eq
 800ac62:	68f5      	ldreq	r5, [r6, #12]
 800ac64:	e7da      	b.n	800ac1c <_vfiprintf_r+0x20>
 800ac66:	89ab      	ldrh	r3, [r5, #12]
 800ac68:	0598      	lsls	r0, r3, #22
 800ac6a:	d4ed      	bmi.n	800ac48 <_vfiprintf_r+0x4c>
 800ac6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac6e:	f7fd fd7b 	bl	8008768 <__retarget_lock_release_recursive>
 800ac72:	e7e9      	b.n	800ac48 <_vfiprintf_r+0x4c>
 800ac74:	2300      	movs	r3, #0
 800ac76:	9309      	str	r3, [sp, #36]	; 0x24
 800ac78:	2320      	movs	r3, #32
 800ac7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac82:	2330      	movs	r3, #48	; 0x30
 800ac84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ae48 <_vfiprintf_r+0x24c>
 800ac88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac8c:	f04f 0901 	mov.w	r9, #1
 800ac90:	4623      	mov	r3, r4
 800ac92:	469a      	mov	sl, r3
 800ac94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac98:	b10a      	cbz	r2, 800ac9e <_vfiprintf_r+0xa2>
 800ac9a:	2a25      	cmp	r2, #37	; 0x25
 800ac9c:	d1f9      	bne.n	800ac92 <_vfiprintf_r+0x96>
 800ac9e:	ebba 0b04 	subs.w	fp, sl, r4
 800aca2:	d00b      	beq.n	800acbc <_vfiprintf_r+0xc0>
 800aca4:	465b      	mov	r3, fp
 800aca6:	4622      	mov	r2, r4
 800aca8:	4629      	mov	r1, r5
 800acaa:	4630      	mov	r0, r6
 800acac:	f7ff ff93 	bl	800abd6 <__sfputs_r>
 800acb0:	3001      	adds	r0, #1
 800acb2:	f000 80aa 	beq.w	800ae0a <_vfiprintf_r+0x20e>
 800acb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acb8:	445a      	add	r2, fp
 800acba:	9209      	str	r2, [sp, #36]	; 0x24
 800acbc:	f89a 3000 	ldrb.w	r3, [sl]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	f000 80a2 	beq.w	800ae0a <_vfiprintf_r+0x20e>
 800acc6:	2300      	movs	r3, #0
 800acc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800accc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acd0:	f10a 0a01 	add.w	sl, sl, #1
 800acd4:	9304      	str	r3, [sp, #16]
 800acd6:	9307      	str	r3, [sp, #28]
 800acd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acdc:	931a      	str	r3, [sp, #104]	; 0x68
 800acde:	4654      	mov	r4, sl
 800ace0:	2205      	movs	r2, #5
 800ace2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ace6:	4858      	ldr	r0, [pc, #352]	; (800ae48 <_vfiprintf_r+0x24c>)
 800ace8:	f7f5 fa7a 	bl	80001e0 <memchr>
 800acec:	9a04      	ldr	r2, [sp, #16]
 800acee:	b9d8      	cbnz	r0, 800ad28 <_vfiprintf_r+0x12c>
 800acf0:	06d1      	lsls	r1, r2, #27
 800acf2:	bf44      	itt	mi
 800acf4:	2320      	movmi	r3, #32
 800acf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acfa:	0713      	lsls	r3, r2, #28
 800acfc:	bf44      	itt	mi
 800acfe:	232b      	movmi	r3, #43	; 0x2b
 800ad00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad04:	f89a 3000 	ldrb.w	r3, [sl]
 800ad08:	2b2a      	cmp	r3, #42	; 0x2a
 800ad0a:	d015      	beq.n	800ad38 <_vfiprintf_r+0x13c>
 800ad0c:	9a07      	ldr	r2, [sp, #28]
 800ad0e:	4654      	mov	r4, sl
 800ad10:	2000      	movs	r0, #0
 800ad12:	f04f 0c0a 	mov.w	ip, #10
 800ad16:	4621      	mov	r1, r4
 800ad18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad1c:	3b30      	subs	r3, #48	; 0x30
 800ad1e:	2b09      	cmp	r3, #9
 800ad20:	d94e      	bls.n	800adc0 <_vfiprintf_r+0x1c4>
 800ad22:	b1b0      	cbz	r0, 800ad52 <_vfiprintf_r+0x156>
 800ad24:	9207      	str	r2, [sp, #28]
 800ad26:	e014      	b.n	800ad52 <_vfiprintf_r+0x156>
 800ad28:	eba0 0308 	sub.w	r3, r0, r8
 800ad2c:	fa09 f303 	lsl.w	r3, r9, r3
 800ad30:	4313      	orrs	r3, r2
 800ad32:	9304      	str	r3, [sp, #16]
 800ad34:	46a2      	mov	sl, r4
 800ad36:	e7d2      	b.n	800acde <_vfiprintf_r+0xe2>
 800ad38:	9b03      	ldr	r3, [sp, #12]
 800ad3a:	1d19      	adds	r1, r3, #4
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	9103      	str	r1, [sp, #12]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	bfbb      	ittet	lt
 800ad44:	425b      	neglt	r3, r3
 800ad46:	f042 0202 	orrlt.w	r2, r2, #2
 800ad4a:	9307      	strge	r3, [sp, #28]
 800ad4c:	9307      	strlt	r3, [sp, #28]
 800ad4e:	bfb8      	it	lt
 800ad50:	9204      	strlt	r2, [sp, #16]
 800ad52:	7823      	ldrb	r3, [r4, #0]
 800ad54:	2b2e      	cmp	r3, #46	; 0x2e
 800ad56:	d10c      	bne.n	800ad72 <_vfiprintf_r+0x176>
 800ad58:	7863      	ldrb	r3, [r4, #1]
 800ad5a:	2b2a      	cmp	r3, #42	; 0x2a
 800ad5c:	d135      	bne.n	800adca <_vfiprintf_r+0x1ce>
 800ad5e:	9b03      	ldr	r3, [sp, #12]
 800ad60:	1d1a      	adds	r2, r3, #4
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	9203      	str	r2, [sp, #12]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	bfb8      	it	lt
 800ad6a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ad6e:	3402      	adds	r4, #2
 800ad70:	9305      	str	r3, [sp, #20]
 800ad72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ae58 <_vfiprintf_r+0x25c>
 800ad76:	7821      	ldrb	r1, [r4, #0]
 800ad78:	2203      	movs	r2, #3
 800ad7a:	4650      	mov	r0, sl
 800ad7c:	f7f5 fa30 	bl	80001e0 <memchr>
 800ad80:	b140      	cbz	r0, 800ad94 <_vfiprintf_r+0x198>
 800ad82:	2340      	movs	r3, #64	; 0x40
 800ad84:	eba0 000a 	sub.w	r0, r0, sl
 800ad88:	fa03 f000 	lsl.w	r0, r3, r0
 800ad8c:	9b04      	ldr	r3, [sp, #16]
 800ad8e:	4303      	orrs	r3, r0
 800ad90:	3401      	adds	r4, #1
 800ad92:	9304      	str	r3, [sp, #16]
 800ad94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad98:	482c      	ldr	r0, [pc, #176]	; (800ae4c <_vfiprintf_r+0x250>)
 800ad9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad9e:	2206      	movs	r2, #6
 800ada0:	f7f5 fa1e 	bl	80001e0 <memchr>
 800ada4:	2800      	cmp	r0, #0
 800ada6:	d03f      	beq.n	800ae28 <_vfiprintf_r+0x22c>
 800ada8:	4b29      	ldr	r3, [pc, #164]	; (800ae50 <_vfiprintf_r+0x254>)
 800adaa:	bb1b      	cbnz	r3, 800adf4 <_vfiprintf_r+0x1f8>
 800adac:	9b03      	ldr	r3, [sp, #12]
 800adae:	3307      	adds	r3, #7
 800adb0:	f023 0307 	bic.w	r3, r3, #7
 800adb4:	3308      	adds	r3, #8
 800adb6:	9303      	str	r3, [sp, #12]
 800adb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adba:	443b      	add	r3, r7
 800adbc:	9309      	str	r3, [sp, #36]	; 0x24
 800adbe:	e767      	b.n	800ac90 <_vfiprintf_r+0x94>
 800adc0:	fb0c 3202 	mla	r2, ip, r2, r3
 800adc4:	460c      	mov	r4, r1
 800adc6:	2001      	movs	r0, #1
 800adc8:	e7a5      	b.n	800ad16 <_vfiprintf_r+0x11a>
 800adca:	2300      	movs	r3, #0
 800adcc:	3401      	adds	r4, #1
 800adce:	9305      	str	r3, [sp, #20]
 800add0:	4619      	mov	r1, r3
 800add2:	f04f 0c0a 	mov.w	ip, #10
 800add6:	4620      	mov	r0, r4
 800add8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800addc:	3a30      	subs	r2, #48	; 0x30
 800adde:	2a09      	cmp	r2, #9
 800ade0:	d903      	bls.n	800adea <_vfiprintf_r+0x1ee>
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d0c5      	beq.n	800ad72 <_vfiprintf_r+0x176>
 800ade6:	9105      	str	r1, [sp, #20]
 800ade8:	e7c3      	b.n	800ad72 <_vfiprintf_r+0x176>
 800adea:	fb0c 2101 	mla	r1, ip, r1, r2
 800adee:	4604      	mov	r4, r0
 800adf0:	2301      	movs	r3, #1
 800adf2:	e7f0      	b.n	800add6 <_vfiprintf_r+0x1da>
 800adf4:	ab03      	add	r3, sp, #12
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	462a      	mov	r2, r5
 800adfa:	4b16      	ldr	r3, [pc, #88]	; (800ae54 <_vfiprintf_r+0x258>)
 800adfc:	a904      	add	r1, sp, #16
 800adfe:	4630      	mov	r0, r6
 800ae00:	f7fd feae 	bl	8008b60 <_printf_float>
 800ae04:	4607      	mov	r7, r0
 800ae06:	1c78      	adds	r0, r7, #1
 800ae08:	d1d6      	bne.n	800adb8 <_vfiprintf_r+0x1bc>
 800ae0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae0c:	07d9      	lsls	r1, r3, #31
 800ae0e:	d405      	bmi.n	800ae1c <_vfiprintf_r+0x220>
 800ae10:	89ab      	ldrh	r3, [r5, #12]
 800ae12:	059a      	lsls	r2, r3, #22
 800ae14:	d402      	bmi.n	800ae1c <_vfiprintf_r+0x220>
 800ae16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae18:	f7fd fca6 	bl	8008768 <__retarget_lock_release_recursive>
 800ae1c:	89ab      	ldrh	r3, [r5, #12]
 800ae1e:	065b      	lsls	r3, r3, #25
 800ae20:	f53f af12 	bmi.w	800ac48 <_vfiprintf_r+0x4c>
 800ae24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae26:	e711      	b.n	800ac4c <_vfiprintf_r+0x50>
 800ae28:	ab03      	add	r3, sp, #12
 800ae2a:	9300      	str	r3, [sp, #0]
 800ae2c:	462a      	mov	r2, r5
 800ae2e:	4b09      	ldr	r3, [pc, #36]	; (800ae54 <_vfiprintf_r+0x258>)
 800ae30:	a904      	add	r1, sp, #16
 800ae32:	4630      	mov	r0, r6
 800ae34:	f7fe f938 	bl	80090a8 <_printf_i>
 800ae38:	e7e4      	b.n	800ae04 <_vfiprintf_r+0x208>
 800ae3a:	bf00      	nop
 800ae3c:	08039248 	.word	0x08039248
 800ae40:	08039268 	.word	0x08039268
 800ae44:	08039228 	.word	0x08039228
 800ae48:	080394ac 	.word	0x080394ac
 800ae4c:	080394b6 	.word	0x080394b6
 800ae50:	08008b61 	.word	0x08008b61
 800ae54:	0800abd7 	.word	0x0800abd7
 800ae58:	080394b2 	.word	0x080394b2

0800ae5c <_read_r>:
 800ae5c:	b538      	push	{r3, r4, r5, lr}
 800ae5e:	4d07      	ldr	r5, [pc, #28]	; (800ae7c <_read_r+0x20>)
 800ae60:	4604      	mov	r4, r0
 800ae62:	4608      	mov	r0, r1
 800ae64:	4611      	mov	r1, r2
 800ae66:	2200      	movs	r2, #0
 800ae68:	602a      	str	r2, [r5, #0]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	f7f7 fa6a 	bl	8002344 <_read>
 800ae70:	1c43      	adds	r3, r0, #1
 800ae72:	d102      	bne.n	800ae7a <_read_r+0x1e>
 800ae74:	682b      	ldr	r3, [r5, #0]
 800ae76:	b103      	cbz	r3, 800ae7a <_read_r+0x1e>
 800ae78:	6023      	str	r3, [r4, #0]
 800ae7a:	bd38      	pop	{r3, r4, r5, pc}
 800ae7c:	2000a420 	.word	0x2000a420

0800ae80 <wcvt>:
 800ae80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae84:	b085      	sub	sp, #20
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	461d      	mov	r5, r3
 800ae8a:	4614      	mov	r4, r2
 800ae8c:	bfbc      	itt	lt
 800ae8e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800ae92:	4614      	movlt	r4, r2
 800ae94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae96:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ae98:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800ae9c:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800aea0:	bfb6      	itet	lt
 800aea2:	461d      	movlt	r5, r3
 800aea4:	2300      	movge	r3, #0
 800aea6:	232d      	movlt	r3, #45	; 0x2d
 800aea8:	6013      	str	r3, [r2, #0]
 800aeaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aeac:	f023 0820 	bic.w	r8, r3, #32
 800aeb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aeb4:	d005      	beq.n	800aec2 <wcvt+0x42>
 800aeb6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aeba:	d100      	bne.n	800aebe <wcvt+0x3e>
 800aebc:	3601      	adds	r6, #1
 800aebe:	2102      	movs	r1, #2
 800aec0:	e000      	b.n	800aec4 <wcvt+0x44>
 800aec2:	2103      	movs	r1, #3
 800aec4:	ab03      	add	r3, sp, #12
 800aec6:	9301      	str	r3, [sp, #4]
 800aec8:	ab02      	add	r3, sp, #8
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	ec45 4b10 	vmov	d0, r4, r5
 800aed0:	4653      	mov	r3, sl
 800aed2:	4632      	mov	r2, r6
 800aed4:	f7fe fc94 	bl	8009800 <_dtoa_r>
 800aed8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aedc:	4607      	mov	r7, r0
 800aede:	d112      	bne.n	800af06 <wcvt+0x86>
 800aee0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aee2:	07db      	lsls	r3, r3, #31
 800aee4:	d40f      	bmi.n	800af06 <wcvt+0x86>
 800aee6:	9b03      	ldr	r3, [sp, #12]
 800aee8:	1bdb      	subs	r3, r3, r7
 800aeea:	f8cb 3000 	str.w	r3, [fp]
 800aeee:	2300      	movs	r3, #0
 800aef0:	f8db 2000 	ldr.w	r2, [fp]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	dd02      	ble.n	800aefe <wcvt+0x7e>
 800aef8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aefa:	4293      	cmp	r3, r2
 800aefc:	db2a      	blt.n	800af54 <wcvt+0xd4>
 800aefe:	9814      	ldr	r0, [sp, #80]	; 0x50
 800af00:	b005      	add	sp, #20
 800af02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af0a:	eb07 0906 	add.w	r9, r7, r6
 800af0e:	d110      	bne.n	800af32 <wcvt+0xb2>
 800af10:	783b      	ldrb	r3, [r7, #0]
 800af12:	2b30      	cmp	r3, #48	; 0x30
 800af14:	d10a      	bne.n	800af2c <wcvt+0xac>
 800af16:	2200      	movs	r2, #0
 800af18:	2300      	movs	r3, #0
 800af1a:	4620      	mov	r0, r4
 800af1c:	4629      	mov	r1, r5
 800af1e:	f7f5 fdd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800af22:	b918      	cbnz	r0, 800af2c <wcvt+0xac>
 800af24:	f1c6 0601 	rsb	r6, r6, #1
 800af28:	f8ca 6000 	str.w	r6, [sl]
 800af2c:	f8da 3000 	ldr.w	r3, [sl]
 800af30:	4499      	add	r9, r3
 800af32:	2200      	movs	r2, #0
 800af34:	2300      	movs	r3, #0
 800af36:	4620      	mov	r0, r4
 800af38:	4629      	mov	r1, r5
 800af3a:	f7f5 fdc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800af3e:	b108      	cbz	r0, 800af44 <wcvt+0xc4>
 800af40:	f8cd 900c 	str.w	r9, [sp, #12]
 800af44:	2230      	movs	r2, #48	; 0x30
 800af46:	9b03      	ldr	r3, [sp, #12]
 800af48:	454b      	cmp	r3, r9
 800af4a:	d2cc      	bcs.n	800aee6 <wcvt+0x66>
 800af4c:	1c59      	adds	r1, r3, #1
 800af4e:	9103      	str	r1, [sp, #12]
 800af50:	701a      	strb	r2, [r3, #0]
 800af52:	e7f8      	b.n	800af46 <wcvt+0xc6>
 800af54:	9914      	ldr	r1, [sp, #80]	; 0x50
 800af56:	5cfa      	ldrb	r2, [r7, r3]
 800af58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800af5c:	3301      	adds	r3, #1
 800af5e:	e7c7      	b.n	800aef0 <wcvt+0x70>

0800af60 <_svfwprintf_r>:
 800af60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af64:	ed2d 8b04 	vpush	{d8-d9}
 800af68:	b0d3      	sub	sp, #332	; 0x14c
 800af6a:	461d      	mov	r5, r3
 800af6c:	2300      	movs	r3, #0
 800af6e:	4689      	mov	r9, r1
 800af70:	9319      	str	r3, [sp, #100]	; 0x64
 800af72:	4683      	mov	fp, r0
 800af74:	920b      	str	r2, [sp, #44]	; 0x2c
 800af76:	f7ff fa53 	bl	800a420 <_localeconv_r>
 800af7a:	6803      	ldr	r3, [r0, #0]
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	9316      	str	r3, [sp, #88]	; 0x58
 800af80:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800af84:	061e      	lsls	r6, r3, #24
 800af86:	d51a      	bpl.n	800afbe <_svfwprintf_r+0x5e>
 800af88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800af8c:	b9bb      	cbnz	r3, 800afbe <_svfwprintf_r+0x5e>
 800af8e:	2140      	movs	r1, #64	; 0x40
 800af90:	4658      	mov	r0, fp
 800af92:	f7fd fcd1 	bl	8008938 <_malloc_r>
 800af96:	f8c9 0000 	str.w	r0, [r9]
 800af9a:	f8c9 0010 	str.w	r0, [r9, #16]
 800af9e:	b958      	cbnz	r0, 800afb8 <_svfwprintf_r+0x58>
 800afa0:	230c      	movs	r3, #12
 800afa2:	f8cb 3000 	str.w	r3, [fp]
 800afa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afaa:	930d      	str	r3, [sp, #52]	; 0x34
 800afac:	980d      	ldr	r0, [sp, #52]	; 0x34
 800afae:	b053      	add	sp, #332	; 0x14c
 800afb0:	ecbd 8b04 	vpop	{d8-d9}
 800afb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb8:	2340      	movs	r3, #64	; 0x40
 800afba:	f8c9 3014 	str.w	r3, [r9, #20]
 800afbe:	ed9f 7b8e 	vldr	d7, [pc, #568]	; 800b1f8 <_svfwprintf_r+0x298>
 800afc2:	2300      	movs	r3, #0
 800afc4:	930f      	str	r3, [sp, #60]	; 0x3c
 800afc6:	9311      	str	r3, [sp, #68]	; 0x44
 800afc8:	930d      	str	r3, [sp, #52]	; 0x34
 800afca:	eeb0 8a47 	vmov.f32	s16, s14
 800afce:	eef0 8a67 	vmov.f32	s17, s15
 800afd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afd4:	461c      	mov	r4, r3
 800afd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800afda:	b10a      	cbz	r2, 800afe0 <_svfwprintf_r+0x80>
 800afdc:	2a25      	cmp	r2, #37	; 0x25
 800afde:	d1f9      	bne.n	800afd4 <_svfwprintf_r+0x74>
 800afe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afe2:	42a3      	cmp	r3, r4
 800afe4:	d00d      	beq.n	800b002 <_svfwprintf_r+0xa2>
 800afe6:	1ae6      	subs	r6, r4, r3
 800afe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800afea:	4633      	mov	r3, r6
 800afec:	4649      	mov	r1, r9
 800afee:	4658      	mov	r0, fp
 800aff0:	f000 fe1d 	bl	800bc2e <__ssputs_r>
 800aff4:	3001      	adds	r0, #1
 800aff6:	f000 80e9 	beq.w	800b1cc <_svfwprintf_r+0x26c>
 800affa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800affc:	eb03 03a6 	add.w	r3, r3, r6, asr #2
 800b000:	930d      	str	r3, [sp, #52]	; 0x34
 800b002:	6823      	ldr	r3, [r4, #0]
 800b004:	2b00      	cmp	r3, #0
 800b006:	f000 80e1 	beq.w	800b1cc <_svfwprintf_r+0x26c>
 800b00a:	2100      	movs	r1, #0
 800b00c:	1d22      	adds	r2, r4, #4
 800b00e:	9115      	str	r1, [sp, #84]	; 0x54
 800b010:	460e      	mov	r6, r1
 800b012:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b016:	910c      	str	r1, [sp, #48]	; 0x30
 800b018:	460f      	mov	r7, r1
 800b01a:	200a      	movs	r0, #10
 800b01c:	4613      	mov	r3, r2
 800b01e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b022:	9209      	str	r2, [sp, #36]	; 0x24
 800b024:	930b      	str	r3, [sp, #44]	; 0x2c
 800b026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b028:	2b39      	cmp	r3, #57	; 0x39
 800b02a:	d84c      	bhi.n	800b0c6 <_svfwprintf_r+0x166>
 800b02c:	2b1f      	cmp	r3, #31
 800b02e:	d94f      	bls.n	800b0d0 <_svfwprintf_r+0x170>
 800b030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b032:	3b20      	subs	r3, #32
 800b034:	2b19      	cmp	r3, #25
 800b036:	d84a      	bhi.n	800b0ce <_svfwprintf_r+0x16e>
 800b038:	e8df f003 	tbb	[pc, r3]
 800b03c:	7049496b 	.word	0x7049496b
 800b040:	49494949 	.word	0x49494949
 800b044:	6c734949 	.word	0x6c734949
 800b048:	497d7a49 	.word	0x497d7a49
 800b04c:	9b9b9b98 	.word	0x9b9b9b98
 800b050:	9b9b9b9b 	.word	0x9b9b9b9b
 800b054:	9b9b      	.short	0x9b9b
 800b056:	2b33      	cmp	r3, #51	; 0x33
 800b058:	d839      	bhi.n	800b0ce <_svfwprintf_r+0x16e>
 800b05a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b05e:	00e5      	.short	0x00e5
 800b060:	00e50038 	.word	0x00e50038
 800b064:	00380038 	.word	0x00380038
 800b068:	00380038 	.word	0x00380038
 800b06c:	0038009c 	.word	0x0038009c
 800b070:	00380038 	.word	0x00380038
 800b074:	00380038 	.word	0x00380038
 800b078:	00380038 	.word	0x00380038
 800b07c:	00380038 	.word	0x00380038
 800b080:	00380038 	.word	0x00380038
 800b084:	0038031e 	.word	0x0038031e
 800b088:	00380038 	.word	0x00380038
 800b08c:	00380038 	.word	0x00380038
 800b090:	00380038 	.word	0x00380038
 800b094:	00380038 	.word	0x00380038
 800b098:	00a50038 	.word	0x00a50038
 800b09c:	00e500d3 	.word	0x00e500d3
 800b0a0:	00e500e5 	.word	0x00e500e5
 800b0a4:	00d3009f 	.word	0x00d3009f
 800b0a8:	00380038 	.word	0x00380038
 800b0ac:	003800a2 	.word	0x003800a2
 800b0b0:	02950284 	.word	0x02950284
 800b0b4:	00a202b3 	.word	0x00a202b3
 800b0b8:	02c20038 	.word	0x02c20038
 800b0bc:	03120038 	.word	0x03120038
 800b0c0:	00380038 	.word	0x00380038
 800b0c4:	0042      	.short	0x0042
 800b0c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0c8:	3b45      	subs	r3, #69	; 0x45
 800b0ca:	2b33      	cmp	r3, #51	; 0x33
 800b0cc:	d9c3      	bls.n	800b056 <_svfwprintf_r+0xf6>
 800b0ce:	b111      	cbz	r1, 800b0d6 <_svfwprintf_r+0x176>
 800b0d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d07a      	beq.n	800b1cc <_svfwprintf_r+0x26c>
 800b0d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0d8:	932a      	str	r3, [sp, #168]	; 0xa8
 800b0da:	2000      	movs	r0, #0
 800b0dc:	9015      	str	r0, [sp, #84]	; 0x54
 800b0de:	950a      	str	r5, [sp, #40]	; 0x28
 800b0e0:	e081      	b.n	800b1e6 <_svfwprintf_r+0x286>
 800b0e2:	b101      	cbz	r1, 800b0e6 <_svfwprintf_r+0x186>
 800b0e4:	9615      	str	r6, [sp, #84]	; 0x54
 800b0e6:	4b46      	ldr	r3, [pc, #280]	; (800b200 <_svfwprintf_r+0x2a0>)
 800b0e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0ea:	462a      	mov	r2, r5
 800b0ec:	06f8      	lsls	r0, r7, #27
 800b0ee:	f852 3b04 	ldr.w	r3, [r2], #4
 800b0f2:	920a      	str	r2, [sp, #40]	; 0x28
 800b0f4:	d402      	bmi.n	800b0fc <_svfwprintf_r+0x19c>
 800b0f6:	0679      	lsls	r1, r7, #25
 800b0f8:	bf48      	it	mi
 800b0fa:	b29b      	uxthmi	r3, r3
 800b0fc:	07fa      	lsls	r2, r7, #31
 800b0fe:	d506      	bpl.n	800b10e <_svfwprintf_r+0x1ae>
 800b100:	b12b      	cbz	r3, 800b10e <_svfwprintf_r+0x1ae>
 800b102:	2230      	movs	r2, #48	; 0x30
 800b104:	921a      	str	r2, [sp, #104]	; 0x68
 800b106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b108:	921b      	str	r2, [sp, #108]	; 0x6c
 800b10a:	f047 0702 	orr.w	r7, r7, #2
 800b10e:	2202      	movs	r2, #2
 800b110:	e242      	b.n	800b598 <_svfwprintf_r+0x638>
 800b112:	b90e      	cbnz	r6, 800b118 <_svfwprintf_r+0x1b8>
 800b114:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b116:	2101      	movs	r1, #1
 800b118:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b11a:	e77f      	b.n	800b01c <_svfwprintf_r+0xbc>
 800b11c:	f047 0701 	orr.w	r7, r7, #1
 800b120:	e7fa      	b.n	800b118 <_svfwprintf_r+0x1b8>
 800b122:	f855 3b04 	ldr.w	r3, [r5], #4
 800b126:	930c      	str	r3, [sp, #48]	; 0x30
 800b128:	2b00      	cmp	r3, #0
 800b12a:	daf5      	bge.n	800b118 <_svfwprintf_r+0x1b8>
 800b12c:	425b      	negs	r3, r3
 800b12e:	930c      	str	r3, [sp, #48]	; 0x30
 800b130:	f047 0704 	orr.w	r7, r7, #4
 800b134:	e7f0      	b.n	800b118 <_svfwprintf_r+0x1b8>
 800b136:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b138:	f852 3b04 	ldr.w	r3, [r2], #4
 800b13c:	9309      	str	r3, [sp, #36]	; 0x24
 800b13e:	2b2a      	cmp	r3, #42	; 0x2a
 800b140:	d112      	bne.n	800b168 <_svfwprintf_r+0x208>
 800b142:	f855 4b04 	ldr.w	r4, [r5], #4
 800b146:	920b      	str	r2, [sp, #44]	; 0x2c
 800b148:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800b14c:	e7e4      	b.n	800b118 <_svfwprintf_r+0x1b8>
 800b14e:	fb00 3404 	mla	r4, r0, r4, r3
 800b152:	f852 3b04 	ldr.w	r3, [r2], #4
 800b156:	9309      	str	r3, [sp, #36]	; 0x24
 800b158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b15a:	3b30      	subs	r3, #48	; 0x30
 800b15c:	2b09      	cmp	r3, #9
 800b15e:	d9f6      	bls.n	800b14e <_svfwprintf_r+0x1ee>
 800b160:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800b164:	920b      	str	r2, [sp, #44]	; 0x2c
 800b166:	e75e      	b.n	800b026 <_svfwprintf_r+0xc6>
 800b168:	2400      	movs	r4, #0
 800b16a:	e7f5      	b.n	800b158 <_svfwprintf_r+0x1f8>
 800b16c:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 800b170:	e7d2      	b.n	800b118 <_svfwprintf_r+0x1b8>
 800b172:	2300      	movs	r3, #0
 800b174:	930c      	str	r3, [sp, #48]	; 0x30
 800b176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b17a:	fb00 3302 	mla	r3, r0, r2, r3
 800b17e:	3b30      	subs	r3, #48	; 0x30
 800b180:	930c      	str	r3, [sp, #48]	; 0x30
 800b182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b184:	f853 2b04 	ldr.w	r2, [r3], #4
 800b188:	930b      	str	r3, [sp, #44]	; 0x2c
 800b18a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b18e:	2b09      	cmp	r3, #9
 800b190:	9209      	str	r2, [sp, #36]	; 0x24
 800b192:	d9f0      	bls.n	800b176 <_svfwprintf_r+0x216>
 800b194:	e747      	b.n	800b026 <_svfwprintf_r+0xc6>
 800b196:	f047 0708 	orr.w	r7, r7, #8
 800b19a:	e7bd      	b.n	800b118 <_svfwprintf_r+0x1b8>
 800b19c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 800b1a0:	e7ba      	b.n	800b118 <_svfwprintf_r+0x1b8>
 800b1a2:	f047 0710 	orr.w	r7, r7, #16
 800b1a6:	e7b7      	b.n	800b118 <_svfwprintf_r+0x1b8>
 800b1a8:	b101      	cbz	r1, 800b1ac <_svfwprintf_r+0x24c>
 800b1aa:	9615      	str	r6, [sp, #84]	; 0x54
 800b1ac:	462b      	mov	r3, r5
 800b1ae:	06fd      	lsls	r5, r7, #27
 800b1b0:	f853 0b04 	ldr.w	r0, [r3], #4
 800b1b4:	930a      	str	r3, [sp, #40]	; 0x28
 800b1b6:	d412      	bmi.n	800b1de <_svfwprintf_r+0x27e>
 800b1b8:	f000 fc82 	bl	800bac0 <btowc>
 800b1bc:	1c44      	adds	r4, r0, #1
 800b1be:	d10e      	bne.n	800b1de <_svfwprintf_r+0x27e>
 800b1c0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800b1c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1c8:	f8a9 300c 	strh.w	r3, [r9, #12]
 800b1cc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800b1d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b1d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1d6:	bf18      	it	ne
 800b1d8:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800b1dc:	e6e5      	b.n	800afaa <_svfwprintf_r+0x4a>
 800b1de:	902a      	str	r0, [sp, #168]	; 0xa8
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	902b      	str	r0, [sp, #172]	; 0xac
 800b1e4:	9015      	str	r0, [sp, #84]	; 0x54
 800b1e6:	4680      	mov	r8, r0
 800b1e8:	2401      	movs	r4, #1
 800b1ea:	4606      	mov	r6, r0
 800b1ec:	4605      	mov	r5, r0
 800b1ee:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800b1f2:	e104      	b.n	800b3fe <_svfwprintf_r+0x49e>
 800b1f4:	f3af 8000 	nop.w
	...
 800b200:	08039544 	.word	0x08039544
 800b204:	b101      	cbz	r1, 800b208 <_svfwprintf_r+0x2a8>
 800b206:	9615      	str	r6, [sp, #84]	; 0x54
 800b208:	462a      	mov	r2, r5
 800b20a:	06f9      	lsls	r1, r7, #27
 800b20c:	f852 3b04 	ldr.w	r3, [r2], #4
 800b210:	920a      	str	r2, [sp, #40]	; 0x28
 800b212:	d402      	bmi.n	800b21a <_svfwprintf_r+0x2ba>
 800b214:	067a      	lsls	r2, r7, #25
 800b216:	bf48      	it	mi
 800b218:	b21b      	sxthmi	r3, r3
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	da02      	bge.n	800b224 <_svfwprintf_r+0x2c4>
 800b21e:	222d      	movs	r2, #45	; 0x2d
 800b220:	425b      	negs	r3, r3
 800b222:	9215      	str	r2, [sp, #84]	; 0x54
 800b224:	2201      	movs	r2, #1
 800b226:	e1b9      	b.n	800b59c <_svfwprintf_r+0x63c>
 800b228:	b101      	cbz	r1, 800b22c <_svfwprintf_r+0x2cc>
 800b22a:	9615      	str	r6, [sp, #84]	; 0x54
 800b22c:	3507      	adds	r5, #7
 800b22e:	f025 0307 	bic.w	r3, r5, #7
 800b232:	ecb3 7b02 	vldmia	r3!, {d7}
 800b236:	930a      	str	r3, [sp, #40]	; 0x28
 800b238:	eeb0 8a47 	vmov.f32	s16, s14
 800b23c:	eef0 8a67 	vmov.f32	s17, s15
 800b240:	ee18 3a90 	vmov	r3, s17
 800b244:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b248:	ee09 3a90 	vmov	s19, r3
 800b24c:	eeb0 9a47 	vmov.f32	s18, s14
 800b250:	4ba6      	ldr	r3, [pc, #664]	; (800b4ec <_svfwprintf_r+0x58c>)
 800b252:	ec51 0b19 	vmov	r0, r1, d9
 800b256:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b25a:	f7f5 fc67 	bl	8000b2c <__aeabi_dcmpun>
 800b25e:	b9f0      	cbnz	r0, 800b29e <_svfwprintf_r+0x33e>
 800b260:	4ba2      	ldr	r3, [pc, #648]	; (800b4ec <_svfwprintf_r+0x58c>)
 800b262:	ec51 0b19 	vmov	r0, r1, d9
 800b266:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b26a:	f7f5 fc41 	bl	8000af0 <__aeabi_dcmple>
 800b26e:	b9b0      	cbnz	r0, 800b29e <_svfwprintf_r+0x33e>
 800b270:	ec51 0b18 	vmov	r0, r1, d8
 800b274:	2200      	movs	r2, #0
 800b276:	2300      	movs	r3, #0
 800b278:	f7f5 fc30 	bl	8000adc <__aeabi_dcmplt>
 800b27c:	b108      	cbz	r0, 800b282 <_svfwprintf_r+0x322>
 800b27e:	232d      	movs	r3, #45	; 0x2d
 800b280:	9315      	str	r3, [sp, #84]	; 0x54
 800b282:	4b9b      	ldr	r3, [pc, #620]	; (800b4f0 <_svfwprintf_r+0x590>)
 800b284:	489b      	ldr	r0, [pc, #620]	; (800b4f4 <_svfwprintf_r+0x594>)
 800b286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b288:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 800b28c:	2a47      	cmp	r2, #71	; 0x47
 800b28e:	bf94      	ite	ls
 800b290:	469a      	movls	sl, r3
 800b292:	4682      	movhi	sl, r0
 800b294:	f04f 0800 	mov.w	r8, #0
 800b298:	2403      	movs	r4, #3
 800b29a:	4646      	mov	r6, r8
 800b29c:	e3d4      	b.n	800ba48 <_svfwprintf_r+0xae8>
 800b29e:	ec53 2b18 	vmov	r2, r3, d8
 800b2a2:	ec51 0b18 	vmov	r0, r1, d8
 800b2a6:	f7f5 fc41 	bl	8000b2c <__aeabi_dcmpun>
 800b2aa:	b140      	cbz	r0, 800b2be <_svfwprintf_r+0x35e>
 800b2ac:	ee18 3a90 	vmov	r3, s17
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	bfbc      	itt	lt
 800b2b4:	232d      	movlt	r3, #45	; 0x2d
 800b2b6:	9315      	strlt	r3, [sp, #84]	; 0x54
 800b2b8:	488f      	ldr	r0, [pc, #572]	; (800b4f8 <_svfwprintf_r+0x598>)
 800b2ba:	4b90      	ldr	r3, [pc, #576]	; (800b4fc <_svfwprintf_r+0x59c>)
 800b2bc:	e7e3      	b.n	800b286 <_svfwprintf_r+0x326>
 800b2be:	1c63      	adds	r3, r4, #1
 800b2c0:	f000 810f 	beq.w	800b4e2 <_svfwprintf_r+0x582>
 800b2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c6:	f023 0320 	bic.w	r3, r3, #32
 800b2ca:	2b47      	cmp	r3, #71	; 0x47
 800b2cc:	d102      	bne.n	800b2d4 <_svfwprintf_r+0x374>
 800b2ce:	2c00      	cmp	r4, #0
 800b2d0:	bf08      	it	eq
 800b2d2:	2401      	moveq	r4, #1
 800b2d4:	f447 7380 	orr.w	r3, r7, #256	; 0x100
 800b2d8:	930e      	str	r3, [sp, #56]	; 0x38
 800b2da:	2328      	movs	r3, #40	; 0x28
 800b2dc:	9307      	str	r3, [sp, #28]
 800b2de:	ab19      	add	r3, sp, #100	; 0x64
 800b2e0:	9305      	str	r3, [sp, #20]
 800b2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e4:	9304      	str	r3, [sp, #16]
 800b2e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2e8:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800b2ec:	ae18      	add	r6, sp, #96	; 0x60
 800b2ee:	ad17      	add	r5, sp, #92	; 0x5c
 800b2f0:	e9cd 4300 	strd	r4, r3, [sp]
 800b2f4:	f8cd 8018 	str.w	r8, [sp, #24]
 800b2f8:	ec53 2b18 	vmov	r2, r3, d8
 800b2fc:	9603      	str	r6, [sp, #12]
 800b2fe:	9502      	str	r5, [sp, #8]
 800b300:	4658      	mov	r0, fp
 800b302:	f7ff fdbd 	bl	800ae80 <wcvt>
 800b306:	4540      	cmp	r0, r8
 800b308:	4682      	mov	sl, r0
 800b30a:	f040 80ec 	bne.w	800b4e6 <_svfwprintf_r+0x586>
 800b30e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b310:	2928      	cmp	r1, #40	; 0x28
 800b312:	f340 80e8 	ble.w	800b4e6 <_svfwprintf_r+0x586>
 800b316:	0089      	lsls	r1, r1, #2
 800b318:	4658      	mov	r0, fp
 800b31a:	f7fd fb0d 	bl	8008938 <_malloc_r>
 800b31e:	4680      	mov	r8, r0
 800b320:	2800      	cmp	r0, #0
 800b322:	f43f af4d 	beq.w	800b1c0 <_svfwprintf_r+0x260>
 800b326:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b328:	9502      	str	r5, [sp, #8]
 800b32a:	e9cd 0306 	strd	r0, r3, [sp, #24]
 800b32e:	ab19      	add	r3, sp, #100	; 0x64
 800b330:	9305      	str	r3, [sp, #20]
 800b332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b334:	e9cd 6303 	strd	r6, r3, [sp, #12]
 800b338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b33a:	4658      	mov	r0, fp
 800b33c:	e9cd 4300 	strd	r4, r3, [sp]
 800b340:	ec53 2b18 	vmov	r2, r3, d8
 800b344:	f7ff fd9c 	bl	800ae80 <wcvt>
 800b348:	4682      	mov	sl, r0
 800b34a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b34c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800b34e:	f023 0320 	bic.w	r3, r3, #32
 800b352:	2b47      	cmp	r3, #71	; 0x47
 800b354:	f040 80d6 	bne.w	800b504 <_svfwprintf_r+0x5a4>
 800b358:	1cee      	adds	r6, r5, #3
 800b35a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b35c:	db02      	blt.n	800b364 <_svfwprintf_r+0x404>
 800b35e:	42ac      	cmp	r4, r5
 800b360:	f280 80ec 	bge.w	800b53c <_svfwprintf_r+0x5dc>
 800b364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b366:	3b02      	subs	r3, #2
 800b368:	9309      	str	r3, [sp, #36]	; 0x24
 800b36a:	1e6b      	subs	r3, r5, #1
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b370:	9318      	str	r3, [sp, #96]	; 0x60
 800b372:	bfb8      	it	lt
 800b374:	f1c5 0301 	rsblt	r3, r5, #1
 800b378:	921c      	str	r2, [sp, #112]	; 0x70
 800b37a:	bfb4      	ite	lt
 800b37c:	222d      	movlt	r2, #45	; 0x2d
 800b37e:	222b      	movge	r2, #43	; 0x2b
 800b380:	2b09      	cmp	r3, #9
 800b382:	921d      	str	r2, [sp, #116]	; 0x74
 800b384:	f340 80d1 	ble.w	800b52a <_svfwprintf_r+0x5ca>
 800b388:	a82a      	add	r0, sp, #168	; 0xa8
 800b38a:	250a      	movs	r5, #10
 800b38c:	4602      	mov	r2, r0
 800b38e:	fb93 f4f5 	sdiv	r4, r3, r5
 800b392:	fb05 3114 	mls	r1, r5, r4, r3
 800b396:	3130      	adds	r1, #48	; 0x30
 800b398:	f842 1c04 	str.w	r1, [r2, #-4]
 800b39c:	4619      	mov	r1, r3
 800b39e:	2963      	cmp	r1, #99	; 0x63
 800b3a0:	f1a0 0004 	sub.w	r0, r0, #4
 800b3a4:	4623      	mov	r3, r4
 800b3a6:	dcf1      	bgt.n	800b38c <_svfwprintf_r+0x42c>
 800b3a8:	3330      	adds	r3, #48	; 0x30
 800b3aa:	f840 3c04 	str.w	r3, [r0, #-4]
 800b3ae:	f1a2 0108 	sub.w	r1, r2, #8
 800b3b2:	a81e      	add	r0, sp, #120	; 0x78
 800b3b4:	ab2a      	add	r3, sp, #168	; 0xa8
 800b3b6:	4299      	cmp	r1, r3
 800b3b8:	f0c0 80b2 	bcc.w	800b520 <_svfwprintf_r+0x5c0>
 800b3bc:	f10d 04b3 	add.w	r4, sp, #179	; 0xb3
 800b3c0:	1aa4      	subs	r4, r4, r2
 800b3c2:	f024 0403 	bic.w	r4, r4, #3
 800b3c6:	3a0b      	subs	r2, #11
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	bf38      	it	cc
 800b3cc:	2400      	movcc	r4, #0
 800b3ce:	ab1e      	add	r3, sp, #120	; 0x78
 800b3d0:	441c      	add	r4, r3
 800b3d2:	a81c      	add	r0, sp, #112	; 0x70
 800b3d4:	1a24      	subs	r4, r4, r0
 800b3d6:	10a3      	asrs	r3, r4, #2
 800b3d8:	9311      	str	r3, [sp, #68]	; 0x44
 800b3da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	eb03 04a4 	add.w	r4, r3, r4, asr #2
 800b3e2:	dc02      	bgt.n	800b3ea <_svfwprintf_r+0x48a>
 800b3e4:	f017 0501 	ands.w	r5, r7, #1
 800b3e8:	d001      	beq.n	800b3ee <_svfwprintf_r+0x48e>
 800b3ea:	3401      	adds	r4, #1
 800b3ec:	2500      	movs	r5, #0
 800b3ee:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b3f0:	2e00      	cmp	r6, #0
 800b3f2:	f000 817e 	beq.w	800b6f2 <_svfwprintf_r+0x792>
 800b3f6:	232d      	movs	r3, #45	; 0x2d
 800b3f8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800b3fa:	9315      	str	r3, [sp, #84]	; 0x54
 800b3fc:	2600      	movs	r6, #0
 800b3fe:	42a6      	cmp	r6, r4
 800b400:	4633      	mov	r3, r6
 800b402:	bfb8      	it	lt
 800b404:	4623      	movlt	r3, r4
 800b406:	930e      	str	r3, [sp, #56]	; 0x38
 800b408:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b40a:	b113      	cbz	r3, 800b412 <_svfwprintf_r+0x4b2>
 800b40c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b40e:	3301      	adds	r3, #1
 800b410:	930e      	str	r3, [sp, #56]	; 0x38
 800b412:	f017 0302 	ands.w	r3, r7, #2
 800b416:	9312      	str	r3, [sp, #72]	; 0x48
 800b418:	bf1e      	ittt	ne
 800b41a:	9b0e      	ldrne	r3, [sp, #56]	; 0x38
 800b41c:	3302      	addne	r3, #2
 800b41e:	930e      	strne	r3, [sp, #56]	; 0x38
 800b420:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 800b424:	9313      	str	r3, [sp, #76]	; 0x4c
 800b426:	f000 8166 	beq.w	800b6f6 <_svfwprintf_r+0x796>
 800b42a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b42c:	b143      	cbz	r3, 800b440 <_svfwprintf_r+0x4e0>
 800b42e:	2304      	movs	r3, #4
 800b430:	aa15      	add	r2, sp, #84	; 0x54
 800b432:	4649      	mov	r1, r9
 800b434:	4658      	mov	r0, fp
 800b436:	f000 fbfa 	bl	800bc2e <__ssputs_r>
 800b43a:	3001      	adds	r0, #1
 800b43c:	f000 816e 	beq.w	800b71c <_svfwprintf_r+0x7bc>
 800b440:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b442:	b143      	cbz	r3, 800b456 <_svfwprintf_r+0x4f6>
 800b444:	2308      	movs	r3, #8
 800b446:	aa1a      	add	r2, sp, #104	; 0x68
 800b448:	4649      	mov	r1, r9
 800b44a:	4658      	mov	r0, fp
 800b44c:	f000 fbef 	bl	800bc2e <__ssputs_r>
 800b450:	3001      	adds	r0, #1
 800b452:	f000 8163 	beq.w	800b71c <_svfwprintf_r+0x7bc>
 800b456:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b458:	2b80      	cmp	r3, #128	; 0x80
 800b45a:	d113      	bne.n	800b484 <_svfwprintf_r+0x524>
 800b45c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b45e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b460:	1a9b      	subs	r3, r3, r2
 800b462:	2b00      	cmp	r3, #0
 800b464:	9310      	str	r3, [sp, #64]	; 0x40
 800b466:	dd0d      	ble.n	800b484 <_svfwprintf_r+0x524>
 800b468:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b46a:	4a25      	ldr	r2, [pc, #148]	; (800b500 <_svfwprintf_r+0x5a0>)
 800b46c:	2b10      	cmp	r3, #16
 800b46e:	f300 816a 	bgt.w	800b746 <_svfwprintf_r+0x7e6>
 800b472:	4a23      	ldr	r2, [pc, #140]	; (800b500 <_svfwprintf_r+0x5a0>)
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	4649      	mov	r1, r9
 800b478:	4658      	mov	r0, fp
 800b47a:	f000 fbd8 	bl	800bc2e <__ssputs_r>
 800b47e:	3001      	adds	r0, #1
 800b480:	f000 814c 	beq.w	800b71c <_svfwprintf_r+0x7bc>
 800b484:	1b36      	subs	r6, r6, r4
 800b486:	2e00      	cmp	r6, #0
 800b488:	dd0c      	ble.n	800b4a4 <_svfwprintf_r+0x544>
 800b48a:	2e10      	cmp	r6, #16
 800b48c:	4a1c      	ldr	r2, [pc, #112]	; (800b500 <_svfwprintf_r+0x5a0>)
 800b48e:	f300 8165 	bgt.w	800b75c <_svfwprintf_r+0x7fc>
 800b492:	4a1b      	ldr	r2, [pc, #108]	; (800b500 <_svfwprintf_r+0x5a0>)
 800b494:	00b3      	lsls	r3, r6, #2
 800b496:	4649      	mov	r1, r9
 800b498:	4658      	mov	r0, fp
 800b49a:	f000 fbc8 	bl	800bc2e <__ssputs_r>
 800b49e:	3001      	adds	r0, #1
 800b4a0:	f000 813c 	beq.w	800b71c <_svfwprintf_r+0x7bc>
 800b4a4:	05f9      	lsls	r1, r7, #23
 800b4a6:	f100 8162 	bmi.w	800b76e <_svfwprintf_r+0x80e>
 800b4aa:	00a3      	lsls	r3, r4, #2
 800b4ac:	4652      	mov	r2, sl
 800b4ae:	4649      	mov	r1, r9
 800b4b0:	4658      	mov	r0, fp
 800b4b2:	f000 fbbc 	bl	800bc2e <__ssputs_r>
 800b4b6:	3001      	adds	r0, #1
 800b4b8:	f000 8130 	beq.w	800b71c <_svfwprintf_r+0x7bc>
 800b4bc:	077a      	lsls	r2, r7, #29
 800b4be:	f100 8281 	bmi.w	800b9c4 <_svfwprintf_r+0xa64>
 800b4c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b4c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b4c8:	428a      	cmp	r2, r1
 800b4ca:	bfac      	ite	ge
 800b4cc:	189b      	addge	r3, r3, r2
 800b4ce:	185b      	addlt	r3, r3, r1
 800b4d0:	930d      	str	r3, [sp, #52]	; 0x34
 800b4d2:	f1b8 0f00 	cmp.w	r8, #0
 800b4d6:	d055      	beq.n	800b584 <_svfwprintf_r+0x624>
 800b4d8:	4641      	mov	r1, r8
 800b4da:	4658      	mov	r0, fp
 800b4dc:	f7fd f9c0 	bl	8008860 <_free_r>
 800b4e0:	e050      	b.n	800b584 <_svfwprintf_r+0x624>
 800b4e2:	2406      	movs	r4, #6
 800b4e4:	e6f6      	b.n	800b2d4 <_svfwprintf_r+0x374>
 800b4e6:	f04f 0800 	mov.w	r8, #0
 800b4ea:	e72e      	b.n	800b34a <_svfwprintf_r+0x3ea>
 800b4ec:	7fefffff 	.word	0x7fefffff
 800b4f0:	080394c0 	.word	0x080394c0
 800b4f4:	080394d0 	.word	0x080394d0
 800b4f8:	080394f0 	.word	0x080394f0
 800b4fc:	080394e0 	.word	0x080394e0
 800b500:	080395d0 	.word	0x080395d0
 800b504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b506:	2b66      	cmp	r3, #102	; 0x66
 800b508:	f47f af2f 	bne.w	800b36a <_svfwprintf_r+0x40a>
 800b50c:	f007 0301 	and.w	r3, r7, #1
 800b510:	2d00      	cmp	r5, #0
 800b512:	ea43 0304 	orr.w	r3, r3, r4
 800b516:	dd0e      	ble.n	800b536 <_svfwprintf_r+0x5d6>
 800b518:	b1fb      	cbz	r3, 800b55a <_svfwprintf_r+0x5fa>
 800b51a:	3401      	adds	r4, #1
 800b51c:	442c      	add	r4, r5
 800b51e:	e766      	b.n	800b3ee <_svfwprintf_r+0x48e>
 800b520:	f851 4b04 	ldr.w	r4, [r1], #4
 800b524:	f840 4b04 	str.w	r4, [r0], #4
 800b528:	e745      	b.n	800b3b6 <_svfwprintf_r+0x456>
 800b52a:	2230      	movs	r2, #48	; 0x30
 800b52c:	4413      	add	r3, r2
 800b52e:	921e      	str	r2, [sp, #120]	; 0x78
 800b530:	931f      	str	r3, [sp, #124]	; 0x7c
 800b532:	ac20      	add	r4, sp, #128	; 0x80
 800b534:	e74d      	b.n	800b3d2 <_svfwprintf_r+0x472>
 800b536:	b193      	cbz	r3, 800b55e <_svfwprintf_r+0x5fe>
 800b538:	3402      	adds	r4, #2
 800b53a:	e758      	b.n	800b3ee <_svfwprintf_r+0x48e>
 800b53c:	42ab      	cmp	r3, r5
 800b53e:	dc05      	bgt.n	800b54c <_svfwprintf_r+0x5ec>
 800b540:	07fc      	lsls	r4, r7, #31
 800b542:	d50e      	bpl.n	800b562 <_svfwprintf_r+0x602>
 800b544:	1c6c      	adds	r4, r5, #1
 800b546:	2367      	movs	r3, #103	; 0x67
 800b548:	9309      	str	r3, [sp, #36]	; 0x24
 800b54a:	e750      	b.n	800b3ee <_svfwprintf_r+0x48e>
 800b54c:	2d00      	cmp	r5, #0
 800b54e:	bfd4      	ite	le
 800b550:	f1c5 0402 	rsble	r4, r5, #2
 800b554:	2401      	movgt	r4, #1
 800b556:	441c      	add	r4, r3
 800b558:	e7f5      	b.n	800b546 <_svfwprintf_r+0x5e6>
 800b55a:	462c      	mov	r4, r5
 800b55c:	e747      	b.n	800b3ee <_svfwprintf_r+0x48e>
 800b55e:	2401      	movs	r4, #1
 800b560:	e745      	b.n	800b3ee <_svfwprintf_r+0x48e>
 800b562:	462c      	mov	r4, r5
 800b564:	e7ef      	b.n	800b546 <_svfwprintf_r+0x5e6>
 800b566:	b101      	cbz	r1, 800b56a <_svfwprintf_r+0x60a>
 800b568:	9615      	str	r6, [sp, #84]	; 0x54
 800b56a:	1d2b      	adds	r3, r5, #4
 800b56c:	06f8      	lsls	r0, r7, #27
 800b56e:	930a      	str	r3, [sp, #40]	; 0x28
 800b570:	d503      	bpl.n	800b57a <_svfwprintf_r+0x61a>
 800b572:	682b      	ldr	r3, [r5, #0]
 800b574:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b576:	601a      	str	r2, [r3, #0]
 800b578:	e004      	b.n	800b584 <_svfwprintf_r+0x624>
 800b57a:	0679      	lsls	r1, r7, #25
 800b57c:	d5f9      	bpl.n	800b572 <_svfwprintf_r+0x612>
 800b57e:	682b      	ldr	r3, [r5, #0]
 800b580:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b582:	801a      	strh	r2, [r3, #0]
 800b584:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b586:	e524      	b.n	800afd2 <_svfwprintf_r+0x72>
 800b588:	462a      	mov	r2, r5
 800b58a:	f017 0110 	ands.w	r1, r7, #16
 800b58e:	f852 3b04 	ldr.w	r3, [r2], #4
 800b592:	920a      	str	r2, [sp, #40]	; 0x28
 800b594:	d011      	beq.n	800b5ba <_svfwprintf_r+0x65a>
 800b596:	2200      	movs	r2, #0
 800b598:	2100      	movs	r1, #0
 800b59a:	9115      	str	r1, [sp, #84]	; 0x54
 800b59c:	1c66      	adds	r6, r4, #1
 800b59e:	f000 822e 	beq.w	800b9fe <_svfwprintf_r+0xa9e>
 800b5a2:	f027 0180 	bic.w	r1, r7, #128	; 0x80
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f040 822d 	bne.w	800ba06 <_svfwprintf_r+0xaa6>
 800b5ac:	2c00      	cmp	r4, #0
 800b5ae:	f000 8098 	beq.w	800b6e2 <_svfwprintf_r+0x782>
 800b5b2:	2a01      	cmp	r2, #1
 800b5b4:	f040 822a 	bne.w	800ba0c <_svfwprintf_r+0xaac>
 800b5b8:	e075      	b.n	800b6a6 <_svfwprintf_r+0x746>
 800b5ba:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 800b5be:	d0eb      	beq.n	800b598 <_svfwprintf_r+0x638>
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	e7e8      	b.n	800b596 <_svfwprintf_r+0x636>
 800b5c4:	462a      	mov	r2, r5
 800b5c6:	2178      	movs	r1, #120	; 0x78
 800b5c8:	f852 3b04 	ldr.w	r3, [r2], #4
 800b5cc:	920a      	str	r2, [sp, #40]	; 0x28
 800b5ce:	2230      	movs	r2, #48	; 0x30
 800b5d0:	e9cd 211a 	strd	r2, r1, [sp, #104]	; 0x68
 800b5d4:	4a9e      	ldr	r2, [pc, #632]	; (800b850 <_svfwprintf_r+0x8f0>)
 800b5d6:	920f      	str	r2, [sp, #60]	; 0x3c
 800b5d8:	f047 0702 	orr.w	r7, r7, #2
 800b5dc:	2202      	movs	r2, #2
 800b5de:	9109      	str	r1, [sp, #36]	; 0x24
 800b5e0:	e7da      	b.n	800b598 <_svfwprintf_r+0x638>
 800b5e2:	462b      	mov	r3, r5
 800b5e4:	2600      	movs	r6, #0
 800b5e6:	f853 ab04 	ldr.w	sl, [r3], #4
 800b5ea:	930a      	str	r3, [sp, #40]	; 0x28
 800b5ec:	f017 0510 	ands.w	r5, r7, #16
 800b5f0:	9615      	str	r6, [sp, #84]	; 0x54
 800b5f2:	d12d      	bne.n	800b650 <_svfwprintf_r+0x6f0>
 800b5f4:	1c62      	adds	r2, r4, #1
 800b5f6:	d014      	beq.n	800b622 <_svfwprintf_r+0x6c2>
 800b5f8:	4622      	mov	r2, r4
 800b5fa:	4629      	mov	r1, r5
 800b5fc:	4650      	mov	r0, sl
 800b5fe:	4626      	mov	r6, r4
 800b600:	f7f4 fdee 	bl	80001e0 <memchr>
 800b604:	b108      	cbz	r0, 800b60a <_svfwprintf_r+0x6aa>
 800b606:	eba0 060a 	sub.w	r6, r0, sl
 800b60a:	2e27      	cmp	r6, #39	; 0x27
 800b60c:	d90e      	bls.n	800b62c <_svfwprintf_r+0x6cc>
 800b60e:	1c71      	adds	r1, r6, #1
 800b610:	0089      	lsls	r1, r1, #2
 800b612:	4658      	mov	r0, fp
 800b614:	f7fd f990 	bl	8008938 <_malloc_r>
 800b618:	2800      	cmp	r0, #0
 800b61a:	f43f add1 	beq.w	800b1c0 <_svfwprintf_r+0x260>
 800b61e:	4680      	mov	r8, r0
 800b620:	e007      	b.n	800b632 <_svfwprintf_r+0x6d2>
 800b622:	4650      	mov	r0, sl
 800b624:	f7f4 fdd4 	bl	80001d0 <strlen>
 800b628:	4606      	mov	r6, r0
 800b62a:	e7ee      	b.n	800b60a <_svfwprintf_r+0x6aa>
 800b62c:	f04f 0800 	mov.w	r8, #0
 800b630:	a82a      	add	r0, sp, #168	; 0xa8
 800b632:	4634      	mov	r4, r6
 800b634:	2300      	movs	r3, #0
 800b636:	42b3      	cmp	r3, r6
 800b638:	d104      	bne.n	800b644 <_svfwprintf_r+0x6e4>
 800b63a:	2600      	movs	r6, #0
 800b63c:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800b640:	4682      	mov	sl, r0
 800b642:	e6dc      	b.n	800b3fe <_svfwprintf_r+0x49e>
 800b644:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800b648:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800b64c:	3301      	adds	r3, #1
 800b64e:	e7f2      	b.n	800b636 <_svfwprintf_r+0x6d6>
 800b650:	1c63      	adds	r3, r4, #1
 800b652:	d011      	beq.n	800b678 <_svfwprintf_r+0x718>
 800b654:	4622      	mov	r2, r4
 800b656:	4631      	mov	r1, r6
 800b658:	4650      	mov	r0, sl
 800b65a:	f000 fa04 	bl	800ba66 <wmemchr>
 800b65e:	4680      	mov	r8, r0
 800b660:	2800      	cmp	r0, #0
 800b662:	f43f ae1a 	beq.w	800b29a <_svfwprintf_r+0x33a>
 800b666:	eba0 080a 	sub.w	r8, r0, sl
 800b66a:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800b66e:	4544      	cmp	r4, r8
 800b670:	bfa8      	it	ge
 800b672:	4644      	movge	r4, r8
 800b674:	46b0      	mov	r8, r6
 800b676:	e610      	b.n	800b29a <_svfwprintf_r+0x33a>
 800b678:	4650      	mov	r0, sl
 800b67a:	f000 f9eb 	bl	800ba54 <wcslen>
 800b67e:	4604      	mov	r4, r0
 800b680:	e7f8      	b.n	800b674 <_svfwprintf_r+0x714>
 800b682:	462a      	mov	r2, r5
 800b684:	06fe      	lsls	r6, r7, #27
 800b686:	f852 3b04 	ldr.w	r3, [r2], #4
 800b68a:	920a      	str	r2, [sp, #40]	; 0x28
 800b68c:	d501      	bpl.n	800b692 <_svfwprintf_r+0x732>
 800b68e:	2201      	movs	r2, #1
 800b690:	e782      	b.n	800b598 <_svfwprintf_r+0x638>
 800b692:	067d      	lsls	r5, r7, #25
 800b694:	bf48      	it	mi
 800b696:	b29b      	uxthmi	r3, r3
 800b698:	e7f9      	b.n	800b68e <_svfwprintf_r+0x72e>
 800b69a:	b101      	cbz	r1, 800b69e <_svfwprintf_r+0x73e>
 800b69c:	9615      	str	r6, [sp, #84]	; 0x54
 800b69e:	4b6d      	ldr	r3, [pc, #436]	; (800b854 <_svfwprintf_r+0x8f4>)
 800b6a0:	e522      	b.n	800b0e8 <_svfwprintf_r+0x188>
 800b6a2:	2b09      	cmp	r3, #9
 800b6a4:	d804      	bhi.n	800b6b0 <_svfwprintf_r+0x750>
 800b6a6:	3330      	adds	r3, #48	; 0x30
 800b6a8:	9351      	str	r3, [sp, #324]	; 0x144
 800b6aa:	f50d 7aa2 	add.w	sl, sp, #324	; 0x144
 800b6ae:	e1c3      	b.n	800ba38 <_svfwprintf_r+0xad8>
 800b6b0:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800b6b4:	250a      	movs	r5, #10
 800b6b6:	fbb3 f0f5 	udiv	r0, r3, r5
 800b6ba:	fb05 3210 	mls	r2, r5, r0, r3
 800b6be:	3230      	adds	r2, #48	; 0x30
 800b6c0:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	2a09      	cmp	r2, #9
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	d8f4      	bhi.n	800b6b6 <_svfwprintf_r+0x756>
 800b6cc:	e1b4      	b.n	800ba38 <_svfwprintf_r+0xad8>
 800b6ce:	f003 020f 	and.w	r2, r3, #15
 800b6d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b6d4:	091b      	lsrs	r3, r3, #4
 800b6d6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800b6da:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800b6de:	d1f6      	bne.n	800b6ce <_svfwprintf_r+0x76e>
 800b6e0:	e1aa      	b.n	800ba38 <_svfwprintf_r+0xad8>
 800b6e2:	b91a      	cbnz	r2, 800b6ec <_svfwprintf_r+0x78c>
 800b6e4:	07f8      	lsls	r0, r7, #31
 800b6e6:	d501      	bpl.n	800b6ec <_svfwprintf_r+0x78c>
 800b6e8:	2330      	movs	r3, #48	; 0x30
 800b6ea:	e7dd      	b.n	800b6a8 <_svfwprintf_r+0x748>
 800b6ec:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800b6f0:	e1a2      	b.n	800ba38 <_svfwprintf_r+0xad8>
 800b6f2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800b6f4:	e683      	b.n	800b3fe <_svfwprintf_r+0x49e>
 800b6f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6fa:	1a9b      	subs	r3, r3, r2
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	9310      	str	r3, [sp, #64]	; 0x40
 800b700:	f77f ae93 	ble.w	800b42a <_svfwprintf_r+0x4ca>
 800b704:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b706:	2b10      	cmp	r3, #16
 800b708:	dc11      	bgt.n	800b72e <_svfwprintf_r+0x7ce>
 800b70a:	4a53      	ldr	r2, [pc, #332]	; (800b858 <_svfwprintf_r+0x8f8>)
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	4649      	mov	r1, r9
 800b710:	4658      	mov	r0, fp
 800b712:	f000 fa8c 	bl	800bc2e <__ssputs_r>
 800b716:	3001      	adds	r0, #1
 800b718:	f47f ae87 	bne.w	800b42a <_svfwprintf_r+0x4ca>
 800b71c:	f1b8 0f00 	cmp.w	r8, #0
 800b720:	f43f ad54 	beq.w	800b1cc <_svfwprintf_r+0x26c>
 800b724:	4641      	mov	r1, r8
 800b726:	4658      	mov	r0, fp
 800b728:	f7fd f89a 	bl	8008860 <_free_r>
 800b72c:	e54e      	b.n	800b1cc <_svfwprintf_r+0x26c>
 800b72e:	4a4a      	ldr	r2, [pc, #296]	; (800b858 <_svfwprintf_r+0x8f8>)
 800b730:	2340      	movs	r3, #64	; 0x40
 800b732:	4649      	mov	r1, r9
 800b734:	4658      	mov	r0, fp
 800b736:	f000 fa7a 	bl	800bc2e <__ssputs_r>
 800b73a:	3001      	adds	r0, #1
 800b73c:	d0ee      	beq.n	800b71c <_svfwprintf_r+0x7bc>
 800b73e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b740:	3b10      	subs	r3, #16
 800b742:	9310      	str	r3, [sp, #64]	; 0x40
 800b744:	e7de      	b.n	800b704 <_svfwprintf_r+0x7a4>
 800b746:	2340      	movs	r3, #64	; 0x40
 800b748:	4649      	mov	r1, r9
 800b74a:	4658      	mov	r0, fp
 800b74c:	f000 fa6f 	bl	800bc2e <__ssputs_r>
 800b750:	3001      	adds	r0, #1
 800b752:	d0e3      	beq.n	800b71c <_svfwprintf_r+0x7bc>
 800b754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b756:	3b10      	subs	r3, #16
 800b758:	9310      	str	r3, [sp, #64]	; 0x40
 800b75a:	e685      	b.n	800b468 <_svfwprintf_r+0x508>
 800b75c:	2340      	movs	r3, #64	; 0x40
 800b75e:	4649      	mov	r1, r9
 800b760:	4658      	mov	r0, fp
 800b762:	f000 fa64 	bl	800bc2e <__ssputs_r>
 800b766:	3001      	adds	r0, #1
 800b768:	d0d8      	beq.n	800b71c <_svfwprintf_r+0x7bc>
 800b76a:	3e10      	subs	r6, #16
 800b76c:	e68d      	b.n	800b48a <_svfwprintf_r+0x52a>
 800b76e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b770:	2b65      	cmp	r3, #101	; 0x65
 800b772:	f240 80e5 	bls.w	800b940 <_svfwprintf_r+0x9e0>
 800b776:	ec51 0b18 	vmov	r0, r1, d8
 800b77a:	2200      	movs	r2, #0
 800b77c:	2300      	movs	r3, #0
 800b77e:	f7f5 f9a3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b782:	b358      	cbz	r0, 800b7dc <_svfwprintf_r+0x87c>
 800b784:	4a35      	ldr	r2, [pc, #212]	; (800b85c <_svfwprintf_r+0x8fc>)
 800b786:	2304      	movs	r3, #4
 800b788:	4649      	mov	r1, r9
 800b78a:	4658      	mov	r0, fp
 800b78c:	f000 fa4f 	bl	800bc2e <__ssputs_r>
 800b790:	3001      	adds	r0, #1
 800b792:	d0c3      	beq.n	800b71c <_svfwprintf_r+0x7bc>
 800b794:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b798:	429a      	cmp	r2, r3
 800b79a:	db02      	blt.n	800b7a2 <_svfwprintf_r+0x842>
 800b79c:	07fb      	lsls	r3, r7, #31
 800b79e:	f57f ae8d 	bpl.w	800b4bc <_svfwprintf_r+0x55c>
 800b7a2:	2304      	movs	r3, #4
 800b7a4:	aa16      	add	r2, sp, #88	; 0x58
 800b7a6:	4649      	mov	r1, r9
 800b7a8:	4658      	mov	r0, fp
 800b7aa:	f000 fa40 	bl	800bc2e <__ssputs_r>
 800b7ae:	3001      	adds	r0, #1
 800b7b0:	d0b4      	beq.n	800b71c <_svfwprintf_r+0x7bc>
 800b7b2:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800b7b4:	3c01      	subs	r4, #1
 800b7b6:	2c00      	cmp	r4, #0
 800b7b8:	f77f ae80 	ble.w	800b4bc <_svfwprintf_r+0x55c>
 800b7bc:	4d28      	ldr	r5, [pc, #160]	; (800b860 <_svfwprintf_r+0x900>)
 800b7be:	2c10      	cmp	r4, #16
 800b7c0:	dc02      	bgt.n	800b7c8 <_svfwprintf_r+0x868>
 800b7c2:	00a3      	lsls	r3, r4, #2
 800b7c4:	4a26      	ldr	r2, [pc, #152]	; (800b860 <_svfwprintf_r+0x900>)
 800b7c6:	e672      	b.n	800b4ae <_svfwprintf_r+0x54e>
 800b7c8:	2340      	movs	r3, #64	; 0x40
 800b7ca:	462a      	mov	r2, r5
 800b7cc:	4649      	mov	r1, r9
 800b7ce:	4658      	mov	r0, fp
 800b7d0:	f000 fa2d 	bl	800bc2e <__ssputs_r>
 800b7d4:	3001      	adds	r0, #1
 800b7d6:	d0a1      	beq.n	800b71c <_svfwprintf_r+0x7bc>
 800b7d8:	3c10      	subs	r4, #16
 800b7da:	e7f0      	b.n	800b7be <_svfwprintf_r+0x85e>
 800b7dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	dc40      	bgt.n	800b864 <_svfwprintf_r+0x904>
 800b7e2:	4a1e      	ldr	r2, [pc, #120]	; (800b85c <_svfwprintf_r+0x8fc>)
 800b7e4:	2304      	movs	r3, #4
 800b7e6:	4649      	mov	r1, r9
 800b7e8:	4658      	mov	r0, fp
 800b7ea:	f000 fa20 	bl	800bc2e <__ssputs_r>
 800b7ee:	3001      	adds	r0, #1
 800b7f0:	d094      	beq.n	800b71c <_svfwprintf_r+0x7bc>
 800b7f2:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	f007 0201 	and.w	r2, r7, #1
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	f43f ae5d 	beq.w	800b4bc <_svfwprintf_r+0x55c>
 800b802:	2304      	movs	r3, #4
 800b804:	aa16      	add	r2, sp, #88	; 0x58
 800b806:	4649      	mov	r1, r9
 800b808:	4658      	mov	r0, fp
 800b80a:	f000 fa10 	bl	800bc2e <__ssputs_r>
 800b80e:	3001      	adds	r0, #1
 800b810:	d084      	beq.n	800b71c <_svfwprintf_r+0x7bc>
 800b812:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b814:	2c00      	cmp	r4, #0
 800b816:	da0c      	bge.n	800b832 <_svfwprintf_r+0x8d2>
 800b818:	4d11      	ldr	r5, [pc, #68]	; (800b860 <_svfwprintf_r+0x900>)
 800b81a:	4264      	negs	r4, r4
 800b81c:	2c10      	cmp	r4, #16
 800b81e:	dc0b      	bgt.n	800b838 <_svfwprintf_r+0x8d8>
 800b820:	4a0f      	ldr	r2, [pc, #60]	; (800b860 <_svfwprintf_r+0x900>)
 800b822:	00a3      	lsls	r3, r4, #2
 800b824:	4649      	mov	r1, r9
 800b826:	4658      	mov	r0, fp
 800b828:	f000 fa01 	bl	800bc2e <__ssputs_r>
 800b82c:	3001      	adds	r0, #1
 800b82e:	f43f af75 	beq.w	800b71c <_svfwprintf_r+0x7bc>
 800b832:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	e639      	b.n	800b4ac <_svfwprintf_r+0x54c>
 800b838:	2340      	movs	r3, #64	; 0x40
 800b83a:	462a      	mov	r2, r5
 800b83c:	4649      	mov	r1, r9
 800b83e:	4658      	mov	r0, fp
 800b840:	f000 f9f5 	bl	800bc2e <__ssputs_r>
 800b844:	3001      	adds	r0, #1
 800b846:	f43f af69 	beq.w	800b71c <_svfwprintf_r+0x7bc>
 800b84a:	3c10      	subs	r4, #16
 800b84c:	e7e6      	b.n	800b81c <_svfwprintf_r+0x8bc>
 800b84e:	bf00      	nop
 800b850:	08039544 	.word	0x08039544
 800b854:	08039500 	.word	0x08039500
 800b858:	08039590 	.word	0x08039590
 800b85c:	08039588 	.word	0x08039588
 800b860:	080395d0 	.word	0x080395d0
 800b864:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800b866:	f344 041d 	sbfx	r4, r4, #0, #30
 800b86a:	42ac      	cmp	r4, r5
 800b86c:	bfa8      	it	ge
 800b86e:	462c      	movge	r4, r5
 800b870:	2c00      	cmp	r4, #0
 800b872:	dc20      	bgt.n	800b8b6 <_svfwprintf_r+0x956>
 800b874:	2c00      	cmp	r4, #0
 800b876:	bfac      	ite	ge
 800b878:	1b2e      	subge	r6, r5, r4
 800b87a:	462e      	movlt	r6, r5
 800b87c:	2e00      	cmp	r6, #0
 800b87e:	dd0b      	ble.n	800b898 <_svfwprintf_r+0x938>
 800b880:	4c72      	ldr	r4, [pc, #456]	; (800ba4c <_svfwprintf_r+0xaec>)
 800b882:	2e10      	cmp	r6, #16
 800b884:	dc20      	bgt.n	800b8c8 <_svfwprintf_r+0x968>
 800b886:	4a71      	ldr	r2, [pc, #452]	; (800ba4c <_svfwprintf_r+0xaec>)
 800b888:	00b3      	lsls	r3, r6, #2
 800b88a:	4649      	mov	r1, r9
 800b88c:	4658      	mov	r0, fp
 800b88e:	f000 f9ce 	bl	800bc2e <__ssputs_r>
 800b892:	3001      	adds	r0, #1
 800b894:	f43f af42 	beq.w	800b71c <_svfwprintf_r+0x7bc>
 800b898:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b89c:	429a      	cmp	r2, r3
 800b89e:	ea4f 0585 	mov.w	r5, r5, lsl #2
 800b8a2:	da1c      	bge.n	800b8de <_svfwprintf_r+0x97e>
 800b8a4:	2304      	movs	r3, #4
 800b8a6:	aa16      	add	r2, sp, #88	; 0x58
 800b8a8:	4649      	mov	r1, r9
 800b8aa:	4658      	mov	r0, fp
 800b8ac:	f000 f9bf 	bl	800bc2e <__ssputs_r>
 800b8b0:	3001      	adds	r0, #1
 800b8b2:	d116      	bne.n	800b8e2 <_svfwprintf_r+0x982>
 800b8b4:	e732      	b.n	800b71c <_svfwprintf_r+0x7bc>
 800b8b6:	00a3      	lsls	r3, r4, #2
 800b8b8:	4652      	mov	r2, sl
 800b8ba:	4649      	mov	r1, r9
 800b8bc:	4658      	mov	r0, fp
 800b8be:	f000 f9b6 	bl	800bc2e <__ssputs_r>
 800b8c2:	3001      	adds	r0, #1
 800b8c4:	d1d6      	bne.n	800b874 <_svfwprintf_r+0x914>
 800b8c6:	e729      	b.n	800b71c <_svfwprintf_r+0x7bc>
 800b8c8:	2340      	movs	r3, #64	; 0x40
 800b8ca:	4622      	mov	r2, r4
 800b8cc:	4649      	mov	r1, r9
 800b8ce:	4658      	mov	r0, fp
 800b8d0:	f000 f9ad 	bl	800bc2e <__ssputs_r>
 800b8d4:	3001      	adds	r0, #1
 800b8d6:	f43f af21 	beq.w	800b71c <_svfwprintf_r+0x7bc>
 800b8da:	3e10      	subs	r6, #16
 800b8dc:	e7d1      	b.n	800b882 <_svfwprintf_r+0x922>
 800b8de:	07fe      	lsls	r6, r7, #31
 800b8e0:	d4e0      	bmi.n	800b8a4 <_svfwprintf_r+0x944>
 800b8e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b8e4:	ebc5 0483 	rsb	r4, r5, r3, lsl #2
 800b8e8:	10a2      	asrs	r2, r4, #2
 800b8ea:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b8ec:	1b1c      	subs	r4, r3, r4
 800b8ee:	4294      	cmp	r4, r2
 800b8f0:	bfa8      	it	ge
 800b8f2:	4614      	movge	r4, r2
 800b8f4:	2c00      	cmp	r4, #0
 800b8f6:	dd09      	ble.n	800b90c <_svfwprintf_r+0x9ac>
 800b8f8:	00a3      	lsls	r3, r4, #2
 800b8fa:	eb0a 0205 	add.w	r2, sl, r5
 800b8fe:	4649      	mov	r1, r9
 800b900:	4658      	mov	r0, fp
 800b902:	f000 f994 	bl	800bc2e <__ssputs_r>
 800b906:	3001      	adds	r0, #1
 800b908:	f43f af08 	beq.w	800b71c <_svfwprintf_r+0x7bc>
 800b90c:	e9dd 3518 	ldrd	r3, r5, [sp, #96]	; 0x60
 800b910:	2c00      	cmp	r4, #0
 800b912:	eba5 0503 	sub.w	r5, r5, r3
 800b916:	bfa8      	it	ge
 800b918:	1b2d      	subge	r5, r5, r4
 800b91a:	2d00      	cmp	r5, #0
 800b91c:	f77f adce 	ble.w	800b4bc <_svfwprintf_r+0x55c>
 800b920:	4c4a      	ldr	r4, [pc, #296]	; (800ba4c <_svfwprintf_r+0xaec>)
 800b922:	2d10      	cmp	r5, #16
 800b924:	dc01      	bgt.n	800b92a <_svfwprintf_r+0x9ca>
 800b926:	00ab      	lsls	r3, r5, #2
 800b928:	e74c      	b.n	800b7c4 <_svfwprintf_r+0x864>
 800b92a:	2340      	movs	r3, #64	; 0x40
 800b92c:	4622      	mov	r2, r4
 800b92e:	4649      	mov	r1, r9
 800b930:	4658      	mov	r0, fp
 800b932:	f000 f97c 	bl	800bc2e <__ssputs_r>
 800b936:	3001      	adds	r0, #1
 800b938:	f43f aef0 	beq.w	800b71c <_svfwprintf_r+0x7bc>
 800b93c:	3d10      	subs	r5, #16
 800b93e:	e7f0      	b.n	800b922 <_svfwprintf_r+0x9c2>
 800b940:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b942:	2b01      	cmp	r3, #1
 800b944:	4652      	mov	r2, sl
 800b946:	f04f 0304 	mov.w	r3, #4
 800b94a:	4649      	mov	r1, r9
 800b94c:	4658      	mov	r0, fp
 800b94e:	dc01      	bgt.n	800b954 <_svfwprintf_r+0x9f4>
 800b950:	07fc      	lsls	r4, r7, #31
 800b952:	d51b      	bpl.n	800b98c <_svfwprintf_r+0xa2c>
 800b954:	f000 f96b 	bl	800bc2e <__ssputs_r>
 800b958:	3001      	adds	r0, #1
 800b95a:	f43f aedf 	beq.w	800b71c <_svfwprintf_r+0x7bc>
 800b95e:	2304      	movs	r3, #4
 800b960:	aa16      	add	r2, sp, #88	; 0x58
 800b962:	4649      	mov	r1, r9
 800b964:	4658      	mov	r0, fp
 800b966:	f000 f962 	bl	800bc2e <__ssputs_r>
 800b96a:	3001      	adds	r0, #1
 800b96c:	f43f aed6 	beq.w	800b71c <_svfwprintf_r+0x7bc>
 800b970:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800b972:	ec51 0b18 	vmov	r0, r1, d8
 800b976:	2200      	movs	r2, #0
 800b978:	2300      	movs	r3, #0
 800b97a:	3c01      	subs	r4, #1
 800b97c:	f7f5 f8a4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b980:	b968      	cbnz	r0, 800b99e <_svfwprintf_r+0xa3e>
 800b982:	00a3      	lsls	r3, r4, #2
 800b984:	f10a 0204 	add.w	r2, sl, #4
 800b988:	4649      	mov	r1, r9
 800b98a:	4658      	mov	r0, fp
 800b98c:	f000 f94f 	bl	800bc2e <__ssputs_r>
 800b990:	3001      	adds	r0, #1
 800b992:	f43f aec3 	beq.w	800b71c <_svfwprintf_r+0x7bc>
 800b996:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b998:	aa1c      	add	r2, sp, #112	; 0x70
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	e587      	b.n	800b4ae <_svfwprintf_r+0x54e>
 800b99e:	2c00      	cmp	r4, #0
 800b9a0:	ddf9      	ble.n	800b996 <_svfwprintf_r+0xa36>
 800b9a2:	4d2a      	ldr	r5, [pc, #168]	; (800ba4c <_svfwprintf_r+0xaec>)
 800b9a4:	2c10      	cmp	r4, #16
 800b9a6:	dc02      	bgt.n	800b9ae <_svfwprintf_r+0xa4e>
 800b9a8:	4a28      	ldr	r2, [pc, #160]	; (800ba4c <_svfwprintf_r+0xaec>)
 800b9aa:	00a3      	lsls	r3, r4, #2
 800b9ac:	e7ec      	b.n	800b988 <_svfwprintf_r+0xa28>
 800b9ae:	2340      	movs	r3, #64	; 0x40
 800b9b0:	462a      	mov	r2, r5
 800b9b2:	4649      	mov	r1, r9
 800b9b4:	4658      	mov	r0, fp
 800b9b6:	f000 f93a 	bl	800bc2e <__ssputs_r>
 800b9ba:	3001      	adds	r0, #1
 800b9bc:	f43f aeae 	beq.w	800b71c <_svfwprintf_r+0x7bc>
 800b9c0:	3c10      	subs	r4, #16
 800b9c2:	e7ef      	b.n	800b9a4 <_svfwprintf_r+0xa44>
 800b9c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9c8:	1a9c      	subs	r4, r3, r2
 800b9ca:	2c00      	cmp	r4, #0
 800b9cc:	f77f ad79 	ble.w	800b4c2 <_svfwprintf_r+0x562>
 800b9d0:	2c10      	cmp	r4, #16
 800b9d2:	dc09      	bgt.n	800b9e8 <_svfwprintf_r+0xa88>
 800b9d4:	4a1e      	ldr	r2, [pc, #120]	; (800ba50 <_svfwprintf_r+0xaf0>)
 800b9d6:	00a3      	lsls	r3, r4, #2
 800b9d8:	4649      	mov	r1, r9
 800b9da:	4658      	mov	r0, fp
 800b9dc:	f000 f927 	bl	800bc2e <__ssputs_r>
 800b9e0:	3001      	adds	r0, #1
 800b9e2:	f47f ad6e 	bne.w	800b4c2 <_svfwprintf_r+0x562>
 800b9e6:	e699      	b.n	800b71c <_svfwprintf_r+0x7bc>
 800b9e8:	4a19      	ldr	r2, [pc, #100]	; (800ba50 <_svfwprintf_r+0xaf0>)
 800b9ea:	2340      	movs	r3, #64	; 0x40
 800b9ec:	4649      	mov	r1, r9
 800b9ee:	4658      	mov	r0, fp
 800b9f0:	f000 f91d 	bl	800bc2e <__ssputs_r>
 800b9f4:	3001      	adds	r0, #1
 800b9f6:	f43f ae91 	beq.w	800b71c <_svfwprintf_r+0x7bc>
 800b9fa:	3c10      	subs	r4, #16
 800b9fc:	e7e8      	b.n	800b9d0 <_svfwprintf_r+0xa70>
 800b9fe:	4639      	mov	r1, r7
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f43f add6 	beq.w	800b5b2 <_svfwprintf_r+0x652>
 800ba06:	2a01      	cmp	r2, #1
 800ba08:	f43f ae4b 	beq.w	800b6a2 <_svfwprintf_r+0x742>
 800ba0c:	2a02      	cmp	r2, #2
 800ba0e:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800ba12:	f43f ae5c 	beq.w	800b6ce <_svfwprintf_r+0x76e>
 800ba16:	f003 0207 	and.w	r2, r3, #7
 800ba1a:	3230      	adds	r2, #48	; 0x30
 800ba1c:	08db      	lsrs	r3, r3, #3
 800ba1e:	4650      	mov	r0, sl
 800ba20:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800ba24:	d1f7      	bne.n	800ba16 <_svfwprintf_r+0xab6>
 800ba26:	07cd      	lsls	r5, r1, #31
 800ba28:	d506      	bpl.n	800ba38 <_svfwprintf_r+0xad8>
 800ba2a:	2a30      	cmp	r2, #48	; 0x30
 800ba2c:	d004      	beq.n	800ba38 <_svfwprintf_r+0xad8>
 800ba2e:	2330      	movs	r3, #48	; 0x30
 800ba30:	f84a 3c04 	str.w	r3, [sl, #-4]
 800ba34:	f1a0 0a08 	sub.w	sl, r0, #8
 800ba38:	ab52      	add	r3, sp, #328	; 0x148
 800ba3a:	4626      	mov	r6, r4
 800ba3c:	eba3 040a 	sub.w	r4, r3, sl
 800ba40:	10a4      	asrs	r4, r4, #2
 800ba42:	460f      	mov	r7, r1
 800ba44:	f04f 0800 	mov.w	r8, #0
 800ba48:	4645      	mov	r5, r8
 800ba4a:	e4d8      	b.n	800b3fe <_svfwprintf_r+0x49e>
 800ba4c:	080395d0 	.word	0x080395d0
 800ba50:	08039590 	.word	0x08039590

0800ba54 <wcslen>:
 800ba54:	4602      	mov	r2, r0
 800ba56:	4613      	mov	r3, r2
 800ba58:	3204      	adds	r2, #4
 800ba5a:	6819      	ldr	r1, [r3, #0]
 800ba5c:	2900      	cmp	r1, #0
 800ba5e:	d1fa      	bne.n	800ba56 <wcslen+0x2>
 800ba60:	1a18      	subs	r0, r3, r0
 800ba62:	1080      	asrs	r0, r0, #2
 800ba64:	4770      	bx	lr

0800ba66 <wmemchr>:
 800ba66:	b530      	push	{r4, r5, lr}
 800ba68:	2400      	movs	r4, #0
 800ba6a:	4294      	cmp	r4, r2
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	d102      	bne.n	800ba76 <wmemchr+0x10>
 800ba70:	2300      	movs	r3, #0
 800ba72:	4618      	mov	r0, r3
 800ba74:	bd30      	pop	{r4, r5, pc}
 800ba76:	681d      	ldr	r5, [r3, #0]
 800ba78:	428d      	cmp	r5, r1
 800ba7a:	f100 0004 	add.w	r0, r0, #4
 800ba7e:	d0f8      	beq.n	800ba72 <wmemchr+0xc>
 800ba80:	3401      	adds	r4, #1
 800ba82:	e7f2      	b.n	800ba6a <wmemchr+0x4>

0800ba84 <__assert_func>:
 800ba84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba86:	4614      	mov	r4, r2
 800ba88:	461a      	mov	r2, r3
 800ba8a:	4b09      	ldr	r3, [pc, #36]	; (800bab0 <__assert_func+0x2c>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4605      	mov	r5, r0
 800ba90:	68d8      	ldr	r0, [r3, #12]
 800ba92:	b14c      	cbz	r4, 800baa8 <__assert_func+0x24>
 800ba94:	4b07      	ldr	r3, [pc, #28]	; (800bab4 <__assert_func+0x30>)
 800ba96:	9100      	str	r1, [sp, #0]
 800ba98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba9c:	4906      	ldr	r1, [pc, #24]	; (800bab8 <__assert_func+0x34>)
 800ba9e:	462b      	mov	r3, r5
 800baa0:	f000 f858 	bl	800bb54 <fiprintf>
 800baa4:	f000 f92b 	bl	800bcfe <abort>
 800baa8:	4b04      	ldr	r3, [pc, #16]	; (800babc <__assert_func+0x38>)
 800baaa:	461c      	mov	r4, r3
 800baac:	e7f3      	b.n	800ba96 <__assert_func+0x12>
 800baae:	bf00      	nop
 800bab0:	20000014 	.word	0x20000014
 800bab4:	08039610 	.word	0x08039610
 800bab8:	0803961d 	.word	0x0803961d
 800babc:	0803964b 	.word	0x0803964b

0800bac0 <btowc>:
 800bac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bac2:	1c43      	adds	r3, r0, #1
 800bac4:	b087      	sub	sp, #28
 800bac6:	d103      	bne.n	800bad0 <btowc+0x10>
 800bac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bacc:	b007      	add	sp, #28
 800bace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bad0:	4d1c      	ldr	r5, [pc, #112]	; (800bb44 <btowc+0x84>)
 800bad2:	f88d 000b 	strb.w	r0, [sp, #11]
 800bad6:	ae04      	add	r6, sp, #16
 800bad8:	2208      	movs	r2, #8
 800bada:	2100      	movs	r1, #0
 800badc:	4630      	mov	r0, r6
 800bade:	f7fc feb7 	bl	8008850 <memset>
 800bae2:	682f      	ldr	r7, [r5, #0]
 800bae4:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800bae6:	b9fc      	cbnz	r4, 800bb28 <btowc+0x68>
 800bae8:	2050      	movs	r0, #80	; 0x50
 800baea:	f7fe fcaf 	bl	800a44c <malloc>
 800baee:	4602      	mov	r2, r0
 800baf0:	65b8      	str	r0, [r7, #88]	; 0x58
 800baf2:	b920      	cbnz	r0, 800bafe <btowc+0x3e>
 800baf4:	4b14      	ldr	r3, [pc, #80]	; (800bb48 <btowc+0x88>)
 800baf6:	4815      	ldr	r0, [pc, #84]	; (800bb4c <btowc+0x8c>)
 800baf8:	2118      	movs	r1, #24
 800bafa:	f7ff ffc3 	bl	800ba84 <__assert_func>
 800bafe:	682b      	ldr	r3, [r5, #0]
 800bb00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb02:	e9c3 4400 	strd	r4, r4, [r3]
 800bb06:	e9c3 4402 	strd	r4, r4, [r3, #8]
 800bb0a:	e9c3 4404 	strd	r4, r4, [r3, #16]
 800bb0e:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
 800bb12:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
 800bb16:	e9c3 440e 	strd	r4, r4, [r3, #56]	; 0x38
 800bb1a:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
 800bb1e:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
 800bb22:	619c      	str	r4, [r3, #24]
 800bb24:	771c      	strb	r4, [r3, #28]
 800bb26:	625c      	str	r4, [r3, #36]	; 0x24
 800bb28:	4b09      	ldr	r3, [pc, #36]	; (800bb50 <btowc+0x90>)
 800bb2a:	9600      	str	r6, [sp, #0]
 800bb2c:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 800bb30:	6828      	ldr	r0, [r5, #0]
 800bb32:	2301      	movs	r3, #1
 800bb34:	f10d 020b 	add.w	r2, sp, #11
 800bb38:	a903      	add	r1, sp, #12
 800bb3a:	47a0      	blx	r4
 800bb3c:	2801      	cmp	r0, #1
 800bb3e:	d8c3      	bhi.n	800bac8 <btowc+0x8>
 800bb40:	9803      	ldr	r0, [sp, #12]
 800bb42:	e7c3      	b.n	800bacc <btowc+0xc>
 800bb44:	20000014 	.word	0x20000014
 800bb48:	080392cd 	.word	0x080392cd
 800bb4c:	0803964c 	.word	0x0803964c
 800bb50:	20000078 	.word	0x20000078

0800bb54 <fiprintf>:
 800bb54:	b40e      	push	{r1, r2, r3}
 800bb56:	b503      	push	{r0, r1, lr}
 800bb58:	4601      	mov	r1, r0
 800bb5a:	ab03      	add	r3, sp, #12
 800bb5c:	4805      	ldr	r0, [pc, #20]	; (800bb74 <fiprintf+0x20>)
 800bb5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb62:	6800      	ldr	r0, [r0, #0]
 800bb64:	9301      	str	r3, [sp, #4]
 800bb66:	f7ff f849 	bl	800abfc <_vfiprintf_r>
 800bb6a:	b002      	add	sp, #8
 800bb6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb70:	b003      	add	sp, #12
 800bb72:	4770      	bx	lr
 800bb74:	20000014 	.word	0x20000014

0800bb78 <__ascii_mbtowc>:
 800bb78:	b082      	sub	sp, #8
 800bb7a:	b901      	cbnz	r1, 800bb7e <__ascii_mbtowc+0x6>
 800bb7c:	a901      	add	r1, sp, #4
 800bb7e:	b142      	cbz	r2, 800bb92 <__ascii_mbtowc+0x1a>
 800bb80:	b14b      	cbz	r3, 800bb96 <__ascii_mbtowc+0x1e>
 800bb82:	7813      	ldrb	r3, [r2, #0]
 800bb84:	600b      	str	r3, [r1, #0]
 800bb86:	7812      	ldrb	r2, [r2, #0]
 800bb88:	1e10      	subs	r0, r2, #0
 800bb8a:	bf18      	it	ne
 800bb8c:	2001      	movne	r0, #1
 800bb8e:	b002      	add	sp, #8
 800bb90:	4770      	bx	lr
 800bb92:	4610      	mov	r0, r2
 800bb94:	e7fb      	b.n	800bb8e <__ascii_mbtowc+0x16>
 800bb96:	f06f 0001 	mvn.w	r0, #1
 800bb9a:	e7f8      	b.n	800bb8e <__ascii_mbtowc+0x16>

0800bb9c <memmove>:
 800bb9c:	4288      	cmp	r0, r1
 800bb9e:	b510      	push	{r4, lr}
 800bba0:	eb01 0402 	add.w	r4, r1, r2
 800bba4:	d902      	bls.n	800bbac <memmove+0x10>
 800bba6:	4284      	cmp	r4, r0
 800bba8:	4623      	mov	r3, r4
 800bbaa:	d807      	bhi.n	800bbbc <memmove+0x20>
 800bbac:	1e43      	subs	r3, r0, #1
 800bbae:	42a1      	cmp	r1, r4
 800bbb0:	d008      	beq.n	800bbc4 <memmove+0x28>
 800bbb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbba:	e7f8      	b.n	800bbae <memmove+0x12>
 800bbbc:	4402      	add	r2, r0
 800bbbe:	4601      	mov	r1, r0
 800bbc0:	428a      	cmp	r2, r1
 800bbc2:	d100      	bne.n	800bbc6 <memmove+0x2a>
 800bbc4:	bd10      	pop	{r4, pc}
 800bbc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bbce:	e7f7      	b.n	800bbc0 <memmove+0x24>

0800bbd0 <_realloc_r>:
 800bbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbd4:	4680      	mov	r8, r0
 800bbd6:	4614      	mov	r4, r2
 800bbd8:	460e      	mov	r6, r1
 800bbda:	b921      	cbnz	r1, 800bbe6 <_realloc_r+0x16>
 800bbdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe0:	4611      	mov	r1, r2
 800bbe2:	f7fc bea9 	b.w	8008938 <_malloc_r>
 800bbe6:	b92a      	cbnz	r2, 800bbf4 <_realloc_r+0x24>
 800bbe8:	f7fc fe3a 	bl	8008860 <_free_r>
 800bbec:	4625      	mov	r5, r4
 800bbee:	4628      	mov	r0, r5
 800bbf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbf4:	f000 f88a 	bl	800bd0c <_malloc_usable_size_r>
 800bbf8:	4284      	cmp	r4, r0
 800bbfa:	4607      	mov	r7, r0
 800bbfc:	d802      	bhi.n	800bc04 <_realloc_r+0x34>
 800bbfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc02:	d812      	bhi.n	800bc2a <_realloc_r+0x5a>
 800bc04:	4621      	mov	r1, r4
 800bc06:	4640      	mov	r0, r8
 800bc08:	f7fc fe96 	bl	8008938 <_malloc_r>
 800bc0c:	4605      	mov	r5, r0
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d0ed      	beq.n	800bbee <_realloc_r+0x1e>
 800bc12:	42bc      	cmp	r4, r7
 800bc14:	4622      	mov	r2, r4
 800bc16:	4631      	mov	r1, r6
 800bc18:	bf28      	it	cs
 800bc1a:	463a      	movcs	r2, r7
 800bc1c:	f7fc fe0a 	bl	8008834 <memcpy>
 800bc20:	4631      	mov	r1, r6
 800bc22:	4640      	mov	r0, r8
 800bc24:	f7fc fe1c 	bl	8008860 <_free_r>
 800bc28:	e7e1      	b.n	800bbee <_realloc_r+0x1e>
 800bc2a:	4635      	mov	r5, r6
 800bc2c:	e7df      	b.n	800bbee <_realloc_r+0x1e>

0800bc2e <__ssputs_r>:
 800bc2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc32:	688e      	ldr	r6, [r1, #8]
 800bc34:	429e      	cmp	r6, r3
 800bc36:	4682      	mov	sl, r0
 800bc38:	460c      	mov	r4, r1
 800bc3a:	4690      	mov	r8, r2
 800bc3c:	461f      	mov	r7, r3
 800bc3e:	d838      	bhi.n	800bcb2 <__ssputs_r+0x84>
 800bc40:	898a      	ldrh	r2, [r1, #12]
 800bc42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc46:	d032      	beq.n	800bcae <__ssputs_r+0x80>
 800bc48:	6825      	ldr	r5, [r4, #0]
 800bc4a:	6909      	ldr	r1, [r1, #16]
 800bc4c:	eba5 0901 	sub.w	r9, r5, r1
 800bc50:	6965      	ldr	r5, [r4, #20]
 800bc52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	444b      	add	r3, r9
 800bc5e:	106d      	asrs	r5, r5, #1
 800bc60:	429d      	cmp	r5, r3
 800bc62:	bf38      	it	cc
 800bc64:	461d      	movcc	r5, r3
 800bc66:	0553      	lsls	r3, r2, #21
 800bc68:	d531      	bpl.n	800bcce <__ssputs_r+0xa0>
 800bc6a:	4629      	mov	r1, r5
 800bc6c:	f7fc fe64 	bl	8008938 <_malloc_r>
 800bc70:	4606      	mov	r6, r0
 800bc72:	b950      	cbnz	r0, 800bc8a <__ssputs_r+0x5c>
 800bc74:	230c      	movs	r3, #12
 800bc76:	f8ca 3000 	str.w	r3, [sl]
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc80:	81a3      	strh	r3, [r4, #12]
 800bc82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc8a:	6921      	ldr	r1, [r4, #16]
 800bc8c:	464a      	mov	r2, r9
 800bc8e:	f7fc fdd1 	bl	8008834 <memcpy>
 800bc92:	89a3      	ldrh	r3, [r4, #12]
 800bc94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc9c:	81a3      	strh	r3, [r4, #12]
 800bc9e:	6126      	str	r6, [r4, #16]
 800bca0:	6165      	str	r5, [r4, #20]
 800bca2:	444e      	add	r6, r9
 800bca4:	eba5 0509 	sub.w	r5, r5, r9
 800bca8:	6026      	str	r6, [r4, #0]
 800bcaa:	60a5      	str	r5, [r4, #8]
 800bcac:	463e      	mov	r6, r7
 800bcae:	42be      	cmp	r6, r7
 800bcb0:	d900      	bls.n	800bcb4 <__ssputs_r+0x86>
 800bcb2:	463e      	mov	r6, r7
 800bcb4:	6820      	ldr	r0, [r4, #0]
 800bcb6:	4632      	mov	r2, r6
 800bcb8:	4641      	mov	r1, r8
 800bcba:	f7ff ff6f 	bl	800bb9c <memmove>
 800bcbe:	68a3      	ldr	r3, [r4, #8]
 800bcc0:	1b9b      	subs	r3, r3, r6
 800bcc2:	60a3      	str	r3, [r4, #8]
 800bcc4:	6823      	ldr	r3, [r4, #0]
 800bcc6:	4433      	add	r3, r6
 800bcc8:	6023      	str	r3, [r4, #0]
 800bcca:	2000      	movs	r0, #0
 800bccc:	e7db      	b.n	800bc86 <__ssputs_r+0x58>
 800bcce:	462a      	mov	r2, r5
 800bcd0:	f7ff ff7e 	bl	800bbd0 <_realloc_r>
 800bcd4:	4606      	mov	r6, r0
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	d1e1      	bne.n	800bc9e <__ssputs_r+0x70>
 800bcda:	6921      	ldr	r1, [r4, #16]
 800bcdc:	4650      	mov	r0, sl
 800bcde:	f7fc fdbf 	bl	8008860 <_free_r>
 800bce2:	e7c7      	b.n	800bc74 <__ssputs_r+0x46>

0800bce4 <__ascii_wctomb>:
 800bce4:	b149      	cbz	r1, 800bcfa <__ascii_wctomb+0x16>
 800bce6:	2aff      	cmp	r2, #255	; 0xff
 800bce8:	bf85      	ittet	hi
 800bcea:	238a      	movhi	r3, #138	; 0x8a
 800bcec:	6003      	strhi	r3, [r0, #0]
 800bcee:	700a      	strbls	r2, [r1, #0]
 800bcf0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bcf4:	bf98      	it	ls
 800bcf6:	2001      	movls	r0, #1
 800bcf8:	4770      	bx	lr
 800bcfa:	4608      	mov	r0, r1
 800bcfc:	4770      	bx	lr

0800bcfe <abort>:
 800bcfe:	b508      	push	{r3, lr}
 800bd00:	2006      	movs	r0, #6
 800bd02:	f000 f833 	bl	800bd6c <raise>
 800bd06:	2001      	movs	r0, #1
 800bd08:	f7f6 fb12 	bl	8002330 <_exit>

0800bd0c <_malloc_usable_size_r>:
 800bd0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd10:	1f18      	subs	r0, r3, #4
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	bfbc      	itt	lt
 800bd16:	580b      	ldrlt	r3, [r1, r0]
 800bd18:	18c0      	addlt	r0, r0, r3
 800bd1a:	4770      	bx	lr

0800bd1c <_raise_r>:
 800bd1c:	291f      	cmp	r1, #31
 800bd1e:	b538      	push	{r3, r4, r5, lr}
 800bd20:	4604      	mov	r4, r0
 800bd22:	460d      	mov	r5, r1
 800bd24:	d904      	bls.n	800bd30 <_raise_r+0x14>
 800bd26:	2316      	movs	r3, #22
 800bd28:	6003      	str	r3, [r0, #0]
 800bd2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd2e:	bd38      	pop	{r3, r4, r5, pc}
 800bd30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd32:	b112      	cbz	r2, 800bd3a <_raise_r+0x1e>
 800bd34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd38:	b94b      	cbnz	r3, 800bd4e <_raise_r+0x32>
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	f000 f830 	bl	800bda0 <_getpid_r>
 800bd40:	462a      	mov	r2, r5
 800bd42:	4601      	mov	r1, r0
 800bd44:	4620      	mov	r0, r4
 800bd46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd4a:	f000 b817 	b.w	800bd7c <_kill_r>
 800bd4e:	2b01      	cmp	r3, #1
 800bd50:	d00a      	beq.n	800bd68 <_raise_r+0x4c>
 800bd52:	1c59      	adds	r1, r3, #1
 800bd54:	d103      	bne.n	800bd5e <_raise_r+0x42>
 800bd56:	2316      	movs	r3, #22
 800bd58:	6003      	str	r3, [r0, #0]
 800bd5a:	2001      	movs	r0, #1
 800bd5c:	e7e7      	b.n	800bd2e <_raise_r+0x12>
 800bd5e:	2400      	movs	r4, #0
 800bd60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd64:	4628      	mov	r0, r5
 800bd66:	4798      	blx	r3
 800bd68:	2000      	movs	r0, #0
 800bd6a:	e7e0      	b.n	800bd2e <_raise_r+0x12>

0800bd6c <raise>:
 800bd6c:	4b02      	ldr	r3, [pc, #8]	; (800bd78 <raise+0xc>)
 800bd6e:	4601      	mov	r1, r0
 800bd70:	6818      	ldr	r0, [r3, #0]
 800bd72:	f7ff bfd3 	b.w	800bd1c <_raise_r>
 800bd76:	bf00      	nop
 800bd78:	20000014 	.word	0x20000014

0800bd7c <_kill_r>:
 800bd7c:	b538      	push	{r3, r4, r5, lr}
 800bd7e:	4d07      	ldr	r5, [pc, #28]	; (800bd9c <_kill_r+0x20>)
 800bd80:	2300      	movs	r3, #0
 800bd82:	4604      	mov	r4, r0
 800bd84:	4608      	mov	r0, r1
 800bd86:	4611      	mov	r1, r2
 800bd88:	602b      	str	r3, [r5, #0]
 800bd8a:	f7f6 fac1 	bl	8002310 <_kill>
 800bd8e:	1c43      	adds	r3, r0, #1
 800bd90:	d102      	bne.n	800bd98 <_kill_r+0x1c>
 800bd92:	682b      	ldr	r3, [r5, #0]
 800bd94:	b103      	cbz	r3, 800bd98 <_kill_r+0x1c>
 800bd96:	6023      	str	r3, [r4, #0]
 800bd98:	bd38      	pop	{r3, r4, r5, pc}
 800bd9a:	bf00      	nop
 800bd9c:	2000a420 	.word	0x2000a420

0800bda0 <_getpid_r>:
 800bda0:	f7f6 baae 	b.w	8002300 <_getpid>

0800bda4 <_init>:
 800bda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda6:	bf00      	nop
 800bda8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdaa:	bc08      	pop	{r3}
 800bdac:	469e      	mov	lr, r3
 800bdae:	4770      	bx	lr

0800bdb0 <_fini>:
 800bdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb2:	bf00      	nop
 800bdb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdb6:	bc08      	pop	{r3}
 800bdb8:	469e      	mov	lr, r3
 800bdba:	4770      	bx	lr
