
Clock_weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a61c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035ac  0800a7b0  0800a7b0  0001a7b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd5c  0800dd5c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd5c  0800dd5c  0001dd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd64  0800dd64  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd64  0800dd64  0001dd64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd68  0800dd68  0001dd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800dd6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a1f8  200001e4  0800df50  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00002204  2000a3dc  0800df50  0002a3dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f941  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004548  00000000  00000000  0003fb55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad0  00000000  00000000  000440a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018c8  00000000  00000000  00045b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bd54  00000000  00000000  00047438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022e1c  00000000  00000000  0007318c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101feb  00000000  00000000  00095fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00197f93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f5c  00000000  00000000  00197fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a794 	.word	0x0800a794

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800a794 	.word	0x0800a794

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	4b3a      	ldr	r3, [pc, #232]	; (8000fac <MX_GPIO_Init+0x100>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	4a39      	ldr	r2, [pc, #228]	; (8000fac <MX_GPIO_Init+0x100>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ece:	4b37      	ldr	r3, [pc, #220]	; (8000fac <MX_GPIO_Init+0x100>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b34      	ldr	r3, [pc, #208]	; (8000fac <MX_GPIO_Init+0x100>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	4a33      	ldr	r2, [pc, #204]	; (8000fac <MX_GPIO_Init+0x100>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee6:	4b31      	ldr	r3, [pc, #196]	; (8000fac <MX_GPIO_Init+0x100>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <MX_GPIO_Init+0x100>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a2d      	ldr	r2, [pc, #180]	; (8000fac <MX_GPIO_Init+0x100>)
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <MX_GPIO_Init+0x100>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2120      	movs	r1, #32
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f12:	f001 fd87 	bl	8002a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	f641 0104 	movw	r1, #6148	; 0x1804
 8000f1c:	4824      	ldr	r0, [pc, #144]	; (8000fb0 <MX_GPIO_Init+0x104>)
 8000f1e:	f001 fd81 	bl	8002a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000f22:	2301      	movs	r3, #1
 8000f24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	4619      	mov	r1, r3
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3a:	f001 fbc9 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f3e:	2320      	movs	r3, #32
 8000f40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	4619      	mov	r1, r3
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f58:	f001 fbba 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTONA6_Pin;
 8000f5c:	2340      	movs	r3, #64	; 0x40
 8000f5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTONA6_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f72:	f001 fbad 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8000f76:	f641 0304 	movw	r3, #6148	; 0x1804
 8000f7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4808      	ldr	r0, [pc, #32]	; (8000fb0 <MX_GPIO_Init+0x104>)
 8000f90:	f001 fb9e 	bl	80026d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2103      	movs	r1, #3
 8000f98:	2006      	movs	r0, #6
 8000f9a:	f001 fad2 	bl	8002542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f9e:	2006      	movs	r0, #6
 8000fa0:	f001 faeb 	bl	800257a <HAL_NVIC_EnableIRQ>

}
 8000fa4:	bf00      	nop
 8000fa6:	3720      	adds	r7, #32
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	48000400 	.word	0x48000400

08000fb4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <MX_I2C1_Init+0x74>)
 8000fba:	4a1c      	ldr	r2, [pc, #112]	; (800102c <MX_I2C1_Init+0x78>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <MX_I2C1_Init+0x74>)
 8000fc0:	4a1b      	ldr	r2, [pc, #108]	; (8001030 <MX_I2C1_Init+0x7c>)
 8000fc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <MX_I2C1_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <MX_I2C1_Init+0x74>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <MX_I2C1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_I2C1_Init+0x74>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <MX_I2C1_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_I2C1_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_I2C1_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fee:	480e      	ldr	r0, [pc, #56]	; (8001028 <MX_I2C1_Init+0x74>)
 8000ff0:	f001 fd48 	bl	8002a84 <HAL_I2C_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ffa:	f000 fd9f 	bl	8001b3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ffe:	2100      	movs	r1, #0
 8001000:	4809      	ldr	r0, [pc, #36]	; (8001028 <MX_I2C1_Init+0x74>)
 8001002:	f002 faa3 	bl	800354c <HAL_I2CEx_ConfigAnalogFilter>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800100c:	f000 fd96 	bl	8001b3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001010:	2100      	movs	r1, #0
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_I2C1_Init+0x74>)
 8001014:	f002 fae5 	bl	80035e2 <HAL_I2CEx_ConfigDigitalFilter>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800101e:	f000 fd8d 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000200 	.word	0x20000200
 800102c:	40005400 	.word	0x40005400
 8001030:	2000090e 	.word	0x2000090e

08001034 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b0ac      	sub	sp, #176	; 0xb0
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2288      	movs	r2, #136	; 0x88
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f007 f821 	bl	800809c <memset>
  if(i2cHandle->Instance==I2C1)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a21      	ldr	r2, [pc, #132]	; (80010e4 <HAL_I2C_MspInit+0xb0>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d13a      	bne.n	80010da <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001064:	2340      	movs	r3, #64	; 0x40
 8001066:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001068:	2300      	movs	r3, #0
 800106a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4618      	mov	r0, r3
 8001072:	f003 fa25 	bl	80044c0 <HAL_RCCEx_PeriphCLKConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800107c:	f000 fd5e 	bl	8001b3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001080:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <HAL_I2C_MspInit+0xb4>)
 8001082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001084:	4a18      	ldr	r2, [pc, #96]	; (80010e8 <HAL_I2C_MspInit+0xb4>)
 8001086:	f043 0302 	orr.w	r3, r3, #2
 800108a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <HAL_I2C_MspInit+0xb4>)
 800108e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001098:	23c0      	movs	r3, #192	; 0xc0
 800109a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800109e:	2312      	movs	r3, #18
 80010a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010b0:	2304      	movs	r3, #4
 80010b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010ba:	4619      	mov	r1, r3
 80010bc:	480b      	ldr	r0, [pc, #44]	; (80010ec <HAL_I2C_MspInit+0xb8>)
 80010be:	f001 fb07 	bl	80026d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <HAL_I2C_MspInit+0xb4>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	4a08      	ldr	r2, [pc, #32]	; (80010e8 <HAL_I2C_MspInit+0xb4>)
 80010c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010cc:	6593      	str	r3, [r2, #88]	; 0x58
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_I2C_MspInit+0xb4>)
 80010d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010da:	bf00      	nop
 80010dc:	37b0      	adds	r7, #176	; 0xb0
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40005400 	.word	0x40005400
 80010e8:	40021000 	.word	0x40021000
 80010ec:	48000400 	.word	0x48000400

080010f0 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80010f4:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <MX_IWDG_Init+0x34>)
 80010f6:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <MX_IWDG_Init+0x38>)
 80010f8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <MX_IWDG_Init+0x34>)
 80010fc:	2206      	movs	r2, #6
 80010fe:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <MX_IWDG_Init+0x34>)
 8001102:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001106:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_IWDG_Init+0x34>)
 800110a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800110e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <MX_IWDG_Init+0x34>)
 8001112:	f002 fab2 	bl	800367a <HAL_IWDG_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800111c:	f000 fd0e 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000254 	.word	0x20000254
 8001128:	40003000 	.word	0x40003000

0800112c <lcd_cmd>:
#define LCD_OFFSET_Y  2

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];

static void lcd_cmd(uint8_t cmd) //send command
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800113c:	480c      	ldr	r0, [pc, #48]	; (8001170 <lcd_cmd+0x44>)
 800113e:	f001 fc71 	bl	8002a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001148:	4809      	ldr	r0, [pc, #36]	; (8001170 <lcd_cmd+0x44>)
 800114a:	f001 fc6b 	bl	8002a24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 800114e:	1df9      	adds	r1, r7, #7
 8001150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001154:	2201      	movs	r2, #1
 8001156:	4807      	ldr	r0, [pc, #28]	; (8001174 <lcd_cmd+0x48>)
 8001158:	f004 fa77 	bl	800564a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001162:	4803      	ldr	r0, [pc, #12]	; (8001170 <lcd_cmd+0x44>)
 8001164:	f001 fc5e 	bl	8002a24 <HAL_GPIO_WritePin>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	48000400 	.word	0x48000400
 8001174:	2000a290 	.word	0x2000a290

08001178 <lcd_data>:


static void lcd_data(uint8_t data) //send data
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001182:	2201      	movs	r2, #1
 8001184:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <lcd_data+0x44>)
 800118a:	f001 fc4b 	bl	8002a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001194:	4809      	ldr	r0, [pc, #36]	; (80011bc <lcd_data+0x44>)
 8001196:	f001 fc45 	bl	8002a24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800119a:	1df9      	adds	r1, r7, #7
 800119c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011a0:	2201      	movs	r2, #1
 80011a2:	4807      	ldr	r0, [pc, #28]	; (80011c0 <lcd_data+0x48>)
 80011a4:	f004 fa51 	bl	800564a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ae:	4803      	ldr	r0, [pc, #12]	; (80011bc <lcd_data+0x44>)
 80011b0:	f001 fc38 	bl	8002a24 <HAL_GPIO_WritePin>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	48000400 	.word	0x48000400
 80011c0:	2000a290 	.word	0x2000a290

080011c4 <lcd_send>:


static void lcd_send(uint16_t value)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <lcd_send+0x20>
		lcd_cmd(value);
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ffa5 	bl	800112c <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 80011e2:	e004      	b.n	80011ee <lcd_send+0x2a>
		lcd_data(value);
 80011e4:	88fb      	ldrh	r3, [r7, #6]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ffc5 	bl	8001178 <lcd_data>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <lcd_data16>:
  CMD(ST7735S_MADCTL), 0xa0,
};


static void lcd_data16(uint16_t value)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	0a1b      	lsrs	r3, r3, #8
 8001204:	b29b      	uxth	r3, r3
 8001206:	b2db      	uxtb	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ffb5 	bl	8001178 <lcd_data>
	lcd_data(value);
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ffb0 	bl	8001178 <lcd_data>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <lcd_set_window>:


static void lcd_set_window(int x, int y, int width, int height)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 800122e:	202a      	movs	r0, #42	; 0x2a
 8001230:	f7ff ff7c 	bl	800112c <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	b29b      	uxth	r3, r3
 8001238:	3301      	adds	r3, #1
 800123a:	b29b      	uxth	r3, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ffda 	bl	80011f6 <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	b29a      	uxth	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	b29b      	uxth	r3, r3
 800124a:	4413      	add	r3, r2
 800124c:	b29b      	uxth	r3, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ffd1 	bl	80011f6 <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 8001254:	202b      	movs	r0, #43	; 0x2b
 8001256:	f7ff ff69 	bl	800112c <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	b29b      	uxth	r3, r3
 800125e:	3302      	adds	r3, #2
 8001260:	b29b      	uxth	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ffc7 	bl	80011f6 <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	b29a      	uxth	r2, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	4413      	add	r3, r2
 8001272:	b29b      	uxth	r3, r3
 8001274:	3301      	adds	r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ffbc 	bl	80011f6 <lcd_data16>
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <lcd_init>:




void lcd_init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	2104      	movs	r1, #4
 8001292:	4817      	ldr	r0, [pc, #92]	; (80012f0 <lcd_init+0x68>)
 8001294:	f001 fbc6 	bl	8002a24 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001298:	2064      	movs	r0, #100	; 0x64
 800129a:	f000 f919 	bl	80014d0 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	2104      	movs	r1, #4
 80012a2:	4813      	ldr	r0, [pc, #76]	; (80012f0 <lcd_init+0x68>)
 80012a4:	f001 fbbe 	bl	8002a24 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80012a8:	2064      	movs	r0, #100	; 0x64
 80012aa:	f000 f911 	bl	80014d0 <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	e009      	b.n	80012c8 <lcd_init+0x40>
    lcd_send(init_table[i]);
 80012b4:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <lcd_init+0x6c>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff81 	bl	80011c4 <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3301      	adds	r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b4b      	cmp	r3, #75	; 0x4b
 80012cc:	d9f2      	bls.n	80012b4 <lcd_init+0x2c>
  }

  HAL_Delay(200);
 80012ce:	20c8      	movs	r0, #200	; 0xc8
 80012d0:	f000 f8fe 	bl	80014d0 <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 80012d4:	2011      	movs	r0, #17
 80012d6:	f7ff ff29 	bl	800112c <lcd_cmd>
  HAL_Delay(120);
 80012da:	2078      	movs	r0, #120	; 0x78
 80012dc:	f000 f8f8 	bl	80014d0 <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
 80012e0:	2029      	movs	r0, #41	; 0x29
 80012e2:	f7ff ff23 	bl	800112c <lcd_cmd>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	48000400 	.word	0x48000400
 80012f4:	0800a8e8 	.word	0x0800a8e8

080012f8 <lcd_put_pixel>:

void lcd_put_pixel(int x, int y, uint16_t color)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	4613      	mov	r3, r2
 8001304:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	015b      	lsls	r3, r3, #5
 8001310:	461a      	mov	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4413      	add	r3, r2
 8001316:	4905      	ldr	r1, [pc, #20]	; (800132c <lcd_put_pixel+0x34>)
 8001318:	88fa      	ldrh	r2, [r7, #6]
 800131a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000264 	.word	0x20000264

08001330 <lcd_copy>:

void lcd_copy(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	22a0      	movs	r2, #160	; 0xa0
 8001338:	2100      	movs	r1, #0
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff ff70 	bl	8001220 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 8001340:	202c      	movs	r0, #44	; 0x2c
 8001342:	f7ff fef3 	bl	800112c <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800134c:	4808      	ldr	r0, [pc, #32]	; (8001370 <lcd_copy+0x40>)
 800134e:	f001 fb69 	bl	8002a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <lcd_copy+0x40>)
 800135a:	f001 fb63 	bl	8002a24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer));
 800135e:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001362:	4904      	ldr	r1, [pc, #16]	; (8001374 <lcd_copy+0x44>)
 8001364:	4804      	ldr	r0, [pc, #16]	; (8001378 <lcd_copy+0x48>)
 8001366:	f004 fadf 	bl	8005928 <HAL_SPI_Transmit_DMA>
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	48000400 	.word	0x48000400
 8001374:	20000264 	.word	0x20000264
 8001378:	2000a290 	.word	0x2000a290

0800137c <lps_read_reg>:
#define LPS25HB_TEMP_OUT_H 		0x2C

#define TIMEOUT                 100

static uint8_t lps_read_reg(uint8_t reg)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af04      	add	r7, sp, #16
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	b29a      	uxth	r2, r3
 800138e:	2364      	movs	r3, #100	; 0x64
 8001390:	9302      	str	r3, [sp, #8]
 8001392:	2301      	movs	r3, #1
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	f107 030f 	add.w	r3, r7, #15
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	21ba      	movs	r1, #186	; 0xba
 80013a0:	4803      	ldr	r0, [pc, #12]	; (80013b0 <lps_read_reg+0x34>)
 80013a2:	f001 fd13 	bl	8002dcc <HAL_I2C_Mem_Read>

    return value;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000200 	.word	0x20000200

080013b4 <lps_write_reg>:

static void lps_write_reg(uint8_t reg, uint8_t value)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af04      	add	r7, sp, #16
 80013ba:	4603      	mov	r3, r0
 80013bc:	460a      	mov	r2, r1
 80013be:	71fb      	strb	r3, [r7, #7]
 80013c0:	4613      	mov	r3, r2
 80013c2:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	2364      	movs	r3, #100	; 0x64
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	2301      	movs	r3, #1
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	1dbb      	adds	r3, r7, #6
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2301      	movs	r3, #1
 80013d6:	21ba      	movs	r1, #186	; 0xba
 80013d8:	4803      	ldr	r0, [pc, #12]	; (80013e8 <lps_write_reg+0x34>)
 80013da:	f001 fbe3 	bl	8002ba4 <HAL_I2C_Mem_Write>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000200 	.word	0x20000200

080013ec <lps25hb_init>:

HAL_StatusTypeDef lps25hb_init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
    if (lps_read_reg(LPS25HB_WHO_AM_I) != 0xBD)
 80013f0:	200f      	movs	r0, #15
 80013f2:	f7ff ffc3 	bl	800137c <lps_read_reg>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2bbd      	cmp	r3, #189	; 0xbd
 80013fa:	d001      	beq.n	8001400 <lps25hb_init+0x14>
         return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e004      	b.n	800140a <lps25hb_init+0x1e>

    lps_write_reg(LPS25HB_CTRL_REG1,  0x80); //wake up sensor
 8001400:	2180      	movs	r1, #128	; 0x80
 8001402:	2020      	movs	r0, #32
 8001404:	f7ff ffd6 	bl	80013b4 <lps_write_reg>
    return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	bd80      	pop	{r7, pc}

0800140e <lps25hb_one_shot>:
    lps_write_reg(LPS25HB_CTRL_REG1,  0xC0);
        return HAL_OK;
}

HAL_StatusTypeDef lps25hb_one_shot(void)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	af00      	add	r7, sp, #0
    lps_write_reg(LPS25HB_CTRL_REG2, 0x01);
 8001412:	2101      	movs	r1, #1
 8001414:	2021      	movs	r0, #33	; 0x21
 8001416:	f7ff ffcd 	bl	80013b4 <lps_write_reg>
    return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	bd80      	pop	{r7, pc}

08001420 <lps25hb_read_temp>:
	  lps_write_reg(LPS25HB_CTRL_REG1, 0);
    return HAL_OK;
}

float lps25hb_read_temp(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af04      	add	r7, sp, #16
     int16_t temp;

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_TEMP_OUT_L | 0x80, 1, (uint8_t*)&temp, sizeof(temp), TIMEOUT) != HAL_OK)
 8001426:	2364      	movs	r3, #100	; 0x64
 8001428:	9302      	str	r3, [sp, #8]
 800142a:	2302      	movs	r3, #2
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	1dbb      	adds	r3, r7, #6
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2301      	movs	r3, #1
 8001434:	22ab      	movs	r2, #171	; 0xab
 8001436:	21ba      	movs	r1, #186	; 0xba
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <lps25hb_read_temp+0x50>)
 800143a:	f001 fcc7 	bl	8002dcc <HAL_I2C_Mem_Read>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <lps25hb_read_temp+0x28>
         Error_Handler();
 8001444:	f000 fb7a 	bl	8001b3c <Error_Handler>

     return 42.5f + temp / 480.0f;
 8001448:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001454:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001474 <lps25hb_read_temp+0x54>
 8001458:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800145c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001478 <lps25hb_read_temp+0x58>
 8001460:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001464:	eeb0 0a67 	vmov.f32	s0, s15
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000200 	.word	0x20000200
 8001474:	43f00000 	.word	0x43f00000
 8001478:	422a0000 	.word	0x422a0000

0800147c <lps25hb_read_pressure>:

float lps25hb_read_pressure(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af04      	add	r7, sp, #16
     int32_t pressure = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_PRESS_OUT_XL | 0x80, 1, (uint8_t*)&pressure, 3, TIMEOUT) != HAL_OK)
 8001486:	2364      	movs	r3, #100	; 0x64
 8001488:	9302      	str	r3, [sp, #8]
 800148a:	2303      	movs	r3, #3
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2301      	movs	r3, #1
 8001494:	22a8      	movs	r2, #168	; 0xa8
 8001496:	21ba      	movs	r1, #186	; 0xba
 8001498:	480b      	ldr	r0, [pc, #44]	; (80014c8 <lps25hb_read_pressure+0x4c>)
 800149a:	f001 fc97 	bl	8002dcc <HAL_I2C_Mem_Read>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <lps25hb_read_pressure+0x2c>
         Error_Handler();
 80014a4:	f000 fb4a 	bl	8001b3c <Error_Handler>

     return pressure / 4096.0f;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	ee07 3a90 	vmov	s15, r3
 80014ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80014cc <lps25hb_read_pressure+0x50>
 80014b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014ba:	eef0 7a66 	vmov.f32	s15, s13
}
 80014be:	eeb0 0a67 	vmov.f32	s0, s15
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000200 	.word	0x20000200
 80014cc:	45800000 	.word	0x45800000

080014d0 <HAL_Delay>:
/* USER CODE BEGIN 0 */


//Add __WFI() -> sleep (wait for interrupt)
void HAL_Delay(uint32_t Delay)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d8:	f000 ff4c 	bl	8002374 <HAL_GetTick>
 80014dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014e8:	d007      	beq.n	80014fa <HAL_Delay+0x2a>
  {
    wait += (uint32_t)uwTickFreq;
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_Delay+0x44>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4413      	add	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014f6:	e000      	b.n	80014fa <HAL_Delay+0x2a>
  {
	  __WFI();
 80014f8:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80014fa:	f000 ff3b 	bl	8002374 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	429a      	cmp	r2, r3
 8001508:	d8f6      	bhi.n	80014f8 <HAL_Delay+0x28>
  }
}
 800150a:	bf00      	nop
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000008 	.word	0x20000008

08001518 <__io_putchar>:

int __io_putchar(int ch)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b0a      	cmp	r3, #10
 8001524:	d102      	bne.n	800152c <__io_putchar+0x14>
    __io_putchar('\r');
 8001526:	200d      	movs	r0, #13
 8001528:	f7ff fff6 	bl	8001518 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800152c:	1d39      	adds	r1, r7, #4
 800152e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001532:	2201      	movs	r2, #1
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <__io_putchar+0x2c>)
 8001536:	f004 ffaf 	bl	8006498 <HAL_UART_Transmit>

  return 1;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	2000a344 	.word	0x2000a344

08001548 <HAL_GPIO_EXTI_Callback>:

volatile uint8_t flag = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]

  if (GPIO_Pin == USER_BUTTON_Pin) {
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d138      	bne.n	80015ca <HAL_GPIO_EXTI_Callback+0x82>
	  static uint32_t last_interrupt_time = 0;
	  uint32_t current_interrupt_time = HAL_GetTick();
 8001558:	f000 ff0c 	bl	8002374 <HAL_GetTick>
 800155c:	60f8      	str	r0, [r7, #12]
	  // button filter ( 100ms)
	  if ((current_interrupt_time - last_interrupt_time) > 300) {
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800156a:	d92e      	bls.n	80015ca <HAL_GPIO_EXTI_Callback+0x82>
		  last_interrupt_time = current_interrupt_time;
 800156c:	4a19      	ldr	r2, [pc, #100]	; (80015d4 <HAL_GPIO_EXTI_Callback+0x8c>)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6013      	str	r3, [r2, #0]
		  printf("Enter interrupt!\n");
 8001572:	4819      	ldr	r0, [pc, #100]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x90>)
 8001574:	f007 fb6a 	bl	8008c4c <puts>
		  HAL_Delay(100);
 8001578:	2064      	movs	r0, #100	; 0x64
 800157a:	f7ff ffa9 	bl	80014d0 <HAL_Delay>
		  if(flag==0) {
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <HAL_GPIO_EXTI_Callback+0x94>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d109      	bne.n	800159c <HAL_GPIO_EXTI_Callback+0x54>
			  flag=1;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <HAL_GPIO_EXTI_Callback+0x94>)
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
			  printf("Set flag 1\n");
 800158e:	4814      	ldr	r0, [pc, #80]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001590:	f007 fb5c 	bl	8008c4c <puts>
			  HAL_Delay(200);
 8001594:	20c8      	movs	r0, #200	; 0xc8
 8001596:	f7ff ff9b 	bl	80014d0 <HAL_Delay>
			  flag=0;

	  }
	}
  }
}
 800159a:	e016      	b.n	80015ca <HAL_GPIO_EXTI_Callback+0x82>
		  else if(flag==1) {
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <HAL_GPIO_EXTI_Callback+0x94>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d109      	bne.n	80015ba <HAL_GPIO_EXTI_Callback+0x72>
			  flag=2;
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_GPIO_EXTI_Callback+0x94>)
 80015a8:	2202      	movs	r2, #2
 80015aa:	701a      	strb	r2, [r3, #0]
			  printf("Set flag 2\n");
 80015ac:	480d      	ldr	r0, [pc, #52]	; (80015e4 <HAL_GPIO_EXTI_Callback+0x9c>)
 80015ae:	f007 fb4d 	bl	8008c4c <puts>
			  HAL_Delay(200);
 80015b2:	20c8      	movs	r0, #200	; 0xc8
 80015b4:	f7ff ff8c 	bl	80014d0 <HAL_Delay>
}
 80015b8:	e007      	b.n	80015ca <HAL_GPIO_EXTI_Callback+0x82>
		  else if (flag==2){
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_GPIO_EXTI_Callback+0x94>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d102      	bne.n	80015ca <HAL_GPIO_EXTI_Callback+0x82>
			  flag=0;
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <HAL_GPIO_EXTI_Callback+0x94>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000a268 	.word	0x2000a268
 80015d8:	0800a7b0 	.word	0x0800a7b0
 80015dc:	2000a264 	.word	0x2000a264
 80015e0:	0800a7c4 	.word	0x0800a7c4
 80015e4:	0800a7d0 	.word	0x0800a7d0

080015e8 <HAL_SPI_TxCpltCallback>:
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, currentTime.Minutes);
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, currentTime.Seconds);
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) //When we get interrupt (If DMA finish send data to LCD)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <HAL_SPI_TxCpltCallback+0x1c>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d101      	bne.n	80015fc <HAL_SPI_TxCpltCallback+0x14>
	{
		lcd_transfer_done();
 80015f8:	f000 f806 	bl	8001608 <lcd_transfer_done>
	}
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	2000a290 	.word	0x2000a290

08001608 <lcd_transfer_done>:

void lcd_transfer_done(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800160c:	2201      	movs	r2, #1
 800160e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001612:	4802      	ldr	r0, [pc, #8]	; (800161c <lcd_transfer_done+0x14>)
 8001614:	f001 fa06 	bl	8002a24 <HAL_GPIO_WritePin>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	48000400 	.word	0x48000400

08001620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001624:	b0a1      	sub	sp, #132	; 0x84
 8001626:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001628:	f000 fe3b 	bl	80022a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800162c:	f000 fa2e 	bl	8001a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001630:	f7ff fc3c 	bl	8000eac <MX_GPIO_Init>
  MX_RTC_Init();
 8001634:	f000 fa88 	bl	8001b48 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001638:	f000 fd7e 	bl	8002138 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800163c:	f7ff fcba 	bl	8000fb4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001640:	f000 faee 	bl	8001c20 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001644:	f000 fcc2 	bl	8001fcc <MX_TIM3_Init>
  MX_IWDG_Init();
 8001648:	f7ff fd52 	bl	80010f0 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_IWDG_Refresh(&hiwdg);
 800164c:	48ae      	ldr	r0, [pc, #696]	; (8001908 <main+0x2e8>)
 800164e:	f002 f863 	bl	8003718 <HAL_IWDG_Refresh>
  //read_and_save_correct_time_after_sleep();

  lcd_init();
 8001652:	f7ff fe19 	bl	8001288 <lcd_init>
  for (int i = 0; i < 8; i++) {
 8001656:	2300      	movs	r3, #0
 8001658:	677b      	str	r3, [r7, #116]	; 0x74
 800165a:	e032      	b.n	80016c2 <main+0xa2>
    hagl_draw_rounded_rectangle(2+i, 2+i, 158-i, 126-i, 8-i, rgb565(0, 0, i*16));
 800165c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800165e:	b29b      	uxth	r3, r3
 8001660:	3302      	adds	r3, #2
 8001662:	b29b      	uxth	r3, r3
 8001664:	b21d      	sxth	r5, r3
 8001666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001668:	b29b      	uxth	r3, r3
 800166a:	3302      	adds	r3, #2
 800166c:	b29b      	uxth	r3, r3
 800166e:	b21e      	sxth	r6, r3
 8001670:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001672:	b29b      	uxth	r3, r3
 8001674:	f1c3 039e 	rsb	r3, r3, #158	; 0x9e
 8001678:	b29b      	uxth	r3, r3
 800167a:	fa0f f883 	sxth.w	r8, r3
 800167e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001680:	b29b      	uxth	r3, r3
 8001682:	f1c3 037e 	rsb	r3, r3, #126	; 0x7e
 8001686:	b29b      	uxth	r3, r3
 8001688:	fa0f f983 	sxth.w	r9, r3
 800168c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800168e:	b29b      	uxth	r3, r3
 8001690:	f1c3 0308 	rsb	r3, r3, #8
 8001694:	b29b      	uxth	r3, r3
 8001696:	b21c      	sxth	r4, r3
 8001698:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800169a:	b2db      	uxtb	r3, r3
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	2100      	movs	r1, #0
 80016a4:	2000      	movs	r0, #0
 80016a6:	f006 fa6f 	bl	8007b88 <rgb565>
 80016aa:	4603      	mov	r3, r0
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	9400      	str	r4, [sp, #0]
 80016b0:	464b      	mov	r3, r9
 80016b2:	4642      	mov	r2, r8
 80016b4:	4631      	mov	r1, r6
 80016b6:	4628      	mov	r0, r5
 80016b8:	f006 f8cc 	bl	8007854 <hagl_draw_rounded_rectangle>
  for (int i = 0; i < 8; i++) {
 80016bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016be:	3301      	adds	r3, #1
 80016c0:	677b      	str	r3, [r7, #116]	; 0x74
 80016c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016c4:	2b07      	cmp	r3, #7
 80016c6:	ddc9      	ble.n	800165c <main+0x3c>
  }
  hagl_put_text(L"Hello World!", 40, 55, YELLOW, font6x9);
 80016c8:	4b90      	ldr	r3, [pc, #576]	; (800190c <main+0x2ec>)
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80016d0:	2237      	movs	r2, #55	; 0x37
 80016d2:	2128      	movs	r1, #40	; 0x28
 80016d4:	488e      	ldr	r0, [pc, #568]	; (8001910 <main+0x2f0>)
 80016d6:	f006 f835 	bl	8007744 <hagl_put_text>
  lcd_copy();
 80016da:	f7ff fe29 	bl	8001330 <lcd_copy>

  /*** check if the SB flag i set ***/
  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80016de:	4b8d      	ldr	r3, [pc, #564]	; (8001914 <main+0x2f4>)
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d05f      	beq.n	80017aa <main+0x18a>
  {
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB); //clear the flag (flag of low power mode)
 80016ea:	4b8a      	ldr	r3, [pc, #552]	; (8001914 <main+0x2f4>)
 80016ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f0:	619a      	str	r2, [r3, #24]
	  printf("Searching...\n");
 80016f2:	4889      	ldr	r0, [pc, #548]	; (8001918 <main+0x2f8>)
 80016f4:	f007 faaa 	bl	8008c4c <puts>
	  if (lps25hb_init() == HAL_OK) {
 80016f8:	f7ff fe78 	bl	80013ec <lps25hb_init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d14e      	bne.n	80017a0 <main+0x180>
	    printf("OK: LPS25HB\n");
 8001702:	4886      	ldr	r0, [pc, #536]	; (800191c <main+0x2fc>)
 8001704:	f007 faa2 	bl	8008c4c <puts>
	    lps25hb_one_shot();
 8001708:	f7ff fe81 	bl	800140e <lps25hb_one_shot>
	    HAL_Delay(100);
 800170c:	2064      	movs	r0, #100	; 0x64
 800170e:	f7ff fedf 	bl	80014d0 <HAL_Delay>
	    printf("T = %.1f*C\n", lps25hb_read_temp());
 8001712:	f7ff fe85 	bl	8001420 <lps25hb_read_temp>
 8001716:	ee10 3a10 	vmov	r3, s0
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe ff14 	bl	8000548 <__aeabi_f2d>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	487e      	ldr	r0, [pc, #504]	; (8001920 <main+0x300>)
 8001726:	f007 fa0b 	bl	8008b40 <iprintf>
	    printf("p = %.1f hPa\n", lps25hb_read_pressure()+14);
 800172a:	f7ff fea7 	bl	800147c <lps25hb_read_pressure>
 800172e:	eef0 7a40 	vmov.f32	s15, s0
 8001732:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001736:	ee77 7a87 	vadd.f32	s15, s15, s14
 800173a:	ee17 0a90 	vmov	r0, s15
 800173e:	f7fe ff03 	bl	8000548 <__aeabi_f2d>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4877      	ldr	r0, [pc, #476]	; (8001924 <main+0x304>)
 8001748:	f007 f9fa 	bl	8008b40 <iprintf>

	    RTC_TimeTypeDef time;
	    RTC_DateTypeDef date;
	    for(int i=0;i<2;i++){
 800174c:	2300      	movs	r3, #0
 800174e:	673b      	str	r3, [r7, #112]	; 0x70
 8001750:	e01f      	b.n	8001792 <main+0x172>
	  	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001752:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001756:	2200      	movs	r2, #0
 8001758:	4619      	mov	r1, r3
 800175a:	4873      	ldr	r0, [pc, #460]	; (8001928 <main+0x308>)
 800175c:	f003 fc94 	bl	8005088 <HAL_RTC_GetTime>
	  	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001760:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001764:	2200      	movs	r2, #0
 8001766:	4619      	mov	r1, r3
 8001768:	486f      	ldr	r0, [pc, #444]	; (8001928 <main+0x308>)
 800176a:	f003 fce9 	bl	8005140 <HAL_RTC_GetDate>
	  	  printf("Aktualny czas: %02d:%02d:%02d\n", time.Hours, time.Minutes, time.Seconds);
 800176e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001772:	4619      	mov	r1, r3
 8001774:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001778:	461a      	mov	r2, r3
 800177a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800177e:	486b      	ldr	r0, [pc, #428]	; (800192c <main+0x30c>)
 8001780:	f007 f9de 	bl	8008b40 <iprintf>
	  	  HAL_Delay(1000);
 8001784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001788:	f7ff fea2 	bl	80014d0 <HAL_Delay>
	    for(int i=0;i<2;i++){
 800178c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800178e:	3301      	adds	r3, #1
 8001790:	673b      	str	r3, [r7, #112]	; 0x70
 8001792:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001794:	2b01      	cmp	r3, #1
 8001796:	dddc      	ble.n	8001752 <main+0x132>
	    }

	    HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);   //disable PA0
 8001798:	2001      	movs	r0, #1
 800179a:	f001 fffd 	bl	8003798 <HAL_PWR_DisableWakeUpPin>
 800179e:	e004      	b.n	80017aa <main+0x18a>
	  } else {
	    printf("Error: LPS25HB not found\n");
 80017a0:	4863      	ldr	r0, [pc, #396]	; (8001930 <main+0x310>)
 80017a2:	f007 fa53 	bl	8008c4c <puts>
	    Error_Handler();
 80017a6:	f000 f9c9 	bl	8001b3c <Error_Handler>
	  }
  }

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80017aa:	213c      	movs	r1, #60	; 0x3c
 80017ac:	4861      	ldr	r0, [pc, #388]	; (8001934 <main+0x314>)
 80017ae:	f004 fc4f 	bl	8006050 <HAL_TIM_Encoder_Start>
  /*SET HOURS*/
  if(flag==1){
 80017b2:	4b61      	ldr	r3, [pc, #388]	; (8001938 <main+0x318>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	f040 8084 	bne.w	80018c6 <main+0x2a6>
	  printf("Entering first procedure!\n");
 80017be:	485f      	ldr	r0, [pc, #380]	; (800193c <main+0x31c>)
 80017c0:	f007 fa44 	bl	8008c4c <puts>
	  HAL_Delay(100);
 80017c4:	2064      	movs	r0, #100	; 0x64
 80017c6:	f7ff fe83 	bl	80014d0 <HAL_Delay>
	  int16_t prev_value=0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	  uint8_t i=0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	  RTC_TimeTypeDef time;
	  RTC_DateTypeDef date;
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80017d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017da:	2200      	movs	r2, #0
 80017dc:	4619      	mov	r1, r3
 80017de:	4852      	ldr	r0, [pc, #328]	; (8001928 <main+0x308>)
 80017e0:	f003 fc52 	bl	8005088 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80017e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017e8:	2200      	movs	r2, #0
 80017ea:	4619      	mov	r1, r3
 80017ec:	484e      	ldr	r0, [pc, #312]	; (8001928 <main+0x308>)
 80017ee:	f003 fca7 	bl	8005140 <HAL_RTC_GetDate>
	  while(flag==1){
 80017f2:	e063      	b.n	80018bc <main+0x29c>
		  int16_t value = __HAL_TIM_GET_COUNTER(&htim3);
 80017f4:	4b4f      	ldr	r3, [pc, #316]	; (8001934 <main+0x314>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		  if (value != prev_value) {
 80017fe:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8001802:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8001806:	429a      	cmp	r2, r3
 8001808:	d058      	beq.n	80018bc <main+0x29c>
			  //printf("value = %d\n", value);
			  i++;
 800180a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800180e:	3301      	adds	r3, #1
 8001810:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
			  if(value==prev_value+1){
 8001814:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8001818:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800181c:	3301      	adds	r3, #1
 800181e:	429a      	cmp	r2, r3
 8001820:	d120      	bne.n	8001864 <main+0x244>
				  if(i==2)
 8001822:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001826:	2b02      	cmp	r3, #2
 8001828:	d11c      	bne.n	8001864 <main+0x244>
				  {
					  time.Hours=time.Hours+1;
 800182a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800182e:	3301      	adds	r3, #1
 8001830:	b2db      	uxtb	r3, r3
 8001832:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					  if(time.Hours==24) time.Hours=0;
 8001836:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800183a:	2b18      	cmp	r3, #24
 800183c:	d102      	bne.n	8001844 <main+0x224>
 800183e:	2300      	movs	r3, #0
 8001840:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					  HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001844:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001848:	2200      	movs	r2, #0
 800184a:	4619      	mov	r1, r3
 800184c:	4836      	ldr	r0, [pc, #216]	; (8001928 <main+0x308>)
 800184e:	f003 fb7e 	bl	8004f4e <HAL_RTC_SetTime>
					  printf("Hours: %d\n", time.Hours);
 8001852:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001856:	4619      	mov	r1, r3
 8001858:	4839      	ldr	r0, [pc, #228]	; (8001940 <main+0x320>)
 800185a:	f007 f971 	bl	8008b40 <iprintf>
					  i=0;
 800185e:	2300      	movs	r3, #0
 8001860:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				  }
			  }
			  if(value==prev_value-1){
 8001864:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8001868:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800186c:	3b01      	subs	r3, #1
 800186e:	429a      	cmp	r2, r3
 8001870:	d120      	bne.n	80018b4 <main+0x294>
				  if(i==2)
 8001872:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001876:	2b02      	cmp	r3, #2
 8001878:	d11c      	bne.n	80018b4 <main+0x294>
				  {
					  time.Hours=time.Hours-1;
 800187a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800187e:	3b01      	subs	r3, #1
 8001880:	b2db      	uxtb	r3, r3
 8001882:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					  if(time.Hours==255) time.Hours=23;
 8001886:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800188a:	2bff      	cmp	r3, #255	; 0xff
 800188c:	d102      	bne.n	8001894 <main+0x274>
 800188e:	2317      	movs	r3, #23
 8001890:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					  HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001894:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001898:	2200      	movs	r2, #0
 800189a:	4619      	mov	r1, r3
 800189c:	4822      	ldr	r0, [pc, #136]	; (8001928 <main+0x308>)
 800189e:	f003 fb56 	bl	8004f4e <HAL_RTC_SetTime>
					  printf("Hours: %d\n", time.Hours);
 80018a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80018a6:	4619      	mov	r1, r3
 80018a8:	4825      	ldr	r0, [pc, #148]	; (8001940 <main+0x320>)
 80018aa:	f007 f949 	bl	8008b40 <iprintf>
					  i=0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				  }
			  }
			  prev_value = value;
 80018b4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80018b8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	  while(flag==1){
 80018bc:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <main+0x318>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d096      	beq.n	80017f4 <main+0x1d4>
		  }
	  }
  }

/*SET MINUTES*/
  if(flag==2){
 80018c6:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <main+0x318>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	f040 80bd 	bne.w	8001a4c <main+0x42c>
	  printf("Entering second procedure!\n");
 80018d2:	481c      	ldr	r0, [pc, #112]	; (8001944 <main+0x324>)
 80018d4:	f007 f9ba 	bl	8008c4c <puts>
	  HAL_Delay(100);
 80018d8:	2064      	movs	r0, #100	; 0x64
 80018da:	f7ff fdf9 	bl	80014d0 <HAL_Delay>
	  int16_t prev_value=0;
 80018de:	2300      	movs	r3, #0
 80018e0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	  uint8_t i=0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
	  RTC_TimeTypeDef time;
	  RTC_DateTypeDef date;
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	2200      	movs	r2, #0
 80018f0:	4619      	mov	r1, r3
 80018f2:	480d      	ldr	r0, [pc, #52]	; (8001928 <main+0x308>)
 80018f4:	f003 fbc8 	bl	8005088 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80018f8:	f107 0318 	add.w	r3, r7, #24
 80018fc:	2200      	movs	r2, #0
 80018fe:	4619      	mov	r1, r3
 8001900:	4809      	ldr	r0, [pc, #36]	; (8001928 <main+0x308>)
 8001902:	f003 fc1d 	bl	8005140 <HAL_RTC_GetDate>
	  while(flag==2){
 8001906:	e07c      	b.n	8001a02 <main+0x3e2>
 8001908:	20000254 	.word	0x20000254
 800190c:	0800a980 	.word	0x0800a980
 8001910:	0800a7dc 	.word	0x0800a7dc
 8001914:	40007000 	.word	0x40007000
 8001918:	0800a810 	.word	0x0800a810
 800191c:	0800a820 	.word	0x0800a820
 8001920:	0800a82c 	.word	0x0800a82c
 8001924:	0800a838 	.word	0x0800a838
 8001928:	2000a26c 	.word	0x2000a26c
 800192c:	0800a848 	.word	0x0800a848
 8001930:	0800a868 	.word	0x0800a868
 8001934:	2000a2f8 	.word	0x2000a2f8
 8001938:	2000a264 	.word	0x2000a264
 800193c:	0800a884 	.word	0x0800a884
 8001940:	0800a8a0 	.word	0x0800a8a0
 8001944:	0800a8ac 	.word	0x0800a8ac
		  int16_t value = __HAL_TIM_GET_COUNTER(&htim3);
 8001948:	4b48      	ldr	r3, [pc, #288]	; (8001a6c <main+0x44c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
		  HAL_IWDG_Refresh(&hiwdg);
 8001952:	4847      	ldr	r0, [pc, #284]	; (8001a70 <main+0x450>)
 8001954:	f001 fee0 	bl	8003718 <HAL_IWDG_Refresh>
		  if (value != prev_value) {
 8001958:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 800195c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8001960:	429a      	cmp	r2, r3
 8001962:	d04e      	beq.n	8001a02 <main+0x3e2>
			  //printf("value = %d\n", value);
			  i++;
 8001964:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001968:	3301      	adds	r3, #1
 800196a:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			  if(value==prev_value+1){
 800196e:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 8001972:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8001976:	3301      	adds	r3, #1
 8001978:	429a      	cmp	r2, r3
 800197a:	d11b      	bne.n	80019b4 <main+0x394>
				  if(i==2)
 800197c:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001980:	2b02      	cmp	r3, #2
 8001982:	d117      	bne.n	80019b4 <main+0x394>
				  {
					  time.Minutes=time.Minutes+1;
 8001984:	7f7b      	ldrb	r3, [r7, #29]
 8001986:	3301      	adds	r3, #1
 8001988:	b2db      	uxtb	r3, r3
 800198a:	777b      	strb	r3, [r7, #29]
					  if(time.Minutes==60) time.Minutes=0;
 800198c:	7f7b      	ldrb	r3, [r7, #29]
 800198e:	2b3c      	cmp	r3, #60	; 0x3c
 8001990:	d101      	bne.n	8001996 <main+0x376>
 8001992:	2300      	movs	r3, #0
 8001994:	777b      	strb	r3, [r7, #29]
					  HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	2200      	movs	r2, #0
 800199c:	4619      	mov	r1, r3
 800199e:	4835      	ldr	r0, [pc, #212]	; (8001a74 <main+0x454>)
 80019a0:	f003 fad5 	bl	8004f4e <HAL_RTC_SetTime>
					  printf("Minutes: %d\n", time.Minutes);
 80019a4:	7f7b      	ldrb	r3, [r7, #29]
 80019a6:	4619      	mov	r1, r3
 80019a8:	4833      	ldr	r0, [pc, #204]	; (8001a78 <main+0x458>)
 80019aa:	f007 f8c9 	bl	8008b40 <iprintf>
					  i=0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
				  }
			  }
			  if(value==prev_value-1){
 80019b4:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 80019b8:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 80019bc:	3b01      	subs	r3, #1
 80019be:	429a      	cmp	r2, r3
 80019c0:	d11b      	bne.n	80019fa <main+0x3da>
				  if(i==2)
 80019c2:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d117      	bne.n	80019fa <main+0x3da>
				  {
					  time.Minutes=time.Minutes-1;
 80019ca:	7f7b      	ldrb	r3, [r7, #29]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	777b      	strb	r3, [r7, #29]
					  if(time.Minutes==255) time.Minutes=59;
 80019d2:	7f7b      	ldrb	r3, [r7, #29]
 80019d4:	2bff      	cmp	r3, #255	; 0xff
 80019d6:	d101      	bne.n	80019dc <main+0x3bc>
 80019d8:	233b      	movs	r3, #59	; 0x3b
 80019da:	777b      	strb	r3, [r7, #29]
					  HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80019dc:	f107 031c 	add.w	r3, r7, #28
 80019e0:	2200      	movs	r2, #0
 80019e2:	4619      	mov	r1, r3
 80019e4:	4823      	ldr	r0, [pc, #140]	; (8001a74 <main+0x454>)
 80019e6:	f003 fab2 	bl	8004f4e <HAL_RTC_SetTime>
					  printf("Minutes: %d\n", time.Minutes);
 80019ea:	7f7b      	ldrb	r3, [r7, #29]
 80019ec:	4619      	mov	r1, r3
 80019ee:	4822      	ldr	r0, [pc, #136]	; (8001a78 <main+0x458>)
 80019f0:	f007 f8a6 	bl	8008b40 <iprintf>
					  i=0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
				  }
			  }
			  prev_value = value;
 80019fa:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80019fe:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	  while(flag==2){
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <main+0x45c>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d09d      	beq.n	8001948 <main+0x328>
		  }
	  }


	    for(int i=0;i<1;i++){
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	667b      	str	r3, [r7, #100]	; 0x64
 8001a10:	e019      	b.n	8001a46 <main+0x426>
		    RTC_TimeTypeDef time;
		    RTC_DateTypeDef date;
	  	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2200      	movs	r2, #0
 8001a16:	4619      	mov	r1, r3
 8001a18:	4816      	ldr	r0, [pc, #88]	; (8001a74 <main+0x454>)
 8001a1a:	f003 fb35 	bl	8005088 <HAL_RTC_GetTime>
	  	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001a1e:	463b      	mov	r3, r7
 8001a20:	2200      	movs	r2, #0
 8001a22:	4619      	mov	r1, r3
 8001a24:	4813      	ldr	r0, [pc, #76]	; (8001a74 <main+0x454>)
 8001a26:	f003 fb8b 	bl	8005140 <HAL_RTC_GetDate>
	  	  printf("Aktualny czas: %02d:%02d:%02d\n", time.Hours, time.Minutes, time.Seconds);
 8001a2a:	793b      	ldrb	r3, [r7, #4]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	797b      	ldrb	r3, [r7, #5]
 8001a30:	461a      	mov	r2, r3
 8001a32:	79bb      	ldrb	r3, [r7, #6]
 8001a34:	4812      	ldr	r0, [pc, #72]	; (8001a80 <main+0x460>)
 8001a36:	f007 f883 	bl	8008b40 <iprintf>
	  	  HAL_Delay(100);
 8001a3a:	2064      	movs	r0, #100	; 0x64
 8001a3c:	f7ff fd48 	bl	80014d0 <HAL_Delay>
	    for(int i=0;i<1;i++){
 8001a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a42:	3301      	adds	r3, #1
 8001a44:	667b      	str	r3, [r7, #100]	; 0x64
 8001a46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	dde2      	ble.n	8001a12 <main+0x3f2>
	    }
  }


  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU); //clear wake-up flag before entry standby mode
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <main+0x464>)
 8001a4e:	221f      	movs	r2, #31
 8001a50:	619a      	str	r2, [r3, #24]
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1_LOW);
 8001a52:	2021      	movs	r0, #33	; 0x21
 8001a54:	f001 fe80 	bl	8003758 <HAL_PWR_EnableWakeUpPin>
  printf("Going sleep...\n");
 8001a58:	480b      	ldr	r0, [pc, #44]	; (8001a88 <main+0x468>)
 8001a5a:	f007 f8f7 	bl	8008c4c <puts>
  HAL_IWDG_Refresh(&hiwdg);
 8001a5e:	4804      	ldr	r0, [pc, #16]	; (8001a70 <main+0x450>)
 8001a60:	f001 fe5a 	bl	8003718 <HAL_IWDG_Refresh>
  IWDG_STDBY_FREEZE;
  IWDG_STOP_FREEZE;
  //save_time_to_sleep();
  HAL_PWR_EnterSTANDBYMode();
 8001a64:	f001 feae 	bl	80037c4 <HAL_PWR_EnterSTANDBYMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <main+0x448>
 8001a6a:	bf00      	nop
 8001a6c:	2000a2f8 	.word	0x2000a2f8
 8001a70:	20000254 	.word	0x20000254
 8001a74:	2000a26c 	.word	0x2000a26c
 8001a78:	0800a8c8 	.word	0x0800a8c8
 8001a7c:	2000a264 	.word	0x2000a264
 8001a80:	0800a848 	.word	0x0800a848
 8001a84:	40007000 	.word	0x40007000
 8001a88:	0800a8d8 	.word	0x0800a8d8

08001a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b096      	sub	sp, #88	; 0x58
 8001a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	2244      	movs	r2, #68	; 0x44
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f006 fafe 	bl	800809c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa0:	463b      	mov	r3, r7
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
 8001aac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001aae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ab2:	f001 feaf 	bl	8003814 <HAL_PWREx_ControlVoltageScaling>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001abc:	f000 f83e 	bl	8001b3c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ac0:	f001 fe3a 	bl	8003738 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <SystemClock_Config+0xac>)
 8001ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aca:	4a1b      	ldr	r2, [pc, #108]	; (8001b38 <SystemClock_Config+0xac>)
 8001acc:	f023 0318 	bic.w	r3, r3, #24
 8001ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001ad4:	231c      	movs	r3, #28
 8001ad6:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001adc:	2301      	movs	r3, #1
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001ae8:	2370      	movs	r3, #112	; 0x70
 8001aea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4618      	mov	r0, r3
 8001af6:	f001 fee3 	bl	80038c0 <HAL_RCC_OscConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001b00:	f000 f81c 	bl	8001b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b04:	230f      	movs	r3, #15
 8001b06:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b18:	463b      	mov	r3, r7
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f002 faab 	bl	8004078 <HAL_RCC_ClockConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001b28:	f000 f808 	bl	8001b3c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001b2c:	f002 ffb2 	bl	8004a94 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001b30:	bf00      	nop
 8001b32:	3758      	adds	r7, #88	; 0x58
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40021000 	.word	0x40021000

08001b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b40:	b672      	cpsid	i
}
 8001b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <Error_Handler+0x8>
	...

08001b48 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b4c:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <MX_RTC_Init+0x5c>)
 8001b4e:	4a16      	ldr	r2, [pc, #88]	; (8001ba8 <MX_RTC_Init+0x60>)
 8001b50:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b52:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <MX_RTC_Init+0x5c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <MX_RTC_Init+0x5c>)
 8001b5a:	227f      	movs	r2, #127	; 0x7f
 8001b5c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <MX_RTC_Init+0x5c>)
 8001b60:	22ff      	movs	r2, #255	; 0xff
 8001b62:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <MX_RTC_Init+0x5c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <MX_RTC_Init+0x5c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_RTC_Init+0x5c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <MX_RTC_Init+0x5c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b7c:	4809      	ldr	r0, [pc, #36]	; (8001ba4 <MX_RTC_Init+0x5c>)
 8001b7e:	f003 f96b 	bl	8004e58 <HAL_RTC_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001b88:	f7ff ffd8 	bl	8001b3c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 8, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8001b8c:	2204      	movs	r2, #4
 8001b8e:	2108      	movs	r1, #8
 8001b90:	4804      	ldr	r0, [pc, #16]	; (8001ba4 <MX_RTC_Init+0x5c>)
 8001b92:	f003 fbf3 	bl	800537c <HAL_RTCEx_SetWakeUpTimer_IT>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001b9c:	f7ff ffce 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	2000a26c 	.word	0x2000a26c
 8001ba8:	40002800 	.word	0x40002800

08001bac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b0a4      	sub	sp, #144	; 0x90
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb4:	f107 0308 	add.w	r3, r7, #8
 8001bb8:	2288      	movs	r2, #136	; 0x88
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f006 fa6d 	bl	800809c <memset>
  if(rtcHandle->Instance==RTC)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a14      	ldr	r2, [pc, #80]	; (8001c18 <HAL_RTC_MspInit+0x6c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d120      	bne.n	8001c0e <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bd0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 fc6e 	bl	80044c0 <HAL_RCCEx_PeriphCLKConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001bea:	f7ff ffa7 	bl	8001b3c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RTC_MspInit+0x70>)
 8001bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf4:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <HAL_RTC_MspInit+0x70>)
 8001bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 1, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2101      	movs	r1, #1
 8001c02:	2003      	movs	r0, #3
 8001c04:	f000 fc9d 	bl	8002542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f000 fcb6 	bl	800257a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c0e:	bf00      	nop
 8001c10:	3790      	adds	r7, #144	; 0x90
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40002800 	.word	0x40002800
 8001c1c:	40021000 	.word	0x40021000

08001c20 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001c24:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <MX_SPI2_Init+0x74>)
 8001c26:	4a1c      	ldr	r2, [pc, #112]	; (8001c98 <MX_SPI2_Init+0x78>)
 8001c28:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_SPI2_Init+0x74>)
 8001c2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c30:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <MX_SPI2_Init+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <MX_SPI2_Init+0x74>)
 8001c3a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c3e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <MX_SPI2_Init+0x74>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <MX_SPI2_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <MX_SPI2_Init+0x74>)
 8001c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c52:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c54:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <MX_SPI2_Init+0x74>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <MX_SPI2_Init+0x74>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <MX_SPI2_Init+0x74>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <MX_SPI2_Init+0x74>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <MX_SPI2_Init+0x74>)
 8001c6e:	2207      	movs	r2, #7
 8001c70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <MX_SPI2_Init+0x74>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <MX_SPI2_Init+0x74>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c7e:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_SPI2_Init+0x74>)
 8001c80:	f003 fc40 	bl	8005504 <HAL_SPI_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001c8a:	f7ff ff57 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000a290 	.word	0x2000a290
 8001c98:	40003800 	.word	0x40003800

08001c9c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08a      	sub	sp, #40	; 0x28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a25      	ldr	r2, [pc, #148]	; (8001d50 <HAL_SPI_MspInit+0xb4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d144      	bne.n	8001d48 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cbe:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <HAL_SPI_MspInit+0xb8>)
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc2:	4a24      	ldr	r2, [pc, #144]	; (8001d54 <HAL_SPI_MspInit+0xb8>)
 8001cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc8:	6593      	str	r3, [r2, #88]	; 0x58
 8001cca:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <HAL_SPI_MspInit+0xb8>)
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd6:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <HAL_SPI_MspInit+0xb8>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cda:	4a1e      	ldr	r2, [pc, #120]	; (8001d54 <HAL_SPI_MspInit+0xb8>)
 8001cdc:	f043 0304 	orr.w	r3, r3, #4
 8001ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <HAL_SPI_MspInit+0xb8>)
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cee:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_SPI_MspInit+0xb8>)
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf2:	4a18      	ldr	r2, [pc, #96]	; (8001d54 <HAL_SPI_MspInit+0xb8>)
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <HAL_SPI_MspInit+0xb8>)
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d06:	2308      	movs	r3, #8
 8001d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d16:	2305      	movs	r3, #5
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	4619      	mov	r1, r3
 8001d20:	480d      	ldr	r0, [pc, #52]	; (8001d58 <HAL_SPI_MspInit+0xbc>)
 8001d22:	f000 fcd5 	bl	80026d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d38:	2305      	movs	r3, #5
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	4619      	mov	r1, r3
 8001d42:	4806      	ldr	r0, [pc, #24]	; (8001d5c <HAL_SPI_MspInit+0xc0>)
 8001d44:	f000 fcc4 	bl	80026d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	; 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40003800 	.word	0x40003800
 8001d54:	40021000 	.word	0x40021000
 8001d58:	48000800 	.word	0x48000800
 8001d5c:	48000400 	.word	0x48000400

08001d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d66:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <HAL_MspInit+0x44>)
 8001d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6a:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <HAL_MspInit+0x44>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6613      	str	r3, [r2, #96]	; 0x60
 8001d72:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <HAL_MspInit+0x44>)
 8001d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_MspInit+0x44>)
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	4a08      	ldr	r2, [pc, #32]	; (8001da4 <HAL_MspInit+0x44>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d88:	6593      	str	r3, [r2, #88]	; 0x58
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_MspInit+0x44>)
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000

08001da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <NMI_Handler+0x4>

08001dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db2:	e7fe      	b.n	8001db2 <HardFault_Handler+0x4>

08001db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <MemManage_Handler+0x4>

08001dba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dbe:	e7fe      	b.n	8001dbe <BusFault_Handler+0x4>

08001dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <UsageFault_Handler+0x4>

08001dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df4:	f000 faaa 	bl	800234c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <RTC_WKUP_IRQHandler+0x10>)
 8001e02:	f003 fb4f 	bl	80054a4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000a26c 	.word	0x2000a26c

08001e10 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8001e14:	2001      	movs	r0, #1
 8001e16:	f000 fe1d 	bl	8002a54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  return 1;
 8001e22:	2301      	movs	r3, #1
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <_kill>:

int _kill(int pid, int sig)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e38:	f005 fed8 	bl	8007bec <__errno>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2216      	movs	r2, #22
 8001e40:	601a      	str	r2, [r3, #0]
  return -1;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <_exit>:

void _exit (int status)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ffe7 	bl	8001e2e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e60:	e7fe      	b.n	8001e60 <_exit+0x12>

08001e62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	e00a      	b.n	8001e8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e74:	f3af 8000 	nop.w
 8001e78:	4601      	mov	r1, r0
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	60ba      	str	r2, [r7, #8]
 8001e80:	b2ca      	uxtb	r2, r1
 8001e82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	3301      	adds	r3, #1
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	dbf0      	blt.n	8001e74 <_read+0x12>
  }

  return len;
 8001e92:	687b      	ldr	r3, [r7, #4]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	e009      	b.n	8001ec2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	60ba      	str	r2, [r7, #8]
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fb2e 	bl	8001518 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	dbf1      	blt.n	8001eae <_write+0x12>
  }
  return len;
 8001eca:	687b      	ldr	r3, [r7, #4]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_close>:

int _close(int file)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001efc:	605a      	str	r2, [r3, #4]
  return 0;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <_isatty>:

int _isatty(int file)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f14:	2301      	movs	r3, #1
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b085      	sub	sp, #20
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f44:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <_sbrk+0x5c>)
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <_sbrk+0x60>)
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <_sbrk+0x64>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d102      	bne.n	8001f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <_sbrk+0x64>)
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <_sbrk+0x68>)
 8001f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <_sbrk+0x64>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d207      	bcs.n	8001f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f6c:	f005 fe3e 	bl	8007bec <__errno>
 8001f70:	4603      	mov	r3, r0
 8001f72:	220c      	movs	r2, #12
 8001f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f7a:	e009      	b.n	8001f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <_sbrk+0x64>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f82:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <_sbrk+0x64>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	4a05      	ldr	r2, [pc, #20]	; (8001fa0 <_sbrk+0x64>)
 8001f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20018000 	.word	0x20018000
 8001f9c:	00002000 	.word	0x00002000
 8001fa0:	2000a2f4 	.word	0x2000a2f4
 8001fa4:	2000a3e0 	.word	0x2000a3e0

08001fa8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <SystemInit+0x20>)
 8001fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb2:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <SystemInit+0x20>)
 8001fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08c      	sub	sp, #48	; 0x30
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fd2:	f107 030c 	add.w	r3, r7, #12
 8001fd6:	2224      	movs	r2, #36	; 0x24
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f006 f85e 	bl	800809c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fea:	4b21      	ldr	r3, [pc, #132]	; (8002070 <MX_TIM3_Init+0xa4>)
 8001fec:	4a21      	ldr	r2, [pc, #132]	; (8002074 <MX_TIM3_Init+0xa8>)
 8001fee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ff0:	4b1f      	ldr	r3, [pc, #124]	; (8002070 <MX_TIM3_Init+0xa4>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <MX_TIM3_Init+0xa4>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ffc:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <MX_TIM3_Init+0xa4>)
 8001ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002002:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <MX_TIM3_Init+0xa4>)
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200a:	4b19      	ldr	r3, [pc, #100]	; (8002070 <MX_TIM3_Init+0xa4>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002010:	2301      	movs	r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002014:	2300      	movs	r3, #0
 8002016:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002018:	2301      	movs	r3, #1
 800201a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8002020:	2301      	movs	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002024:	2300      	movs	r3, #0
 8002026:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002028:	2301      	movs	r3, #1
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800202c:	2300      	movs	r3, #0
 800202e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002030:	230f      	movs	r3, #15
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002034:	f107 030c 	add.w	r3, r7, #12
 8002038:	4619      	mov	r1, r3
 800203a:	480d      	ldr	r0, [pc, #52]	; (8002070 <MX_TIM3_Init+0xa4>)
 800203c:	f003 ff62 	bl	8005f04 <HAL_TIM_Encoder_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002046:	f7ff fd79 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002052:	463b      	mov	r3, r7
 8002054:	4619      	mov	r1, r3
 8002056:	4806      	ldr	r0, [pc, #24]	; (8002070 <MX_TIM3_Init+0xa4>)
 8002058:	f004 f948 	bl	80062ec <HAL_TIMEx_MasterConfigSynchronization>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002062:	f7ff fd6b 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002066:	bf00      	nop
 8002068:	3730      	adds	r7, #48	; 0x30
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	2000a2f8 	.word	0x2000a2f8
 8002074:	40000400 	.word	0x40000400

08002078 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a25      	ldr	r2, [pc, #148]	; (800212c <HAL_TIM_Encoder_MspInit+0xb4>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d144      	bne.n	8002124 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800209a:	4b25      	ldr	r3, [pc, #148]	; (8002130 <HAL_TIM_Encoder_MspInit+0xb8>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	4a24      	ldr	r2, [pc, #144]	; (8002130 <HAL_TIM_Encoder_MspInit+0xb8>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	6593      	str	r3, [r2, #88]	; 0x58
 80020a6:	4b22      	ldr	r3, [pc, #136]	; (8002130 <HAL_TIM_Encoder_MspInit+0xb8>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <HAL_TIM_Encoder_MspInit+0xb8>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	4a1e      	ldr	r2, [pc, #120]	; (8002130 <HAL_TIM_Encoder_MspInit+0xb8>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <HAL_TIM_Encoder_MspInit+0xb8>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ca:	4b19      	ldr	r3, [pc, #100]	; (8002130 <HAL_TIM_Encoder_MspInit+0xb8>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ce:	4a18      	ldr	r2, [pc, #96]	; (8002130 <HAL_TIM_Encoder_MspInit+0xb8>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020d6:	4b16      	ldr	r3, [pc, #88]	; (8002130 <HAL_TIM_Encoder_MspInit+0xb8>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020f2:	2302      	movs	r3, #2
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	4619      	mov	r1, r3
 80020fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002100:	f000 fae6 	bl	80026d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002104:	2340      	movs	r3, #64	; 0x40
 8002106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002114:	2302      	movs	r3, #2
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	4619      	mov	r1, r3
 800211e:	4805      	ldr	r0, [pc, #20]	; (8002134 <HAL_TIM_Encoder_MspInit+0xbc>)
 8002120:	f000 fad6 	bl	80026d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002124:	bf00      	nop
 8002126:	3728      	adds	r7, #40	; 0x28
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40000400 	.word	0x40000400
 8002130:	40021000 	.word	0x40021000
 8002134:	48000800 	.word	0x48000800

08002138 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800213c:	4b14      	ldr	r3, [pc, #80]	; (8002190 <MX_USART2_UART_Init+0x58>)
 800213e:	4a15      	ldr	r2, [pc, #84]	; (8002194 <MX_USART2_UART_Init+0x5c>)
 8002140:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002142:	4b13      	ldr	r3, [pc, #76]	; (8002190 <MX_USART2_UART_Init+0x58>)
 8002144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002148:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800214a:	4b11      	ldr	r3, [pc, #68]	; (8002190 <MX_USART2_UART_Init+0x58>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002150:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <MX_USART2_UART_Init+0x58>)
 8002152:	2200      	movs	r2, #0
 8002154:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002156:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <MX_USART2_UART_Init+0x58>)
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <MX_USART2_UART_Init+0x58>)
 800215e:	220c      	movs	r2, #12
 8002160:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <MX_USART2_UART_Init+0x58>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <MX_USART2_UART_Init+0x58>)
 800216a:	2200      	movs	r2, #0
 800216c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <MX_USART2_UART_Init+0x58>)
 8002170:	2200      	movs	r2, #0
 8002172:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <MX_USART2_UART_Init+0x58>)
 8002176:	2200      	movs	r2, #0
 8002178:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800217a:	4805      	ldr	r0, [pc, #20]	; (8002190 <MX_USART2_UART_Init+0x58>)
 800217c:	f004 f93e 	bl	80063fc <HAL_UART_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002186:	f7ff fcd9 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	2000a344 	.word	0x2000a344
 8002194:	40004400 	.word	0x40004400

08002198 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b0ac      	sub	sp, #176	; 0xb0
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	2288      	movs	r2, #136	; 0x88
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f005 ff6f 	bl	800809c <memset>
  if(uartHandle->Instance==USART2)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a21      	ldr	r2, [pc, #132]	; (8002248 <HAL_UART_MspInit+0xb0>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d13b      	bne.n	8002240 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021c8:	2302      	movs	r3, #2
 80021ca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021cc:	2300      	movs	r3, #0
 80021ce:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4618      	mov	r0, r3
 80021d6:	f002 f973 	bl	80044c0 <HAL_RCCEx_PeriphCLKConfig>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021e0:	f7ff fcac 	bl	8001b3c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <HAL_UART_MspInit+0xb4>)
 80021e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e8:	4a18      	ldr	r2, [pc, #96]	; (800224c <HAL_UART_MspInit+0xb4>)
 80021ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ee:	6593      	str	r3, [r2, #88]	; 0x58
 80021f0:	4b16      	ldr	r3, [pc, #88]	; (800224c <HAL_UART_MspInit+0xb4>)
 80021f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fc:	4b13      	ldr	r3, [pc, #76]	; (800224c <HAL_UART_MspInit+0xb4>)
 80021fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002200:	4a12      	ldr	r2, [pc, #72]	; (800224c <HAL_UART_MspInit+0xb4>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002208:	4b10      	ldr	r3, [pc, #64]	; (800224c <HAL_UART_MspInit+0xb4>)
 800220a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002214:	230c      	movs	r3, #12
 8002216:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002226:	2303      	movs	r3, #3
 8002228:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800222c:	2307      	movs	r3, #7
 800222e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002236:	4619      	mov	r1, r3
 8002238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800223c:	f000 fa48 	bl	80026d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002240:	bf00      	nop
 8002242:	37b0      	adds	r7, #176	; 0xb0
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40004400 	.word	0x40004400
 800224c:	40021000 	.word	0x40021000

08002250 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002250:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002288 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002254:	f7ff fea8 	bl	8001fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002258:	480c      	ldr	r0, [pc, #48]	; (800228c <LoopForever+0x6>)
  ldr r1, =_edata
 800225a:	490d      	ldr	r1, [pc, #52]	; (8002290 <LoopForever+0xa>)
  ldr r2, =_sidata
 800225c:	4a0d      	ldr	r2, [pc, #52]	; (8002294 <LoopForever+0xe>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002260:	e002      	b.n	8002268 <LoopCopyDataInit>

08002262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002266:	3304      	adds	r3, #4

08002268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800226a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800226c:	d3f9      	bcc.n	8002262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800226e:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002270:	4c0a      	ldr	r4, [pc, #40]	; (800229c <LoopForever+0x16>)
  movs r3, #0
 8002272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002274:	e001      	b.n	800227a <LoopFillZerobss>

08002276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002278:	3204      	adds	r2, #4

0800227a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800227a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800227c:	d3fb      	bcc.n	8002276 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800227e:	f005 fe73 	bl	8007f68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002282:	f7ff f9cd 	bl	8001620 <main>

08002286 <LoopForever>:

LoopForever:
    b LoopForever
 8002286:	e7fe      	b.n	8002286 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002288:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800228c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002290:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002294:	0800dd6c 	.word	0x0800dd6c
  ldr r2, =_sbss
 8002298:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800229c:	2000a3dc 	.word	0x2000a3dc

080022a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022a0:	e7fe      	b.n	80022a0 <ADC1_2_IRQHandler>

080022a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ac:	2003      	movs	r0, #3
 80022ae:	f000 f93d 	bl	800252c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022b2:	2001      	movs	r0, #1
 80022b4:	f000 f80e 	bl	80022d4 <HAL_InitTick>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	71fb      	strb	r3, [r7, #7]
 80022c2:	e001      	b.n	80022c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022c4:	f7ff fd4c 	bl	8001d60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022c8:	79fb      	ldrb	r3, [r7, #7]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022e0:	4b17      	ldr	r3, [pc, #92]	; (8002340 <HAL_InitTick+0x6c>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d023      	beq.n	8002330 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022e8:	4b16      	ldr	r3, [pc, #88]	; (8002344 <HAL_InitTick+0x70>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b14      	ldr	r3, [pc, #80]	; (8002340 <HAL_InitTick+0x6c>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	4619      	mov	r1, r3
 80022f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 f949 	bl	8002596 <HAL_SYSTICK_Config>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10f      	bne.n	800232a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b0f      	cmp	r3, #15
 800230e:	d809      	bhi.n	8002324 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002310:	2200      	movs	r2, #0
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002318:	f000 f913 	bl	8002542 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800231c:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <HAL_InitTick+0x74>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	e007      	b.n	8002334 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	e004      	b.n	8002334 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	73fb      	strb	r3, [r7, #15]
 800232e:	e001      	b.n	8002334 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002334:	7bfb      	ldrb	r3, [r7, #15]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000008 	.word	0x20000008
 8002344:	20000000 	.word	0x20000000
 8002348:	20000004 	.word	0x20000004

0800234c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_IncTick+0x20>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_IncTick+0x24>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4413      	add	r3, r2
 800235c:	4a04      	ldr	r2, [pc, #16]	; (8002370 <HAL_IncTick+0x24>)
 800235e:	6013      	str	r3, [r2, #0]
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000008 	.word	0x20000008
 8002370:	2000a3c8 	.word	0x2000a3c8

08002374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return uwTick;
 8002378:	4b03      	ldr	r3, [pc, #12]	; (8002388 <HAL_GetTick+0x14>)
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	2000a3c8 	.word	0x2000a3c8

0800238c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <__NVIC_SetPriorityGrouping+0x44>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a8:	4013      	ands	r3, r2
 80023aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023be:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <__NVIC_SetPriorityGrouping+0x44>)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	60d3      	str	r3, [r2, #12]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d8:	4b04      	ldr	r3, [pc, #16]	; (80023ec <__NVIC_GetPriorityGrouping+0x18>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	f003 0307 	and.w	r3, r3, #7
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	db0b      	blt.n	800241a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	f003 021f 	and.w	r2, r3, #31
 8002408:	4907      	ldr	r1, [pc, #28]	; (8002428 <__NVIC_EnableIRQ+0x38>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	2001      	movs	r0, #1
 8002412:	fa00 f202 	lsl.w	r2, r0, r2
 8002416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000e100 	.word	0xe000e100

0800242c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	2b00      	cmp	r3, #0
 800243e:	db0a      	blt.n	8002456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	b2da      	uxtb	r2, r3
 8002444:	490c      	ldr	r1, [pc, #48]	; (8002478 <__NVIC_SetPriority+0x4c>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	0112      	lsls	r2, r2, #4
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	440b      	add	r3, r1
 8002450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002454:	e00a      	b.n	800246c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4908      	ldr	r1, [pc, #32]	; (800247c <__NVIC_SetPriority+0x50>)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	3b04      	subs	r3, #4
 8002464:	0112      	lsls	r2, r2, #4
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	440b      	add	r3, r1
 800246a:	761a      	strb	r2, [r3, #24]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000e100 	.word	0xe000e100
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	; 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f1c3 0307 	rsb	r3, r3, #7
 800249a:	2b04      	cmp	r3, #4
 800249c:	bf28      	it	cs
 800249e:	2304      	movcs	r3, #4
 80024a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3304      	adds	r3, #4
 80024a6:	2b06      	cmp	r3, #6
 80024a8:	d902      	bls.n	80024b0 <NVIC_EncodePriority+0x30>
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3b03      	subs	r3, #3
 80024ae:	e000      	b.n	80024b2 <NVIC_EncodePriority+0x32>
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43da      	mvns	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	401a      	ands	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	43d9      	mvns	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	4313      	orrs	r3, r2
         );
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3724      	adds	r7, #36	; 0x24
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024f8:	d301      	bcc.n	80024fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024fa:	2301      	movs	r3, #1
 80024fc:	e00f      	b.n	800251e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fe:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <SysTick_Config+0x40>)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3b01      	subs	r3, #1
 8002504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002506:	210f      	movs	r1, #15
 8002508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800250c:	f7ff ff8e 	bl	800242c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <SysTick_Config+0x40>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002516:	4b04      	ldr	r3, [pc, #16]	; (8002528 <SysTick_Config+0x40>)
 8002518:	2207      	movs	r2, #7
 800251a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	e000e010 	.word	0xe000e010

0800252c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ff29 	bl	800238c <__NVIC_SetPriorityGrouping>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b086      	sub	sp, #24
 8002546:	af00      	add	r7, sp, #0
 8002548:	4603      	mov	r3, r0
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002554:	f7ff ff3e 	bl	80023d4 <__NVIC_GetPriorityGrouping>
 8002558:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68b9      	ldr	r1, [r7, #8]
 800255e:	6978      	ldr	r0, [r7, #20]
 8002560:	f7ff ff8e 	bl	8002480 <NVIC_EncodePriority>
 8002564:	4602      	mov	r2, r0
 8002566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff5d 	bl	800242c <__NVIC_SetPriority>
}
 8002572:	bf00      	nop
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	4603      	mov	r3, r0
 8002582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff31 	bl	80023f0 <__NVIC_EnableIRQ>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff ffa2 	bl	80024e8 <SysTick_Config>
 80025a4:	4603      	mov	r3, r0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_DMA_Start_IT+0x20>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e04b      	b.n	8002666 <HAL_DMA_Start_IT+0xb8>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d13a      	bne.n	8002658 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2202      	movs	r2, #2
 80025e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0201 	bic.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f831 	bl	800266e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 020e 	orr.w	r2, r2, #14
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	e00f      	b.n	8002646 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0204 	bic.w	r2, r2, #4
 8002634:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 020a 	orr.w	r2, r2, #10
 8002644:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0201 	orr.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	e005      	b.n	8002664 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002660:	2302      	movs	r3, #2
 8002662:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002664:	7dfb      	ldrb	r3, [r7, #23]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800266e:	b480      	push	{r7}
 8002670:	b085      	sub	sp, #20
 8002672:	af00      	add	r7, sp, #0
 8002674:	60f8      	str	r0, [r7, #12]
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002680:	f003 021c 	and.w	r2, r3, #28
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	2101      	movs	r1, #1
 800268a:	fa01 f202 	lsl.w	r2, r1, r2
 800268e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2b10      	cmp	r3, #16
 800269e:	d108      	bne.n	80026b2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026b0:	e007      	b.n	80026c2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	60da      	str	r2, [r3, #12]
}
 80026c2:	bf00      	nop
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026de:	e17f      	b.n	80029e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	2101      	movs	r1, #1
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ec:	4013      	ands	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8171 	beq.w	80029da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b01      	cmp	r3, #1
 8002702:	d005      	beq.n	8002710 <HAL_GPIO_Init+0x40>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d130      	bne.n	8002772 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	2203      	movs	r2, #3
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002746:	2201      	movs	r2, #1
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	091b      	lsrs	r3, r3, #4
 800275c:	f003 0201 	and.w	r2, r3, #1
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b03      	cmp	r3, #3
 800277c:	d118      	bne.n	80027b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002784:	2201      	movs	r2, #1
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	08db      	lsrs	r3, r3, #3
 800279a:	f003 0201 	and.w	r2, r3, #1
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d017      	beq.n	80027ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	2203      	movs	r2, #3
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d123      	bne.n	8002840 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	08da      	lsrs	r2, r3, #3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3208      	adds	r2, #8
 8002800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002804:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	220f      	movs	r2, #15
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	08da      	lsrs	r2, r3, #3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3208      	adds	r2, #8
 800283a:	6939      	ldr	r1, [r7, #16]
 800283c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	2203      	movs	r2, #3
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4013      	ands	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0203 	and.w	r2, r3, #3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 80ac 	beq.w	80029da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002882:	4b5f      	ldr	r3, [pc, #380]	; (8002a00 <HAL_GPIO_Init+0x330>)
 8002884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002886:	4a5e      	ldr	r2, [pc, #376]	; (8002a00 <HAL_GPIO_Init+0x330>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6613      	str	r3, [r2, #96]	; 0x60
 800288e:	4b5c      	ldr	r3, [pc, #368]	; (8002a00 <HAL_GPIO_Init+0x330>)
 8002890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800289a:	4a5a      	ldr	r2, [pc, #360]	; (8002a04 <HAL_GPIO_Init+0x334>)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	089b      	lsrs	r3, r3, #2
 80028a0:	3302      	adds	r3, #2
 80028a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	220f      	movs	r2, #15
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028c4:	d025      	beq.n	8002912 <HAL_GPIO_Init+0x242>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a4f      	ldr	r2, [pc, #316]	; (8002a08 <HAL_GPIO_Init+0x338>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d01f      	beq.n	800290e <HAL_GPIO_Init+0x23e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a4e      	ldr	r2, [pc, #312]	; (8002a0c <HAL_GPIO_Init+0x33c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d019      	beq.n	800290a <HAL_GPIO_Init+0x23a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a4d      	ldr	r2, [pc, #308]	; (8002a10 <HAL_GPIO_Init+0x340>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_GPIO_Init+0x236>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a4c      	ldr	r2, [pc, #304]	; (8002a14 <HAL_GPIO_Init+0x344>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00d      	beq.n	8002902 <HAL_GPIO_Init+0x232>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a4b      	ldr	r2, [pc, #300]	; (8002a18 <HAL_GPIO_Init+0x348>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d007      	beq.n	80028fe <HAL_GPIO_Init+0x22e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a4a      	ldr	r2, [pc, #296]	; (8002a1c <HAL_GPIO_Init+0x34c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d101      	bne.n	80028fa <HAL_GPIO_Init+0x22a>
 80028f6:	2306      	movs	r3, #6
 80028f8:	e00c      	b.n	8002914 <HAL_GPIO_Init+0x244>
 80028fa:	2307      	movs	r3, #7
 80028fc:	e00a      	b.n	8002914 <HAL_GPIO_Init+0x244>
 80028fe:	2305      	movs	r3, #5
 8002900:	e008      	b.n	8002914 <HAL_GPIO_Init+0x244>
 8002902:	2304      	movs	r3, #4
 8002904:	e006      	b.n	8002914 <HAL_GPIO_Init+0x244>
 8002906:	2303      	movs	r3, #3
 8002908:	e004      	b.n	8002914 <HAL_GPIO_Init+0x244>
 800290a:	2302      	movs	r3, #2
 800290c:	e002      	b.n	8002914 <HAL_GPIO_Init+0x244>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <HAL_GPIO_Init+0x244>
 8002912:	2300      	movs	r3, #0
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	f002 0203 	and.w	r2, r2, #3
 800291a:	0092      	lsls	r2, r2, #2
 800291c:	4093      	lsls	r3, r2
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002924:	4937      	ldr	r1, [pc, #220]	; (8002a04 <HAL_GPIO_Init+0x334>)
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	089b      	lsrs	r3, r3, #2
 800292a:	3302      	adds	r3, #2
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002932:	4b3b      	ldr	r3, [pc, #236]	; (8002a20 <HAL_GPIO_Init+0x350>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	43db      	mvns	r3, r3
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4313      	orrs	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002956:	4a32      	ldr	r2, [pc, #200]	; (8002a20 <HAL_GPIO_Init+0x350>)
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800295c:	4b30      	ldr	r3, [pc, #192]	; (8002a20 <HAL_GPIO_Init+0x350>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	43db      	mvns	r3, r3
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	4013      	ands	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002980:	4a27      	ldr	r2, [pc, #156]	; (8002a20 <HAL_GPIO_Init+0x350>)
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002986:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <HAL_GPIO_Init+0x350>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	43db      	mvns	r3, r3
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029aa:	4a1d      	ldr	r2, [pc, #116]	; (8002a20 <HAL_GPIO_Init+0x350>)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <HAL_GPIO_Init+0x350>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4013      	ands	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029d4:	4a12      	ldr	r2, [pc, #72]	; (8002a20 <HAL_GPIO_Init+0x350>)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	3301      	adds	r3, #1
 80029de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f47f ae78 	bne.w	80026e0 <HAL_GPIO_Init+0x10>
  }
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40010000 	.word	0x40010000
 8002a08:	48000400 	.word	0x48000400
 8002a0c:	48000800 	.word	0x48000800
 8002a10:	48000c00 	.word	0x48000c00
 8002a14:	48001000 	.word	0x48001000
 8002a18:	48001400 	.word	0x48001400
 8002a1c:	48001800 	.word	0x48001800
 8002a20:	40010400 	.word	0x40010400

08002a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	807b      	strh	r3, [r7, #2]
 8002a30:	4613      	mov	r3, r2
 8002a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a34:	787b      	ldrb	r3, [r7, #1]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a3a:	887a      	ldrh	r2, [r7, #2]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a40:	e002      	b.n	8002a48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a42:	887a      	ldrh	r2, [r7, #2]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a5e:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d006      	beq.n	8002a78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a6a:	4a05      	ldr	r2, [pc, #20]	; (8002a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fe fd68 	bl	8001548 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40010400 	.word	0x40010400

08002a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e081      	b.n	8002b9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fe fac2 	bl	8001034 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2224      	movs	r2, #36	; 0x24
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0201 	bic.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ad4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ae4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d107      	bne.n	8002afe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	e006      	b.n	8002b0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d104      	bne.n	8002b1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69d9      	ldr	r1, [r3, #28]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1a      	ldr	r2, [r3, #32]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2220      	movs	r2, #32
 8002b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	4608      	mov	r0, r1
 8002bae:	4611      	mov	r1, r2
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	817b      	strh	r3, [r7, #10]
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	813b      	strh	r3, [r7, #8]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	f040 80f9 	bne.w	8002dbe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d002      	beq.n	8002bd8 <HAL_I2C_Mem_Write+0x34>
 8002bd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d105      	bne.n	8002be4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bde:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0ed      	b.n	8002dc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_I2C_Mem_Write+0x4e>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e0e6      	b.n	8002dc0 <HAL_I2C_Mem_Write+0x21c>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bfa:	f7ff fbbb 	bl	8002374 <HAL_GetTick>
 8002bfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	2319      	movs	r3, #25
 8002c06:	2201      	movs	r2, #1
 8002c08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 fac3 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0d1      	b.n	8002dc0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2221      	movs	r2, #33	; 0x21
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2240      	movs	r2, #64	; 0x40
 8002c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a3a      	ldr	r2, [r7, #32]
 8002c36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c44:	88f8      	ldrh	r0, [r7, #6]
 8002c46:	893a      	ldrh	r2, [r7, #8]
 8002c48:	8979      	ldrh	r1, [r7, #10]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	9301      	str	r3, [sp, #4]
 8002c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	4603      	mov	r3, r0
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f9d3 	bl	8003000 <I2C_RequestMemoryWrite>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0a9      	b.n	8002dc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2bff      	cmp	r3, #255	; 0xff
 8002c74:	d90e      	bls.n	8002c94 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	22ff      	movs	r2, #255	; 0xff
 8002c7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	8979      	ldrh	r1, [r7, #10]
 8002c84:	2300      	movs	r3, #0
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 fc2b 	bl	80034e8 <I2C_TransferConfig>
 8002c92:	e00f      	b.n	8002cb4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	8979      	ldrh	r1, [r7, #10]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 fc1a 	bl	80034e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 faad 	bl	8003218 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e07b      	b.n	8002dc0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	781a      	ldrb	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d034      	beq.n	8002d6c <HAL_I2C_Mem_Write+0x1c8>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d130      	bne.n	8002d6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	2200      	movs	r2, #0
 8002d12:	2180      	movs	r1, #128	; 0x80
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 fa3f 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e04d      	b.n	8002dc0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2bff      	cmp	r3, #255	; 0xff
 8002d2c:	d90e      	bls.n	8002d4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	22ff      	movs	r2, #255	; 0xff
 8002d32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	8979      	ldrh	r1, [r7, #10]
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 fbcf 	bl	80034e8 <I2C_TransferConfig>
 8002d4a:	e00f      	b.n	8002d6c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	8979      	ldrh	r1, [r7, #10]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 fbbe 	bl	80034e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d19e      	bne.n	8002cb4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fa8c 	bl	8003298 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e01a      	b.n	8002dc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6859      	ldr	r1, [r3, #4]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <HAL_I2C_Mem_Write+0x224>)
 8002d9e:	400b      	ands	r3, r1
 8002da0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	e000      	b.n	8002dc0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002dbe:	2302      	movs	r3, #2
  }
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	fe00e800 	.word	0xfe00e800

08002dcc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	4608      	mov	r0, r1
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4603      	mov	r3, r0
 8002ddc:	817b      	strh	r3, [r7, #10]
 8002dde:	460b      	mov	r3, r1
 8002de0:	813b      	strh	r3, [r7, #8]
 8002de2:	4613      	mov	r3, r2
 8002de4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	f040 80fd 	bne.w	8002fee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <HAL_I2C_Mem_Read+0x34>
 8002dfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d105      	bne.n	8002e0c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0f1      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_I2C_Mem_Read+0x4e>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e0ea      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x224>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e22:	f7ff faa7 	bl	8002374 <HAL_GetTick>
 8002e26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	2319      	movs	r3, #25
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f9af 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0d5      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2222      	movs	r2, #34	; 0x22
 8002e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2240      	movs	r2, #64	; 0x40
 8002e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a3a      	ldr	r2, [r7, #32]
 8002e5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e6c:	88f8      	ldrh	r0, [r7, #6]
 8002e6e:	893a      	ldrh	r2, [r7, #8]
 8002e70:	8979      	ldrh	r1, [r7, #10]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	9301      	str	r3, [sp, #4]
 8002e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f913 	bl	80030a8 <I2C_RequestMemoryRead>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0ad      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2bff      	cmp	r3, #255	; 0xff
 8002e9c:	d90e      	bls.n	8002ebc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	22ff      	movs	r2, #255	; 0xff
 8002ea2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	8979      	ldrh	r1, [r7, #10]
 8002eac:	4b52      	ldr	r3, [pc, #328]	; (8002ff8 <HAL_I2C_Mem_Read+0x22c>)
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 fb17 	bl	80034e8 <I2C_TransferConfig>
 8002eba:	e00f      	b.n	8002edc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	8979      	ldrh	r1, [r7, #10]
 8002ece:	4b4a      	ldr	r3, [pc, #296]	; (8002ff8 <HAL_I2C_Mem_Read+0x22c>)
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fb06 	bl	80034e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2104      	movs	r1, #4
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f956 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e07c      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d034      	beq.n	8002f9c <HAL_I2C_Mem_Read+0x1d0>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d130      	bne.n	8002f9c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f40:	2200      	movs	r2, #0
 8002f42:	2180      	movs	r1, #128	; 0x80
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f927 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e04d      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2bff      	cmp	r3, #255	; 0xff
 8002f5c:	d90e      	bls.n	8002f7c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	22ff      	movs	r2, #255	; 0xff
 8002f62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	8979      	ldrh	r1, [r7, #10]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 fab7 	bl	80034e8 <I2C_TransferConfig>
 8002f7a:	e00f      	b.n	8002f9c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	8979      	ldrh	r1, [r7, #10]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 faa6 	bl	80034e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d19a      	bne.n	8002edc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 f974 	bl	8003298 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e01a      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6859      	ldr	r1, [r3, #4]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <HAL_I2C_Mem_Read+0x230>)
 8002fce:	400b      	ands	r3, r1
 8002fd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	e000      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002fee:	2302      	movs	r3, #2
  }
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	80002400 	.word	0x80002400
 8002ffc:	fe00e800 	.word	0xfe00e800

08003000 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af02      	add	r7, sp, #8
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	4608      	mov	r0, r1
 800300a:	4611      	mov	r1, r2
 800300c:	461a      	mov	r2, r3
 800300e:	4603      	mov	r3, r0
 8003010:	817b      	strh	r3, [r7, #10]
 8003012:	460b      	mov	r3, r1
 8003014:	813b      	strh	r3, [r7, #8]
 8003016:	4613      	mov	r3, r2
 8003018:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	b2da      	uxtb	r2, r3
 800301e:	8979      	ldrh	r1, [r7, #10]
 8003020:	4b20      	ldr	r3, [pc, #128]	; (80030a4 <I2C_RequestMemoryWrite+0xa4>)
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 fa5d 	bl	80034e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800302e:	69fa      	ldr	r2, [r7, #28]
 8003030:	69b9      	ldr	r1, [r7, #24]
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 f8f0 	bl	8003218 <I2C_WaitOnTXISFlagUntilTimeout>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e02c      	b.n	800309c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d105      	bne.n	8003054 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003048:	893b      	ldrh	r3, [r7, #8]
 800304a:	b2da      	uxtb	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	629a      	str	r2, [r3, #40]	; 0x28
 8003052:	e015      	b.n	8003080 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003054:	893b      	ldrh	r3, [r7, #8]
 8003056:	0a1b      	lsrs	r3, r3, #8
 8003058:	b29b      	uxth	r3, r3
 800305a:	b2da      	uxtb	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	69b9      	ldr	r1, [r7, #24]
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f8d6 	bl	8003218 <I2C_WaitOnTXISFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e012      	b.n	800309c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003076:	893b      	ldrh	r3, [r7, #8]
 8003078:	b2da      	uxtb	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	2200      	movs	r2, #0
 8003088:	2180      	movs	r1, #128	; 0x80
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f884 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	80002000 	.word	0x80002000

080030a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af02      	add	r7, sp, #8
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	4608      	mov	r0, r1
 80030b2:	4611      	mov	r1, r2
 80030b4:	461a      	mov	r2, r3
 80030b6:	4603      	mov	r3, r0
 80030b8:	817b      	strh	r3, [r7, #10]
 80030ba:	460b      	mov	r3, r1
 80030bc:	813b      	strh	r3, [r7, #8]
 80030be:	4613      	mov	r3, r2
 80030c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80030c2:	88fb      	ldrh	r3, [r7, #6]
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	8979      	ldrh	r1, [r7, #10]
 80030c8:	4b20      	ldr	r3, [pc, #128]	; (800314c <I2C_RequestMemoryRead+0xa4>)
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	2300      	movs	r3, #0
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 fa0a 	bl	80034e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	69b9      	ldr	r1, [r7, #24]
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f89d 	bl	8003218 <I2C_WaitOnTXISFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e02c      	b.n	8003142 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d105      	bne.n	80030fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030ee:	893b      	ldrh	r3, [r7, #8]
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	629a      	str	r2, [r3, #40]	; 0x28
 80030f8:	e015      	b.n	8003126 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030fa:	893b      	ldrh	r3, [r7, #8]
 80030fc:	0a1b      	lsrs	r3, r3, #8
 80030fe:	b29b      	uxth	r3, r3
 8003100:	b2da      	uxtb	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003108:	69fa      	ldr	r2, [r7, #28]
 800310a:	69b9      	ldr	r1, [r7, #24]
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 f883 	bl	8003218 <I2C_WaitOnTXISFlagUntilTimeout>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e012      	b.n	8003142 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800311c:	893b      	ldrh	r3, [r7, #8]
 800311e:	b2da      	uxtb	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2200      	movs	r2, #0
 800312e:	2140      	movs	r1, #64	; 0x40
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f831 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	80002000 	.word	0x80002000

08003150 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b02      	cmp	r3, #2
 8003164:	d103      	bne.n	800316e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2200      	movs	r2, #0
 800316c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b01      	cmp	r3, #1
 800317a:	d007      	beq.n	800318c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	619a      	str	r2, [r3, #24]
  }
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	4613      	mov	r3, r2
 80031a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031a8:	e022      	b.n	80031f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031b0:	d01e      	beq.n	80031f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b2:	f7ff f8df 	bl	8002374 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d302      	bcc.n	80031c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d113      	bne.n	80031f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031cc:	f043 0220 	orr.w	r2, r3, #32
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e00f      	b.n	8003210 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	4013      	ands	r3, r2
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	429a      	cmp	r2, r3
 800320c:	d0cd      	beq.n	80031aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003224:	e02c      	b.n	8003280 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f870 	bl	8003310 <I2C_IsErrorOccurred>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e02a      	b.n	8003290 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003240:	d01e      	beq.n	8003280 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003242:	f7ff f897 	bl	8002374 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	429a      	cmp	r2, r3
 8003250:	d302      	bcc.n	8003258 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d113      	bne.n	8003280 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325c:	f043 0220 	orr.w	r2, r3, #32
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e007      	b.n	8003290 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b02      	cmp	r3, #2
 800328c:	d1cb      	bne.n	8003226 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032a4:	e028      	b.n	80032f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f830 	bl	8003310 <I2C_IsErrorOccurred>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e026      	b.n	8003308 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ba:	f7ff f85b 	bl	8002374 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d302      	bcc.n	80032d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d113      	bne.n	80032f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d4:	f043 0220 	orr.w	r2, r3, #32
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e007      	b.n	8003308 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	2b20      	cmp	r3, #32
 8003304:	d1cf      	bne.n	80032a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08a      	sub	sp, #40	; 0x28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800332a:	2300      	movs	r3, #0
 800332c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	2b00      	cmp	r3, #0
 800333a:	d075      	beq.n	8003428 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2210      	movs	r2, #16
 8003342:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003344:	e056      	b.n	80033f4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800334c:	d052      	beq.n	80033f4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800334e:	f7ff f811 	bl	8002374 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	429a      	cmp	r2, r3
 800335c:	d302      	bcc.n	8003364 <I2C_IsErrorOccurred+0x54>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d147      	bne.n	80033f4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800336e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003376:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003386:	d12e      	bne.n	80033e6 <I2C_IsErrorOccurred+0xd6>
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800338e:	d02a      	beq.n	80033e6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003390:	7cfb      	ldrb	r3, [r7, #19]
 8003392:	2b20      	cmp	r3, #32
 8003394:	d027      	beq.n	80033e6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80033a6:	f7fe ffe5 	bl	8002374 <HAL_GetTick>
 80033aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033ac:	e01b      	b.n	80033e6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033ae:	f7fe ffe1 	bl	8002374 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b19      	cmp	r3, #25
 80033ba:	d914      	bls.n	80033e6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d1dc      	bne.n	80033ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f003 0320 	and.w	r3, r3, #32
 80033fe:	2b20      	cmp	r3, #32
 8003400:	d003      	beq.n	800340a <I2C_IsErrorOccurred+0xfa>
 8003402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003406:	2b00      	cmp	r3, #0
 8003408:	d09d      	beq.n	8003346 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800340a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800340e:	2b00      	cmp	r3, #0
 8003410:	d103      	bne.n	800341a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2220      	movs	r2, #32
 8003418:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	f043 0304 	orr.w	r3, r3, #4
 8003420:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00b      	beq.n	8003452 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f44f 7280 	mov.w	r2, #256	; 0x100
 800344a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00b      	beq.n	8003474 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	f043 0308 	orr.w	r3, r3, #8
 8003462:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800346c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	f043 0302 	orr.w	r3, r3, #2
 8003484:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800348e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800349a:	2b00      	cmp	r3, #0
 800349c:	d01c      	beq.n	80034d8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f7ff fe56 	bl	8003150 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6859      	ldr	r1, [r3, #4]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <I2C_IsErrorOccurred+0x1d4>)
 80034b0:	400b      	ands	r3, r1
 80034b2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80034d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3728      	adds	r7, #40	; 0x28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	fe00e800 	.word	0xfe00e800

080034e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	460b      	mov	r3, r1
 80034f4:	817b      	strh	r3, [r7, #10]
 80034f6:	4613      	mov	r3, r2
 80034f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034fa:	897b      	ldrh	r3, [r7, #10]
 80034fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003500:	7a7b      	ldrb	r3, [r7, #9]
 8003502:	041b      	lsls	r3, r3, #16
 8003504:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003508:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	4313      	orrs	r3, r2
 8003512:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003516:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	0d5b      	lsrs	r3, r3, #21
 8003522:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003526:	4b08      	ldr	r3, [pc, #32]	; (8003548 <I2C_TransferConfig+0x60>)
 8003528:	430b      	orrs	r3, r1
 800352a:	43db      	mvns	r3, r3
 800352c:	ea02 0103 	and.w	r1, r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	03ff63ff 	.word	0x03ff63ff

0800354c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b20      	cmp	r3, #32
 8003560:	d138      	bne.n	80035d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800356c:	2302      	movs	r3, #2
 800356e:	e032      	b.n	80035d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2224      	movs	r2, #36	; 0x24
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800359e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6819      	ldr	r1, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	e000      	b.n	80035d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035d4:	2302      	movs	r3, #2
  }
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b085      	sub	sp, #20
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d139      	bne.n	800366c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003602:	2302      	movs	r3, #2
 8003604:	e033      	b.n	800366e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2224      	movs	r2, #36	; 0x24
 8003612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0201 	bic.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003634:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	e000      	b.n	800366e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800366c:	2302      	movs	r3, #2
  }
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e041      	b.n	8003710 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003694:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f245 5255 	movw	r2, #21845	; 0x5555
 800369e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6852      	ldr	r2, [r2, #4]
 80036a8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6892      	ldr	r2, [r2, #8]
 80036b2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80036b4:	f7fe fe5e 	bl	8002374 <HAL_GetTick>
 80036b8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80036ba:	e00f      	b.n	80036dc <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80036bc:	f7fe fe5a 	bl	8002374 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b31      	cmp	r3, #49	; 0x31
 80036c8:	d908      	bls.n	80036dc <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e019      	b.n	8003710 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1e8      	bne.n	80036bc <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d005      	beq.n	8003704 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	68d2      	ldr	r2, [r2, #12]
 8003700:	611a      	str	r2, [r3, #16]
 8003702:	e004      	b.n	800370e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800370c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003728:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a04      	ldr	r2, [pc, #16]	; (8003754 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003746:	6013      	str	r3, [r2, #0]
}
 8003748:	bf00      	nop
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40007000 	.word	0x40007000

08003758 <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f003 031f 	and.w	r3, r3, #31
 800376a:	43db      	mvns	r3, r3
 800376c:	401a      	ands	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	4908      	ldr	r1, [pc, #32]	; (8003794 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8003774:	4313      	orrs	r3, r2
 8003776:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f003 031f 	and.w	r3, r3, #31
 8003782:	4904      	ldr	r1, [pc, #16]	; (8003794 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8003784:	4313      	orrs	r3, r2
 8003786:	608b      	str	r3, [r1, #8]


}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	40007000 	.word	0x40007000

08003798 <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 80037a0:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <HAL_PWR_DisableWakeUpPin+0x28>)
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	43db      	mvns	r3, r3
 80037ac:	4904      	ldr	r1, [pc, #16]	; (80037c0 <HAL_PWR_DisableWakeUpPin+0x28>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	608b      	str	r3, [r1, #8]
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40007000 	.word	0x40007000

080037c4 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 80037c8:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f023 0307 	bic.w	r3, r3, #7
 80037d0:	4a07      	ldr	r2, [pc, #28]	; (80037f0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80037d2:	f043 0303 	orr.w	r3, r3, #3
 80037d6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80037d8:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	4a05      	ldr	r2, [pc, #20]	; (80037f4 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80037de:	f043 0304 	orr.w	r3, r3, #4
 80037e2:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80037e4:	bf30      	wfi
}
 80037e6:	bf00      	nop
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	40007000 	.word	0x40007000
 80037f4:	e000ed00 	.word	0xe000ed00

080037f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037fc:	4b04      	ldr	r3, [pc, #16]	; (8003810 <HAL_PWREx_GetVoltageRange+0x18>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40007000 	.word	0x40007000

08003814 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003822:	d130      	bne.n	8003886 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003824:	4b23      	ldr	r3, [pc, #140]	; (80038b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800382c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003830:	d038      	beq.n	80038a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003832:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800383a:	4a1e      	ldr	r2, [pc, #120]	; (80038b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800383c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003840:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003842:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2232      	movs	r2, #50	; 0x32
 8003848:	fb02 f303 	mul.w	r3, r2, r3
 800384c:	4a1b      	ldr	r2, [pc, #108]	; (80038bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	0c9b      	lsrs	r3, r3, #18
 8003854:	3301      	adds	r3, #1
 8003856:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003858:	e002      	b.n	8003860 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3b01      	subs	r3, #1
 800385e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003860:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386c:	d102      	bne.n	8003874 <HAL_PWREx_ControlVoltageScaling+0x60>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f2      	bne.n	800385a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003874:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003880:	d110      	bne.n	80038a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e00f      	b.n	80038a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003886:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800388e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003892:	d007      	beq.n	80038a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003894:	4b07      	ldr	r3, [pc, #28]	; (80038b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800389c:	4a05      	ldr	r2, [pc, #20]	; (80038b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800389e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40007000 	.word	0x40007000
 80038b8:	20000000 	.word	0x20000000
 80038bc:	431bde83 	.word	0x431bde83

080038c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b088      	sub	sp, #32
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e3ca      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038d2:	4b97      	ldr	r3, [pc, #604]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038dc:	4b94      	ldr	r3, [pc, #592]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 80e4 	beq.w	8003abc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <HAL_RCC_OscConfig+0x4a>
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	2b0c      	cmp	r3, #12
 80038fe:	f040 808b 	bne.w	8003a18 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b01      	cmp	r3, #1
 8003906:	f040 8087 	bne.w	8003a18 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800390a:	4b89      	ldr	r3, [pc, #548]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d005      	beq.n	8003922 <HAL_RCC_OscConfig+0x62>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e3a2      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1a      	ldr	r2, [r3, #32]
 8003926:	4b82      	ldr	r3, [pc, #520]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d004      	beq.n	800393c <HAL_RCC_OscConfig+0x7c>
 8003932:	4b7f      	ldr	r3, [pc, #508]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800393a:	e005      	b.n	8003948 <HAL_RCC_OscConfig+0x88>
 800393c:	4b7c      	ldr	r3, [pc, #496]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 800393e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003942:	091b      	lsrs	r3, r3, #4
 8003944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003948:	4293      	cmp	r3, r2
 800394a:	d223      	bcs.n	8003994 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fd55 	bl	8004400 <RCC_SetFlashLatencyFromMSIRange>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e383      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003960:	4b73      	ldr	r3, [pc, #460]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a72      	ldr	r2, [pc, #456]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003966:	f043 0308 	orr.w	r3, r3, #8
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	4b70      	ldr	r3, [pc, #448]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	496d      	ldr	r1, [pc, #436]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 800397a:	4313      	orrs	r3, r2
 800397c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800397e:	4b6c      	ldr	r3, [pc, #432]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	021b      	lsls	r3, r3, #8
 800398c:	4968      	ldr	r1, [pc, #416]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 800398e:	4313      	orrs	r3, r2
 8003990:	604b      	str	r3, [r1, #4]
 8003992:	e025      	b.n	80039e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003994:	4b66      	ldr	r3, [pc, #408]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a65      	ldr	r2, [pc, #404]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 800399a:	f043 0308 	orr.w	r3, r3, #8
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	4b63      	ldr	r3, [pc, #396]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	4960      	ldr	r1, [pc, #384]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039b2:	4b5f      	ldr	r3, [pc, #380]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	495b      	ldr	r1, [pc, #364]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d109      	bne.n	80039e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fd15 	bl	8004400 <RCC_SetFlashLatencyFromMSIRange>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e343      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039e0:	f000 fc4a 	bl	8004278 <HAL_RCC_GetSysClockFreq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4b52      	ldr	r3, [pc, #328]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	091b      	lsrs	r3, r3, #4
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	4950      	ldr	r1, [pc, #320]	; (8003b34 <HAL_RCC_OscConfig+0x274>)
 80039f2:	5ccb      	ldrb	r3, [r1, r3]
 80039f4:	f003 031f 	and.w	r3, r3, #31
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
 80039fc:	4a4e      	ldr	r2, [pc, #312]	; (8003b38 <HAL_RCC_OscConfig+0x278>)
 80039fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a00:	4b4e      	ldr	r3, [pc, #312]	; (8003b3c <HAL_RCC_OscConfig+0x27c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fe fc65 	bl	80022d4 <HAL_InitTick>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d052      	beq.n	8003aba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	e327      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d032      	beq.n	8003a86 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a20:	4b43      	ldr	r3, [pc, #268]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a42      	ldr	r2, [pc, #264]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a2c:	f7fe fca2 	bl	8002374 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a34:	f7fe fc9e 	bl	8002374 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e310      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a46:	4b3a      	ldr	r3, [pc, #232]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a52:	4b37      	ldr	r3, [pc, #220]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a36      	ldr	r2, [pc, #216]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a58:	f043 0308 	orr.w	r3, r3, #8
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	4b34      	ldr	r3, [pc, #208]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	4931      	ldr	r1, [pc, #196]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a70:	4b2f      	ldr	r3, [pc, #188]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	021b      	lsls	r3, r3, #8
 8003a7e:	492c      	ldr	r1, [pc, #176]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	604b      	str	r3, [r1, #4]
 8003a84:	e01a      	b.n	8003abc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a86:	4b2a      	ldr	r3, [pc, #168]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a29      	ldr	r2, [pc, #164]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003a8c:	f023 0301 	bic.w	r3, r3, #1
 8003a90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a92:	f7fe fc6f 	bl	8002374 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a9a:	f7fe fc6b 	bl	8002374 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e2dd      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003aac:	4b20      	ldr	r3, [pc, #128]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1f0      	bne.n	8003a9a <HAL_RCC_OscConfig+0x1da>
 8003ab8:	e000      	b.n	8003abc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003aba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d074      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d005      	beq.n	8003ada <HAL_RCC_OscConfig+0x21a>
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	2b0c      	cmp	r3, #12
 8003ad2:	d10e      	bne.n	8003af2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d10b      	bne.n	8003af2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ada:	4b15      	ldr	r3, [pc, #84]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d064      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x2f0>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d160      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e2ba      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afa:	d106      	bne.n	8003b0a <HAL_RCC_OscConfig+0x24a>
 8003afc:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a0b      	ldr	r2, [pc, #44]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	e026      	b.n	8003b58 <HAL_RCC_OscConfig+0x298>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b12:	d115      	bne.n	8003b40 <HAL_RCC_OscConfig+0x280>
 8003b14:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a05      	ldr	r2, [pc, #20]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003b1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	4b03      	ldr	r3, [pc, #12]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a02      	ldr	r2, [pc, #8]	; (8003b30 <HAL_RCC_OscConfig+0x270>)
 8003b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	e014      	b.n	8003b58 <HAL_RCC_OscConfig+0x298>
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000
 8003b34:	0800d938 	.word	0x0800d938
 8003b38:	20000000 	.word	0x20000000
 8003b3c:	20000004 	.word	0x20000004
 8003b40:	4ba0      	ldr	r3, [pc, #640]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a9f      	ldr	r2, [pc, #636]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	4b9d      	ldr	r3, [pc, #628]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a9c      	ldr	r2, [pc, #624]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d013      	beq.n	8003b88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7fe fc08 	bl	8002374 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b68:	f7fe fc04 	bl	8002374 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b64      	cmp	r3, #100	; 0x64
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e276      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b7a:	4b92      	ldr	r3, [pc, #584]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f0      	beq.n	8003b68 <HAL_RCC_OscConfig+0x2a8>
 8003b86:	e014      	b.n	8003bb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fe fbf4 	bl	8002374 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b90:	f7fe fbf0 	bl	8002374 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b64      	cmp	r3, #100	; 0x64
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e262      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ba2:	4b88      	ldr	r3, [pc, #544]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f0      	bne.n	8003b90 <HAL_RCC_OscConfig+0x2d0>
 8003bae:	e000      	b.n	8003bb2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d060      	beq.n	8003c80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d005      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x310>
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b0c      	cmp	r3, #12
 8003bc8:	d119      	bne.n	8003bfe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d116      	bne.n	8003bfe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bd0:	4b7c      	ldr	r3, [pc, #496]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_OscConfig+0x328>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e23f      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be8:	4b76      	ldr	r3, [pc, #472]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	061b      	lsls	r3, r3, #24
 8003bf6:	4973      	ldr	r1, [pc, #460]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bfc:	e040      	b.n	8003c80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d023      	beq.n	8003c4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c06:	4b6f      	ldr	r3, [pc, #444]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a6e      	ldr	r2, [pc, #440]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c12:	f7fe fbaf 	bl	8002374 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c1a:	f7fe fbab 	bl	8002374 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e21d      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c2c:	4b65      	ldr	r3, [pc, #404]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f0      	beq.n	8003c1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c38:	4b62      	ldr	r3, [pc, #392]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	061b      	lsls	r3, r3, #24
 8003c46:	495f      	ldr	r1, [pc, #380]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]
 8003c4c:	e018      	b.n	8003c80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c4e:	4b5d      	ldr	r3, [pc, #372]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a5c      	ldr	r2, [pc, #368]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5a:	f7fe fb8b 	bl	8002374 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c62:	f7fe fb87 	bl	8002374 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e1f9      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c74:	4b53      	ldr	r3, [pc, #332]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1f0      	bne.n	8003c62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d03c      	beq.n	8003d06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d01c      	beq.n	8003cce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c94:	4b4b      	ldr	r3, [pc, #300]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c9a:	4a4a      	ldr	r2, [pc, #296]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca4:	f7fe fb66 	bl	8002374 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cac:	f7fe fb62 	bl	8002374 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e1d4      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cbe:	4b41      	ldr	r3, [pc, #260]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0ef      	beq.n	8003cac <HAL_RCC_OscConfig+0x3ec>
 8003ccc:	e01b      	b.n	8003d06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cce:	4b3d      	ldr	r3, [pc, #244]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cd4:	4a3b      	ldr	r2, [pc, #236]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003cd6:	f023 0301 	bic.w	r3, r3, #1
 8003cda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cde:	f7fe fb49 	bl	8002374 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce6:	f7fe fb45 	bl	8002374 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e1b7      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cf8:	4b32      	ldr	r3, [pc, #200]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1ef      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 80a6 	beq.w	8003e60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d14:	2300      	movs	r3, #0
 8003d16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d18:	4b2a      	ldr	r3, [pc, #168]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10d      	bne.n	8003d40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d24:	4b27      	ldr	r3, [pc, #156]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d28:	4a26      	ldr	r2, [pc, #152]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d30:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d40:	4b21      	ldr	r3, [pc, #132]	; (8003dc8 <HAL_RCC_OscConfig+0x508>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d118      	bne.n	8003d7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d4c:	4b1e      	ldr	r3, [pc, #120]	; (8003dc8 <HAL_RCC_OscConfig+0x508>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <HAL_RCC_OscConfig+0x508>)
 8003d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d58:	f7fe fb0c 	bl	8002374 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d60:	f7fe fb08 	bl	8002374 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e17a      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d72:	4b15      	ldr	r3, [pc, #84]	; (8003dc8 <HAL_RCC_OscConfig+0x508>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0f0      	beq.n	8003d60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d108      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4d8>
 8003d86:	4b0f      	ldr	r3, [pc, #60]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8c:	4a0d      	ldr	r2, [pc, #52]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d96:	e029      	b.n	8003dec <HAL_RCC_OscConfig+0x52c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b05      	cmp	r3, #5
 8003d9e:	d115      	bne.n	8003dcc <HAL_RCC_OscConfig+0x50c>
 8003da0:	4b08      	ldr	r3, [pc, #32]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da6:	4a07      	ldr	r2, [pc, #28]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003da8:	f043 0304 	orr.w	r3, r3, #4
 8003dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003db0:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db6:	4a03      	ldr	r2, [pc, #12]	; (8003dc4 <HAL_RCC_OscConfig+0x504>)
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dc0:	e014      	b.n	8003dec <HAL_RCC_OscConfig+0x52c>
 8003dc2:	bf00      	nop
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	40007000 	.word	0x40007000
 8003dcc:	4b9c      	ldr	r3, [pc, #624]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd2:	4a9b      	ldr	r2, [pc, #620]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003dd4:	f023 0301 	bic.w	r3, r3, #1
 8003dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ddc:	4b98      	ldr	r3, [pc, #608]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de2:	4a97      	ldr	r2, [pc, #604]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003de4:	f023 0304 	bic.w	r3, r3, #4
 8003de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d016      	beq.n	8003e22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df4:	f7fe fabe 	bl	8002374 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dfa:	e00a      	b.n	8003e12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfc:	f7fe faba 	bl	8002374 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e12a      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e12:	4b8b      	ldr	r3, [pc, #556]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0ed      	beq.n	8003dfc <HAL_RCC_OscConfig+0x53c>
 8003e20:	e015      	b.n	8003e4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e22:	f7fe faa7 	bl	8002374 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e28:	e00a      	b.n	8003e40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2a:	f7fe faa3 	bl	8002374 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e113      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e40:	4b7f      	ldr	r3, [pc, #508]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1ed      	bne.n	8003e2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e4e:	7ffb      	ldrb	r3, [r7, #31]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d105      	bne.n	8003e60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e54:	4b7a      	ldr	r3, [pc, #488]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e58:	4a79      	ldr	r2, [pc, #484]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80fe 	beq.w	8004066 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	f040 80d0 	bne.w	8004014 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e74:	4b72      	ldr	r3, [pc, #456]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f003 0203 	and.w	r2, r3, #3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d130      	bne.n	8003eea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	3b01      	subs	r3, #1
 8003e94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d127      	bne.n	8003eea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d11f      	bne.n	8003eea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003eb4:	2a07      	cmp	r2, #7
 8003eb6:	bf14      	ite	ne
 8003eb8:	2201      	movne	r2, #1
 8003eba:	2200      	moveq	r2, #0
 8003ebc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d113      	bne.n	8003eea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ecc:	085b      	lsrs	r3, r3, #1
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d109      	bne.n	8003eea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	085b      	lsrs	r3, r3, #1
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d06e      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	2b0c      	cmp	r3, #12
 8003eee:	d069      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ef0:	4b53      	ldr	r3, [pc, #332]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d105      	bne.n	8003f08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003efc:	4b50      	ldr	r3, [pc, #320]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0ad      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f0c:	4b4c      	ldr	r3, [pc, #304]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a4b      	ldr	r2, [pc, #300]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003f12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f18:	f7fe fa2c 	bl	8002374 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f20:	f7fe fa28 	bl	8002374 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e09a      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f32:	4b43      	ldr	r3, [pc, #268]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f0      	bne.n	8003f20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f3e:	4b40      	ldr	r3, [pc, #256]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	4b40      	ldr	r3, [pc, #256]	; (8004044 <HAL_RCC_OscConfig+0x784>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f4e:	3a01      	subs	r2, #1
 8003f50:	0112      	lsls	r2, r2, #4
 8003f52:	4311      	orrs	r1, r2
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f58:	0212      	lsls	r2, r2, #8
 8003f5a:	4311      	orrs	r1, r2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f60:	0852      	lsrs	r2, r2, #1
 8003f62:	3a01      	subs	r2, #1
 8003f64:	0552      	lsls	r2, r2, #21
 8003f66:	4311      	orrs	r1, r2
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f6c:	0852      	lsrs	r2, r2, #1
 8003f6e:	3a01      	subs	r2, #1
 8003f70:	0652      	lsls	r2, r2, #25
 8003f72:	4311      	orrs	r1, r2
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f78:	0912      	lsrs	r2, r2, #4
 8003f7a:	0452      	lsls	r2, r2, #17
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	4930      	ldr	r1, [pc, #192]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f84:	4b2e      	ldr	r3, [pc, #184]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a2d      	ldr	r2, [pc, #180]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003f8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f90:	4b2b      	ldr	r3, [pc, #172]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	4a2a      	ldr	r2, [pc, #168]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f9c:	f7fe f9ea 	bl	8002374 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa4:	f7fe f9e6 	bl	8002374 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e058      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fb6:	4b22      	ldr	r3, [pc, #136]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fc2:	e050      	b.n	8004066 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e04f      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fc8:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d148      	bne.n	8004066 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003fd4:	4b1a      	ldr	r3, [pc, #104]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a19      	ldr	r2, [pc, #100]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003fda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fe0:	4b17      	ldr	r3, [pc, #92]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4a16      	ldr	r2, [pc, #88]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8003fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fec:	f7fe f9c2 	bl	8002374 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff4:	f7fe f9be 	bl	8002374 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e030      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004006:	4b0e      	ldr	r3, [pc, #56]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x734>
 8004012:	e028      	b.n	8004066 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	2b0c      	cmp	r3, #12
 8004018:	d023      	beq.n	8004062 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401a:	4b09      	ldr	r3, [pc, #36]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a08      	ldr	r2, [pc, #32]	; (8004040 <HAL_RCC_OscConfig+0x780>)
 8004020:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004026:	f7fe f9a5 	bl	8002374 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800402c:	e00c      	b.n	8004048 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402e:	f7fe f9a1 	bl	8002374 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d905      	bls.n	8004048 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e013      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
 8004040:	40021000 	.word	0x40021000
 8004044:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004048:	4b09      	ldr	r3, [pc, #36]	; (8004070 <HAL_RCC_OscConfig+0x7b0>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1ec      	bne.n	800402e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004054:	4b06      	ldr	r3, [pc, #24]	; (8004070 <HAL_RCC_OscConfig+0x7b0>)
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	4905      	ldr	r1, [pc, #20]	; (8004070 <HAL_RCC_OscConfig+0x7b0>)
 800405a:	4b06      	ldr	r3, [pc, #24]	; (8004074 <HAL_RCC_OscConfig+0x7b4>)
 800405c:	4013      	ands	r3, r2
 800405e:	60cb      	str	r3, [r1, #12]
 8004060:	e001      	b.n	8004066 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3720      	adds	r7, #32
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40021000 	.word	0x40021000
 8004074:	feeefffc 	.word	0xfeeefffc

08004078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0e7      	b.n	800425c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800408c:	4b75      	ldr	r3, [pc, #468]	; (8004264 <HAL_RCC_ClockConfig+0x1ec>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d910      	bls.n	80040bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409a:	4b72      	ldr	r3, [pc, #456]	; (8004264 <HAL_RCC_ClockConfig+0x1ec>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f023 0207 	bic.w	r2, r3, #7
 80040a2:	4970      	ldr	r1, [pc, #448]	; (8004264 <HAL_RCC_ClockConfig+0x1ec>)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040aa:	4b6e      	ldr	r3, [pc, #440]	; (8004264 <HAL_RCC_ClockConfig+0x1ec>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0cf      	b.n	800425c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d010      	beq.n	80040ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	4b66      	ldr	r3, [pc, #408]	; (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d908      	bls.n	80040ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d8:	4b63      	ldr	r3, [pc, #396]	; (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4960      	ldr	r1, [pc, #384]	; (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d04c      	beq.n	8004190 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d107      	bne.n	800410e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040fe:	4b5a      	ldr	r3, [pc, #360]	; (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d121      	bne.n	800414e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e0a6      	b.n	800425c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b02      	cmp	r3, #2
 8004114:	d107      	bne.n	8004126 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004116:	4b54      	ldr	r3, [pc, #336]	; (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d115      	bne.n	800414e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e09a      	b.n	800425c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d107      	bne.n	800413e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800412e:	4b4e      	ldr	r3, [pc, #312]	; (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d109      	bne.n	800414e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e08e      	b.n	800425c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800413e:	4b4a      	ldr	r3, [pc, #296]	; (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e086      	b.n	800425c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800414e:	4b46      	ldr	r3, [pc, #280]	; (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f023 0203 	bic.w	r2, r3, #3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	4943      	ldr	r1, [pc, #268]	; (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 800415c:	4313      	orrs	r3, r2
 800415e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004160:	f7fe f908 	bl	8002374 <HAL_GetTick>
 8004164:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004166:	e00a      	b.n	800417e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004168:	f7fe f904 	bl	8002374 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	f241 3288 	movw	r2, #5000	; 0x1388
 8004176:	4293      	cmp	r3, r2
 8004178:	d901      	bls.n	800417e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e06e      	b.n	800425c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417e:	4b3a      	ldr	r3, [pc, #232]	; (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 020c 	and.w	r2, r3, #12
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	429a      	cmp	r2, r3
 800418e:	d1eb      	bne.n	8004168 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d010      	beq.n	80041be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	4b31      	ldr	r3, [pc, #196]	; (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d208      	bcs.n	80041be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ac:	4b2e      	ldr	r3, [pc, #184]	; (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	492b      	ldr	r1, [pc, #172]	; (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041be:	4b29      	ldr	r3, [pc, #164]	; (8004264 <HAL_RCC_ClockConfig+0x1ec>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d210      	bcs.n	80041ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041cc:	4b25      	ldr	r3, [pc, #148]	; (8004264 <HAL_RCC_ClockConfig+0x1ec>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f023 0207 	bic.w	r2, r3, #7
 80041d4:	4923      	ldr	r1, [pc, #140]	; (8004264 <HAL_RCC_ClockConfig+0x1ec>)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	4313      	orrs	r3, r2
 80041da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041dc:	4b21      	ldr	r3, [pc, #132]	; (8004264 <HAL_RCC_ClockConfig+0x1ec>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d001      	beq.n	80041ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e036      	b.n	800425c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d008      	beq.n	800420c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041fa:	4b1b      	ldr	r3, [pc, #108]	; (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	4918      	ldr	r1, [pc, #96]	; (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 8004208:	4313      	orrs	r3, r2
 800420a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d009      	beq.n	800422c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004218:	4b13      	ldr	r3, [pc, #76]	; (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	4910      	ldr	r1, [pc, #64]	; (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 8004228:	4313      	orrs	r3, r2
 800422a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800422c:	f000 f824 	bl	8004278 <HAL_RCC_GetSysClockFreq>
 8004230:	4602      	mov	r2, r0
 8004232:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <HAL_RCC_ClockConfig+0x1f0>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	091b      	lsrs	r3, r3, #4
 8004238:	f003 030f 	and.w	r3, r3, #15
 800423c:	490b      	ldr	r1, [pc, #44]	; (800426c <HAL_RCC_ClockConfig+0x1f4>)
 800423e:	5ccb      	ldrb	r3, [r1, r3]
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	fa22 f303 	lsr.w	r3, r2, r3
 8004248:	4a09      	ldr	r2, [pc, #36]	; (8004270 <HAL_RCC_ClockConfig+0x1f8>)
 800424a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800424c:	4b09      	ldr	r3, [pc, #36]	; (8004274 <HAL_RCC_ClockConfig+0x1fc>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f7fe f83f 	bl	80022d4 <HAL_InitTick>
 8004256:	4603      	mov	r3, r0
 8004258:	72fb      	strb	r3, [r7, #11]

  return status;
 800425a:	7afb      	ldrb	r3, [r7, #11]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40022000 	.word	0x40022000
 8004268:	40021000 	.word	0x40021000
 800426c:	0800d938 	.word	0x0800d938
 8004270:	20000000 	.word	0x20000000
 8004274:	20000004 	.word	0x20000004

08004278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004278:	b480      	push	{r7}
 800427a:	b089      	sub	sp, #36	; 0x24
 800427c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	2300      	movs	r3, #0
 8004284:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004286:	4b3e      	ldr	r3, [pc, #248]	; (8004380 <HAL_RCC_GetSysClockFreq+0x108>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 030c 	and.w	r3, r3, #12
 800428e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004290:	4b3b      	ldr	r3, [pc, #236]	; (8004380 <HAL_RCC_GetSysClockFreq+0x108>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0303 	and.w	r3, r3, #3
 8004298:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_RCC_GetSysClockFreq+0x34>
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	2b0c      	cmp	r3, #12
 80042a4:	d121      	bne.n	80042ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d11e      	bne.n	80042ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042ac:	4b34      	ldr	r3, [pc, #208]	; (8004380 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d107      	bne.n	80042c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042b8:	4b31      	ldr	r3, [pc, #196]	; (8004380 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042be:	0a1b      	lsrs	r3, r3, #8
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	61fb      	str	r3, [r7, #28]
 80042c6:	e005      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042c8:	4b2d      	ldr	r3, [pc, #180]	; (8004380 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	091b      	lsrs	r3, r3, #4
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042d4:	4a2b      	ldr	r2, [pc, #172]	; (8004384 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10d      	bne.n	8004300 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042e8:	e00a      	b.n	8004300 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d102      	bne.n	80042f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042f0:	4b25      	ldr	r3, [pc, #148]	; (8004388 <HAL_RCC_GetSysClockFreq+0x110>)
 80042f2:	61bb      	str	r3, [r7, #24]
 80042f4:	e004      	b.n	8004300 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d101      	bne.n	8004300 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042fc:	4b23      	ldr	r3, [pc, #140]	; (800438c <HAL_RCC_GetSysClockFreq+0x114>)
 80042fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	2b0c      	cmp	r3, #12
 8004304:	d134      	bne.n	8004370 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004306:	4b1e      	ldr	r3, [pc, #120]	; (8004380 <HAL_RCC_GetSysClockFreq+0x108>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d003      	beq.n	800431e <HAL_RCC_GetSysClockFreq+0xa6>
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b03      	cmp	r3, #3
 800431a:	d003      	beq.n	8004324 <HAL_RCC_GetSysClockFreq+0xac>
 800431c:	e005      	b.n	800432a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800431e:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <HAL_RCC_GetSysClockFreq+0x110>)
 8004320:	617b      	str	r3, [r7, #20]
      break;
 8004322:	e005      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004324:	4b19      	ldr	r3, [pc, #100]	; (800438c <HAL_RCC_GetSysClockFreq+0x114>)
 8004326:	617b      	str	r3, [r7, #20]
      break;
 8004328:	e002      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	617b      	str	r3, [r7, #20]
      break;
 800432e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004330:	4b13      	ldr	r3, [pc, #76]	; (8004380 <HAL_RCC_GetSysClockFreq+0x108>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	091b      	lsrs	r3, r3, #4
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	3301      	adds	r3, #1
 800433c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800433e:	4b10      	ldr	r3, [pc, #64]	; (8004380 <HAL_RCC_GetSysClockFreq+0x108>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	0a1b      	lsrs	r3, r3, #8
 8004344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	fb03 f202 	mul.w	r2, r3, r2
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	fbb2 f3f3 	udiv	r3, r2, r3
 8004354:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004356:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <HAL_RCC_GetSysClockFreq+0x108>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	0e5b      	lsrs	r3, r3, #25
 800435c:	f003 0303 	and.w	r3, r3, #3
 8004360:	3301      	adds	r3, #1
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	fbb2 f3f3 	udiv	r3, r2, r3
 800436e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004370:	69bb      	ldr	r3, [r7, #24]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3724      	adds	r7, #36	; 0x24
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	40021000 	.word	0x40021000
 8004384:	0800d950 	.word	0x0800d950
 8004388:	00f42400 	.word	0x00f42400
 800438c:	007a1200 	.word	0x007a1200

08004390 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004394:	4b03      	ldr	r3, [pc, #12]	; (80043a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004396:	681b      	ldr	r3, [r3, #0]
}
 8004398:	4618      	mov	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	20000000 	.word	0x20000000

080043a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043ac:	f7ff fff0 	bl	8004390 <HAL_RCC_GetHCLKFreq>
 80043b0:	4602      	mov	r2, r0
 80043b2:	4b06      	ldr	r3, [pc, #24]	; (80043cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	0a1b      	lsrs	r3, r3, #8
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	4904      	ldr	r1, [pc, #16]	; (80043d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043be:	5ccb      	ldrb	r3, [r1, r3]
 80043c0:	f003 031f 	and.w	r3, r3, #31
 80043c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40021000 	.word	0x40021000
 80043d0:	0800d948 	.word	0x0800d948

080043d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043d8:	f7ff ffda 	bl	8004390 <HAL_RCC_GetHCLKFreq>
 80043dc:	4602      	mov	r2, r0
 80043de:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	0adb      	lsrs	r3, r3, #11
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	4904      	ldr	r1, [pc, #16]	; (80043fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80043ea:	5ccb      	ldrb	r3, [r1, r3]
 80043ec:	f003 031f 	and.w	r3, r3, #31
 80043f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40021000 	.word	0x40021000
 80043fc:	0800d948 	.word	0x0800d948

08004400 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004408:	2300      	movs	r3, #0
 800440a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800440c:	4b2a      	ldr	r3, [pc, #168]	; (80044b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800440e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004418:	f7ff f9ee 	bl	80037f8 <HAL_PWREx_GetVoltageRange>
 800441c:	6178      	str	r0, [r7, #20]
 800441e:	e014      	b.n	800444a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004420:	4b25      	ldr	r3, [pc, #148]	; (80044b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004424:	4a24      	ldr	r2, [pc, #144]	; (80044b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800442a:	6593      	str	r3, [r2, #88]	; 0x58
 800442c:	4b22      	ldr	r3, [pc, #136]	; (80044b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800442e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004438:	f7ff f9de 	bl	80037f8 <HAL_PWREx_GetVoltageRange>
 800443c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800443e:	4b1e      	ldr	r3, [pc, #120]	; (80044b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004442:	4a1d      	ldr	r2, [pc, #116]	; (80044b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004448:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004450:	d10b      	bne.n	800446a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b80      	cmp	r3, #128	; 0x80
 8004456:	d919      	bls.n	800448c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2ba0      	cmp	r3, #160	; 0xa0
 800445c:	d902      	bls.n	8004464 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800445e:	2302      	movs	r3, #2
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	e013      	b.n	800448c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004464:	2301      	movs	r3, #1
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	e010      	b.n	800448c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b80      	cmp	r3, #128	; 0x80
 800446e:	d902      	bls.n	8004476 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004470:	2303      	movs	r3, #3
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	e00a      	b.n	800448c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b80      	cmp	r3, #128	; 0x80
 800447a:	d102      	bne.n	8004482 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800447c:	2302      	movs	r3, #2
 800447e:	613b      	str	r3, [r7, #16]
 8004480:	e004      	b.n	800448c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b70      	cmp	r3, #112	; 0x70
 8004486:	d101      	bne.n	800448c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004488:	2301      	movs	r3, #1
 800448a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800448c:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f023 0207 	bic.w	r2, r3, #7
 8004494:	4909      	ldr	r1, [pc, #36]	; (80044bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800449c:	4b07      	ldr	r3, [pc, #28]	; (80044bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d001      	beq.n	80044ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40021000 	.word	0x40021000
 80044bc:	40022000 	.word	0x40022000

080044c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044c8:	2300      	movs	r3, #0
 80044ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044cc:	2300      	movs	r3, #0
 80044ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d041      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044e4:	d02a      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80044e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044ea:	d824      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044f0:	d008      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044f6:	d81e      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004500:	d010      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004502:	e018      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004504:	4b86      	ldr	r3, [pc, #536]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	4a85      	ldr	r2, [pc, #532]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800450a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004510:	e015      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3304      	adds	r3, #4
 8004516:	2100      	movs	r1, #0
 8004518:	4618      	mov	r0, r3
 800451a:	f000 facb 	bl	8004ab4 <RCCEx_PLLSAI1_Config>
 800451e:	4603      	mov	r3, r0
 8004520:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004522:	e00c      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3320      	adds	r3, #32
 8004528:	2100      	movs	r1, #0
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fbb6 	bl	8004c9c <RCCEx_PLLSAI2_Config>
 8004530:	4603      	mov	r3, r0
 8004532:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004534:	e003      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	74fb      	strb	r3, [r7, #19]
      break;
 800453a:	e000      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800453c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800453e:	7cfb      	ldrb	r3, [r7, #19]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10b      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004544:	4b76      	ldr	r3, [pc, #472]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004552:	4973      	ldr	r1, [pc, #460]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004554:	4313      	orrs	r3, r2
 8004556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800455a:	e001      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455c:	7cfb      	ldrb	r3, [r7, #19]
 800455e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d041      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004570:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004574:	d02a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004576:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800457a:	d824      	bhi.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800457c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004580:	d008      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004582:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004586:	d81e      	bhi.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800458c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004590:	d010      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004592:	e018      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004594:	4b62      	ldr	r3, [pc, #392]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	4a61      	ldr	r2, [pc, #388]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800459a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800459e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045a0:	e015      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3304      	adds	r3, #4
 80045a6:	2100      	movs	r1, #0
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fa83 	bl	8004ab4 <RCCEx_PLLSAI1_Config>
 80045ae:	4603      	mov	r3, r0
 80045b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045b2:	e00c      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3320      	adds	r3, #32
 80045b8:	2100      	movs	r1, #0
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fb6e 	bl	8004c9c <RCCEx_PLLSAI2_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045c4:	e003      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	74fb      	strb	r3, [r7, #19]
      break;
 80045ca:	e000      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80045cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ce:	7cfb      	ldrb	r3, [r7, #19]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10b      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045d4:	4b52      	ldr	r3, [pc, #328]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045e2:	494f      	ldr	r1, [pc, #316]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045ea:	e001      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ec:	7cfb      	ldrb	r3, [r7, #19]
 80045ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80a0 	beq.w	800473e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045fe:	2300      	movs	r3, #0
 8004600:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004602:	4b47      	ldr	r3, [pc, #284]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004612:	2300      	movs	r3, #0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00d      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004618:	4b41      	ldr	r3, [pc, #260]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461c:	4a40      	ldr	r2, [pc, #256]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004622:	6593      	str	r3, [r2, #88]	; 0x58
 8004624:	4b3e      	ldr	r3, [pc, #248]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462c:	60bb      	str	r3, [r7, #8]
 800462e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004630:	2301      	movs	r3, #1
 8004632:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004634:	4b3b      	ldr	r3, [pc, #236]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a3a      	ldr	r2, [pc, #232]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800463a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800463e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004640:	f7fd fe98 	bl	8002374 <HAL_GetTick>
 8004644:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004646:	e009      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004648:	f7fd fe94 	bl	8002374 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d902      	bls.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	74fb      	strb	r3, [r7, #19]
        break;
 800465a:	e005      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800465c:	4b31      	ldr	r3, [pc, #196]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0ef      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004668:	7cfb      	ldrb	r3, [r7, #19]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d15c      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800466e:	4b2c      	ldr	r3, [pc, #176]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004674:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004678:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01f      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	429a      	cmp	r2, r3
 800468a:	d019      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800468c:	4b24      	ldr	r3, [pc, #144]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004696:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004698:	4b21      	ldr	r3, [pc, #132]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800469a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469e:	4a20      	ldr	r2, [pc, #128]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046a8:	4b1d      	ldr	r3, [pc, #116]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ae:	4a1c      	ldr	r2, [pc, #112]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046b8:	4a19      	ldr	r2, [pc, #100]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d016      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7fd fe53 	bl	8002374 <HAL_GetTick>
 80046ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046d0:	e00b      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d2:	f7fd fe4f 	bl	8002374 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d902      	bls.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	74fb      	strb	r3, [r7, #19]
            break;
 80046e8:	e006      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ea:	4b0d      	ldr	r3, [pc, #52]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0ec      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80046f8:	7cfb      	ldrb	r3, [r7, #19]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10c      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046fe:	4b08      	ldr	r3, [pc, #32]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004704:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800470e:	4904      	ldr	r1, [pc, #16]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004710:	4313      	orrs	r3, r2
 8004712:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004716:	e009      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004718:	7cfb      	ldrb	r3, [r7, #19]
 800471a:	74bb      	strb	r3, [r7, #18]
 800471c:	e006      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800471e:	bf00      	nop
 8004720:	40021000 	.word	0x40021000
 8004724:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004728:	7cfb      	ldrb	r3, [r7, #19]
 800472a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800472c:	7c7b      	ldrb	r3, [r7, #17]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d105      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004732:	4b9e      	ldr	r3, [pc, #632]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004736:	4a9d      	ldr	r2, [pc, #628]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800473c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800474a:	4b98      	ldr	r3, [pc, #608]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004750:	f023 0203 	bic.w	r2, r3, #3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004758:	4994      	ldr	r1, [pc, #592]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800476c:	4b8f      	ldr	r3, [pc, #572]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004772:	f023 020c 	bic.w	r2, r3, #12
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477a:	498c      	ldr	r1, [pc, #560]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0304 	and.w	r3, r3, #4
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800478e:	4b87      	ldr	r3, [pc, #540]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004794:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	4983      	ldr	r1, [pc, #524]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0308 	and.w	r3, r3, #8
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047b0:	4b7e      	ldr	r3, [pc, #504]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047be:	497b      	ldr	r1, [pc, #492]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0310 	and.w	r3, r3, #16
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047d2:	4b76      	ldr	r3, [pc, #472]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e0:	4972      	ldr	r1, [pc, #456]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047f4:	4b6d      	ldr	r3, [pc, #436]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004802:	496a      	ldr	r1, [pc, #424]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004816:	4b65      	ldr	r3, [pc, #404]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004824:	4961      	ldr	r1, [pc, #388]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004838:	4b5c      	ldr	r3, [pc, #368]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004846:	4959      	ldr	r1, [pc, #356]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800485a:	4b54      	ldr	r3, [pc, #336]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004860:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004868:	4950      	ldr	r1, [pc, #320]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800487c:	4b4b      	ldr	r3, [pc, #300]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004882:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488a:	4948      	ldr	r1, [pc, #288]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800489e:	4b43      	ldr	r3, [pc, #268]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ac:	493f      	ldr	r1, [pc, #252]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d028      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048c0:	4b3a      	ldr	r3, [pc, #232]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ce:	4937      	ldr	r1, [pc, #220]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048de:	d106      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048e0:	4b32      	ldr	r3, [pc, #200]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	4a31      	ldr	r2, [pc, #196]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048ea:	60d3      	str	r3, [r2, #12]
 80048ec:	e011      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048f6:	d10c      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3304      	adds	r3, #4
 80048fc:	2101      	movs	r1, #1
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 f8d8 	bl	8004ab4 <RCCEx_PLLSAI1_Config>
 8004904:	4603      	mov	r3, r0
 8004906:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004908:	7cfb      	ldrb	r3, [r7, #19]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800490e:	7cfb      	ldrb	r3, [r7, #19]
 8004910:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d028      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800491e:	4b23      	ldr	r3, [pc, #140]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004924:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492c:	491f      	ldr	r1, [pc, #124]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800493c:	d106      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800493e:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	4a1a      	ldr	r2, [pc, #104]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004944:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004948:	60d3      	str	r3, [r2, #12]
 800494a:	e011      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004950:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004954:	d10c      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3304      	adds	r3, #4
 800495a:	2101      	movs	r1, #1
 800495c:	4618      	mov	r0, r3
 800495e:	f000 f8a9 	bl	8004ab4 <RCCEx_PLLSAI1_Config>
 8004962:	4603      	mov	r3, r0
 8004964:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004966:	7cfb      	ldrb	r3, [r7, #19]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800496c:	7cfb      	ldrb	r3, [r7, #19]
 800496e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d02b      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800498a:	4908      	ldr	r1, [pc, #32]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004996:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800499a:	d109      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800499c:	4b03      	ldr	r3, [pc, #12]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4a02      	ldr	r2, [pc, #8]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049a6:	60d3      	str	r3, [r2, #12]
 80049a8:	e014      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80049aa:	bf00      	nop
 80049ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049b8:	d10c      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	3304      	adds	r3, #4
 80049be:	2101      	movs	r1, #1
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 f877 	bl	8004ab4 <RCCEx_PLLSAI1_Config>
 80049c6:	4603      	mov	r3, r0
 80049c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049ca:	7cfb      	ldrb	r3, [r7, #19]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80049d0:	7cfb      	ldrb	r3, [r7, #19]
 80049d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d02f      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049e0:	4b2b      	ldr	r3, [pc, #172]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ee:	4928      	ldr	r1, [pc, #160]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049fe:	d10d      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3304      	adds	r3, #4
 8004a04:	2102      	movs	r1, #2
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 f854 	bl	8004ab4 <RCCEx_PLLSAI1_Config>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a10:	7cfb      	ldrb	r3, [r7, #19]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d014      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a16:	7cfb      	ldrb	r3, [r7, #19]
 8004a18:	74bb      	strb	r3, [r7, #18]
 8004a1a:	e011      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a24:	d10c      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3320      	adds	r3, #32
 8004a2a:	2102      	movs	r1, #2
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 f935 	bl	8004c9c <RCCEx_PLLSAI2_Config>
 8004a32:	4603      	mov	r3, r0
 8004a34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a36:	7cfb      	ldrb	r3, [r7, #19]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a3c:	7cfb      	ldrb	r3, [r7, #19]
 8004a3e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00a      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a4c:	4b10      	ldr	r3, [pc, #64]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a52:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a5a:	490d      	ldr	r1, [pc, #52]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00b      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a6e:	4b08      	ldr	r3, [pc, #32]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a7e:	4904      	ldr	r1, [pc, #16]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a86:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40021000 	.word	0x40021000

08004a94 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004a98:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a04      	ldr	r2, [pc, #16]	; (8004ab0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a9e:	f043 0304 	orr.w	r3, r3, #4
 8004aa2:	6013      	str	r3, [r2, #0]
}
 8004aa4:	bf00      	nop
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40021000 	.word	0x40021000

08004ab4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ac2:	4b75      	ldr	r3, [pc, #468]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d018      	beq.n	8004b00 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ace:	4b72      	ldr	r3, [pc, #456]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f003 0203 	and.w	r2, r3, #3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d10d      	bne.n	8004afa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
       ||
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ae6:	4b6c      	ldr	r3, [pc, #432]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	091b      	lsrs	r3, r3, #4
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
       ||
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d047      	beq.n	8004b8a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	73fb      	strb	r3, [r7, #15]
 8004afe:	e044      	b.n	8004b8a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d018      	beq.n	8004b3a <RCCEx_PLLSAI1_Config+0x86>
 8004b08:	2b03      	cmp	r3, #3
 8004b0a:	d825      	bhi.n	8004b58 <RCCEx_PLLSAI1_Config+0xa4>
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d002      	beq.n	8004b16 <RCCEx_PLLSAI1_Config+0x62>
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d009      	beq.n	8004b28 <RCCEx_PLLSAI1_Config+0x74>
 8004b14:	e020      	b.n	8004b58 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b16:	4b60      	ldr	r3, [pc, #384]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d11d      	bne.n	8004b5e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b26:	e01a      	b.n	8004b5e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b28:	4b5b      	ldr	r3, [pc, #364]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d116      	bne.n	8004b62 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b38:	e013      	b.n	8004b62 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b3a:	4b57      	ldr	r3, [pc, #348]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10f      	bne.n	8004b66 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b46:	4b54      	ldr	r3, [pc, #336]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d109      	bne.n	8004b66 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b56:	e006      	b.n	8004b66 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b5c:	e004      	b.n	8004b68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b5e:	bf00      	nop
 8004b60:	e002      	b.n	8004b68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b62:	bf00      	nop
 8004b64:	e000      	b.n	8004b68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b66:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10d      	bne.n	8004b8a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b6e:	4b4a      	ldr	r3, [pc, #296]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6819      	ldr	r1, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	430b      	orrs	r3, r1
 8004b84:	4944      	ldr	r1, [pc, #272]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d17d      	bne.n	8004c8c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b90:	4b41      	ldr	r3, [pc, #260]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a40      	ldr	r2, [pc, #256]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b9c:	f7fd fbea 	bl	8002374 <HAL_GetTick>
 8004ba0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ba2:	e009      	b.n	8004bb8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ba4:	f7fd fbe6 	bl	8002374 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d902      	bls.n	8004bb8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	73fb      	strb	r3, [r7, #15]
        break;
 8004bb6:	e005      	b.n	8004bc4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bb8:	4b37      	ldr	r3, [pc, #220]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1ef      	bne.n	8004ba4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d160      	bne.n	8004c8c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d111      	bne.n	8004bf4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bd0:	4b31      	ldr	r3, [pc, #196]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6892      	ldr	r2, [r2, #8]
 8004be0:	0211      	lsls	r1, r2, #8
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	68d2      	ldr	r2, [r2, #12]
 8004be6:	0912      	lsrs	r2, r2, #4
 8004be8:	0452      	lsls	r2, r2, #17
 8004bea:	430a      	orrs	r2, r1
 8004bec:	492a      	ldr	r1, [pc, #168]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	610b      	str	r3, [r1, #16]
 8004bf2:	e027      	b.n	8004c44 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d112      	bne.n	8004c20 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bfa:	4b27      	ldr	r3, [pc, #156]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004c02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6892      	ldr	r2, [r2, #8]
 8004c0a:	0211      	lsls	r1, r2, #8
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6912      	ldr	r2, [r2, #16]
 8004c10:	0852      	lsrs	r2, r2, #1
 8004c12:	3a01      	subs	r2, #1
 8004c14:	0552      	lsls	r2, r2, #21
 8004c16:	430a      	orrs	r2, r1
 8004c18:	491f      	ldr	r1, [pc, #124]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	610b      	str	r3, [r1, #16]
 8004c1e:	e011      	b.n	8004c44 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c20:	4b1d      	ldr	r3, [pc, #116]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6892      	ldr	r2, [r2, #8]
 8004c30:	0211      	lsls	r1, r2, #8
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6952      	ldr	r2, [r2, #20]
 8004c36:	0852      	lsrs	r2, r2, #1
 8004c38:	3a01      	subs	r2, #1
 8004c3a:	0652      	lsls	r2, r2, #25
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	4916      	ldr	r1, [pc, #88]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c44:	4b14      	ldr	r3, [pc, #80]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a13      	ldr	r2, [pc, #76]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c50:	f7fd fb90 	bl	8002374 <HAL_GetTick>
 8004c54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c56:	e009      	b.n	8004c6c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c58:	f7fd fb8c 	bl	8002374 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d902      	bls.n	8004c6c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	73fb      	strb	r3, [r7, #15]
          break;
 8004c6a:	e005      	b.n	8004c78 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0ef      	beq.n	8004c58 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d106      	bne.n	8004c8c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c7e:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c80:	691a      	ldr	r2, [r3, #16]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	4904      	ldr	r1, [pc, #16]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40021000 	.word	0x40021000

08004c9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004caa:	4b6a      	ldr	r3, [pc, #424]	; (8004e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d018      	beq.n	8004ce8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004cb6:	4b67      	ldr	r3, [pc, #412]	; (8004e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f003 0203 	and.w	r2, r3, #3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d10d      	bne.n	8004ce2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
       ||
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004cce:	4b61      	ldr	r3, [pc, #388]	; (8004e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	091b      	lsrs	r3, r3, #4
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
       ||
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d047      	beq.n	8004d72 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	73fb      	strb	r3, [r7, #15]
 8004ce6:	e044      	b.n	8004d72 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d018      	beq.n	8004d22 <RCCEx_PLLSAI2_Config+0x86>
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d825      	bhi.n	8004d40 <RCCEx_PLLSAI2_Config+0xa4>
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d002      	beq.n	8004cfe <RCCEx_PLLSAI2_Config+0x62>
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d009      	beq.n	8004d10 <RCCEx_PLLSAI2_Config+0x74>
 8004cfc:	e020      	b.n	8004d40 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cfe:	4b55      	ldr	r3, [pc, #340]	; (8004e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d11d      	bne.n	8004d46 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d0e:	e01a      	b.n	8004d46 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d10:	4b50      	ldr	r3, [pc, #320]	; (8004e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d116      	bne.n	8004d4a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d20:	e013      	b.n	8004d4a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d22:	4b4c      	ldr	r3, [pc, #304]	; (8004e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10f      	bne.n	8004d4e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d2e:	4b49      	ldr	r3, [pc, #292]	; (8004e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d109      	bne.n	8004d4e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d3e:	e006      	b.n	8004d4e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	73fb      	strb	r3, [r7, #15]
      break;
 8004d44:	e004      	b.n	8004d50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d46:	bf00      	nop
 8004d48:	e002      	b.n	8004d50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d4a:	bf00      	nop
 8004d4c:	e000      	b.n	8004d50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10d      	bne.n	8004d72 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d56:	4b3f      	ldr	r3, [pc, #252]	; (8004e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6819      	ldr	r1, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	430b      	orrs	r3, r1
 8004d6c:	4939      	ldr	r1, [pc, #228]	; (8004e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d167      	bne.n	8004e48 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d78:	4b36      	ldr	r3, [pc, #216]	; (8004e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a35      	ldr	r2, [pc, #212]	; (8004e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d84:	f7fd faf6 	bl	8002374 <HAL_GetTick>
 8004d88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d8a:	e009      	b.n	8004da0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d8c:	f7fd faf2 	bl	8002374 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d902      	bls.n	8004da0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	73fb      	strb	r3, [r7, #15]
        break;
 8004d9e:	e005      	b.n	8004dac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004da0:	4b2c      	ldr	r3, [pc, #176]	; (8004e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1ef      	bne.n	8004d8c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d14a      	bne.n	8004e48 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d111      	bne.n	8004ddc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004db8:	4b26      	ldr	r3, [pc, #152]	; (8004e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6892      	ldr	r2, [r2, #8]
 8004dc8:	0211      	lsls	r1, r2, #8
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	68d2      	ldr	r2, [r2, #12]
 8004dce:	0912      	lsrs	r2, r2, #4
 8004dd0:	0452      	lsls	r2, r2, #17
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	491f      	ldr	r1, [pc, #124]	; (8004e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	614b      	str	r3, [r1, #20]
 8004dda:	e011      	b.n	8004e00 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ddc:	4b1d      	ldr	r3, [pc, #116]	; (8004e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004de4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6892      	ldr	r2, [r2, #8]
 8004dec:	0211      	lsls	r1, r2, #8
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6912      	ldr	r2, [r2, #16]
 8004df2:	0852      	lsrs	r2, r2, #1
 8004df4:	3a01      	subs	r2, #1
 8004df6:	0652      	lsls	r2, r2, #25
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	4916      	ldr	r1, [pc, #88]	; (8004e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e00:	4b14      	ldr	r3, [pc, #80]	; (8004e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a13      	ldr	r2, [pc, #76]	; (8004e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0c:	f7fd fab2 	bl	8002374 <HAL_GetTick>
 8004e10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e12:	e009      	b.n	8004e28 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e14:	f7fd faae 	bl	8002374 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d902      	bls.n	8004e28 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	73fb      	strb	r3, [r7, #15]
          break;
 8004e26:	e005      	b.n	8004e34 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e28:	4b0a      	ldr	r3, [pc, #40]	; (8004e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0ef      	beq.n	8004e14 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e3a:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e3c:	695a      	ldr	r2, [r3, #20]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	4904      	ldr	r1, [pc, #16]	; (8004e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	40021000 	.word	0x40021000

08004e58 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d06c      	beq.n	8004f44 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d106      	bne.n	8004e84 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7fc fe94 	bl	8001bac <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	22ca      	movs	r2, #202	; 0xca
 8004e92:	625a      	str	r2, [r3, #36]	; 0x24
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2253      	movs	r2, #83	; 0x53
 8004e9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f9c2 	bl	8005226 <RTC_EnterInitMode>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d14b      	bne.n	8004f44 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6812      	ldr	r2, [r2, #0]
 8004eb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ebe:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6899      	ldr	r1, [r3, #8]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	68d2      	ldr	r2, [r2, #12]
 8004ee6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6919      	ldr	r1, [r3, #16]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	041a      	lsls	r2, r3, #16
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f9c5 	bl	800528c <RTC_ExitInitMode>
 8004f02:	4603      	mov	r3, r0
 8004f04:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d11b      	bne.n	8004f44 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0203 	bic.w	r2, r2, #3
 8004f1a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69da      	ldr	r2, [r3, #28]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	22ff      	movs	r2, #255	; 0xff
 8004f3a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004f4e:	b590      	push	{r4, r7, lr}
 8004f50:	b087      	sub	sp, #28
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d101      	bne.n	8004f68 <HAL_RTC_SetTime+0x1a>
 8004f64:	2302      	movs	r3, #2
 8004f66:	e08b      	b.n	8005080 <HAL_RTC_SetTime+0x132>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	22ca      	movs	r2, #202	; 0xca
 8004f7e:	625a      	str	r2, [r3, #36]	; 0x24
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2253      	movs	r2, #83	; 0x53
 8004f86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f94c 	bl	8005226 <RTC_EnterInitMode>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004f92:	7cfb      	ldrb	r3, [r7, #19]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d163      	bne.n	8005060 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d126      	bne.n	8004fec <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d102      	bne.n	8004fb2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 f9a6 	bl	8005308 <RTC_ByteToBcd2>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	785b      	ldrb	r3, [r3, #1]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 f99f 	bl	8005308 <RTC_ByteToBcd2>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004fce:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	789b      	ldrb	r3, [r3, #2]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 f997 	bl	8005308 <RTC_ByteToBcd2>
 8004fda:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004fdc:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	78db      	ldrb	r3, [r3, #3]
 8004fe4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	e018      	b.n	800501e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d102      	bne.n	8005000 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	785b      	ldrb	r3, [r3, #1]
 800500a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800500c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005012:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	78db      	ldrb	r3, [r3, #3]
 8005018:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800501a:	4313      	orrs	r3, r2
 800501c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005028:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800502c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800503c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6899      	ldr	r1, [r3, #8]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	431a      	orrs	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 f918 	bl	800528c <RTC_ExitInitMode>
 800505c:	4603      	mov	r3, r0
 800505e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	22ff      	movs	r2, #255	; 0xff
 8005066:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005068:	7cfb      	ldrb	r3, [r7, #19]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d103      	bne.n	8005076 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800507e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005080:	4618      	mov	r0, r3
 8005082:	371c      	adds	r7, #28
 8005084:	46bd      	mov	sp, r7
 8005086:	bd90      	pop	{r4, r7, pc}

08005088 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80050b6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80050ba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	0c1b      	lsrs	r3, r3, #16
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	0a1b      	lsrs	r3, r3, #8
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	0d9b      	lsrs	r3, r3, #22
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d11a      	bne.n	8005136 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	4618      	mov	r0, r3
 8005106:	f000 f91f 	bl	8005348 <RTC_Bcd2ToByte>
 800510a:	4603      	mov	r3, r0
 800510c:	461a      	mov	r2, r3
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	785b      	ldrb	r3, [r3, #1]
 8005116:	4618      	mov	r0, r3
 8005118:	f000 f916 	bl	8005348 <RTC_Bcd2ToByte>
 800511c:	4603      	mov	r3, r0
 800511e:	461a      	mov	r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	789b      	ldrb	r3, [r3, #2]
 8005128:	4618      	mov	r0, r3
 800512a:	f000 f90d 	bl	8005348 <RTC_Bcd2ToByte>
 800512e:	4603      	mov	r3, r0
 8005130:	461a      	mov	r2, r3
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005156:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800515a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	0c1b      	lsrs	r3, r3, #16
 8005160:	b2da      	uxtb	r2, r3
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	0a1b      	lsrs	r3, r3, #8
 800516a:	b2db      	uxtb	r3, r3
 800516c:	f003 031f 	and.w	r3, r3, #31
 8005170:	b2da      	uxtb	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	b2db      	uxtb	r3, r3
 800517a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800517e:	b2da      	uxtb	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	0b5b      	lsrs	r3, r3, #13
 8005188:	b2db      	uxtb	r3, r3
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	b2da      	uxtb	r2, r3
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d11a      	bne.n	80051d0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	78db      	ldrb	r3, [r3, #3]
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 f8d2 	bl	8005348 <RTC_Bcd2ToByte>
 80051a4:	4603      	mov	r3, r0
 80051a6:	461a      	mov	r2, r3
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	785b      	ldrb	r3, [r3, #1]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 f8c9 	bl	8005348 <RTC_Bcd2ToByte>
 80051b6:	4603      	mov	r3, r0
 80051b8:	461a      	mov	r2, r3
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	789b      	ldrb	r3, [r3, #2]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 f8c0 	bl	8005348 <RTC_Bcd2ToByte>
 80051c8:	4603      	mov	r3, r0
 80051ca:	461a      	mov	r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3718      	adds	r7, #24
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051f0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80051f2:	f7fd f8bf 	bl	8002374 <HAL_GetTick>
 80051f6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80051f8:	e009      	b.n	800520e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80051fa:	f7fd f8bb 	bl	8002374 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005208:	d901      	bls.n	800520e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e007      	b.n	800521e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0ee      	beq.n	80051fa <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523c:	2b00      	cmp	r3, #0
 800523e:	d120      	bne.n	8005282 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005248:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800524a:	f7fd f893 	bl	8002374 <HAL_GetTick>
 800524e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005250:	e00d      	b.n	800526e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005252:	f7fd f88f 	bl	8002374 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005260:	d905      	bls.n	800526e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2203      	movs	r2, #3
 800526a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	d102      	bne.n	8005282 <RTC_EnterInitMode+0x5c>
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	2b03      	cmp	r3, #3
 8005280:	d1e7      	bne.n	8005252 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005282:	7bfb      	ldrb	r3, [r7, #15]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005294:	2300      	movs	r3, #0
 8005296:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005298:	4b1a      	ldr	r3, [pc, #104]	; (8005304 <RTC_ExitInitMode+0x78>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	4a19      	ldr	r2, [pc, #100]	; (8005304 <RTC_ExitInitMode+0x78>)
 800529e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052a2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80052a4:	4b17      	ldr	r3, [pc, #92]	; (8005304 <RTC_ExitInitMode+0x78>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f003 0320 	and.w	r3, r3, #32
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10c      	bne.n	80052ca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7ff ff92 	bl	80051da <HAL_RTC_WaitForSynchro>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d01e      	beq.n	80052fa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2203      	movs	r2, #3
 80052c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	73fb      	strb	r3, [r7, #15]
 80052c8:	e017      	b.n	80052fa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80052ca:	4b0e      	ldr	r3, [pc, #56]	; (8005304 <RTC_ExitInitMode+0x78>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	4a0d      	ldr	r2, [pc, #52]	; (8005304 <RTC_ExitInitMode+0x78>)
 80052d0:	f023 0320 	bic.w	r3, r3, #32
 80052d4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff ff7f 	bl	80051da <HAL_RTC_WaitForSynchro>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d005      	beq.n	80052ee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2203      	movs	r2, #3
 80052e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80052ee:	4b05      	ldr	r3, [pc, #20]	; (8005304 <RTC_ExitInitMode+0x78>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	4a04      	ldr	r2, [pc, #16]	; (8005304 <RTC_ExitInitMode+0x78>)
 80052f4:	f043 0320 	orr.w	r3, r3, #32
 80052f8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40002800 	.word	0x40002800

08005308 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	4603      	mov	r3, r0
 8005310:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005316:	79fb      	ldrb	r3, [r7, #7]
 8005318:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800531a:	e005      	b.n	8005328 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	3301      	adds	r3, #1
 8005320:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005322:	7afb      	ldrb	r3, [r7, #11]
 8005324:	3b0a      	subs	r3, #10
 8005326:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005328:	7afb      	ldrb	r3, [r7, #11]
 800532a:	2b09      	cmp	r3, #9
 800532c:	d8f6      	bhi.n	800531c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	b2da      	uxtb	r2, r3
 8005336:	7afb      	ldrb	r3, [r7, #11]
 8005338:	4313      	orrs	r3, r2
 800533a:	b2db      	uxtb	r3, r3
}
 800533c:	4618      	mov	r0, r3
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	4603      	mov	r3, r0
 8005350:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	091b      	lsrs	r3, r3, #4
 8005356:	b2db      	uxtb	r3, r3
 8005358:	461a      	mov	r2, r3
 800535a:	0092      	lsls	r2, r2, #2
 800535c:	4413      	add	r3, r2
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	f003 030f 	and.w	r3, r3, #15
 8005368:	b2da      	uxtb	r2, r3
 800536a:	7bfb      	ldrb	r3, [r7, #15]
 800536c:	4413      	add	r3, r2
 800536e:	b2db      	uxtb	r3, r3
}
 8005370:	4618      	mov	r0, r3
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005392:	2302      	movs	r3, #2
 8005394:	e07f      	b.n	8005496 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2202      	movs	r2, #2
 80053a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	22ca      	movs	r2, #202	; 0xca
 80053ac:	625a      	str	r2, [r3, #36]	; 0x24
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2253      	movs	r2, #83	; 0x53
 80053b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80053d6:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d120      	bne.n	8005428 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 80053e6:	f7fc ffc5 	bl	8002374 <HAL_GetTick>
 80053ea:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80053ec:	e015      	b.n	800541a <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80053ee:	f7fc ffc1 	bl	8002374 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053fc:	d90d      	bls.n	800541a <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	22ff      	movs	r2, #255	; 0xff
 8005404:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2203      	movs	r2, #3
 800540a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e03d      	b.n	8005496 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0e2      	beq.n	80053ee <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f023 0107 	bic.w	r1, r3, #7
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	430a      	orrs	r2, r1
 8005442:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005444:	4b16      	ldr	r3, [pc, #88]	; (80054a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a15      	ldr	r2, [pc, #84]	; (80054a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800544a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800544e:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005450:	4b13      	ldr	r3, [pc, #76]	; (80054a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	4a12      	ldr	r2, [pc, #72]	; (80054a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005456:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800545a:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800546a:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800547a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	22ff      	movs	r2, #255	; 0xff
 8005482:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3718      	adds	r7, #24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	40010400 	.word	0x40010400

080054a4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80054ac:	4b0f      	ldr	r3, [pc, #60]	; (80054ec <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80054ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80054b2:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00b      	beq.n	80054da <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80054d2:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f80b 	bl	80054f0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80054e2:	bf00      	nop
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40010400 	.word	0x40010400

080054f0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e095      	b.n	8005642 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	2b00      	cmp	r3, #0
 800551c:	d108      	bne.n	8005530 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005526:	d009      	beq.n	800553c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	61da      	str	r2, [r3, #28]
 800552e:	e005      	b.n	800553c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fc fba0 	bl	8001c9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005572:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800557c:	d902      	bls.n	8005584 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800557e:	2300      	movs	r3, #0
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	e002      	b.n	800558a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005588:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005592:	d007      	beq.n	80055a4 <HAL_SPI_Init+0xa0>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800559c:	d002      	beq.n	80055a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055b4:	431a      	orrs	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	431a      	orrs	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055dc:	431a      	orrs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e6:	ea42 0103 	orr.w	r1, r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	0c1b      	lsrs	r3, r3, #16
 8005600:	f003 0204 	and.w	r2, r3, #4
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	f003 0310 	and.w	r3, r3, #16
 800560c:	431a      	orrs	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005612:	f003 0308 	and.w	r3, r3, #8
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005620:	ea42 0103 	orr.w	r1, r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b088      	sub	sp, #32
 800564e:	af00      	add	r7, sp, #0
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	60b9      	str	r1, [r7, #8]
 8005654:	603b      	str	r3, [r7, #0]
 8005656:	4613      	mov	r3, r2
 8005658:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800565a:	2300      	movs	r3, #0
 800565c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_SPI_Transmit+0x22>
 8005668:	2302      	movs	r3, #2
 800566a:	e158      	b.n	800591e <HAL_SPI_Transmit+0x2d4>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005674:	f7fc fe7e 	bl	8002374 <HAL_GetTick>
 8005678:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800567a:	88fb      	ldrh	r3, [r7, #6]
 800567c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b01      	cmp	r3, #1
 8005688:	d002      	beq.n	8005690 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800568a:	2302      	movs	r3, #2
 800568c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800568e:	e13d      	b.n	800590c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <HAL_SPI_Transmit+0x52>
 8005696:	88fb      	ldrh	r3, [r7, #6]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d102      	bne.n	80056a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056a0:	e134      	b.n	800590c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2203      	movs	r2, #3
 80056a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	88fa      	ldrh	r2, [r7, #6]
 80056ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	88fa      	ldrh	r2, [r7, #6]
 80056c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ec:	d10f      	bne.n	800570e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800570c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005718:	2b40      	cmp	r3, #64	; 0x40
 800571a:	d007      	beq.n	800572c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800572a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005734:	d94b      	bls.n	80057ce <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <HAL_SPI_Transmit+0xfa>
 800573e:	8afb      	ldrh	r3, [r7, #22]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d13e      	bne.n	80057c2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	881a      	ldrh	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	1c9a      	adds	r2, r3, #2
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800575e:	b29b      	uxth	r3, r3
 8005760:	3b01      	subs	r3, #1
 8005762:	b29a      	uxth	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005768:	e02b      	b.n	80057c2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b02      	cmp	r3, #2
 8005776:	d112      	bne.n	800579e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	881a      	ldrh	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005788:	1c9a      	adds	r2, r3, #2
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005792:	b29b      	uxth	r3, r3
 8005794:	3b01      	subs	r3, #1
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800579c:	e011      	b.n	80057c2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800579e:	f7fc fde9 	bl	8002374 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d803      	bhi.n	80057b6 <HAL_SPI_Transmit+0x16c>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057b4:	d102      	bne.n	80057bc <HAL_SPI_Transmit+0x172>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d102      	bne.n	80057c2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057c0:	e0a4      	b.n	800590c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1ce      	bne.n	800576a <HAL_SPI_Transmit+0x120>
 80057cc:	e07c      	b.n	80058c8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d002      	beq.n	80057dc <HAL_SPI_Transmit+0x192>
 80057d6:	8afb      	ldrh	r3, [r7, #22]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d170      	bne.n	80058be <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d912      	bls.n	800580c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ea:	881a      	ldrh	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	1c9a      	adds	r2, r3, #2
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b02      	subs	r3, #2
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	87da      	strh	r2, [r3, #62]	; 0x3e
 800580a:	e058      	b.n	80058be <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	330c      	adds	r3, #12
 8005816:	7812      	ldrb	r2, [r2, #0]
 8005818:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581e:	1c5a      	adds	r2, r3, #1
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005828:	b29b      	uxth	r3, r3
 800582a:	3b01      	subs	r3, #1
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005832:	e044      	b.n	80058be <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b02      	cmp	r3, #2
 8005840:	d12b      	bne.n	800589a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005846:	b29b      	uxth	r3, r3
 8005848:	2b01      	cmp	r3, #1
 800584a:	d912      	bls.n	8005872 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	881a      	ldrh	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	1c9a      	adds	r2, r3, #2
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005866:	b29b      	uxth	r3, r3
 8005868:	3b02      	subs	r3, #2
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005870:	e025      	b.n	80058be <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	330c      	adds	r3, #12
 800587c:	7812      	ldrb	r2, [r2, #0]
 800587e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005898:	e011      	b.n	80058be <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800589a:	f7fc fd6b 	bl	8002374 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d803      	bhi.n	80058b2 <HAL_SPI_Transmit+0x268>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058b0:	d102      	bne.n	80058b8 <HAL_SPI_Transmit+0x26e>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d102      	bne.n	80058be <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058bc:	e026      	b.n	800590c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1b5      	bne.n	8005834 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	6839      	ldr	r1, [r7, #0]
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 fad3 	bl	8005e78 <SPI_EndRxTxTransaction>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2220      	movs	r2, #32
 80058dc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10a      	bne.n	80058fc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058e6:	2300      	movs	r3, #0
 80058e8:	613b      	str	r3, [r7, #16]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	613b      	str	r3, [r7, #16]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	613b      	str	r3, [r7, #16]
 80058fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	77fb      	strb	r3, [r7, #31]
 8005908:	e000      	b.n	800590c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800590a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800591c:	7ffb      	ldrb	r3, [r7, #31]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3720      	adds	r7, #32
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
	...

08005928 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	4613      	mov	r3, r2
 8005934:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005936:	2300      	movs	r3, #0
 8005938:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005940:	2b01      	cmp	r3, #1
 8005942:	d101      	bne.n	8005948 <HAL_SPI_Transmit_DMA+0x20>
 8005944:	2302      	movs	r3, #2
 8005946:	e0d8      	b.n	8005afa <HAL_SPI_Transmit_DMA+0x1d2>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b01      	cmp	r3, #1
 800595a:	d002      	beq.n	8005962 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800595c:	2302      	movs	r3, #2
 800595e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005960:	e0c6      	b.n	8005af0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <HAL_SPI_Transmit_DMA+0x46>
 8005968:	88fb      	ldrh	r3, [r7, #6]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d102      	bne.n	8005974 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005972:	e0bd      	b.n	8005af0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2203      	movs	r2, #3
 8005978:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	88fa      	ldrh	r2, [r7, #6]
 800598c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	88fa      	ldrh	r2, [r7, #6]
 8005992:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059be:	d10f      	bne.n	80059e0 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e4:	4a47      	ldr	r2, [pc, #284]	; (8005b04 <HAL_SPI_Transmit_DMA+0x1dc>)
 80059e6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ec:	4a46      	ldr	r2, [pc, #280]	; (8005b08 <HAL_SPI_Transmit_DMA+0x1e0>)
 80059ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f4:	4a45      	ldr	r2, [pc, #276]	; (8005b0c <HAL_SPI_Transmit_DMA+0x1e4>)
 80059f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fc:	2200      	movs	r2, #0
 80059fe:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a0e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a18:	d82d      	bhi.n	8005a76 <HAL_SPI_Transmit_DMA+0x14e>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a24:	d127      	bne.n	8005a76 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10f      	bne.n	8005a54 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a42:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	085b      	lsrs	r3, r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a52:	e010      	b.n	8005a76 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a62:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	085b      	lsrs	r3, r3, #1
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	3301      	adds	r3, #1
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7e:	4619      	mov	r1, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	330c      	adds	r3, #12
 8005a86:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a8c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005a8e:	f7fc fd8e 	bl	80025ae <HAL_DMA_Start_IT>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00c      	beq.n	8005ab2 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a9c:	f043 0210 	orr.w	r2, r3, #16
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005ab0:	e01e      	b.n	8005af0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abc:	2b40      	cmp	r3, #64	; 0x40
 8005abe:	d007      	beq.n	8005ad0 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ace:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0220 	orr.w	r2, r2, #32
 8005ade:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0202 	orr.w	r2, r2, #2
 8005aee:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	08005bdf 	.word	0x08005bdf
 8005b08:	08005b39 	.word	0x08005b39
 8005b0c:	08005bfb 	.word	0x08005bfb

08005b10 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b44:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b46:	f7fc fc15 	bl	8002374 <HAL_GetTick>
 8005b4a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0320 	and.w	r3, r3, #32
 8005b56:	2b20      	cmp	r3, #32
 8005b58:	d03b      	beq.n	8005bd2 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0220 	bic.w	r2, r2, #32
 8005b68:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0202 	bic.w	r2, r2, #2
 8005b78:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	2164      	movs	r1, #100	; 0x64
 8005b7e:	6978      	ldr	r0, [r7, #20]
 8005b80:	f000 f97a 	bl	8005e78 <SPI_EndRxTxTransaction>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d005      	beq.n	8005b96 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b8e:	f043 0220 	orr.w	r2, r3, #32
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10a      	bne.n	8005bb4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60fb      	str	r3, [r7, #12]
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	60fb      	str	r3, [r7, #12]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005bca:	6978      	ldr	r0, [r7, #20]
 8005bcc:	f7ff ffaa 	bl	8005b24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005bd0:	e002      	b.n	8005bd8 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005bd2:	6978      	ldr	r0, [r7, #20]
 8005bd4:	f7fb fd08 	bl	80015e8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b084      	sub	sp, #16
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f7ff ff8f 	bl	8005b10 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005bf2:	bf00      	nop
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0203 	bic.w	r2, r2, #3
 8005c16:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c1c:	f043 0210 	orr.w	r2, r3, #16
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f7ff ff79 	bl	8005b24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c32:	bf00      	nop
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	603b      	str	r3, [r7, #0]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c4c:	f7fc fb92 	bl	8002374 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	1a9b      	subs	r3, r3, r2
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	4413      	add	r3, r2
 8005c5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c5c:	f7fc fb8a 	bl	8002374 <HAL_GetTick>
 8005c60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c62:	4b39      	ldr	r3, [pc, #228]	; (8005d48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	015b      	lsls	r3, r3, #5
 8005c68:	0d1b      	lsrs	r3, r3, #20
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	fb02 f303 	mul.w	r3, r2, r3
 8005c70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c72:	e054      	b.n	8005d1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c7a:	d050      	beq.n	8005d1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c7c:	f7fc fb7a 	bl	8002374 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	69fa      	ldr	r2, [r7, #28]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d902      	bls.n	8005c92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d13d      	bne.n	8005d0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ca0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005caa:	d111      	bne.n	8005cd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cb4:	d004      	beq.n	8005cc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cbe:	d107      	bne.n	8005cd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd8:	d10f      	bne.n	8005cfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e017      	b.n	8005d3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4013      	ands	r3, r2
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	bf0c      	ite	eq
 8005d2e:	2301      	moveq	r3, #1
 8005d30:	2300      	movne	r3, #0
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d19b      	bne.n	8005c74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3720      	adds	r7, #32
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000000 	.word	0x20000000

08005d4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08a      	sub	sp, #40	; 0x28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005d5e:	f7fc fb09 	bl	8002374 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	1a9b      	subs	r3, r3, r2
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005d6e:	f7fc fb01 	bl	8002374 <HAL_GetTick>
 8005d72:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	330c      	adds	r3, #12
 8005d7a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005d7c:	4b3d      	ldr	r3, [pc, #244]	; (8005e74 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	4613      	mov	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	00da      	lsls	r2, r3, #3
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	0d1b      	lsrs	r3, r3, #20
 8005d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d8e:	fb02 f303 	mul.w	r3, r2, r3
 8005d92:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005d94:	e060      	b.n	8005e58 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005d9c:	d107      	bne.n	8005dae <SPI_WaitFifoStateUntilTimeout+0x62>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d104      	bne.n	8005dae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005dac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005db4:	d050      	beq.n	8005e58 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005db6:	f7fc fadd 	bl	8002374 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d902      	bls.n	8005dcc <SPI_WaitFifoStateUntilTimeout+0x80>
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d13d      	bne.n	8005e48 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005dda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005de4:	d111      	bne.n	8005e0a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dee:	d004      	beq.n	8005dfa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df8:	d107      	bne.n	8005e0a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e12:	d10f      	bne.n	8005e34 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e010      	b.n	8005e6a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	3b01      	subs	r3, #1
 8005e56:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689a      	ldr	r2, [r3, #8]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	4013      	ands	r3, r2
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d196      	bne.n	8005d96 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3728      	adds	r7, #40	; 0x28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20000000 	.word	0x20000000

08005e78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f7ff ff5b 	bl	8005d4c <SPI_WaitFifoStateUntilTimeout>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d007      	beq.n	8005eac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea0:	f043 0220 	orr.w	r2, r3, #32
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e027      	b.n	8005efc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2180      	movs	r1, #128	; 0x80
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f7ff fec0 	bl	8005c3c <SPI_WaitFlagStateUntilTimeout>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d007      	beq.n	8005ed2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec6:	f043 0220 	orr.w	r2, r3, #32
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e014      	b.n	8005efc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f7ff ff34 	bl	8005d4c <SPI_WaitFifoStateUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d007      	beq.n	8005efa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eee:	f043 0220 	orr.w	r2, r3, #32
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e000      	b.n	8005efc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e097      	b.n	8006048 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d106      	bne.n	8005f32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7fc f8a3 	bl	8002078 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2202      	movs	r2, #2
 8005f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005f48:	f023 0307 	bic.w	r3, r3, #7
 8005f4c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	3304      	adds	r3, #4
 8005f56:	4619      	mov	r1, r3
 8005f58:	4610      	mov	r0, r2
 8005f5a:	f000 f907 	bl	800616c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f86:	f023 0303 	bic.w	r3, r3, #3
 8005f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	021b      	lsls	r3, r3, #8
 8005f96:	4313      	orrs	r3, r2
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005fa4:	f023 030c 	bic.w	r3, r3, #12
 8005fa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	021b      	lsls	r3, r3, #8
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	011a      	lsls	r2, r3, #4
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	031b      	lsls	r3, r3, #12
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005fe2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005fea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006060:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006068:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006070:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006078:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d110      	bne.n	80060a2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006080:	7bfb      	ldrb	r3, [r7, #15]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d102      	bne.n	800608c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006086:	7b7b      	ldrb	r3, [r7, #13]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d001      	beq.n	8006090 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e069      	b.n	8006164 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2202      	movs	r2, #2
 8006094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060a0:	e031      	b.n	8006106 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b04      	cmp	r3, #4
 80060a6:	d110      	bne.n	80060ca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060a8:	7bbb      	ldrb	r3, [r7, #14]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d102      	bne.n	80060b4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060ae:	7b3b      	ldrb	r3, [r7, #12]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d001      	beq.n	80060b8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e055      	b.n	8006164 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060c8:	e01d      	b.n	8006106 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060ca:	7bfb      	ldrb	r3, [r7, #15]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d108      	bne.n	80060e2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060d0:	7bbb      	ldrb	r3, [r7, #14]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d105      	bne.n	80060e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060d6:	7b7b      	ldrb	r3, [r7, #13]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d102      	bne.n	80060e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060dc:	7b3b      	ldrb	r3, [r7, #12]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d001      	beq.n	80060e6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e03e      	b.n	8006164 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2202      	movs	r2, #2
 80060ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2202      	movs	r2, #2
 80060f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2202      	movs	r2, #2
 80060fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2202      	movs	r2, #2
 8006102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <HAL_TIM_Encoder_Start+0xc4>
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	2b04      	cmp	r3, #4
 8006110:	d008      	beq.n	8006124 <HAL_TIM_Encoder_Start+0xd4>
 8006112:	e00f      	b.n	8006134 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2201      	movs	r2, #1
 800611a:	2100      	movs	r1, #0
 800611c:	4618      	mov	r0, r3
 800611e:	f000 f8bf 	bl	80062a0 <TIM_CCxChannelCmd>
      break;
 8006122:	e016      	b.n	8006152 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2201      	movs	r2, #1
 800612a:	2104      	movs	r1, #4
 800612c:	4618      	mov	r0, r3
 800612e:	f000 f8b7 	bl	80062a0 <TIM_CCxChannelCmd>
      break;
 8006132:	e00e      	b.n	8006152 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2201      	movs	r2, #1
 800613a:	2100      	movs	r1, #0
 800613c:	4618      	mov	r0, r3
 800613e:	f000 f8af 	bl	80062a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2201      	movs	r2, #1
 8006148:	2104      	movs	r1, #4
 800614a:	4618      	mov	r0, r3
 800614c:	f000 f8a8 	bl	80062a0 <TIM_CCxChannelCmd>
      break;
 8006150:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 0201 	orr.w	r2, r2, #1
 8006160:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a40      	ldr	r2, [pc, #256]	; (8006280 <TIM_Base_SetConfig+0x114>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d013      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800618a:	d00f      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a3d      	ldr	r2, [pc, #244]	; (8006284 <TIM_Base_SetConfig+0x118>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d00b      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a3c      	ldr	r2, [pc, #240]	; (8006288 <TIM_Base_SetConfig+0x11c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d007      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a3b      	ldr	r2, [pc, #236]	; (800628c <TIM_Base_SetConfig+0x120>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d003      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a3a      	ldr	r2, [pc, #232]	; (8006290 <TIM_Base_SetConfig+0x124>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d108      	bne.n	80061be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a2f      	ldr	r2, [pc, #188]	; (8006280 <TIM_Base_SetConfig+0x114>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d01f      	beq.n	8006206 <TIM_Base_SetConfig+0x9a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061cc:	d01b      	beq.n	8006206 <TIM_Base_SetConfig+0x9a>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a2c      	ldr	r2, [pc, #176]	; (8006284 <TIM_Base_SetConfig+0x118>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d017      	beq.n	8006206 <TIM_Base_SetConfig+0x9a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a2b      	ldr	r2, [pc, #172]	; (8006288 <TIM_Base_SetConfig+0x11c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d013      	beq.n	8006206 <TIM_Base_SetConfig+0x9a>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a2a      	ldr	r2, [pc, #168]	; (800628c <TIM_Base_SetConfig+0x120>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00f      	beq.n	8006206 <TIM_Base_SetConfig+0x9a>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a29      	ldr	r2, [pc, #164]	; (8006290 <TIM_Base_SetConfig+0x124>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d00b      	beq.n	8006206 <TIM_Base_SetConfig+0x9a>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a28      	ldr	r2, [pc, #160]	; (8006294 <TIM_Base_SetConfig+0x128>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d007      	beq.n	8006206 <TIM_Base_SetConfig+0x9a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a27      	ldr	r2, [pc, #156]	; (8006298 <TIM_Base_SetConfig+0x12c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d003      	beq.n	8006206 <TIM_Base_SetConfig+0x9a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a26      	ldr	r2, [pc, #152]	; (800629c <TIM_Base_SetConfig+0x130>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d108      	bne.n	8006218 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800620c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4313      	orrs	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a10      	ldr	r2, [pc, #64]	; (8006280 <TIM_Base_SetConfig+0x114>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d00f      	beq.n	8006264 <TIM_Base_SetConfig+0xf8>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a12      	ldr	r2, [pc, #72]	; (8006290 <TIM_Base_SetConfig+0x124>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d00b      	beq.n	8006264 <TIM_Base_SetConfig+0xf8>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a11      	ldr	r2, [pc, #68]	; (8006294 <TIM_Base_SetConfig+0x128>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d007      	beq.n	8006264 <TIM_Base_SetConfig+0xf8>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a10      	ldr	r2, [pc, #64]	; (8006298 <TIM_Base_SetConfig+0x12c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d003      	beq.n	8006264 <TIM_Base_SetConfig+0xf8>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a0f      	ldr	r2, [pc, #60]	; (800629c <TIM_Base_SetConfig+0x130>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d103      	bne.n	800626c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	615a      	str	r2, [r3, #20]
}
 8006272:	bf00      	nop
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	40012c00 	.word	0x40012c00
 8006284:	40000400 	.word	0x40000400
 8006288:	40000800 	.word	0x40000800
 800628c:	40000c00 	.word	0x40000c00
 8006290:	40013400 	.word	0x40013400
 8006294:	40014000 	.word	0x40014000
 8006298:	40014400 	.word	0x40014400
 800629c:	40014800 	.word	0x40014800

080062a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f003 031f 	and.w	r3, r3, #31
 80062b2:	2201      	movs	r2, #1
 80062b4:	fa02 f303 	lsl.w	r3, r2, r3
 80062b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6a1a      	ldr	r2, [r3, #32]
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	43db      	mvns	r3, r3
 80062c2:	401a      	ands	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a1a      	ldr	r2, [r3, #32]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f003 031f 	and.w	r3, r3, #31
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	fa01 f303 	lsl.w	r3, r1, r3
 80062d8:	431a      	orrs	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	621a      	str	r2, [r3, #32]
}
 80062de:	bf00      	nop
 80062e0:	371c      	adds	r7, #28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
	...

080062ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006300:	2302      	movs	r3, #2
 8006302:	e068      	b.n	80063d6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a2e      	ldr	r2, [pc, #184]	; (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d004      	beq.n	8006338 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a2d      	ldr	r2, [pc, #180]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d108      	bne.n	800634a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800633e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006350:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	4313      	orrs	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a1e      	ldr	r2, [pc, #120]	; (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d01d      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006376:	d018      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a1b      	ldr	r2, [pc, #108]	; (80063ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d013      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a1a      	ldr	r2, [pc, #104]	; (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d00e      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a18      	ldr	r2, [pc, #96]	; (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d009      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a13      	ldr	r2, [pc, #76]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d004      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a14      	ldr	r2, [pc, #80]	; (80063f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d10c      	bne.n	80063c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	40012c00 	.word	0x40012c00
 80063e8:	40013400 	.word	0x40013400
 80063ec:	40000400 	.word	0x40000400
 80063f0:	40000800 	.word	0x40000800
 80063f4:	40000c00 	.word	0x40000c00
 80063f8:	40014000 	.word	0x40014000

080063fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e040      	b.n	8006490 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006412:	2b00      	cmp	r3, #0
 8006414:	d106      	bne.n	8006424 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7fb feba 	bl	8002198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2224      	movs	r2, #36	; 0x24
 8006428:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0201 	bic.w	r2, r2, #1
 8006438:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f8c0 	bl	80065c0 <UART_SetConfig>
 8006440:	4603      	mov	r3, r0
 8006442:	2b01      	cmp	r3, #1
 8006444:	d101      	bne.n	800644a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e022      	b.n	8006490 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fb6c 	bl	8006b30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006466:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689a      	ldr	r2, [r3, #8]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006476:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0201 	orr.w	r2, r2, #1
 8006486:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fbf3 	bl	8006c74 <UART_CheckIdleState>
 800648e:	4603      	mov	r3, r0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08a      	sub	sp, #40	; 0x28
 800649c:	af02      	add	r7, sp, #8
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	603b      	str	r3, [r7, #0]
 80064a4:	4613      	mov	r3, r2
 80064a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ac:	2b20      	cmp	r3, #32
 80064ae:	f040 8082 	bne.w	80065b6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <HAL_UART_Transmit+0x26>
 80064b8:	88fb      	ldrh	r3, [r7, #6]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e07a      	b.n	80065b8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d101      	bne.n	80064d0 <HAL_UART_Transmit+0x38>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e073      	b.n	80065b8 <HAL_UART_Transmit+0x120>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2221      	movs	r2, #33	; 0x21
 80064e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064e6:	f7fb ff45 	bl	8002374 <HAL_GetTick>
 80064ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	88fa      	ldrh	r2, [r7, #6]
 80064f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	88fa      	ldrh	r2, [r7, #6]
 80064f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006504:	d108      	bne.n	8006518 <HAL_UART_Transmit+0x80>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d104      	bne.n	8006518 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800650e:	2300      	movs	r3, #0
 8006510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	61bb      	str	r3, [r7, #24]
 8006516:	e003      	b.n	8006520 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800651c:	2300      	movs	r3, #0
 800651e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006528:	e02d      	b.n	8006586 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2200      	movs	r2, #0
 8006532:	2180      	movs	r1, #128	; 0x80
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 fbe6 	bl	8006d06 <UART_WaitOnFlagUntilTimeout>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e039      	b.n	80065b8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10b      	bne.n	8006562 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	881a      	ldrh	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006556:	b292      	uxth	r2, r2
 8006558:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	3302      	adds	r3, #2
 800655e:	61bb      	str	r3, [r7, #24]
 8006560:	e008      	b.n	8006574 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	781a      	ldrb	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	b292      	uxth	r2, r2
 800656c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	3301      	adds	r3, #1
 8006572:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800657a:	b29b      	uxth	r3, r3
 800657c:	3b01      	subs	r3, #1
 800657e:	b29a      	uxth	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800658c:	b29b      	uxth	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1cb      	bne.n	800652a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2200      	movs	r2, #0
 800659a:	2140      	movs	r1, #64	; 0x40
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 fbb2 	bl	8006d06 <UART_WaitOnFlagUntilTimeout>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e005      	b.n	80065b8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2220      	movs	r2, #32
 80065b0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	e000      	b.n	80065b8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80065b6:	2302      	movs	r3, #2
  }
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3720      	adds	r7, #32
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065c4:	b08a      	sub	sp, #40	; 0x28
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	431a      	orrs	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	431a      	orrs	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	4ba4      	ldr	r3, [pc, #656]	; (8006880 <UART_SetConfig+0x2c0>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065f8:	430b      	orrs	r3, r1
 80065fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a99      	ldr	r2, [pc, #612]	; (8006884 <UART_SetConfig+0x2c4>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d004      	beq.n	800662c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006628:	4313      	orrs	r3, r2
 800662a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663c:	430a      	orrs	r2, r1
 800663e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a90      	ldr	r2, [pc, #576]	; (8006888 <UART_SetConfig+0x2c8>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d126      	bne.n	8006698 <UART_SetConfig+0xd8>
 800664a:	4b90      	ldr	r3, [pc, #576]	; (800688c <UART_SetConfig+0x2cc>)
 800664c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006650:	f003 0303 	and.w	r3, r3, #3
 8006654:	2b03      	cmp	r3, #3
 8006656:	d81b      	bhi.n	8006690 <UART_SetConfig+0xd0>
 8006658:	a201      	add	r2, pc, #4	; (adr r2, 8006660 <UART_SetConfig+0xa0>)
 800665a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665e:	bf00      	nop
 8006660:	08006671 	.word	0x08006671
 8006664:	08006681 	.word	0x08006681
 8006668:	08006679 	.word	0x08006679
 800666c:	08006689 	.word	0x08006689
 8006670:	2301      	movs	r3, #1
 8006672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006676:	e116      	b.n	80068a6 <UART_SetConfig+0x2e6>
 8006678:	2302      	movs	r3, #2
 800667a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800667e:	e112      	b.n	80068a6 <UART_SetConfig+0x2e6>
 8006680:	2304      	movs	r3, #4
 8006682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006686:	e10e      	b.n	80068a6 <UART_SetConfig+0x2e6>
 8006688:	2308      	movs	r3, #8
 800668a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800668e:	e10a      	b.n	80068a6 <UART_SetConfig+0x2e6>
 8006690:	2310      	movs	r3, #16
 8006692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006696:	e106      	b.n	80068a6 <UART_SetConfig+0x2e6>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a7c      	ldr	r2, [pc, #496]	; (8006890 <UART_SetConfig+0x2d0>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d138      	bne.n	8006714 <UART_SetConfig+0x154>
 80066a2:	4b7a      	ldr	r3, [pc, #488]	; (800688c <UART_SetConfig+0x2cc>)
 80066a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a8:	f003 030c 	and.w	r3, r3, #12
 80066ac:	2b0c      	cmp	r3, #12
 80066ae:	d82d      	bhi.n	800670c <UART_SetConfig+0x14c>
 80066b0:	a201      	add	r2, pc, #4	; (adr r2, 80066b8 <UART_SetConfig+0xf8>)
 80066b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b6:	bf00      	nop
 80066b8:	080066ed 	.word	0x080066ed
 80066bc:	0800670d 	.word	0x0800670d
 80066c0:	0800670d 	.word	0x0800670d
 80066c4:	0800670d 	.word	0x0800670d
 80066c8:	080066fd 	.word	0x080066fd
 80066cc:	0800670d 	.word	0x0800670d
 80066d0:	0800670d 	.word	0x0800670d
 80066d4:	0800670d 	.word	0x0800670d
 80066d8:	080066f5 	.word	0x080066f5
 80066dc:	0800670d 	.word	0x0800670d
 80066e0:	0800670d 	.word	0x0800670d
 80066e4:	0800670d 	.word	0x0800670d
 80066e8:	08006705 	.word	0x08006705
 80066ec:	2300      	movs	r3, #0
 80066ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066f2:	e0d8      	b.n	80068a6 <UART_SetConfig+0x2e6>
 80066f4:	2302      	movs	r3, #2
 80066f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066fa:	e0d4      	b.n	80068a6 <UART_SetConfig+0x2e6>
 80066fc:	2304      	movs	r3, #4
 80066fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006702:	e0d0      	b.n	80068a6 <UART_SetConfig+0x2e6>
 8006704:	2308      	movs	r3, #8
 8006706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800670a:	e0cc      	b.n	80068a6 <UART_SetConfig+0x2e6>
 800670c:	2310      	movs	r3, #16
 800670e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006712:	e0c8      	b.n	80068a6 <UART_SetConfig+0x2e6>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a5e      	ldr	r2, [pc, #376]	; (8006894 <UART_SetConfig+0x2d4>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d125      	bne.n	800676a <UART_SetConfig+0x1aa>
 800671e:	4b5b      	ldr	r3, [pc, #364]	; (800688c <UART_SetConfig+0x2cc>)
 8006720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006724:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006728:	2b30      	cmp	r3, #48	; 0x30
 800672a:	d016      	beq.n	800675a <UART_SetConfig+0x19a>
 800672c:	2b30      	cmp	r3, #48	; 0x30
 800672e:	d818      	bhi.n	8006762 <UART_SetConfig+0x1a2>
 8006730:	2b20      	cmp	r3, #32
 8006732:	d00a      	beq.n	800674a <UART_SetConfig+0x18a>
 8006734:	2b20      	cmp	r3, #32
 8006736:	d814      	bhi.n	8006762 <UART_SetConfig+0x1a2>
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <UART_SetConfig+0x182>
 800673c:	2b10      	cmp	r3, #16
 800673e:	d008      	beq.n	8006752 <UART_SetConfig+0x192>
 8006740:	e00f      	b.n	8006762 <UART_SetConfig+0x1a2>
 8006742:	2300      	movs	r3, #0
 8006744:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006748:	e0ad      	b.n	80068a6 <UART_SetConfig+0x2e6>
 800674a:	2302      	movs	r3, #2
 800674c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006750:	e0a9      	b.n	80068a6 <UART_SetConfig+0x2e6>
 8006752:	2304      	movs	r3, #4
 8006754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006758:	e0a5      	b.n	80068a6 <UART_SetConfig+0x2e6>
 800675a:	2308      	movs	r3, #8
 800675c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006760:	e0a1      	b.n	80068a6 <UART_SetConfig+0x2e6>
 8006762:	2310      	movs	r3, #16
 8006764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006768:	e09d      	b.n	80068a6 <UART_SetConfig+0x2e6>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a4a      	ldr	r2, [pc, #296]	; (8006898 <UART_SetConfig+0x2d8>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d125      	bne.n	80067c0 <UART_SetConfig+0x200>
 8006774:	4b45      	ldr	r3, [pc, #276]	; (800688c <UART_SetConfig+0x2cc>)
 8006776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800677e:	2bc0      	cmp	r3, #192	; 0xc0
 8006780:	d016      	beq.n	80067b0 <UART_SetConfig+0x1f0>
 8006782:	2bc0      	cmp	r3, #192	; 0xc0
 8006784:	d818      	bhi.n	80067b8 <UART_SetConfig+0x1f8>
 8006786:	2b80      	cmp	r3, #128	; 0x80
 8006788:	d00a      	beq.n	80067a0 <UART_SetConfig+0x1e0>
 800678a:	2b80      	cmp	r3, #128	; 0x80
 800678c:	d814      	bhi.n	80067b8 <UART_SetConfig+0x1f8>
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <UART_SetConfig+0x1d8>
 8006792:	2b40      	cmp	r3, #64	; 0x40
 8006794:	d008      	beq.n	80067a8 <UART_SetConfig+0x1e8>
 8006796:	e00f      	b.n	80067b8 <UART_SetConfig+0x1f8>
 8006798:	2300      	movs	r3, #0
 800679a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800679e:	e082      	b.n	80068a6 <UART_SetConfig+0x2e6>
 80067a0:	2302      	movs	r3, #2
 80067a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067a6:	e07e      	b.n	80068a6 <UART_SetConfig+0x2e6>
 80067a8:	2304      	movs	r3, #4
 80067aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ae:	e07a      	b.n	80068a6 <UART_SetConfig+0x2e6>
 80067b0:	2308      	movs	r3, #8
 80067b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067b6:	e076      	b.n	80068a6 <UART_SetConfig+0x2e6>
 80067b8:	2310      	movs	r3, #16
 80067ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067be:	e072      	b.n	80068a6 <UART_SetConfig+0x2e6>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a35      	ldr	r2, [pc, #212]	; (800689c <UART_SetConfig+0x2dc>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d12a      	bne.n	8006820 <UART_SetConfig+0x260>
 80067ca:	4b30      	ldr	r3, [pc, #192]	; (800688c <UART_SetConfig+0x2cc>)
 80067cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067d8:	d01a      	beq.n	8006810 <UART_SetConfig+0x250>
 80067da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067de:	d81b      	bhi.n	8006818 <UART_SetConfig+0x258>
 80067e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067e4:	d00c      	beq.n	8006800 <UART_SetConfig+0x240>
 80067e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067ea:	d815      	bhi.n	8006818 <UART_SetConfig+0x258>
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d003      	beq.n	80067f8 <UART_SetConfig+0x238>
 80067f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067f4:	d008      	beq.n	8006808 <UART_SetConfig+0x248>
 80067f6:	e00f      	b.n	8006818 <UART_SetConfig+0x258>
 80067f8:	2300      	movs	r3, #0
 80067fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067fe:	e052      	b.n	80068a6 <UART_SetConfig+0x2e6>
 8006800:	2302      	movs	r3, #2
 8006802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006806:	e04e      	b.n	80068a6 <UART_SetConfig+0x2e6>
 8006808:	2304      	movs	r3, #4
 800680a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800680e:	e04a      	b.n	80068a6 <UART_SetConfig+0x2e6>
 8006810:	2308      	movs	r3, #8
 8006812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006816:	e046      	b.n	80068a6 <UART_SetConfig+0x2e6>
 8006818:	2310      	movs	r3, #16
 800681a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800681e:	e042      	b.n	80068a6 <UART_SetConfig+0x2e6>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a17      	ldr	r2, [pc, #92]	; (8006884 <UART_SetConfig+0x2c4>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d13a      	bne.n	80068a0 <UART_SetConfig+0x2e0>
 800682a:	4b18      	ldr	r3, [pc, #96]	; (800688c <UART_SetConfig+0x2cc>)
 800682c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006830:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006834:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006838:	d01a      	beq.n	8006870 <UART_SetConfig+0x2b0>
 800683a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800683e:	d81b      	bhi.n	8006878 <UART_SetConfig+0x2b8>
 8006840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006844:	d00c      	beq.n	8006860 <UART_SetConfig+0x2a0>
 8006846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800684a:	d815      	bhi.n	8006878 <UART_SetConfig+0x2b8>
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <UART_SetConfig+0x298>
 8006850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006854:	d008      	beq.n	8006868 <UART_SetConfig+0x2a8>
 8006856:	e00f      	b.n	8006878 <UART_SetConfig+0x2b8>
 8006858:	2300      	movs	r3, #0
 800685a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800685e:	e022      	b.n	80068a6 <UART_SetConfig+0x2e6>
 8006860:	2302      	movs	r3, #2
 8006862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006866:	e01e      	b.n	80068a6 <UART_SetConfig+0x2e6>
 8006868:	2304      	movs	r3, #4
 800686a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800686e:	e01a      	b.n	80068a6 <UART_SetConfig+0x2e6>
 8006870:	2308      	movs	r3, #8
 8006872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006876:	e016      	b.n	80068a6 <UART_SetConfig+0x2e6>
 8006878:	2310      	movs	r3, #16
 800687a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800687e:	e012      	b.n	80068a6 <UART_SetConfig+0x2e6>
 8006880:	efff69f3 	.word	0xefff69f3
 8006884:	40008000 	.word	0x40008000
 8006888:	40013800 	.word	0x40013800
 800688c:	40021000 	.word	0x40021000
 8006890:	40004400 	.word	0x40004400
 8006894:	40004800 	.word	0x40004800
 8006898:	40004c00 	.word	0x40004c00
 800689c:	40005000 	.word	0x40005000
 80068a0:	2310      	movs	r3, #16
 80068a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a9f      	ldr	r2, [pc, #636]	; (8006b28 <UART_SetConfig+0x568>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d17a      	bne.n	80069a6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d824      	bhi.n	8006902 <UART_SetConfig+0x342>
 80068b8:	a201      	add	r2, pc, #4	; (adr r2, 80068c0 <UART_SetConfig+0x300>)
 80068ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068be:	bf00      	nop
 80068c0:	080068e5 	.word	0x080068e5
 80068c4:	08006903 	.word	0x08006903
 80068c8:	080068ed 	.word	0x080068ed
 80068cc:	08006903 	.word	0x08006903
 80068d0:	080068f3 	.word	0x080068f3
 80068d4:	08006903 	.word	0x08006903
 80068d8:	08006903 	.word	0x08006903
 80068dc:	08006903 	.word	0x08006903
 80068e0:	080068fb 	.word	0x080068fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068e4:	f7fd fd60 	bl	80043a8 <HAL_RCC_GetPCLK1Freq>
 80068e8:	61f8      	str	r0, [r7, #28]
        break;
 80068ea:	e010      	b.n	800690e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068ec:	4b8f      	ldr	r3, [pc, #572]	; (8006b2c <UART_SetConfig+0x56c>)
 80068ee:	61fb      	str	r3, [r7, #28]
        break;
 80068f0:	e00d      	b.n	800690e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068f2:	f7fd fcc1 	bl	8004278 <HAL_RCC_GetSysClockFreq>
 80068f6:	61f8      	str	r0, [r7, #28]
        break;
 80068f8:	e009      	b.n	800690e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068fe:	61fb      	str	r3, [r7, #28]
        break;
 8006900:	e005      	b.n	800690e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006902:	2300      	movs	r3, #0
 8006904:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800690c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 80fb 	beq.w	8006b0c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	4613      	mov	r3, r2
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	4413      	add	r3, r2
 8006920:	69fa      	ldr	r2, [r7, #28]
 8006922:	429a      	cmp	r2, r3
 8006924:	d305      	bcc.n	8006932 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800692c:	69fa      	ldr	r2, [r7, #28]
 800692e:	429a      	cmp	r2, r3
 8006930:	d903      	bls.n	800693a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006938:	e0e8      	b.n	8006b0c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	2200      	movs	r2, #0
 800693e:	461c      	mov	r4, r3
 8006940:	4615      	mov	r5, r2
 8006942:	f04f 0200 	mov.w	r2, #0
 8006946:	f04f 0300 	mov.w	r3, #0
 800694a:	022b      	lsls	r3, r5, #8
 800694c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006950:	0222      	lsls	r2, r4, #8
 8006952:	68f9      	ldr	r1, [r7, #12]
 8006954:	6849      	ldr	r1, [r1, #4]
 8006956:	0849      	lsrs	r1, r1, #1
 8006958:	2000      	movs	r0, #0
 800695a:	4688      	mov	r8, r1
 800695c:	4681      	mov	r9, r0
 800695e:	eb12 0a08 	adds.w	sl, r2, r8
 8006962:	eb43 0b09 	adc.w	fp, r3, r9
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	603b      	str	r3, [r7, #0]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006974:	4650      	mov	r0, sl
 8006976:	4659      	mov	r1, fp
 8006978:	f7fa f916 	bl	8000ba8 <__aeabi_uldivmod>
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	4613      	mov	r3, r2
 8006982:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800698a:	d308      	bcc.n	800699e <UART_SetConfig+0x3de>
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006992:	d204      	bcs.n	800699e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	60da      	str	r2, [r3, #12]
 800699c:	e0b6      	b.n	8006b0c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80069a4:	e0b2      	b.n	8006b0c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ae:	d15e      	bne.n	8006a6e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80069b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069b4:	2b08      	cmp	r3, #8
 80069b6:	d828      	bhi.n	8006a0a <UART_SetConfig+0x44a>
 80069b8:	a201      	add	r2, pc, #4	; (adr r2, 80069c0 <UART_SetConfig+0x400>)
 80069ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069be:	bf00      	nop
 80069c0:	080069e5 	.word	0x080069e5
 80069c4:	080069ed 	.word	0x080069ed
 80069c8:	080069f5 	.word	0x080069f5
 80069cc:	08006a0b 	.word	0x08006a0b
 80069d0:	080069fb 	.word	0x080069fb
 80069d4:	08006a0b 	.word	0x08006a0b
 80069d8:	08006a0b 	.word	0x08006a0b
 80069dc:	08006a0b 	.word	0x08006a0b
 80069e0:	08006a03 	.word	0x08006a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069e4:	f7fd fce0 	bl	80043a8 <HAL_RCC_GetPCLK1Freq>
 80069e8:	61f8      	str	r0, [r7, #28]
        break;
 80069ea:	e014      	b.n	8006a16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069ec:	f7fd fcf2 	bl	80043d4 <HAL_RCC_GetPCLK2Freq>
 80069f0:	61f8      	str	r0, [r7, #28]
        break;
 80069f2:	e010      	b.n	8006a16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069f4:	4b4d      	ldr	r3, [pc, #308]	; (8006b2c <UART_SetConfig+0x56c>)
 80069f6:	61fb      	str	r3, [r7, #28]
        break;
 80069f8:	e00d      	b.n	8006a16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069fa:	f7fd fc3d 	bl	8004278 <HAL_RCC_GetSysClockFreq>
 80069fe:	61f8      	str	r0, [r7, #28]
        break;
 8006a00:	e009      	b.n	8006a16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a06:	61fb      	str	r3, [r7, #28]
        break;
 8006a08:	e005      	b.n	8006a16 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d077      	beq.n	8006b0c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	005a      	lsls	r2, r3, #1
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	085b      	lsrs	r3, r3, #1
 8006a26:	441a      	add	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a30:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	2b0f      	cmp	r3, #15
 8006a36:	d916      	bls.n	8006a66 <UART_SetConfig+0x4a6>
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a3e:	d212      	bcs.n	8006a66 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f023 030f 	bic.w	r3, r3, #15
 8006a48:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	085b      	lsrs	r3, r3, #1
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	f003 0307 	and.w	r3, r3, #7
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	8afb      	ldrh	r3, [r7, #22]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	8afa      	ldrh	r2, [r7, #22]
 8006a62:	60da      	str	r2, [r3, #12]
 8006a64:	e052      	b.n	8006b0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a6c:	e04e      	b.n	8006b0c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a72:	2b08      	cmp	r3, #8
 8006a74:	d827      	bhi.n	8006ac6 <UART_SetConfig+0x506>
 8006a76:	a201      	add	r2, pc, #4	; (adr r2, 8006a7c <UART_SetConfig+0x4bc>)
 8006a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7c:	08006aa1 	.word	0x08006aa1
 8006a80:	08006aa9 	.word	0x08006aa9
 8006a84:	08006ab1 	.word	0x08006ab1
 8006a88:	08006ac7 	.word	0x08006ac7
 8006a8c:	08006ab7 	.word	0x08006ab7
 8006a90:	08006ac7 	.word	0x08006ac7
 8006a94:	08006ac7 	.word	0x08006ac7
 8006a98:	08006ac7 	.word	0x08006ac7
 8006a9c:	08006abf 	.word	0x08006abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aa0:	f7fd fc82 	bl	80043a8 <HAL_RCC_GetPCLK1Freq>
 8006aa4:	61f8      	str	r0, [r7, #28]
        break;
 8006aa6:	e014      	b.n	8006ad2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aa8:	f7fd fc94 	bl	80043d4 <HAL_RCC_GetPCLK2Freq>
 8006aac:	61f8      	str	r0, [r7, #28]
        break;
 8006aae:	e010      	b.n	8006ad2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ab0:	4b1e      	ldr	r3, [pc, #120]	; (8006b2c <UART_SetConfig+0x56c>)
 8006ab2:	61fb      	str	r3, [r7, #28]
        break;
 8006ab4:	e00d      	b.n	8006ad2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ab6:	f7fd fbdf 	bl	8004278 <HAL_RCC_GetSysClockFreq>
 8006aba:	61f8      	str	r0, [r7, #28]
        break;
 8006abc:	e009      	b.n	8006ad2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ac2:	61fb      	str	r3, [r7, #28]
        break;
 8006ac4:	e005      	b.n	8006ad2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ad0:	bf00      	nop
    }

    if (pclk != 0U)
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d019      	beq.n	8006b0c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	085a      	lsrs	r2, r3, #1
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	441a      	add	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	2b0f      	cmp	r3, #15
 8006af0:	d909      	bls.n	8006b06 <UART_SetConfig+0x546>
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006af8:	d205      	bcs.n	8006b06 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	60da      	str	r2, [r3, #12]
 8006b04:	e002      	b.n	8006b0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006b18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3728      	adds	r7, #40	; 0x28
 8006b20:	46bd      	mov	sp, r7
 8006b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b26:	bf00      	nop
 8006b28:	40008000 	.word	0x40008000
 8006b2c:	00f42400 	.word	0x00f42400

08006b30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00a      	beq.n	8006b5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00a      	beq.n	8006b7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00a      	beq.n	8006b9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	f003 0308 	and.w	r3, r3, #8
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00a      	beq.n	8006bc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	f003 0310 	and.w	r3, r3, #16
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00a      	beq.n	8006be2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00a      	beq.n	8006c04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	430a      	orrs	r2, r1
 8006c02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d01a      	beq.n	8006c46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c2e:	d10a      	bne.n	8006c46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00a      	beq.n	8006c68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	605a      	str	r2, [r3, #4]
  }
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af02      	add	r7, sp, #8
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c84:	f7fb fb76 	bl	8002374 <HAL_GetTick>
 8006c88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0308 	and.w	r3, r3, #8
 8006c94:	2b08      	cmp	r3, #8
 8006c96:	d10e      	bne.n	8006cb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f82d 	bl	8006d06 <UART_WaitOnFlagUntilTimeout>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e023      	b.n	8006cfe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b04      	cmp	r3, #4
 8006cc2:	d10e      	bne.n	8006ce2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f817 	bl	8006d06 <UART_WaitOnFlagUntilTimeout>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e00d      	b.n	8006cfe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2220      	movs	r2, #32
 8006cec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b09c      	sub	sp, #112	; 0x70
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	603b      	str	r3, [r7, #0]
 8006d12:	4613      	mov	r3, r2
 8006d14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d16:	e0a5      	b.n	8006e64 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d1e:	f000 80a1 	beq.w	8006e64 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d22:	f7fb fb27 	bl	8002374 <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d302      	bcc.n	8006d38 <UART_WaitOnFlagUntilTimeout+0x32>
 8006d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d13e      	bne.n	8006db6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d4c:	667b      	str	r3, [r7, #100]	; 0x64
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d58:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e6      	bne.n	8006d38 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3308      	adds	r3, #8
 8006d70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d74:	e853 3f00 	ldrex	r3, [r3]
 8006d78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7c:	f023 0301 	bic.w	r3, r3, #1
 8006d80:	663b      	str	r3, [r7, #96]	; 0x60
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3308      	adds	r3, #8
 8006d88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d92:	e841 2300 	strex	r3, r2, [r1]
 8006d96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1e5      	bne.n	8006d6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2220      	movs	r2, #32
 8006da2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2220      	movs	r2, #32
 8006da8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e067      	b.n	8006e86 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d04f      	beq.n	8006e64 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dd2:	d147      	bne.n	8006e64 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ddc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de6:	e853 3f00 	ldrex	r3, [r3]
 8006dea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006df2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	461a      	mov	r2, r3
 8006dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8006dfe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e04:	e841 2300 	strex	r3, r2, [r1]
 8006e08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1e6      	bne.n	8006dde <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	3308      	adds	r3, #8
 8006e16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	e853 3f00 	ldrex	r3, [r3]
 8006e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f023 0301 	bic.w	r3, r3, #1
 8006e26:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3308      	adds	r3, #8
 8006e2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e30:	623a      	str	r2, [r7, #32]
 8006e32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	69f9      	ldr	r1, [r7, #28]
 8006e36:	6a3a      	ldr	r2, [r7, #32]
 8006e38:	e841 2300 	strex	r3, r2, [r1]
 8006e3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e5      	bne.n	8006e10 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2220      	movs	r2, #32
 8006e48:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2220      	movs	r2, #32
 8006e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e010      	b.n	8006e86 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	69da      	ldr	r2, [r3, #28]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	bf0c      	ite	eq
 8006e74:	2301      	moveq	r3, #1
 8006e76:	2300      	movne	r3, #0
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	79fb      	ldrb	r3, [r7, #7]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	f43f af4a 	beq.w	8006d18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3770      	adds	r7, #112	; 0x70
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	881a      	ldrh	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	799b      	ldrb	r3, [r3, #6]
 8006ea0:	08db      	lsrs	r3, r3, #3
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	fb12 f303 	smulbb	r3, r2, r3
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	889b      	ldrh	r3, [r3, #4]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	885b      	ldrh	r3, [r3, #2]
 8006eba:	fb02 f303 	mul.w	r3, r2, r3
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	60da      	str	r2, [r3, #12]
}
 8006eca:	bf00      	nop
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8006ed6:	b490      	push	{r4, r7}
 8006ed8:	b086      	sub	sp, #24
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	4604      	mov	r4, r0
 8006ede:	4608      	mov	r0, r1
 8006ee0:	1d39      	adds	r1, r7, #4
 8006ee2:	e881 000c 	stmia.w	r1, {r2, r3}
 8006ee6:	4623      	mov	r3, r4
 8006ee8:	81fb      	strh	r3, [r7, #14]
 8006eea:	4603      	mov	r3, r0
 8006eec:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8006ef2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006ef6:	88ba      	ldrh	r2, [r7, #4]
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	da04      	bge.n	8006f06 <code+0x30>
        code |= LEFT;
 8006efc:	2201      	movs	r2, #1
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	75fb      	strb	r3, [r7, #23]
 8006f04:	e008      	b.n	8006f18 <code+0x42>
    } else if (x0 > window.x1) {
 8006f06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f0a:	893a      	ldrh	r2, [r7, #8]
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	dd03      	ble.n	8006f18 <code+0x42>
        code |= RIGHT;
 8006f10:	2202      	movs	r2, #2
 8006f12:	7dfb      	ldrb	r3, [r7, #23]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8006f18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006f1c:	88fa      	ldrh	r2, [r7, #6]
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	da04      	bge.n	8006f2c <code+0x56>
        code |= BOTTOM;
 8006f22:	2204      	movs	r2, #4
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	75fb      	strb	r3, [r7, #23]
 8006f2a:	e008      	b.n	8006f3e <code+0x68>
    } else if (y0 > window.y1) {
 8006f2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006f30:	897a      	ldrh	r2, [r7, #10]
 8006f32:	4293      	cmp	r3, r2
 8006f34:	dd03      	ble.n	8006f3e <code+0x68>
        code |= TOP;
 8006f36:	2208      	movs	r2, #8
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8006f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3718      	adds	r7, #24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bc90      	pop	{r4, r7}
 8006f48:	4770      	bx	lr

08006f4a <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b088      	sub	sp, #32
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	60f8      	str	r0, [r7, #12]
 8006f52:	60b9      	str	r1, [r7, #8]
 8006f54:	607a      	str	r2, [r7, #4]
 8006f56:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006f64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f68:	cb0c      	ldmia	r3, {r2, r3}
 8006f6a:	f7ff ffb4 	bl	8006ed6 <code>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006f7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f82:	cb0c      	ldmia	r3, {r2, r3}
 8006f84:	f7ff ffa7 	bl	8006ed6 <code>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8006f90:	7ffa      	ldrb	r2, [r7, #31]
 8006f92:	7fbb      	ldrb	r3, [r7, #30]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d102      	bne.n	8006fa2 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	777b      	strb	r3, [r7, #29]
            break;
 8006fa0:	e0e9      	b.n	8007176 <clip_line+0x22c>
        } else if (code0 & code1) {
 8006fa2:	7ffa      	ldrb	r2, [r7, #31]
 8006fa4:	7fbb      	ldrb	r3, [r7, #30]
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f040 80e2 	bne.w	8007174 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8006fb8:	7ffb      	ldrb	r3, [r7, #31]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <clip_line+0x78>
 8006fbe:	7ffb      	ldrb	r3, [r7, #31]
 8006fc0:	e000      	b.n	8006fc4 <clip_line+0x7a>
 8006fc2:	7fbb      	ldrb	r3, [r7, #30]
 8006fc4:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8006fc6:	2208      	movs	r2, #8
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d024      	beq.n	800701c <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fe8:	1acb      	subs	r3, r1, r3
 8006fea:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8006fec:	4608      	mov	r0, r1
 8006fee:	68b9      	ldr	r1, [r7, #8]
 8006ff0:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006ff4:	1a41      	subs	r1, r0, r1
 8006ff6:	fb03 f101 	mul.w	r1, r3, r1
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007000:	4618      	mov	r0, r3
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007008:	1ac3      	subs	r3, r0, r3
 800700a:	fb91 f3f3 	sdiv	r3, r1, r3
 800700e:	b29b      	uxth	r3, r3
 8007010:	4413      	add	r3, r2
 8007012:	b29b      	uxth	r3, r3
 8007014:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8007016:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007018:	833b      	strh	r3, [r7, #24]
 800701a:	e07f      	b.n	800711c <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 800701c:	2204      	movs	r2, #4
 800701e:	7dfb      	ldrb	r3, [r7, #23]
 8007020:	4013      	ands	r3, r2
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d024      	beq.n	8007072 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800702e:	b29a      	uxth	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007036:	4619      	mov	r1, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800703e:	1acb      	subs	r3, r1, r3
 8007040:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8007042:	4608      	mov	r0, r1
 8007044:	68b9      	ldr	r1, [r7, #8]
 8007046:	f9b1 1000 	ldrsh.w	r1, [r1]
 800704a:	1a41      	subs	r1, r0, r1
 800704c:	fb03 f101 	mul.w	r1, r3, r1
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007056:	4618      	mov	r0, r3
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800705e:	1ac3      	subs	r3, r0, r3
 8007060:	fb91 f3f3 	sdiv	r3, r1, r3
 8007064:	b29b      	uxth	r3, r3
 8007066:	4413      	add	r3, r2
 8007068:	b29b      	uxth	r3, r3
 800706a:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 800706c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800706e:	833b      	strh	r3, [r7, #24]
 8007070:	e054      	b.n	800711c <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8007072:	2202      	movs	r2, #2
 8007074:	7dfb      	ldrb	r3, [r7, #23]
 8007076:	4013      	ands	r3, r2
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d024      	beq.n	80070c8 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007084:	b29a      	uxth	r2, r3
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	f9b3 3000 	ldrsh.w	r3, [r3]
 800708c:	4619      	mov	r1, r3
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007094:	1acb      	subs	r3, r1, r3
 8007096:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8007098:	4608      	mov	r0, r1
 800709a:	68f9      	ldr	r1, [r7, #12]
 800709c:	f9b1 1000 	ldrsh.w	r1, [r1]
 80070a0:	1a41      	subs	r1, r0, r1
 80070a2:	fb03 f101 	mul.w	r1, r3, r1
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070ac:	4618      	mov	r0, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070b4:	1ac3      	subs	r3, r0, r3
 80070b6:	fb91 f3f3 	sdiv	r3, r1, r3
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	4413      	add	r3, r2
 80070be:	b29b      	uxth	r3, r3
 80070c0:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 80070c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80070c4:	837b      	strh	r3, [r7, #26]
 80070c6:	e029      	b.n	800711c <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 80070c8:	2201      	movs	r2, #1
 80070ca:	7dfb      	ldrb	r3, [r7, #23]
 80070cc:	4013      	ands	r3, r2
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d023      	beq.n	800711c <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070da:	b29a      	uxth	r2, r3
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070e2:	4619      	mov	r1, r3
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070ea:	1acb      	subs	r3, r1, r3
 80070ec:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80070ee:	4608      	mov	r0, r1
 80070f0:	68f9      	ldr	r1, [r7, #12]
 80070f2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80070f6:	1a41      	subs	r1, r0, r1
 80070f8:	fb03 f101 	mul.w	r1, r3, r1
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007102:	4618      	mov	r0, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800710a:	1ac3      	subs	r3, r0, r3
 800710c:	fb91 f3f3 	sdiv	r3, r1, r3
 8007110:	b29b      	uxth	r3, r3
 8007112:	4413      	add	r3, r2
 8007114:	b29b      	uxth	r3, r3
 8007116:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8007118:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800711a:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 800711c:	7dfa      	ldrb	r2, [r7, #23]
 800711e:	7ffb      	ldrb	r3, [r7, #31]
 8007120:	429a      	cmp	r2, r3
 8007122:	d113      	bne.n	800714c <clip_line+0x202>
                *x0 = x;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	8b7a      	ldrh	r2, [r7, #26]
 8007128:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	8b3a      	ldrh	r2, [r7, #24]
 800712e:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f9b3 0000 	ldrsh.w	r0, [r3]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	f9b3 1000 	ldrsh.w	r1, [r3]
 800713c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007140:	cb0c      	ldmia	r3, {r2, r3}
 8007142:	f7ff fec8 	bl	8006ed6 <code>
 8007146:	4603      	mov	r3, r0
 8007148:	77fb      	strb	r3, [r7, #31]
 800714a:	e721      	b.n	8006f90 <clip_line+0x46>
            } else {
                *x1 = x;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8b7a      	ldrh	r2, [r7, #26]
 8007150:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	8b3a      	ldrh	r2, [r7, #24]
 8007156:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007164:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007168:	cb0c      	ldmia	r3, {r2, r3}
 800716a:	f7ff feb4 	bl	8006ed6 <code>
 800716e:	4603      	mov	r3, r0
 8007170:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8007172:	e70d      	b.n	8006f90 <clip_line+0x46>
            break;
 8007174:	bf00      	nop
            }
        }
    }

    return accept;
 8007176:	7f7b      	ldrb	r3, [r7, #29]
 8007178:	4618      	mov	r0, r3
 800717a:	3720      	adds	r7, #32
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	3306      	adds	r3, #6
 8007190:	2208      	movs	r2, #8
 8007192:	4619      	mov	r1, r3
 8007194:	f000 ff74 	bl	8008080 <memcpy>
    meta->width = font[FONTX_WIDTH];
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	7b9a      	ldrb	r2, [r3, #14]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	7bda      	ldrb	r2, [r3, #15]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	7c1a      	ldrb	r2, [r3, #16]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	72da      	strb	r2, [r3, #11]

    return 0;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b08e      	sub	sp, #56	; 0x38
 80071be:	af00      	add	r7, sp, #0
 80071c0:	60f8      	str	r0, [r7, #12]
 80071c2:	60b9      	str	r1, [r7, #8]
 80071c4:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 80071c6:	f107 0314 	add.w	r3, r7, #20
 80071ca:	6879      	ldr	r1, [r7, #4]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7ff ffd7 	bl	8007180 <fontx_meta>
 80071d2:	4603      	mov	r3, r0
 80071d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 80071d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <fontx_glyph+0x2c>
        return status;
 80071e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071e4:	e077      	b.n	80072d6 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 80071e6:	7f7a      	ldrb	r2, [r7, #29]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 80071ec:	7fba      	ldrb	r2, [r7, #30]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 80071f2:	7f7b      	ldrb	r3, [r7, #29]
 80071f4:	3307      	adds	r3, #7
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	da00      	bge.n	80071fc <fontx_glyph+0x42>
 80071fa:	3307      	adds	r3, #7
 80071fc:	10db      	asrs	r3, r3, #3
 80071fe:	b2da      	uxtb	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	78da      	ldrb	r2, [r3, #3]
 8007208:	7fbb      	ldrb	r3, [r7, #30]
 800720a:	fb12 f303 	smulbb	r3, r2, r3
 800720e:	b2da      	uxtb	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8007214:	7ffb      	ldrb	r3, [r7, #31]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10f      	bne.n	800723a <fontx_glyph+0x80>
        if (code < 0x100) {
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2bff      	cmp	r3, #255	; 0xff
 800721e:	d859      	bhi.n	80072d4 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	789b      	ldrb	r3, [r3, #2]
 8007224:	461a      	mov	r2, r3
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	fb02 f303 	mul.w	r3, r2, r3
 800722c:	3311      	adds	r3, #17
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	441a      	add	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	e04d      	b.n	80072d6 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	3312      	adds	r3, #18
 800723e:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 8007240:	2300      	movs	r3, #0
 8007242:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3311      	adds	r3, #17
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 800724c:	e03d      	b.n	80072ca <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 800724e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	461a      	mov	r2, r3
 8007254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007256:	3301      	adds	r3, #1
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	021b      	lsls	r3, r3, #8
 800725c:	4413      	add	r3, r2
 800725e:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8007260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007262:	3302      	adds	r3, #2
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726a:	3303      	adds	r3, #3
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	021b      	lsls	r3, r3, #8
 8007270:	4413      	add	r3, r2
 8007272:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	429a      	cmp	r2, r3
 800727a:	d31c      	bcc.n	80072b6 <fontx_glyph+0xfc>
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	429a      	cmp	r2, r3
 8007282:	d818      	bhi.n	80072b6 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800728c:	4413      	add	r3, r2
 800728e:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	3311      	adds	r3, #17
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	461a      	mov	r2, r3
                    nc * glyph->size
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	789b      	ldrb	r3, [r3, #2]
 800729e:	4619      	mov	r1, r3
 80072a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a2:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 80072a6:	4413      	add	r3, r2
 80072a8:	3312      	adds	r3, #18
                glyph->buffer = &font[
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	441a      	add	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	e00f      	b.n	80072d6 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 80072b6:	6a3a      	ldr	r2, [r7, #32]
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	1ad2      	subs	r2, r2, r3
 80072bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072be:	4413      	add	r3, r2
 80072c0:	3301      	adds	r3, #1
 80072c2:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 80072c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c6:	3304      	adds	r3, #4
 80072c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	1e5a      	subs	r2, r3, #1
 80072ce:	633a      	str	r2, [r7, #48]	; 0x30
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1bc      	bne.n	800724e <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 80072d4:	2301      	movs	r3, #1
 80072d6:	4618      	mov	r0, r3
 80072d8:	3738      	adds	r7, #56	; 0x38
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	6039      	str	r1, [r7, #0]
    if (a > b) {
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	dd01      	ble.n	80072f4 <min+0x16>
        return b;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	e000      	b.n	80072f6 <min+0x18>
    };
    return a;
 80072f4:	687b      	ldr	r3, [r7, #4]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
	...

08007304 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	4603      	mov	r3, r0
 800730c:	80fb      	strh	r3, [r7, #6]
 800730e:	460b      	mov	r3, r1
 8007310:	80bb      	strh	r3, [r7, #4]
 8007312:	4613      	mov	r3, r2
 8007314:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8007316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800731a:	4a12      	ldr	r2, [pc, #72]	; (8007364 <hagl_put_pixel+0x60>)
 800731c:	8812      	ldrh	r2, [r2, #0]
 800731e:	4293      	cmp	r3, r2
 8007320:	db1a      	blt.n	8007358 <hagl_put_pixel+0x54>
 8007322:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007326:	4a0f      	ldr	r2, [pc, #60]	; (8007364 <hagl_put_pixel+0x60>)
 8007328:	8852      	ldrh	r2, [r2, #2]
 800732a:	4293      	cmp	r3, r2
 800732c:	db14      	blt.n	8007358 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800732e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007332:	4a0c      	ldr	r2, [pc, #48]	; (8007364 <hagl_put_pixel+0x60>)
 8007334:	8892      	ldrh	r2, [r2, #4]
 8007336:	4293      	cmp	r3, r2
 8007338:	dc10      	bgt.n	800735c <hagl_put_pixel+0x58>
 800733a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800733e:	4a09      	ldr	r2, [pc, #36]	; (8007364 <hagl_put_pixel+0x60>)
 8007340:	88d2      	ldrh	r2, [r2, #6]
 8007342:	4293      	cmp	r3, r2
 8007344:	dc0a      	bgt.n	800735c <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8007346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800734a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800734e:	887a      	ldrh	r2, [r7, #2]
 8007350:	4618      	mov	r0, r3
 8007352:	f7f9 ffd1 	bl	80012f8 <lcd_put_pixel>
 8007356:	e002      	b.n	800735e <hagl_put_pixel+0x5a>
        return;
 8007358:	bf00      	nop
 800735a:	e000      	b.n	800735e <hagl_put_pixel+0x5a>
        return;
 800735c:	bf00      	nop
}
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	2000000c 	.word	0x2000000c

08007368 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8007368:	b590      	push	{r4, r7, lr}
 800736a:	b085      	sub	sp, #20
 800736c:	af02      	add	r7, sp, #8
 800736e:	4604      	mov	r4, r0
 8007370:	4608      	mov	r0, r1
 8007372:	4611      	mov	r1, r2
 8007374:	461a      	mov	r2, r3
 8007376:	4623      	mov	r3, r4
 8007378:	80fb      	strh	r3, [r7, #6]
 800737a:	4603      	mov	r3, r0
 800737c:	80bb      	strh	r3, [r7, #4]
 800737e:	460b      	mov	r3, r1
 8007380:	807b      	strh	r3, [r7, #2]
 8007382:	4613      	mov	r3, r2
 8007384:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8007386:	88fa      	ldrh	r2, [r7, #6]
 8007388:	887b      	ldrh	r3, [r7, #2]
 800738a:	4413      	add	r3, r2
 800738c:	b29b      	uxth	r3, r3
 800738e:	b21a      	sxth	r2, r3
 8007390:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8007394:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007398:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800739c:	883b      	ldrh	r3, [r7, #0]
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	4623      	mov	r3, r4
 80073a2:	f000 f827 	bl	80073f4 <hagl_draw_line>
#endif
}
 80073a6:	bf00      	nop
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd90      	pop	{r4, r7, pc}

080073ae <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 80073ae:	b590      	push	{r4, r7, lr}
 80073b0:	b085      	sub	sp, #20
 80073b2:	af02      	add	r7, sp, #8
 80073b4:	4604      	mov	r4, r0
 80073b6:	4608      	mov	r0, r1
 80073b8:	4611      	mov	r1, r2
 80073ba:	461a      	mov	r2, r3
 80073bc:	4623      	mov	r3, r4
 80073be:	80fb      	strh	r3, [r7, #6]
 80073c0:	4603      	mov	r3, r0
 80073c2:	80bb      	strh	r3, [r7, #4]
 80073c4:	460b      	mov	r3, r1
 80073c6:	807b      	strh	r3, [r7, #2]
 80073c8:	4613      	mov	r3, r2
 80073ca:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 80073cc:	88ba      	ldrh	r2, [r7, #4]
 80073ce:	887b      	ldrh	r3, [r7, #2]
 80073d0:	4413      	add	r3, r2
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	b21c      	sxth	r4, r3
 80073d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80073da:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80073de:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80073e2:	883b      	ldrh	r3, [r7, #0]
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	4623      	mov	r3, r4
 80073e8:	f000 f804 	bl	80073f4 <hagl_draw_line>
#endif
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd90      	pop	{r4, r7, pc}

080073f4 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80073f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073f6:	b089      	sub	sp, #36	; 0x24
 80073f8:	af02      	add	r7, sp, #8
 80073fa:	4604      	mov	r4, r0
 80073fc:	4608      	mov	r0, r1
 80073fe:	4611      	mov	r1, r2
 8007400:	461a      	mov	r2, r3
 8007402:	4623      	mov	r3, r4
 8007404:	80fb      	strh	r3, [r7, #6]
 8007406:	4603      	mov	r3, r0
 8007408:	80bb      	strh	r3, [r7, #4]
 800740a:	460b      	mov	r3, r1
 800740c:	807b      	strh	r3, [r7, #2]
 800740e:	4613      	mov	r3, r2
 8007410:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8007412:	463b      	mov	r3, r7
 8007414:	1cba      	adds	r2, r7, #2
 8007416:	1d3d      	adds	r5, r7, #4
 8007418:	1dbc      	adds	r4, r7, #6
 800741a:	494a      	ldr	r1, [pc, #296]	; (8007544 <hagl_draw_line+0x150>)
 800741c:	466e      	mov	r6, sp
 800741e:	c903      	ldmia	r1, {r0, r1}
 8007420:	e886 0003 	stmia.w	r6, {r0, r1}
 8007424:	4629      	mov	r1, r5
 8007426:	4620      	mov	r0, r4
 8007428:	f7ff fd8f 	bl	8006f4a <clip_line>
 800742c:	4603      	mov	r3, r0
 800742e:	f083 0301 	eor.w	r3, r3, #1
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d17e      	bne.n	8007536 <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8007438:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800743c:	461a      	mov	r2, r3
 800743e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	2b00      	cmp	r3, #0
 8007446:	bfb8      	it	lt
 8007448:	425b      	neglt	r3, r3
 800744a:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 800744c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007450:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007454:	429a      	cmp	r2, r3
 8007456:	da01      	bge.n	800745c <hagl_draw_line+0x68>
 8007458:	2301      	movs	r3, #1
 800745a:	e001      	b.n	8007460 <hagl_draw_line+0x6c>
 800745c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007460:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8007462:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007466:	461a      	mov	r2, r3
 8007468:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	bfb8      	it	lt
 8007472:	425b      	neglt	r3, r3
 8007474:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8007476:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800747a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800747e:	429a      	cmp	r2, r3
 8007480:	da01      	bge.n	8007486 <hagl_draw_line+0x92>
 8007482:	2301      	movs	r3, #1
 8007484:	e001      	b.n	800748a <hagl_draw_line+0x96>
 8007486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800748a:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 800748c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007490:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007494:	429a      	cmp	r2, r3
 8007496:	dd06      	ble.n	80074a6 <hagl_draw_line+0xb2>
 8007498:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800749c:	0fda      	lsrs	r2, r3, #31
 800749e:	4413      	add	r3, r2
 80074a0:	105b      	asrs	r3, r3, #1
 80074a2:	b21b      	sxth	r3, r3
 80074a4:	e006      	b.n	80074b4 <hagl_draw_line+0xc0>
 80074a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80074aa:	0fda      	lsrs	r2, r3, #31
 80074ac:	4413      	add	r3, r2
 80074ae:	105b      	asrs	r3, r3, #1
 80074b0:	425b      	negs	r3, r3
 80074b2:	b21b      	sxth	r3, r3
 80074b4:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 80074b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074ba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80074be:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7ff ff1f 	bl	8007304 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 80074c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80074ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d105      	bne.n	80074de <hagl_draw_line+0xea>
 80074d2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80074d6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d02d      	beq.n	800753a <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 80074de:	8afb      	ldrh	r3, [r7, #22]
 80074e0:	005b      	lsls	r3, r3, #1
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 80074e6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80074ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80074ee:	425b      	negs	r3, r3
 80074f0:	429a      	cmp	r2, r3
 80074f2:	dd0c      	ble.n	800750e <hagl_draw_line+0x11a>
            err -= dy;
 80074f4:	8afa      	ldrh	r2, [r7, #22]
 80074f6:	8a3b      	ldrh	r3, [r7, #16]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 80074fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007502:	b29a      	uxth	r2, r3
 8007504:	8a7b      	ldrh	r3, [r7, #18]
 8007506:	4413      	add	r3, r2
 8007508:	b29b      	uxth	r3, r3
 800750a:	b21b      	sxth	r3, r3
 800750c:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 800750e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007512:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007516:	429a      	cmp	r2, r3
 8007518:	dacd      	bge.n	80074b6 <hagl_draw_line+0xc2>
            err += dx;
 800751a:	8afa      	ldrh	r2, [r7, #22]
 800751c:	8abb      	ldrh	r3, [r7, #20]
 800751e:	4413      	add	r3, r2
 8007520:	b29b      	uxth	r3, r3
 8007522:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8007524:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007528:	b29a      	uxth	r2, r3
 800752a:	89fb      	ldrh	r3, [r7, #14]
 800752c:	4413      	add	r3, r2
 800752e:	b29b      	uxth	r3, r3
 8007530:	b21b      	sxth	r3, r3
 8007532:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8007534:	e7bf      	b.n	80074b6 <hagl_draw_line+0xc2>
        return;
 8007536:	bf00      	nop
 8007538:	e000      	b.n	800753c <hagl_draw_line+0x148>
            break;
 800753a:	bf00      	nop
        }
    }
}
 800753c:	371c      	adds	r7, #28
 800753e:	46bd      	mov	sp, r7
 8007540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007542:	bf00      	nop
 8007544:	2000000c 	.word	0x2000000c

08007548 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8007548:	b590      	push	{r4, r7, lr}
 800754a:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8007556:	f844 0c24 	str.w	r0, [r4, #-36]
 800755a:	460c      	mov	r4, r1
 800755c:	4610      	mov	r0, r2
 800755e:	4619      	mov	r1, r3
 8007560:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007564:	4622      	mov	r2, r4
 8007566:	f823 2c26 	strh.w	r2, [r3, #-38]
 800756a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800756e:	4602      	mov	r2, r0
 8007570:	f823 2c28 	strh.w	r2, [r3, #-40]
 8007574:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007578:	460a      	mov	r2, r1
 800757a:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 800757e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007582:	4619      	mov	r1, r3
 8007584:	f107 0310 	add.w	r3, r7, #16
 8007588:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800758c:	6812      	ldr	r2, [r2, #0]
 800758e:	f851 1c24 	ldr.w	r1, [r1, #-36]
 8007592:	4618      	mov	r0, r3
 8007594:	f7ff fe11 	bl	80071ba <fontx_glyph>
 8007598:	4603      	mov	r3, r0
 800759a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800759e:	f102 0209 	add.w	r2, r2, #9
 80075a2:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 80075a4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80075a8:	f103 0309 	add.w	r3, r3, #9
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d001      	beq.n	80075b6 <hagl_put_char+0x6e>
        return 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	e0c0      	b.n	8007738 <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 80075b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075ba:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80075be:	b29a      	uxth	r2, r3
 80075c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075c4:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 80075c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075cc:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075d6:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 80075da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075de:	2210      	movs	r2, #16
 80075e0:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 80075e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80075e8:	3a08      	subs	r2, #8
 80075ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075ee:	3b18      	subs	r3, #24
 80075f0:	4611      	mov	r1, r2
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7ff fc4b 	bl	8006e8e <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 80075f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075fc:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8007600:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007604:	f102 020c 	add.w	r2, r2, #12
 8007608:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 800760a:	2300      	movs	r3, #0
 800760c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007610:	f102 020b 	add.w	r2, r2, #11
 8007614:	7013      	strb	r3, [r2, #0]
 8007616:	e071      	b.n	80076fc <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8007618:	2300      	movs	r3, #0
 800761a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800761e:	f102 020a 	add.w	r2, r2, #10
 8007622:	7013      	strb	r3, [r2, #0]
 8007624:	e047      	b.n	80076b6 <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8007626:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800762a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	b25a      	sxtb	r2, r3
 8007632:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007636:	f103 030a 	add.w	r3, r3, #10
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	f003 0307 	and.w	r3, r3, #7
 8007640:	2180      	movs	r1, #128	; 0x80
 8007642:	fa41 f303 	asr.w	r3, r1, r3
 8007646:	b25b      	sxtb	r3, r3
 8007648:	4013      	ands	r3, r2
 800764a:	b25b      	sxtb	r3, r3
 800764c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007650:	f102 0208 	add.w	r2, r2, #8
 8007654:	7013      	strb	r3, [r2, #0]
            if (set) {
 8007656:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800765a:	f103 0308 	add.w	r3, r3, #8
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d010      	beq.n	8007686 <hagl_put_char+0x13e>
                *(ptr++) = color;
 8007664:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007668:	f103 030c 	add.w	r3, r3, #12
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	1c9a      	adds	r2, r3, #2
 8007670:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8007674:	f101 010c 	add.w	r1, r1, #12
 8007678:	600a      	str	r2, [r1, #0]
 800767a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800767e:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 8007682:	801a      	strh	r2, [r3, #0]
 8007684:	e00c      	b.n	80076a0 <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 8007686:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800768a:	f103 030c 	add.w	r3, r3, #12
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	1c9a      	adds	r2, r3, #2
 8007692:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8007696:	f101 010c 	add.w	r1, r1, #12
 800769a:	600a      	str	r2, [r1, #0]
 800769c:	2200      	movs	r2, #0
 800769e:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 80076a0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80076a4:	f103 030a 	add.w	r3, r3, #10
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	3301      	adds	r3, #1
 80076ac:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80076b0:	f102 020a 	add.w	r2, r2, #10
 80076b4:	7013      	strb	r3, [r2, #0]
 80076b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076ba:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80076be:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80076c2:	f102 020a 	add.w	r2, r2, #10
 80076c6:	7812      	ldrb	r2, [r2, #0]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d3ac      	bcc.n	8007626 <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 80076cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076d0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80076d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80076d8:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 80076dc:	4413      	add	r3, r2
 80076de:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80076e2:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 80076e6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80076ea:	f103 030b 	add.w	r3, r3, #11
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	3301      	adds	r3, #1
 80076f2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80076f6:	f102 020b 	add.w	r2, r2, #11
 80076fa:	7013      	strb	r3, [r2, #0]
 80076fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007700:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8007704:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007708:	f102 020b 	add.w	r2, r2, #11
 800770c:	7812      	ldrb	r2, [r2, #0]
 800770e:	429a      	cmp	r2, r3
 8007710:	d382      	bcc.n	8007618 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 8007712:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007716:	3b18      	subs	r3, #24
 8007718:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800771c:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8007720:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007724:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8007728:	461a      	mov	r2, r3
 800772a:	f000 f85a 	bl	80077e2 <hagl_blit>

    return bitmap.width;
 800772e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007732:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007736:	b2db      	uxtb	r3, r3
}
 8007738:	4618      	mov	r0, r3
 800773a:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	bd90      	pop	{r4, r7, pc}

08007744 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08c      	sub	sp, #48	; 0x30
 8007748:	af02      	add	r7, sp, #8
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	4608      	mov	r0, r1
 800774e:	4611      	mov	r1, r2
 8007750:	461a      	mov	r2, r3
 8007752:	4603      	mov	r3, r0
 8007754:	817b      	strh	r3, [r7, #10]
 8007756:	460b      	mov	r3, r1
 8007758:	813b      	strh	r3, [r7, #8]
 800775a:	4613      	mov	r3, r2
 800775c:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 800775e:	897b      	ldrh	r3, [r7, #10]
 8007760:	84fb      	strh	r3, [r7, #38]	; 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8007762:	f107 0314 	add.w	r3, r7, #20
 8007766:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff fd09 	bl	8007180 <fontx_meta>
 800776e:	4603      	mov	r3, r0
 8007770:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if (0 != status) {
 8007774:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <hagl_put_text+0x3c>
        return 0;
 800777c:	2300      	movs	r3, #0
 800777e:	e02c      	b.n	80077da <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	1d1a      	adds	r2, r3, #4
 8007784:	60fa      	str	r2, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	2b0d      	cmp	r3, #13
 800778e:	d002      	beq.n	8007796 <hagl_put_text+0x52>
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	2b0a      	cmp	r3, #10
 8007794:	d108      	bne.n	80077a8 <hagl_put_text+0x64>
            x0 = 0;
 8007796:	2300      	movs	r3, #0
 8007798:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 800779a:	7fbb      	ldrb	r3, [r7, #30]
 800779c:	b29a      	uxth	r2, r3
 800779e:	893b      	ldrh	r3, [r7, #8]
 80077a0:	4413      	add	r3, r2
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	813b      	strh	r3, [r7, #8]
 80077a6:	e010      	b.n	80077ca <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 80077a8:	88f8      	ldrh	r0, [r7, #6]
 80077aa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80077ae:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	4603      	mov	r3, r0
 80077b8:	6a38      	ldr	r0, [r7, #32]
 80077ba:	f7ff fec5 	bl	8007548 <hagl_put_char>
 80077be:	4603      	mov	r3, r0
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	897b      	ldrh	r3, [r7, #10]
 80077c4:	4413      	add	r3, r2
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1d6      	bne.n	8007780 <hagl_put_text+0x3c>

    return x0 - original;
 80077d2:	897a      	ldrh	r2, [r7, #10]
 80077d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	b29b      	uxth	r3, r3
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3728      	adds	r7, #40	; 0x28
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b086      	sub	sp, #24
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	4603      	mov	r3, r0
 80077ea:	603a      	str	r2, [r7, #0]
 80077ec:	80fb      	strh	r3, [r7, #6]
 80077ee:	460b      	mov	r3, r1
 80077f0:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 80077f8:	2300      	movs	r3, #0
 80077fa:	827b      	strh	r3, [r7, #18]
 80077fc:	e020      	b.n	8007840 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 80077fe:	2300      	movs	r3, #0
 8007800:	823b      	strh	r3, [r7, #16]
 8007802:	e015      	b.n	8007830 <hagl_blit+0x4e>
            color = *(ptr++);
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	1c9a      	adds	r2, r3, #2
 8007808:	617a      	str	r2, [r7, #20]
 800780a:	881b      	ldrh	r3, [r3, #0]
 800780c:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 800780e:	88fa      	ldrh	r2, [r7, #6]
 8007810:	8a3b      	ldrh	r3, [r7, #16]
 8007812:	4413      	add	r3, r2
 8007814:	b29b      	uxth	r3, r3
 8007816:	b218      	sxth	r0, r3
 8007818:	88ba      	ldrh	r2, [r7, #4]
 800781a:	8a7b      	ldrh	r3, [r7, #18]
 800781c:	4413      	add	r3, r2
 800781e:	b29b      	uxth	r3, r3
 8007820:	b21b      	sxth	r3, r3
 8007822:	89fa      	ldrh	r2, [r7, #14]
 8007824:	4619      	mov	r1, r3
 8007826:	f7ff fd6d 	bl	8007304 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 800782a:	8a3b      	ldrh	r3, [r7, #16]
 800782c:	3301      	adds	r3, #1
 800782e:	823b      	strh	r3, [r7, #16]
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	881b      	ldrh	r3, [r3, #0]
 8007834:	8a3a      	ldrh	r2, [r7, #16]
 8007836:	429a      	cmp	r2, r3
 8007838:	d3e4      	bcc.n	8007804 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 800783a:	8a7b      	ldrh	r3, [r7, #18]
 800783c:	3301      	adds	r3, #1
 800783e:	827b      	strh	r3, [r7, #18]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	885b      	ldrh	r3, [r3, #2]
 8007844:	8a7a      	ldrh	r2, [r7, #18]
 8007846:	429a      	cmp	r2, r3
 8007848:	d3d9      	bcc.n	80077fe <hagl_blit+0x1c>
        }
    }
#endif
};
 800784a:	bf00      	nop
 800784c:	bf00      	nop
 800784e:	3718      	adds	r7, #24
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <hagl_draw_rounded_rectangle>:
void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
    hagl_fill_polygon(3, vertices, color);
}

void hagl_draw_rounded_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t r, color_t color) {
 8007854:	b590      	push	{r4, r7, lr}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	4604      	mov	r4, r0
 800785c:	4608      	mov	r0, r1
 800785e:	4611      	mov	r1, r2
 8007860:	461a      	mov	r2, r3
 8007862:	4623      	mov	r3, r4
 8007864:	80fb      	strh	r3, [r7, #6]
 8007866:	4603      	mov	r3, r0
 8007868:	80bb      	strh	r3, [r7, #4]
 800786a:	460b      	mov	r3, r1
 800786c:	807b      	strh	r3, [r7, #2]
 800786e:	4613      	mov	r3, r2
 8007870:	803b      	strh	r3, [r7, #0]

    uint16_t width, height;
    int16_t x, y, d;

    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8007872:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007876:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800787a:	429a      	cmp	r2, r3
 800787c:	dd0e      	ble.n	800789c <hagl_draw_rounded_rectangle+0x48>
        x0 = x0 + x1;
 800787e:	88fa      	ldrh	r2, [r7, #6]
 8007880:	887b      	ldrh	r3, [r7, #2]
 8007882:	4413      	add	r3, r2
 8007884:	b29b      	uxth	r3, r3
 8007886:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8007888:	88fa      	ldrh	r2, [r7, #6]
 800788a:	887b      	ldrh	r3, [r7, #2]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	b29b      	uxth	r3, r3
 8007890:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8007892:	88fa      	ldrh	r2, [r7, #6]
 8007894:	887b      	ldrh	r3, [r7, #2]
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	b29b      	uxth	r3, r3
 800789a:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800789c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80078a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	dd0e      	ble.n	80078c6 <hagl_draw_rounded_rectangle+0x72>
        y0 = y0 + y1;
 80078a8:	88ba      	ldrh	r2, [r7, #4]
 80078aa:	883b      	ldrh	r3, [r7, #0]
 80078ac:	4413      	add	r3, r2
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 80078b2:	88ba      	ldrh	r2, [r7, #4]
 80078b4:	883b      	ldrh	r3, [r7, #0]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80078bc:	88ba      	ldrh	r2, [r7, #4]
 80078be:	883b      	ldrh	r3, [r7, #0]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80078c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80078ca:	4a52      	ldr	r2, [pc, #328]	; (8007a14 <hagl_draw_rounded_rectangle+0x1c0>)
 80078cc:	8812      	ldrh	r2, [r2, #0]
 80078ce:	4293      	cmp	r3, r2
 80078d0:	f2c0 8153 	blt.w	8007b7a <hagl_draw_rounded_rectangle+0x326>
 80078d4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80078d8:	4a4e      	ldr	r2, [pc, #312]	; (8007a14 <hagl_draw_rounded_rectangle+0x1c0>)
 80078da:	8852      	ldrh	r2, [r2, #2]
 80078dc:	4293      	cmp	r3, r2
 80078de:	f2c0 814c 	blt.w	8007b7a <hagl_draw_rounded_rectangle+0x326>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80078e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078e6:	4a4b      	ldr	r2, [pc, #300]	; (8007a14 <hagl_draw_rounded_rectangle+0x1c0>)
 80078e8:	8892      	ldrh	r2, [r2, #4]
 80078ea:	4293      	cmp	r3, r2
 80078ec:	f300 8147 	bgt.w	8007b7e <hagl_draw_rounded_rectangle+0x32a>
 80078f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80078f4:	4a47      	ldr	r2, [pc, #284]	; (8007a14 <hagl_draw_rounded_rectangle+0x1c0>)
 80078f6:	88d2      	ldrh	r2, [r2, #6]
 80078f8:	4293      	cmp	r3, r2
 80078fa:	f300 8140 	bgt.w	8007b7e <hagl_draw_rounded_rectangle+0x32a>
        return;
    }

    /* Max radius is half of shortest edge. */
    width = x1 - x0 + 1;
 80078fe:	887a      	ldrh	r2, [r7, #2]
 8007900:	88fb      	ldrh	r3, [r7, #6]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	b29b      	uxth	r3, r3
 8007906:	3301      	adds	r3, #1
 8007908:	823b      	strh	r3, [r7, #16]
    height = y1 - y0 + 1;
 800790a:	883a      	ldrh	r2, [r7, #0]
 800790c:	88bb      	ldrh	r3, [r7, #4]
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	b29b      	uxth	r3, r3
 8007912:	3301      	adds	r3, #1
 8007914:	81fb      	strh	r3, [r7, #14]
    r = min(r, min(width / 2, height / 2));
 8007916:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 800791a:	8a3b      	ldrh	r3, [r7, #16]
 800791c:	085b      	lsrs	r3, r3, #1
 800791e:	b29b      	uxth	r3, r3
 8007920:	461a      	mov	r2, r3
 8007922:	89fb      	ldrh	r3, [r7, #14]
 8007924:	085b      	lsrs	r3, r3, #1
 8007926:	b29b      	uxth	r3, r3
 8007928:	4619      	mov	r1, r3
 800792a:	4610      	mov	r0, r2
 800792c:	f7ff fcd7 	bl	80072de <min>
 8007930:	4603      	mov	r3, r0
 8007932:	4619      	mov	r1, r3
 8007934:	4620      	mov	r0, r4
 8007936:	f7ff fcd2 	bl	80072de <min>
 800793a:	4603      	mov	r3, r0
 800793c:	853b      	strh	r3, [r7, #40]	; 0x28

    hagl_draw_hline(x0 + r, y0, width - 2 * r, color);
 800793e:	88fa      	ldrh	r2, [r7, #6]
 8007940:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007942:	4413      	add	r3, r2
 8007944:	b29b      	uxth	r3, r3
 8007946:	b218      	sxth	r0, r3
 8007948:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800794a:	005b      	lsls	r3, r3, #1
 800794c:	b29b      	uxth	r3, r3
 800794e:	8a3a      	ldrh	r2, [r7, #16]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	b29a      	uxth	r2, r3
 8007954:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007956:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800795a:	f7ff fd05 	bl	8007368 <hagl_draw_hline>
    hagl_draw_hline(x0 + r, y1, width - 2 * r, color);
 800795e:	88fa      	ldrh	r2, [r7, #6]
 8007960:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007962:	4413      	add	r3, r2
 8007964:	b29b      	uxth	r3, r3
 8007966:	b218      	sxth	r0, r3
 8007968:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	b29b      	uxth	r3, r3
 800796e:	8a3a      	ldrh	r2, [r7, #16]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	b29a      	uxth	r2, r3
 8007974:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007976:	f9b7 1000 	ldrsh.w	r1, [r7]
 800797a:	f7ff fcf5 	bl	8007368 <hagl_draw_hline>
    hagl_draw_vline(x0, y0 + r, height - 2 * r, color);
 800797e:	88ba      	ldrh	r2, [r7, #4]
 8007980:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007982:	4413      	add	r3, r2
 8007984:	b29b      	uxth	r3, r3
 8007986:	b219      	sxth	r1, r3
 8007988:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800798a:	005b      	lsls	r3, r3, #1
 800798c:	b29b      	uxth	r3, r3
 800798e:	89fa      	ldrh	r2, [r7, #14]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	b29a      	uxth	r2, r3
 8007994:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007996:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800799a:	f7ff fd08 	bl	80073ae <hagl_draw_vline>
    hagl_draw_vline(x1, y0 + r, height - 2 * r, color);
 800799e:	88ba      	ldrh	r2, [r7, #4]
 80079a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80079a2:	4413      	add	r3, r2
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	b219      	sxth	r1, r3
 80079a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	89fa      	ldrh	r2, [r7, #14]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80079b6:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80079ba:	f7ff fcf8 	bl	80073ae <hagl_draw_vline>

    x = 0;
 80079be:	2300      	movs	r3, #0
 80079c0:	82fb      	strh	r3, [r7, #22]
    y = r;
 80079c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80079c4:	82bb      	strh	r3, [r7, #20]
    d = 3 - 2 * r;
 80079c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	f1c3 0303 	rsb	r3, r3, #3
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	827b      	strh	r3, [r7, #18]

    while (y >= x) {
 80079d4:	e0c9      	b.n	8007b6a <hagl_draw_rounded_rectangle+0x316>
        x++;
 80079d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80079da:	b29b      	uxth	r3, r3
 80079dc:	3301      	adds	r3, #1
 80079de:	b29b      	uxth	r3, r3
 80079e0:	82fb      	strh	r3, [r7, #22]

        if (d > 0) {
 80079e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	dd16      	ble.n	8007a18 <hagl_draw_rounded_rectangle+0x1c4>
            y--;
 80079ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	3b01      	subs	r3, #1
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	82bb      	strh	r3, [r7, #20]
            d = d + 4 * (x - y) + 10;
 80079f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80079fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	8a7b      	ldrh	r3, [r7, #18]
 8007a08:	4413      	add	r3, r2
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	330a      	adds	r3, #10
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	827b      	strh	r3, [r7, #18]
 8007a12:	e00a      	b.n	8007a2a <hagl_draw_rounded_rectangle+0x1d6>
 8007a14:	2000000c 	.word	0x2000000c
        } else {
            d = d + 4 * x + 6;
 8007a18:	8afb      	ldrh	r3, [r7, #22]
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	8a7b      	ldrh	r3, [r7, #18]
 8007a20:	4413      	add	r3, r2
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	3306      	adds	r3, #6
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	827b      	strh	r3, [r7, #18]
        }

        /* Top right */
        hagl_put_pixel(x1 - r + x, y0 + r - y, color);
 8007a2a:	887a      	ldrh	r2, [r7, #2]
 8007a2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	8afb      	ldrh	r3, [r7, #22]
 8007a34:	4413      	add	r3, r2
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	b218      	sxth	r0, r3
 8007a3a:	88ba      	ldrh	r2, [r7, #4]
 8007a3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a3e:	4413      	add	r3, r2
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	8abb      	ldrh	r3, [r7, #20]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	b21b      	sxth	r3, r3
 8007a4a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	f7ff fc59 	bl	8007304 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y0 + r - x, color);
 8007a52:	887a      	ldrh	r2, [r7, #2]
 8007a54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	8abb      	ldrh	r3, [r7, #20]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	b218      	sxth	r0, r3
 8007a62:	88ba      	ldrh	r2, [r7, #4]
 8007a64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a66:	4413      	add	r3, r2
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	8afb      	ldrh	r3, [r7, #22]
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	b21b      	sxth	r3, r3
 8007a72:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007a74:	4619      	mov	r1, r3
 8007a76:	f7ff fc45 	bl	8007304 <hagl_put_pixel>

        /* Top left */
        hagl_put_pixel(x0 + r - x, y0 + r - y, color);
 8007a7a:	88fa      	ldrh	r2, [r7, #6]
 8007a7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a7e:	4413      	add	r3, r2
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	8afb      	ldrh	r3, [r7, #22]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	b218      	sxth	r0, r3
 8007a8a:	88ba      	ldrh	r2, [r7, #4]
 8007a8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a8e:	4413      	add	r3, r2
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	8abb      	ldrh	r3, [r7, #20]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	b21b      	sxth	r3, r3
 8007a9a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	f7ff fc31 	bl	8007304 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y0 + r - x, color);
 8007aa2:	88fa      	ldrh	r2, [r7, #6]
 8007aa4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007aa6:	4413      	add	r3, r2
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	8abb      	ldrh	r3, [r7, #20]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	b218      	sxth	r0, r3
 8007ab2:	88ba      	ldrh	r2, [r7, #4]
 8007ab4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ab6:	4413      	add	r3, r2
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	8afb      	ldrh	r3, [r7, #22]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	b21b      	sxth	r3, r3
 8007ac2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	f7ff fc1d 	bl	8007304 <hagl_put_pixel>

        /* Bottom right */
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 8007aca:	887a      	ldrh	r2, [r7, #2]
 8007acc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	8afb      	ldrh	r3, [r7, #22]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	b218      	sxth	r0, r3
 8007ada:	883a      	ldrh	r2, [r7, #0]
 8007adc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	8abb      	ldrh	r3, [r7, #20]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	b21b      	sxth	r3, r3
 8007aea:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007aec:	4619      	mov	r1, r3
 8007aee:	f7ff fc09 	bl	8007304 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y1 - r + x, color);
 8007af2:	887a      	ldrh	r2, [r7, #2]
 8007af4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	8abb      	ldrh	r3, [r7, #20]
 8007afc:	4413      	add	r3, r2
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	b218      	sxth	r0, r3
 8007b02:	883a      	ldrh	r2, [r7, #0]
 8007b04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	8afb      	ldrh	r3, [r7, #22]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	b21b      	sxth	r3, r3
 8007b12:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007b14:	4619      	mov	r1, r3
 8007b16:	f7ff fbf5 	bl	8007304 <hagl_put_pixel>

        /* Bottom left */
        hagl_put_pixel(x0 + r - x, y1 - r + y, color);
 8007b1a:	88fa      	ldrh	r2, [r7, #6]
 8007b1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b1e:	4413      	add	r3, r2
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	8afb      	ldrh	r3, [r7, #22]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	b218      	sxth	r0, r3
 8007b2a:	883a      	ldrh	r2, [r7, #0]
 8007b2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	8abb      	ldrh	r3, [r7, #20]
 8007b34:	4413      	add	r3, r2
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	b21b      	sxth	r3, r3
 8007b3a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	f7ff fbe1 	bl	8007304 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y1 - r + x, color);
 8007b42:	88fa      	ldrh	r2, [r7, #6]
 8007b44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b46:	4413      	add	r3, r2
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	8abb      	ldrh	r3, [r7, #20]
 8007b4c:	1ad3      	subs	r3, r2, r3
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	b218      	sxth	r0, r3
 8007b52:	883a      	ldrh	r2, [r7, #0]
 8007b54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	8afb      	ldrh	r3, [r7, #22]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	b21b      	sxth	r3, r3
 8007b62:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007b64:	4619      	mov	r1, r3
 8007b66:	f7ff fbcd 	bl	8007304 <hagl_put_pixel>
    while (y >= x) {
 8007b6a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007b6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	f6bf af2f 	bge.w	80079d6 <hagl_draw_rounded_rectangle+0x182>
 8007b78:	e002      	b.n	8007b80 <hagl_draw_rounded_rectangle+0x32c>
        return;
 8007b7a:	bf00      	nop
 8007b7c:	e000      	b.n	8007b80 <hagl_draw_rounded_rectangle+0x32c>
        return;
 8007b7e:	bf00      	nop
    }
};
 8007b80:	371c      	adds	r7, #28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd90      	pop	{r4, r7, pc}
 8007b86:	bf00      	nop

08007b88 <rgb565>:
#include <stdint.h>

#include "rgb565.h"

uint16_t rgb565(uint8_t r, uint8_t g, uint8_t b)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	71fb      	strb	r3, [r7, #7]
 8007b92:	460b      	mov	r3, r1
 8007b94:	71bb      	strb	r3, [r7, #6]
 8007b96:	4613      	mov	r3, r2
 8007b98:	717b      	strb	r3, [r7, #5]
    uint16_t rgb;

    rgb = ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
 8007b9a:	79fb      	ldrb	r3, [r7, #7]
 8007b9c:	021b      	lsls	r3, r3, #8
 8007b9e:	b21b      	sxth	r3, r3
 8007ba0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007ba4:	f023 0307 	bic.w	r3, r3, #7
 8007ba8:	b21a      	sxth	r2, r3
 8007baa:	79bb      	ldrb	r3, [r7, #6]
 8007bac:	00db      	lsls	r3, r3, #3
 8007bae:	b21b      	sxth	r3, r3
 8007bb0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8007bb4:	b21b      	sxth	r3, r3
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	b21a      	sxth	r2, r3
 8007bba:	797b      	ldrb	r3, [r7, #5]
 8007bbc:	08db      	lsrs	r3, r3, #3
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	b21b      	sxth	r3, r3
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	b21b      	sxth	r3, r3
 8007bc6:	81fb      	strh	r3, [r7, #14]
    rgb = (((rgb) << 8) & 0xFF00) | (((rgb) >> 8) & 0xFF);
 8007bc8:	89fb      	ldrh	r3, [r7, #14]
 8007bca:	021b      	lsls	r3, r3, #8
 8007bcc:	b21a      	sxth	r2, r3
 8007bce:	89fb      	ldrh	r3, [r7, #14]
 8007bd0:	0a1b      	lsrs	r3, r3, #8
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	b21b      	sxth	r3, r3
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	b21b      	sxth	r3, r3
 8007bda:	81fb      	strh	r3, [r7, #14]

    return rgb;
 8007bdc:	89fb      	ldrh	r3, [r7, #14]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
	...

08007bec <__errno>:
 8007bec:	4b01      	ldr	r3, [pc, #4]	; (8007bf4 <__errno+0x8>)
 8007bee:	6818      	ldr	r0, [r3, #0]
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	20000014 	.word	0x20000014

08007bf8 <__sflush_r>:
 8007bf8:	898a      	ldrh	r2, [r1, #12]
 8007bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfe:	4605      	mov	r5, r0
 8007c00:	0710      	lsls	r0, r2, #28
 8007c02:	460c      	mov	r4, r1
 8007c04:	d458      	bmi.n	8007cb8 <__sflush_r+0xc0>
 8007c06:	684b      	ldr	r3, [r1, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	dc05      	bgt.n	8007c18 <__sflush_r+0x20>
 8007c0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	dc02      	bgt.n	8007c18 <__sflush_r+0x20>
 8007c12:	2000      	movs	r0, #0
 8007c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c1a:	2e00      	cmp	r6, #0
 8007c1c:	d0f9      	beq.n	8007c12 <__sflush_r+0x1a>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c24:	682f      	ldr	r7, [r5, #0]
 8007c26:	602b      	str	r3, [r5, #0]
 8007c28:	d032      	beq.n	8007c90 <__sflush_r+0x98>
 8007c2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c2c:	89a3      	ldrh	r3, [r4, #12]
 8007c2e:	075a      	lsls	r2, r3, #29
 8007c30:	d505      	bpl.n	8007c3e <__sflush_r+0x46>
 8007c32:	6863      	ldr	r3, [r4, #4]
 8007c34:	1ac0      	subs	r0, r0, r3
 8007c36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c38:	b10b      	cbz	r3, 8007c3e <__sflush_r+0x46>
 8007c3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c3c:	1ac0      	subs	r0, r0, r3
 8007c3e:	2300      	movs	r3, #0
 8007c40:	4602      	mov	r2, r0
 8007c42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c44:	6a21      	ldr	r1, [r4, #32]
 8007c46:	4628      	mov	r0, r5
 8007c48:	47b0      	blx	r6
 8007c4a:	1c43      	adds	r3, r0, #1
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	d106      	bne.n	8007c5e <__sflush_r+0x66>
 8007c50:	6829      	ldr	r1, [r5, #0]
 8007c52:	291d      	cmp	r1, #29
 8007c54:	d82c      	bhi.n	8007cb0 <__sflush_r+0xb8>
 8007c56:	4a2a      	ldr	r2, [pc, #168]	; (8007d00 <__sflush_r+0x108>)
 8007c58:	40ca      	lsrs	r2, r1
 8007c5a:	07d6      	lsls	r6, r2, #31
 8007c5c:	d528      	bpl.n	8007cb0 <__sflush_r+0xb8>
 8007c5e:	2200      	movs	r2, #0
 8007c60:	6062      	str	r2, [r4, #4]
 8007c62:	04d9      	lsls	r1, r3, #19
 8007c64:	6922      	ldr	r2, [r4, #16]
 8007c66:	6022      	str	r2, [r4, #0]
 8007c68:	d504      	bpl.n	8007c74 <__sflush_r+0x7c>
 8007c6a:	1c42      	adds	r2, r0, #1
 8007c6c:	d101      	bne.n	8007c72 <__sflush_r+0x7a>
 8007c6e:	682b      	ldr	r3, [r5, #0]
 8007c70:	b903      	cbnz	r3, 8007c74 <__sflush_r+0x7c>
 8007c72:	6560      	str	r0, [r4, #84]	; 0x54
 8007c74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c76:	602f      	str	r7, [r5, #0]
 8007c78:	2900      	cmp	r1, #0
 8007c7a:	d0ca      	beq.n	8007c12 <__sflush_r+0x1a>
 8007c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c80:	4299      	cmp	r1, r3
 8007c82:	d002      	beq.n	8007c8a <__sflush_r+0x92>
 8007c84:	4628      	mov	r0, r5
 8007c86:	f000 fa11 	bl	80080ac <_free_r>
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	6360      	str	r0, [r4, #52]	; 0x34
 8007c8e:	e7c1      	b.n	8007c14 <__sflush_r+0x1c>
 8007c90:	6a21      	ldr	r1, [r4, #32]
 8007c92:	2301      	movs	r3, #1
 8007c94:	4628      	mov	r0, r5
 8007c96:	47b0      	blx	r6
 8007c98:	1c41      	adds	r1, r0, #1
 8007c9a:	d1c7      	bne.n	8007c2c <__sflush_r+0x34>
 8007c9c:	682b      	ldr	r3, [r5, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0c4      	beq.n	8007c2c <__sflush_r+0x34>
 8007ca2:	2b1d      	cmp	r3, #29
 8007ca4:	d001      	beq.n	8007caa <__sflush_r+0xb2>
 8007ca6:	2b16      	cmp	r3, #22
 8007ca8:	d101      	bne.n	8007cae <__sflush_r+0xb6>
 8007caa:	602f      	str	r7, [r5, #0]
 8007cac:	e7b1      	b.n	8007c12 <__sflush_r+0x1a>
 8007cae:	89a3      	ldrh	r3, [r4, #12]
 8007cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cb4:	81a3      	strh	r3, [r4, #12]
 8007cb6:	e7ad      	b.n	8007c14 <__sflush_r+0x1c>
 8007cb8:	690f      	ldr	r7, [r1, #16]
 8007cba:	2f00      	cmp	r7, #0
 8007cbc:	d0a9      	beq.n	8007c12 <__sflush_r+0x1a>
 8007cbe:	0793      	lsls	r3, r2, #30
 8007cc0:	680e      	ldr	r6, [r1, #0]
 8007cc2:	bf08      	it	eq
 8007cc4:	694b      	ldreq	r3, [r1, #20]
 8007cc6:	600f      	str	r7, [r1, #0]
 8007cc8:	bf18      	it	ne
 8007cca:	2300      	movne	r3, #0
 8007ccc:	eba6 0807 	sub.w	r8, r6, r7
 8007cd0:	608b      	str	r3, [r1, #8]
 8007cd2:	f1b8 0f00 	cmp.w	r8, #0
 8007cd6:	dd9c      	ble.n	8007c12 <__sflush_r+0x1a>
 8007cd8:	6a21      	ldr	r1, [r4, #32]
 8007cda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007cdc:	4643      	mov	r3, r8
 8007cde:	463a      	mov	r2, r7
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	47b0      	blx	r6
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	dc06      	bgt.n	8007cf6 <__sflush_r+0xfe>
 8007ce8:	89a3      	ldrh	r3, [r4, #12]
 8007cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cee:	81a3      	strh	r3, [r4, #12]
 8007cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cf4:	e78e      	b.n	8007c14 <__sflush_r+0x1c>
 8007cf6:	4407      	add	r7, r0
 8007cf8:	eba8 0800 	sub.w	r8, r8, r0
 8007cfc:	e7e9      	b.n	8007cd2 <__sflush_r+0xda>
 8007cfe:	bf00      	nop
 8007d00:	20400001 	.word	0x20400001

08007d04 <_fflush_r>:
 8007d04:	b538      	push	{r3, r4, r5, lr}
 8007d06:	690b      	ldr	r3, [r1, #16]
 8007d08:	4605      	mov	r5, r0
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	b913      	cbnz	r3, 8007d14 <_fflush_r+0x10>
 8007d0e:	2500      	movs	r5, #0
 8007d10:	4628      	mov	r0, r5
 8007d12:	bd38      	pop	{r3, r4, r5, pc}
 8007d14:	b118      	cbz	r0, 8007d1e <_fflush_r+0x1a>
 8007d16:	6983      	ldr	r3, [r0, #24]
 8007d18:	b90b      	cbnz	r3, 8007d1e <_fflush_r+0x1a>
 8007d1a:	f000 f887 	bl	8007e2c <__sinit>
 8007d1e:	4b14      	ldr	r3, [pc, #80]	; (8007d70 <_fflush_r+0x6c>)
 8007d20:	429c      	cmp	r4, r3
 8007d22:	d11b      	bne.n	8007d5c <_fflush_r+0x58>
 8007d24:	686c      	ldr	r4, [r5, #4]
 8007d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d0ef      	beq.n	8007d0e <_fflush_r+0xa>
 8007d2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d30:	07d0      	lsls	r0, r2, #31
 8007d32:	d404      	bmi.n	8007d3e <_fflush_r+0x3a>
 8007d34:	0599      	lsls	r1, r3, #22
 8007d36:	d402      	bmi.n	8007d3e <_fflush_r+0x3a>
 8007d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d3a:	f000 f93a 	bl	8007fb2 <__retarget_lock_acquire_recursive>
 8007d3e:	4628      	mov	r0, r5
 8007d40:	4621      	mov	r1, r4
 8007d42:	f7ff ff59 	bl	8007bf8 <__sflush_r>
 8007d46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d48:	07da      	lsls	r2, r3, #31
 8007d4a:	4605      	mov	r5, r0
 8007d4c:	d4e0      	bmi.n	8007d10 <_fflush_r+0xc>
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	059b      	lsls	r3, r3, #22
 8007d52:	d4dd      	bmi.n	8007d10 <_fflush_r+0xc>
 8007d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d56:	f000 f92d 	bl	8007fb4 <__retarget_lock_release_recursive>
 8007d5a:	e7d9      	b.n	8007d10 <_fflush_r+0xc>
 8007d5c:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <_fflush_r+0x70>)
 8007d5e:	429c      	cmp	r4, r3
 8007d60:	d101      	bne.n	8007d66 <_fflush_r+0x62>
 8007d62:	68ac      	ldr	r4, [r5, #8]
 8007d64:	e7df      	b.n	8007d26 <_fflush_r+0x22>
 8007d66:	4b04      	ldr	r3, [pc, #16]	; (8007d78 <_fflush_r+0x74>)
 8007d68:	429c      	cmp	r4, r3
 8007d6a:	bf08      	it	eq
 8007d6c:	68ec      	ldreq	r4, [r5, #12]
 8007d6e:	e7da      	b.n	8007d26 <_fflush_r+0x22>
 8007d70:	0800d9a0 	.word	0x0800d9a0
 8007d74:	0800d9c0 	.word	0x0800d9c0
 8007d78:	0800d980 	.word	0x0800d980

08007d7c <std>:
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	b510      	push	{r4, lr}
 8007d80:	4604      	mov	r4, r0
 8007d82:	e9c0 3300 	strd	r3, r3, [r0]
 8007d86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d8a:	6083      	str	r3, [r0, #8]
 8007d8c:	8181      	strh	r1, [r0, #12]
 8007d8e:	6643      	str	r3, [r0, #100]	; 0x64
 8007d90:	81c2      	strh	r2, [r0, #14]
 8007d92:	6183      	str	r3, [r0, #24]
 8007d94:	4619      	mov	r1, r3
 8007d96:	2208      	movs	r2, #8
 8007d98:	305c      	adds	r0, #92	; 0x5c
 8007d9a:	f000 f97f 	bl	800809c <memset>
 8007d9e:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <std+0x38>)
 8007da0:	6263      	str	r3, [r4, #36]	; 0x24
 8007da2:	4b05      	ldr	r3, [pc, #20]	; (8007db8 <std+0x3c>)
 8007da4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007da6:	4b05      	ldr	r3, [pc, #20]	; (8007dbc <std+0x40>)
 8007da8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007daa:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <std+0x44>)
 8007dac:	6224      	str	r4, [r4, #32]
 8007dae:	6323      	str	r3, [r4, #48]	; 0x30
 8007db0:	bd10      	pop	{r4, pc}
 8007db2:	bf00      	nop
 8007db4:	08008c7d 	.word	0x08008c7d
 8007db8:	08008c9f 	.word	0x08008c9f
 8007dbc:	08008cd7 	.word	0x08008cd7
 8007dc0:	08008cfb 	.word	0x08008cfb

08007dc4 <_cleanup_r>:
 8007dc4:	4901      	ldr	r1, [pc, #4]	; (8007dcc <_cleanup_r+0x8>)
 8007dc6:	f000 b8af 	b.w	8007f28 <_fwalk_reent>
 8007dca:	bf00      	nop
 8007dcc:	08007d05 	.word	0x08007d05

08007dd0 <__sfmoreglue>:
 8007dd0:	b570      	push	{r4, r5, r6, lr}
 8007dd2:	2268      	movs	r2, #104	; 0x68
 8007dd4:	1e4d      	subs	r5, r1, #1
 8007dd6:	4355      	muls	r5, r2
 8007dd8:	460e      	mov	r6, r1
 8007dda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007dde:	f000 f9d1 	bl	8008184 <_malloc_r>
 8007de2:	4604      	mov	r4, r0
 8007de4:	b140      	cbz	r0, 8007df8 <__sfmoreglue+0x28>
 8007de6:	2100      	movs	r1, #0
 8007de8:	e9c0 1600 	strd	r1, r6, [r0]
 8007dec:	300c      	adds	r0, #12
 8007dee:	60a0      	str	r0, [r4, #8]
 8007df0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007df4:	f000 f952 	bl	800809c <memset>
 8007df8:	4620      	mov	r0, r4
 8007dfa:	bd70      	pop	{r4, r5, r6, pc}

08007dfc <__sfp_lock_acquire>:
 8007dfc:	4801      	ldr	r0, [pc, #4]	; (8007e04 <__sfp_lock_acquire+0x8>)
 8007dfe:	f000 b8d8 	b.w	8007fb2 <__retarget_lock_acquire_recursive>
 8007e02:	bf00      	nop
 8007e04:	2000a3cd 	.word	0x2000a3cd

08007e08 <__sfp_lock_release>:
 8007e08:	4801      	ldr	r0, [pc, #4]	; (8007e10 <__sfp_lock_release+0x8>)
 8007e0a:	f000 b8d3 	b.w	8007fb4 <__retarget_lock_release_recursive>
 8007e0e:	bf00      	nop
 8007e10:	2000a3cd 	.word	0x2000a3cd

08007e14 <__sinit_lock_acquire>:
 8007e14:	4801      	ldr	r0, [pc, #4]	; (8007e1c <__sinit_lock_acquire+0x8>)
 8007e16:	f000 b8cc 	b.w	8007fb2 <__retarget_lock_acquire_recursive>
 8007e1a:	bf00      	nop
 8007e1c:	2000a3ce 	.word	0x2000a3ce

08007e20 <__sinit_lock_release>:
 8007e20:	4801      	ldr	r0, [pc, #4]	; (8007e28 <__sinit_lock_release+0x8>)
 8007e22:	f000 b8c7 	b.w	8007fb4 <__retarget_lock_release_recursive>
 8007e26:	bf00      	nop
 8007e28:	2000a3ce 	.word	0x2000a3ce

08007e2c <__sinit>:
 8007e2c:	b510      	push	{r4, lr}
 8007e2e:	4604      	mov	r4, r0
 8007e30:	f7ff fff0 	bl	8007e14 <__sinit_lock_acquire>
 8007e34:	69a3      	ldr	r3, [r4, #24]
 8007e36:	b11b      	cbz	r3, 8007e40 <__sinit+0x14>
 8007e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e3c:	f7ff bff0 	b.w	8007e20 <__sinit_lock_release>
 8007e40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e44:	6523      	str	r3, [r4, #80]	; 0x50
 8007e46:	4b13      	ldr	r3, [pc, #76]	; (8007e94 <__sinit+0x68>)
 8007e48:	4a13      	ldr	r2, [pc, #76]	; (8007e98 <__sinit+0x6c>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e4e:	42a3      	cmp	r3, r4
 8007e50:	bf04      	itt	eq
 8007e52:	2301      	moveq	r3, #1
 8007e54:	61a3      	streq	r3, [r4, #24]
 8007e56:	4620      	mov	r0, r4
 8007e58:	f000 f820 	bl	8007e9c <__sfp>
 8007e5c:	6060      	str	r0, [r4, #4]
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f000 f81c 	bl	8007e9c <__sfp>
 8007e64:	60a0      	str	r0, [r4, #8]
 8007e66:	4620      	mov	r0, r4
 8007e68:	f000 f818 	bl	8007e9c <__sfp>
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	60e0      	str	r0, [r4, #12]
 8007e70:	2104      	movs	r1, #4
 8007e72:	6860      	ldr	r0, [r4, #4]
 8007e74:	f7ff ff82 	bl	8007d7c <std>
 8007e78:	68a0      	ldr	r0, [r4, #8]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	2109      	movs	r1, #9
 8007e7e:	f7ff ff7d 	bl	8007d7c <std>
 8007e82:	68e0      	ldr	r0, [r4, #12]
 8007e84:	2202      	movs	r2, #2
 8007e86:	2112      	movs	r1, #18
 8007e88:	f7ff ff78 	bl	8007d7c <std>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	61a3      	str	r3, [r4, #24]
 8007e90:	e7d2      	b.n	8007e38 <__sinit+0xc>
 8007e92:	bf00      	nop
 8007e94:	0800d9e0 	.word	0x0800d9e0
 8007e98:	08007dc5 	.word	0x08007dc5

08007e9c <__sfp>:
 8007e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9e:	4607      	mov	r7, r0
 8007ea0:	f7ff ffac 	bl	8007dfc <__sfp_lock_acquire>
 8007ea4:	4b1e      	ldr	r3, [pc, #120]	; (8007f20 <__sfp+0x84>)
 8007ea6:	681e      	ldr	r6, [r3, #0]
 8007ea8:	69b3      	ldr	r3, [r6, #24]
 8007eaa:	b913      	cbnz	r3, 8007eb2 <__sfp+0x16>
 8007eac:	4630      	mov	r0, r6
 8007eae:	f7ff ffbd 	bl	8007e2c <__sinit>
 8007eb2:	3648      	adds	r6, #72	; 0x48
 8007eb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	d503      	bpl.n	8007ec4 <__sfp+0x28>
 8007ebc:	6833      	ldr	r3, [r6, #0]
 8007ebe:	b30b      	cbz	r3, 8007f04 <__sfp+0x68>
 8007ec0:	6836      	ldr	r6, [r6, #0]
 8007ec2:	e7f7      	b.n	8007eb4 <__sfp+0x18>
 8007ec4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ec8:	b9d5      	cbnz	r5, 8007f00 <__sfp+0x64>
 8007eca:	4b16      	ldr	r3, [pc, #88]	; (8007f24 <__sfp+0x88>)
 8007ecc:	60e3      	str	r3, [r4, #12]
 8007ece:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ed2:	6665      	str	r5, [r4, #100]	; 0x64
 8007ed4:	f000 f86c 	bl	8007fb0 <__retarget_lock_init_recursive>
 8007ed8:	f7ff ff96 	bl	8007e08 <__sfp_lock_release>
 8007edc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ee0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ee4:	6025      	str	r5, [r4, #0]
 8007ee6:	61a5      	str	r5, [r4, #24]
 8007ee8:	2208      	movs	r2, #8
 8007eea:	4629      	mov	r1, r5
 8007eec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ef0:	f000 f8d4 	bl	800809c <memset>
 8007ef4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ef8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007efc:	4620      	mov	r0, r4
 8007efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f00:	3468      	adds	r4, #104	; 0x68
 8007f02:	e7d9      	b.n	8007eb8 <__sfp+0x1c>
 8007f04:	2104      	movs	r1, #4
 8007f06:	4638      	mov	r0, r7
 8007f08:	f7ff ff62 	bl	8007dd0 <__sfmoreglue>
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	6030      	str	r0, [r6, #0]
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d1d5      	bne.n	8007ec0 <__sfp+0x24>
 8007f14:	f7ff ff78 	bl	8007e08 <__sfp_lock_release>
 8007f18:	230c      	movs	r3, #12
 8007f1a:	603b      	str	r3, [r7, #0]
 8007f1c:	e7ee      	b.n	8007efc <__sfp+0x60>
 8007f1e:	bf00      	nop
 8007f20:	0800d9e0 	.word	0x0800d9e0
 8007f24:	ffff0001 	.word	0xffff0001

08007f28 <_fwalk_reent>:
 8007f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f2c:	4606      	mov	r6, r0
 8007f2e:	4688      	mov	r8, r1
 8007f30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f34:	2700      	movs	r7, #0
 8007f36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f3a:	f1b9 0901 	subs.w	r9, r9, #1
 8007f3e:	d505      	bpl.n	8007f4c <_fwalk_reent+0x24>
 8007f40:	6824      	ldr	r4, [r4, #0]
 8007f42:	2c00      	cmp	r4, #0
 8007f44:	d1f7      	bne.n	8007f36 <_fwalk_reent+0xe>
 8007f46:	4638      	mov	r0, r7
 8007f48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f4c:	89ab      	ldrh	r3, [r5, #12]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d907      	bls.n	8007f62 <_fwalk_reent+0x3a>
 8007f52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f56:	3301      	adds	r3, #1
 8007f58:	d003      	beq.n	8007f62 <_fwalk_reent+0x3a>
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	47c0      	blx	r8
 8007f60:	4307      	orrs	r7, r0
 8007f62:	3568      	adds	r5, #104	; 0x68
 8007f64:	e7e9      	b.n	8007f3a <_fwalk_reent+0x12>
	...

08007f68 <__libc_init_array>:
 8007f68:	b570      	push	{r4, r5, r6, lr}
 8007f6a:	4d0d      	ldr	r5, [pc, #52]	; (8007fa0 <__libc_init_array+0x38>)
 8007f6c:	4c0d      	ldr	r4, [pc, #52]	; (8007fa4 <__libc_init_array+0x3c>)
 8007f6e:	1b64      	subs	r4, r4, r5
 8007f70:	10a4      	asrs	r4, r4, #2
 8007f72:	2600      	movs	r6, #0
 8007f74:	42a6      	cmp	r6, r4
 8007f76:	d109      	bne.n	8007f8c <__libc_init_array+0x24>
 8007f78:	4d0b      	ldr	r5, [pc, #44]	; (8007fa8 <__libc_init_array+0x40>)
 8007f7a:	4c0c      	ldr	r4, [pc, #48]	; (8007fac <__libc_init_array+0x44>)
 8007f7c:	f002 fc0a 	bl	800a794 <_init>
 8007f80:	1b64      	subs	r4, r4, r5
 8007f82:	10a4      	asrs	r4, r4, #2
 8007f84:	2600      	movs	r6, #0
 8007f86:	42a6      	cmp	r6, r4
 8007f88:	d105      	bne.n	8007f96 <__libc_init_array+0x2e>
 8007f8a:	bd70      	pop	{r4, r5, r6, pc}
 8007f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f90:	4798      	blx	r3
 8007f92:	3601      	adds	r6, #1
 8007f94:	e7ee      	b.n	8007f74 <__libc_init_array+0xc>
 8007f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f9a:	4798      	blx	r3
 8007f9c:	3601      	adds	r6, #1
 8007f9e:	e7f2      	b.n	8007f86 <__libc_init_array+0x1e>
 8007fa0:	0800dd64 	.word	0x0800dd64
 8007fa4:	0800dd64 	.word	0x0800dd64
 8007fa8:	0800dd64 	.word	0x0800dd64
 8007fac:	0800dd68 	.word	0x0800dd68

08007fb0 <__retarget_lock_init_recursive>:
 8007fb0:	4770      	bx	lr

08007fb2 <__retarget_lock_acquire_recursive>:
 8007fb2:	4770      	bx	lr

08007fb4 <__retarget_lock_release_recursive>:
 8007fb4:	4770      	bx	lr

08007fb6 <__swhatbuf_r>:
 8007fb6:	b570      	push	{r4, r5, r6, lr}
 8007fb8:	460e      	mov	r6, r1
 8007fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fbe:	2900      	cmp	r1, #0
 8007fc0:	b096      	sub	sp, #88	; 0x58
 8007fc2:	4614      	mov	r4, r2
 8007fc4:	461d      	mov	r5, r3
 8007fc6:	da08      	bge.n	8007fda <__swhatbuf_r+0x24>
 8007fc8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	602a      	str	r2, [r5, #0]
 8007fd0:	061a      	lsls	r2, r3, #24
 8007fd2:	d410      	bmi.n	8007ff6 <__swhatbuf_r+0x40>
 8007fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fd8:	e00e      	b.n	8007ff8 <__swhatbuf_r+0x42>
 8007fda:	466a      	mov	r2, sp
 8007fdc:	f001 fdee 	bl	8009bbc <_fstat_r>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	dbf1      	blt.n	8007fc8 <__swhatbuf_r+0x12>
 8007fe4:	9a01      	ldr	r2, [sp, #4]
 8007fe6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007fea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007fee:	425a      	negs	r2, r3
 8007ff0:	415a      	adcs	r2, r3
 8007ff2:	602a      	str	r2, [r5, #0]
 8007ff4:	e7ee      	b.n	8007fd4 <__swhatbuf_r+0x1e>
 8007ff6:	2340      	movs	r3, #64	; 0x40
 8007ff8:	2000      	movs	r0, #0
 8007ffa:	6023      	str	r3, [r4, #0]
 8007ffc:	b016      	add	sp, #88	; 0x58
 8007ffe:	bd70      	pop	{r4, r5, r6, pc}

08008000 <__smakebuf_r>:
 8008000:	898b      	ldrh	r3, [r1, #12]
 8008002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008004:	079d      	lsls	r5, r3, #30
 8008006:	4606      	mov	r6, r0
 8008008:	460c      	mov	r4, r1
 800800a:	d507      	bpl.n	800801c <__smakebuf_r+0x1c>
 800800c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	6123      	str	r3, [r4, #16]
 8008014:	2301      	movs	r3, #1
 8008016:	6163      	str	r3, [r4, #20]
 8008018:	b002      	add	sp, #8
 800801a:	bd70      	pop	{r4, r5, r6, pc}
 800801c:	ab01      	add	r3, sp, #4
 800801e:	466a      	mov	r2, sp
 8008020:	f7ff ffc9 	bl	8007fb6 <__swhatbuf_r>
 8008024:	9900      	ldr	r1, [sp, #0]
 8008026:	4605      	mov	r5, r0
 8008028:	4630      	mov	r0, r6
 800802a:	f000 f8ab 	bl	8008184 <_malloc_r>
 800802e:	b948      	cbnz	r0, 8008044 <__smakebuf_r+0x44>
 8008030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008034:	059a      	lsls	r2, r3, #22
 8008036:	d4ef      	bmi.n	8008018 <__smakebuf_r+0x18>
 8008038:	f023 0303 	bic.w	r3, r3, #3
 800803c:	f043 0302 	orr.w	r3, r3, #2
 8008040:	81a3      	strh	r3, [r4, #12]
 8008042:	e7e3      	b.n	800800c <__smakebuf_r+0xc>
 8008044:	4b0d      	ldr	r3, [pc, #52]	; (800807c <__smakebuf_r+0x7c>)
 8008046:	62b3      	str	r3, [r6, #40]	; 0x28
 8008048:	89a3      	ldrh	r3, [r4, #12]
 800804a:	6020      	str	r0, [r4, #0]
 800804c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008050:	81a3      	strh	r3, [r4, #12]
 8008052:	9b00      	ldr	r3, [sp, #0]
 8008054:	6163      	str	r3, [r4, #20]
 8008056:	9b01      	ldr	r3, [sp, #4]
 8008058:	6120      	str	r0, [r4, #16]
 800805a:	b15b      	cbz	r3, 8008074 <__smakebuf_r+0x74>
 800805c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008060:	4630      	mov	r0, r6
 8008062:	f001 fdbd 	bl	8009be0 <_isatty_r>
 8008066:	b128      	cbz	r0, 8008074 <__smakebuf_r+0x74>
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	f023 0303 	bic.w	r3, r3, #3
 800806e:	f043 0301 	orr.w	r3, r3, #1
 8008072:	81a3      	strh	r3, [r4, #12]
 8008074:	89a0      	ldrh	r0, [r4, #12]
 8008076:	4305      	orrs	r5, r0
 8008078:	81a5      	strh	r5, [r4, #12]
 800807a:	e7cd      	b.n	8008018 <__smakebuf_r+0x18>
 800807c:	08007dc5 	.word	0x08007dc5

08008080 <memcpy>:
 8008080:	440a      	add	r2, r1
 8008082:	4291      	cmp	r1, r2
 8008084:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008088:	d100      	bne.n	800808c <memcpy+0xc>
 800808a:	4770      	bx	lr
 800808c:	b510      	push	{r4, lr}
 800808e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008096:	4291      	cmp	r1, r2
 8008098:	d1f9      	bne.n	800808e <memcpy+0xe>
 800809a:	bd10      	pop	{r4, pc}

0800809c <memset>:
 800809c:	4402      	add	r2, r0
 800809e:	4603      	mov	r3, r0
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d100      	bne.n	80080a6 <memset+0xa>
 80080a4:	4770      	bx	lr
 80080a6:	f803 1b01 	strb.w	r1, [r3], #1
 80080aa:	e7f9      	b.n	80080a0 <memset+0x4>

080080ac <_free_r>:
 80080ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080ae:	2900      	cmp	r1, #0
 80080b0:	d044      	beq.n	800813c <_free_r+0x90>
 80080b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080b6:	9001      	str	r0, [sp, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f1a1 0404 	sub.w	r4, r1, #4
 80080be:	bfb8      	it	lt
 80080c0:	18e4      	addlt	r4, r4, r3
 80080c2:	f001 fdbb 	bl	8009c3c <__malloc_lock>
 80080c6:	4a1e      	ldr	r2, [pc, #120]	; (8008140 <_free_r+0x94>)
 80080c8:	9801      	ldr	r0, [sp, #4]
 80080ca:	6813      	ldr	r3, [r2, #0]
 80080cc:	b933      	cbnz	r3, 80080dc <_free_r+0x30>
 80080ce:	6063      	str	r3, [r4, #4]
 80080d0:	6014      	str	r4, [r2, #0]
 80080d2:	b003      	add	sp, #12
 80080d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080d8:	f001 bdb6 	b.w	8009c48 <__malloc_unlock>
 80080dc:	42a3      	cmp	r3, r4
 80080de:	d908      	bls.n	80080f2 <_free_r+0x46>
 80080e0:	6825      	ldr	r5, [r4, #0]
 80080e2:	1961      	adds	r1, r4, r5
 80080e4:	428b      	cmp	r3, r1
 80080e6:	bf01      	itttt	eq
 80080e8:	6819      	ldreq	r1, [r3, #0]
 80080ea:	685b      	ldreq	r3, [r3, #4]
 80080ec:	1949      	addeq	r1, r1, r5
 80080ee:	6021      	streq	r1, [r4, #0]
 80080f0:	e7ed      	b.n	80080ce <_free_r+0x22>
 80080f2:	461a      	mov	r2, r3
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	b10b      	cbz	r3, 80080fc <_free_r+0x50>
 80080f8:	42a3      	cmp	r3, r4
 80080fa:	d9fa      	bls.n	80080f2 <_free_r+0x46>
 80080fc:	6811      	ldr	r1, [r2, #0]
 80080fe:	1855      	adds	r5, r2, r1
 8008100:	42a5      	cmp	r5, r4
 8008102:	d10b      	bne.n	800811c <_free_r+0x70>
 8008104:	6824      	ldr	r4, [r4, #0]
 8008106:	4421      	add	r1, r4
 8008108:	1854      	adds	r4, r2, r1
 800810a:	42a3      	cmp	r3, r4
 800810c:	6011      	str	r1, [r2, #0]
 800810e:	d1e0      	bne.n	80080d2 <_free_r+0x26>
 8008110:	681c      	ldr	r4, [r3, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	6053      	str	r3, [r2, #4]
 8008116:	4421      	add	r1, r4
 8008118:	6011      	str	r1, [r2, #0]
 800811a:	e7da      	b.n	80080d2 <_free_r+0x26>
 800811c:	d902      	bls.n	8008124 <_free_r+0x78>
 800811e:	230c      	movs	r3, #12
 8008120:	6003      	str	r3, [r0, #0]
 8008122:	e7d6      	b.n	80080d2 <_free_r+0x26>
 8008124:	6825      	ldr	r5, [r4, #0]
 8008126:	1961      	adds	r1, r4, r5
 8008128:	428b      	cmp	r3, r1
 800812a:	bf04      	itt	eq
 800812c:	6819      	ldreq	r1, [r3, #0]
 800812e:	685b      	ldreq	r3, [r3, #4]
 8008130:	6063      	str	r3, [r4, #4]
 8008132:	bf04      	itt	eq
 8008134:	1949      	addeq	r1, r1, r5
 8008136:	6021      	streq	r1, [r4, #0]
 8008138:	6054      	str	r4, [r2, #4]
 800813a:	e7ca      	b.n	80080d2 <_free_r+0x26>
 800813c:	b003      	add	sp, #12
 800813e:	bd30      	pop	{r4, r5, pc}
 8008140:	2000a3d0 	.word	0x2000a3d0

08008144 <sbrk_aligned>:
 8008144:	b570      	push	{r4, r5, r6, lr}
 8008146:	4e0e      	ldr	r6, [pc, #56]	; (8008180 <sbrk_aligned+0x3c>)
 8008148:	460c      	mov	r4, r1
 800814a:	6831      	ldr	r1, [r6, #0]
 800814c:	4605      	mov	r5, r0
 800814e:	b911      	cbnz	r1, 8008156 <sbrk_aligned+0x12>
 8008150:	f000 fd84 	bl	8008c5c <_sbrk_r>
 8008154:	6030      	str	r0, [r6, #0]
 8008156:	4621      	mov	r1, r4
 8008158:	4628      	mov	r0, r5
 800815a:	f000 fd7f 	bl	8008c5c <_sbrk_r>
 800815e:	1c43      	adds	r3, r0, #1
 8008160:	d00a      	beq.n	8008178 <sbrk_aligned+0x34>
 8008162:	1cc4      	adds	r4, r0, #3
 8008164:	f024 0403 	bic.w	r4, r4, #3
 8008168:	42a0      	cmp	r0, r4
 800816a:	d007      	beq.n	800817c <sbrk_aligned+0x38>
 800816c:	1a21      	subs	r1, r4, r0
 800816e:	4628      	mov	r0, r5
 8008170:	f000 fd74 	bl	8008c5c <_sbrk_r>
 8008174:	3001      	adds	r0, #1
 8008176:	d101      	bne.n	800817c <sbrk_aligned+0x38>
 8008178:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800817c:	4620      	mov	r0, r4
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	2000a3d4 	.word	0x2000a3d4

08008184 <_malloc_r>:
 8008184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008188:	1ccd      	adds	r5, r1, #3
 800818a:	f025 0503 	bic.w	r5, r5, #3
 800818e:	3508      	adds	r5, #8
 8008190:	2d0c      	cmp	r5, #12
 8008192:	bf38      	it	cc
 8008194:	250c      	movcc	r5, #12
 8008196:	2d00      	cmp	r5, #0
 8008198:	4607      	mov	r7, r0
 800819a:	db01      	blt.n	80081a0 <_malloc_r+0x1c>
 800819c:	42a9      	cmp	r1, r5
 800819e:	d905      	bls.n	80081ac <_malloc_r+0x28>
 80081a0:	230c      	movs	r3, #12
 80081a2:	603b      	str	r3, [r7, #0]
 80081a4:	2600      	movs	r6, #0
 80081a6:	4630      	mov	r0, r6
 80081a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ac:	4e2e      	ldr	r6, [pc, #184]	; (8008268 <_malloc_r+0xe4>)
 80081ae:	f001 fd45 	bl	8009c3c <__malloc_lock>
 80081b2:	6833      	ldr	r3, [r6, #0]
 80081b4:	461c      	mov	r4, r3
 80081b6:	bb34      	cbnz	r4, 8008206 <_malloc_r+0x82>
 80081b8:	4629      	mov	r1, r5
 80081ba:	4638      	mov	r0, r7
 80081bc:	f7ff ffc2 	bl	8008144 <sbrk_aligned>
 80081c0:	1c43      	adds	r3, r0, #1
 80081c2:	4604      	mov	r4, r0
 80081c4:	d14d      	bne.n	8008262 <_malloc_r+0xde>
 80081c6:	6834      	ldr	r4, [r6, #0]
 80081c8:	4626      	mov	r6, r4
 80081ca:	2e00      	cmp	r6, #0
 80081cc:	d140      	bne.n	8008250 <_malloc_r+0xcc>
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	4631      	mov	r1, r6
 80081d2:	4638      	mov	r0, r7
 80081d4:	eb04 0803 	add.w	r8, r4, r3
 80081d8:	f000 fd40 	bl	8008c5c <_sbrk_r>
 80081dc:	4580      	cmp	r8, r0
 80081de:	d13a      	bne.n	8008256 <_malloc_r+0xd2>
 80081e0:	6821      	ldr	r1, [r4, #0]
 80081e2:	3503      	adds	r5, #3
 80081e4:	1a6d      	subs	r5, r5, r1
 80081e6:	f025 0503 	bic.w	r5, r5, #3
 80081ea:	3508      	adds	r5, #8
 80081ec:	2d0c      	cmp	r5, #12
 80081ee:	bf38      	it	cc
 80081f0:	250c      	movcc	r5, #12
 80081f2:	4629      	mov	r1, r5
 80081f4:	4638      	mov	r0, r7
 80081f6:	f7ff ffa5 	bl	8008144 <sbrk_aligned>
 80081fa:	3001      	adds	r0, #1
 80081fc:	d02b      	beq.n	8008256 <_malloc_r+0xd2>
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	442b      	add	r3, r5
 8008202:	6023      	str	r3, [r4, #0]
 8008204:	e00e      	b.n	8008224 <_malloc_r+0xa0>
 8008206:	6822      	ldr	r2, [r4, #0]
 8008208:	1b52      	subs	r2, r2, r5
 800820a:	d41e      	bmi.n	800824a <_malloc_r+0xc6>
 800820c:	2a0b      	cmp	r2, #11
 800820e:	d916      	bls.n	800823e <_malloc_r+0xba>
 8008210:	1961      	adds	r1, r4, r5
 8008212:	42a3      	cmp	r3, r4
 8008214:	6025      	str	r5, [r4, #0]
 8008216:	bf18      	it	ne
 8008218:	6059      	strne	r1, [r3, #4]
 800821a:	6863      	ldr	r3, [r4, #4]
 800821c:	bf08      	it	eq
 800821e:	6031      	streq	r1, [r6, #0]
 8008220:	5162      	str	r2, [r4, r5]
 8008222:	604b      	str	r3, [r1, #4]
 8008224:	4638      	mov	r0, r7
 8008226:	f104 060b 	add.w	r6, r4, #11
 800822a:	f001 fd0d 	bl	8009c48 <__malloc_unlock>
 800822e:	f026 0607 	bic.w	r6, r6, #7
 8008232:	1d23      	adds	r3, r4, #4
 8008234:	1af2      	subs	r2, r6, r3
 8008236:	d0b6      	beq.n	80081a6 <_malloc_r+0x22>
 8008238:	1b9b      	subs	r3, r3, r6
 800823a:	50a3      	str	r3, [r4, r2]
 800823c:	e7b3      	b.n	80081a6 <_malloc_r+0x22>
 800823e:	6862      	ldr	r2, [r4, #4]
 8008240:	42a3      	cmp	r3, r4
 8008242:	bf0c      	ite	eq
 8008244:	6032      	streq	r2, [r6, #0]
 8008246:	605a      	strne	r2, [r3, #4]
 8008248:	e7ec      	b.n	8008224 <_malloc_r+0xa0>
 800824a:	4623      	mov	r3, r4
 800824c:	6864      	ldr	r4, [r4, #4]
 800824e:	e7b2      	b.n	80081b6 <_malloc_r+0x32>
 8008250:	4634      	mov	r4, r6
 8008252:	6876      	ldr	r6, [r6, #4]
 8008254:	e7b9      	b.n	80081ca <_malloc_r+0x46>
 8008256:	230c      	movs	r3, #12
 8008258:	603b      	str	r3, [r7, #0]
 800825a:	4638      	mov	r0, r7
 800825c:	f001 fcf4 	bl	8009c48 <__malloc_unlock>
 8008260:	e7a1      	b.n	80081a6 <_malloc_r+0x22>
 8008262:	6025      	str	r5, [r4, #0]
 8008264:	e7de      	b.n	8008224 <_malloc_r+0xa0>
 8008266:	bf00      	nop
 8008268:	2000a3d0 	.word	0x2000a3d0

0800826c <__cvt>:
 800826c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008270:	ec55 4b10 	vmov	r4, r5, d0
 8008274:	2d00      	cmp	r5, #0
 8008276:	460e      	mov	r6, r1
 8008278:	4619      	mov	r1, r3
 800827a:	462b      	mov	r3, r5
 800827c:	bfbb      	ittet	lt
 800827e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008282:	461d      	movlt	r5, r3
 8008284:	2300      	movge	r3, #0
 8008286:	232d      	movlt	r3, #45	; 0x2d
 8008288:	700b      	strb	r3, [r1, #0]
 800828a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800828c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008290:	4691      	mov	r9, r2
 8008292:	f023 0820 	bic.w	r8, r3, #32
 8008296:	bfbc      	itt	lt
 8008298:	4622      	movlt	r2, r4
 800829a:	4614      	movlt	r4, r2
 800829c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082a0:	d005      	beq.n	80082ae <__cvt+0x42>
 80082a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80082a6:	d100      	bne.n	80082aa <__cvt+0x3e>
 80082a8:	3601      	adds	r6, #1
 80082aa:	2102      	movs	r1, #2
 80082ac:	e000      	b.n	80082b0 <__cvt+0x44>
 80082ae:	2103      	movs	r1, #3
 80082b0:	ab03      	add	r3, sp, #12
 80082b2:	9301      	str	r3, [sp, #4]
 80082b4:	ab02      	add	r3, sp, #8
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	ec45 4b10 	vmov	d0, r4, r5
 80082bc:	4653      	mov	r3, sl
 80082be:	4632      	mov	r2, r6
 80082c0:	f000 fe8e 	bl	8008fe0 <_dtoa_r>
 80082c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80082c8:	4607      	mov	r7, r0
 80082ca:	d102      	bne.n	80082d2 <__cvt+0x66>
 80082cc:	f019 0f01 	tst.w	r9, #1
 80082d0:	d022      	beq.n	8008318 <__cvt+0xac>
 80082d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082d6:	eb07 0906 	add.w	r9, r7, r6
 80082da:	d110      	bne.n	80082fe <__cvt+0x92>
 80082dc:	783b      	ldrb	r3, [r7, #0]
 80082de:	2b30      	cmp	r3, #48	; 0x30
 80082e0:	d10a      	bne.n	80082f8 <__cvt+0x8c>
 80082e2:	2200      	movs	r2, #0
 80082e4:	2300      	movs	r3, #0
 80082e6:	4620      	mov	r0, r4
 80082e8:	4629      	mov	r1, r5
 80082ea:	f7f8 fbed 	bl	8000ac8 <__aeabi_dcmpeq>
 80082ee:	b918      	cbnz	r0, 80082f8 <__cvt+0x8c>
 80082f0:	f1c6 0601 	rsb	r6, r6, #1
 80082f4:	f8ca 6000 	str.w	r6, [sl]
 80082f8:	f8da 3000 	ldr.w	r3, [sl]
 80082fc:	4499      	add	r9, r3
 80082fe:	2200      	movs	r2, #0
 8008300:	2300      	movs	r3, #0
 8008302:	4620      	mov	r0, r4
 8008304:	4629      	mov	r1, r5
 8008306:	f7f8 fbdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800830a:	b108      	cbz	r0, 8008310 <__cvt+0xa4>
 800830c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008310:	2230      	movs	r2, #48	; 0x30
 8008312:	9b03      	ldr	r3, [sp, #12]
 8008314:	454b      	cmp	r3, r9
 8008316:	d307      	bcc.n	8008328 <__cvt+0xbc>
 8008318:	9b03      	ldr	r3, [sp, #12]
 800831a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800831c:	1bdb      	subs	r3, r3, r7
 800831e:	4638      	mov	r0, r7
 8008320:	6013      	str	r3, [r2, #0]
 8008322:	b004      	add	sp, #16
 8008324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008328:	1c59      	adds	r1, r3, #1
 800832a:	9103      	str	r1, [sp, #12]
 800832c:	701a      	strb	r2, [r3, #0]
 800832e:	e7f0      	b.n	8008312 <__cvt+0xa6>

08008330 <__exponent>:
 8008330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008332:	4603      	mov	r3, r0
 8008334:	2900      	cmp	r1, #0
 8008336:	bfb8      	it	lt
 8008338:	4249      	neglt	r1, r1
 800833a:	f803 2b02 	strb.w	r2, [r3], #2
 800833e:	bfb4      	ite	lt
 8008340:	222d      	movlt	r2, #45	; 0x2d
 8008342:	222b      	movge	r2, #43	; 0x2b
 8008344:	2909      	cmp	r1, #9
 8008346:	7042      	strb	r2, [r0, #1]
 8008348:	dd2a      	ble.n	80083a0 <__exponent+0x70>
 800834a:	f10d 0407 	add.w	r4, sp, #7
 800834e:	46a4      	mov	ip, r4
 8008350:	270a      	movs	r7, #10
 8008352:	46a6      	mov	lr, r4
 8008354:	460a      	mov	r2, r1
 8008356:	fb91 f6f7 	sdiv	r6, r1, r7
 800835a:	fb07 1516 	mls	r5, r7, r6, r1
 800835e:	3530      	adds	r5, #48	; 0x30
 8008360:	2a63      	cmp	r2, #99	; 0x63
 8008362:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008366:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800836a:	4631      	mov	r1, r6
 800836c:	dcf1      	bgt.n	8008352 <__exponent+0x22>
 800836e:	3130      	adds	r1, #48	; 0x30
 8008370:	f1ae 0502 	sub.w	r5, lr, #2
 8008374:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008378:	1c44      	adds	r4, r0, #1
 800837a:	4629      	mov	r1, r5
 800837c:	4561      	cmp	r1, ip
 800837e:	d30a      	bcc.n	8008396 <__exponent+0x66>
 8008380:	f10d 0209 	add.w	r2, sp, #9
 8008384:	eba2 020e 	sub.w	r2, r2, lr
 8008388:	4565      	cmp	r5, ip
 800838a:	bf88      	it	hi
 800838c:	2200      	movhi	r2, #0
 800838e:	4413      	add	r3, r2
 8008390:	1a18      	subs	r0, r3, r0
 8008392:	b003      	add	sp, #12
 8008394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008396:	f811 2b01 	ldrb.w	r2, [r1], #1
 800839a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800839e:	e7ed      	b.n	800837c <__exponent+0x4c>
 80083a0:	2330      	movs	r3, #48	; 0x30
 80083a2:	3130      	adds	r1, #48	; 0x30
 80083a4:	7083      	strb	r3, [r0, #2]
 80083a6:	70c1      	strb	r1, [r0, #3]
 80083a8:	1d03      	adds	r3, r0, #4
 80083aa:	e7f1      	b.n	8008390 <__exponent+0x60>

080083ac <_printf_float>:
 80083ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b0:	ed2d 8b02 	vpush	{d8}
 80083b4:	b08d      	sub	sp, #52	; 0x34
 80083b6:	460c      	mov	r4, r1
 80083b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80083bc:	4616      	mov	r6, r2
 80083be:	461f      	mov	r7, r3
 80083c0:	4605      	mov	r5, r0
 80083c2:	f001 fc1d 	bl	8009c00 <_localeconv_r>
 80083c6:	f8d0 a000 	ldr.w	sl, [r0]
 80083ca:	4650      	mov	r0, sl
 80083cc:	f7f7 ff00 	bl	80001d0 <strlen>
 80083d0:	2300      	movs	r3, #0
 80083d2:	930a      	str	r3, [sp, #40]	; 0x28
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	9305      	str	r3, [sp, #20]
 80083d8:	f8d8 3000 	ldr.w	r3, [r8]
 80083dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80083e0:	3307      	adds	r3, #7
 80083e2:	f023 0307 	bic.w	r3, r3, #7
 80083e6:	f103 0208 	add.w	r2, r3, #8
 80083ea:	f8c8 2000 	str.w	r2, [r8]
 80083ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80083f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80083fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083fe:	9307      	str	r3, [sp, #28]
 8008400:	f8cd 8018 	str.w	r8, [sp, #24]
 8008404:	ee08 0a10 	vmov	s16, r0
 8008408:	4b9f      	ldr	r3, [pc, #636]	; (8008688 <_printf_float+0x2dc>)
 800840a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800840e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008412:	f7f8 fb8b 	bl	8000b2c <__aeabi_dcmpun>
 8008416:	bb88      	cbnz	r0, 800847c <_printf_float+0xd0>
 8008418:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800841c:	4b9a      	ldr	r3, [pc, #616]	; (8008688 <_printf_float+0x2dc>)
 800841e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008422:	f7f8 fb65 	bl	8000af0 <__aeabi_dcmple>
 8008426:	bb48      	cbnz	r0, 800847c <_printf_float+0xd0>
 8008428:	2200      	movs	r2, #0
 800842a:	2300      	movs	r3, #0
 800842c:	4640      	mov	r0, r8
 800842e:	4649      	mov	r1, r9
 8008430:	f7f8 fb54 	bl	8000adc <__aeabi_dcmplt>
 8008434:	b110      	cbz	r0, 800843c <_printf_float+0x90>
 8008436:	232d      	movs	r3, #45	; 0x2d
 8008438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800843c:	4b93      	ldr	r3, [pc, #588]	; (800868c <_printf_float+0x2e0>)
 800843e:	4894      	ldr	r0, [pc, #592]	; (8008690 <_printf_float+0x2e4>)
 8008440:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008444:	bf94      	ite	ls
 8008446:	4698      	movls	r8, r3
 8008448:	4680      	movhi	r8, r0
 800844a:	2303      	movs	r3, #3
 800844c:	6123      	str	r3, [r4, #16]
 800844e:	9b05      	ldr	r3, [sp, #20]
 8008450:	f023 0204 	bic.w	r2, r3, #4
 8008454:	6022      	str	r2, [r4, #0]
 8008456:	f04f 0900 	mov.w	r9, #0
 800845a:	9700      	str	r7, [sp, #0]
 800845c:	4633      	mov	r3, r6
 800845e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008460:	4621      	mov	r1, r4
 8008462:	4628      	mov	r0, r5
 8008464:	f000 f9d8 	bl	8008818 <_printf_common>
 8008468:	3001      	adds	r0, #1
 800846a:	f040 8090 	bne.w	800858e <_printf_float+0x1e2>
 800846e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008472:	b00d      	add	sp, #52	; 0x34
 8008474:	ecbd 8b02 	vpop	{d8}
 8008478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800847c:	4642      	mov	r2, r8
 800847e:	464b      	mov	r3, r9
 8008480:	4640      	mov	r0, r8
 8008482:	4649      	mov	r1, r9
 8008484:	f7f8 fb52 	bl	8000b2c <__aeabi_dcmpun>
 8008488:	b140      	cbz	r0, 800849c <_printf_float+0xf0>
 800848a:	464b      	mov	r3, r9
 800848c:	2b00      	cmp	r3, #0
 800848e:	bfbc      	itt	lt
 8008490:	232d      	movlt	r3, #45	; 0x2d
 8008492:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008496:	487f      	ldr	r0, [pc, #508]	; (8008694 <_printf_float+0x2e8>)
 8008498:	4b7f      	ldr	r3, [pc, #508]	; (8008698 <_printf_float+0x2ec>)
 800849a:	e7d1      	b.n	8008440 <_printf_float+0x94>
 800849c:	6863      	ldr	r3, [r4, #4]
 800849e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80084a2:	9206      	str	r2, [sp, #24]
 80084a4:	1c5a      	adds	r2, r3, #1
 80084a6:	d13f      	bne.n	8008528 <_printf_float+0x17c>
 80084a8:	2306      	movs	r3, #6
 80084aa:	6063      	str	r3, [r4, #4]
 80084ac:	9b05      	ldr	r3, [sp, #20]
 80084ae:	6861      	ldr	r1, [r4, #4]
 80084b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80084b4:	2300      	movs	r3, #0
 80084b6:	9303      	str	r3, [sp, #12]
 80084b8:	ab0a      	add	r3, sp, #40	; 0x28
 80084ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80084be:	ab09      	add	r3, sp, #36	; 0x24
 80084c0:	ec49 8b10 	vmov	d0, r8, r9
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	6022      	str	r2, [r4, #0]
 80084c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80084cc:	4628      	mov	r0, r5
 80084ce:	f7ff fecd 	bl	800826c <__cvt>
 80084d2:	9b06      	ldr	r3, [sp, #24]
 80084d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084d6:	2b47      	cmp	r3, #71	; 0x47
 80084d8:	4680      	mov	r8, r0
 80084da:	d108      	bne.n	80084ee <_printf_float+0x142>
 80084dc:	1cc8      	adds	r0, r1, #3
 80084de:	db02      	blt.n	80084e6 <_printf_float+0x13a>
 80084e0:	6863      	ldr	r3, [r4, #4]
 80084e2:	4299      	cmp	r1, r3
 80084e4:	dd41      	ble.n	800856a <_printf_float+0x1be>
 80084e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80084ea:	fa5f fb8b 	uxtb.w	fp, fp
 80084ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084f2:	d820      	bhi.n	8008536 <_printf_float+0x18a>
 80084f4:	3901      	subs	r1, #1
 80084f6:	465a      	mov	r2, fp
 80084f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80084fc:	9109      	str	r1, [sp, #36]	; 0x24
 80084fe:	f7ff ff17 	bl	8008330 <__exponent>
 8008502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008504:	1813      	adds	r3, r2, r0
 8008506:	2a01      	cmp	r2, #1
 8008508:	4681      	mov	r9, r0
 800850a:	6123      	str	r3, [r4, #16]
 800850c:	dc02      	bgt.n	8008514 <_printf_float+0x168>
 800850e:	6822      	ldr	r2, [r4, #0]
 8008510:	07d2      	lsls	r2, r2, #31
 8008512:	d501      	bpl.n	8008518 <_printf_float+0x16c>
 8008514:	3301      	adds	r3, #1
 8008516:	6123      	str	r3, [r4, #16]
 8008518:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800851c:	2b00      	cmp	r3, #0
 800851e:	d09c      	beq.n	800845a <_printf_float+0xae>
 8008520:	232d      	movs	r3, #45	; 0x2d
 8008522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008526:	e798      	b.n	800845a <_printf_float+0xae>
 8008528:	9a06      	ldr	r2, [sp, #24]
 800852a:	2a47      	cmp	r2, #71	; 0x47
 800852c:	d1be      	bne.n	80084ac <_printf_float+0x100>
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1bc      	bne.n	80084ac <_printf_float+0x100>
 8008532:	2301      	movs	r3, #1
 8008534:	e7b9      	b.n	80084aa <_printf_float+0xfe>
 8008536:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800853a:	d118      	bne.n	800856e <_printf_float+0x1c2>
 800853c:	2900      	cmp	r1, #0
 800853e:	6863      	ldr	r3, [r4, #4]
 8008540:	dd0b      	ble.n	800855a <_printf_float+0x1ae>
 8008542:	6121      	str	r1, [r4, #16]
 8008544:	b913      	cbnz	r3, 800854c <_printf_float+0x1a0>
 8008546:	6822      	ldr	r2, [r4, #0]
 8008548:	07d0      	lsls	r0, r2, #31
 800854a:	d502      	bpl.n	8008552 <_printf_float+0x1a6>
 800854c:	3301      	adds	r3, #1
 800854e:	440b      	add	r3, r1
 8008550:	6123      	str	r3, [r4, #16]
 8008552:	65a1      	str	r1, [r4, #88]	; 0x58
 8008554:	f04f 0900 	mov.w	r9, #0
 8008558:	e7de      	b.n	8008518 <_printf_float+0x16c>
 800855a:	b913      	cbnz	r3, 8008562 <_printf_float+0x1b6>
 800855c:	6822      	ldr	r2, [r4, #0]
 800855e:	07d2      	lsls	r2, r2, #31
 8008560:	d501      	bpl.n	8008566 <_printf_float+0x1ba>
 8008562:	3302      	adds	r3, #2
 8008564:	e7f4      	b.n	8008550 <_printf_float+0x1a4>
 8008566:	2301      	movs	r3, #1
 8008568:	e7f2      	b.n	8008550 <_printf_float+0x1a4>
 800856a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800856e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008570:	4299      	cmp	r1, r3
 8008572:	db05      	blt.n	8008580 <_printf_float+0x1d4>
 8008574:	6823      	ldr	r3, [r4, #0]
 8008576:	6121      	str	r1, [r4, #16]
 8008578:	07d8      	lsls	r0, r3, #31
 800857a:	d5ea      	bpl.n	8008552 <_printf_float+0x1a6>
 800857c:	1c4b      	adds	r3, r1, #1
 800857e:	e7e7      	b.n	8008550 <_printf_float+0x1a4>
 8008580:	2900      	cmp	r1, #0
 8008582:	bfd4      	ite	le
 8008584:	f1c1 0202 	rsble	r2, r1, #2
 8008588:	2201      	movgt	r2, #1
 800858a:	4413      	add	r3, r2
 800858c:	e7e0      	b.n	8008550 <_printf_float+0x1a4>
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	055a      	lsls	r2, r3, #21
 8008592:	d407      	bmi.n	80085a4 <_printf_float+0x1f8>
 8008594:	6923      	ldr	r3, [r4, #16]
 8008596:	4642      	mov	r2, r8
 8008598:	4631      	mov	r1, r6
 800859a:	4628      	mov	r0, r5
 800859c:	47b8      	blx	r7
 800859e:	3001      	adds	r0, #1
 80085a0:	d12c      	bne.n	80085fc <_printf_float+0x250>
 80085a2:	e764      	b.n	800846e <_printf_float+0xc2>
 80085a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80085a8:	f240 80e0 	bls.w	800876c <_printf_float+0x3c0>
 80085ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085b0:	2200      	movs	r2, #0
 80085b2:	2300      	movs	r3, #0
 80085b4:	f7f8 fa88 	bl	8000ac8 <__aeabi_dcmpeq>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d034      	beq.n	8008626 <_printf_float+0x27a>
 80085bc:	4a37      	ldr	r2, [pc, #220]	; (800869c <_printf_float+0x2f0>)
 80085be:	2301      	movs	r3, #1
 80085c0:	4631      	mov	r1, r6
 80085c2:	4628      	mov	r0, r5
 80085c4:	47b8      	blx	r7
 80085c6:	3001      	adds	r0, #1
 80085c8:	f43f af51 	beq.w	800846e <_printf_float+0xc2>
 80085cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085d0:	429a      	cmp	r2, r3
 80085d2:	db02      	blt.n	80085da <_printf_float+0x22e>
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	07d8      	lsls	r0, r3, #31
 80085d8:	d510      	bpl.n	80085fc <_printf_float+0x250>
 80085da:	ee18 3a10 	vmov	r3, s16
 80085de:	4652      	mov	r2, sl
 80085e0:	4631      	mov	r1, r6
 80085e2:	4628      	mov	r0, r5
 80085e4:	47b8      	blx	r7
 80085e6:	3001      	adds	r0, #1
 80085e8:	f43f af41 	beq.w	800846e <_printf_float+0xc2>
 80085ec:	f04f 0800 	mov.w	r8, #0
 80085f0:	f104 091a 	add.w	r9, r4, #26
 80085f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f6:	3b01      	subs	r3, #1
 80085f8:	4543      	cmp	r3, r8
 80085fa:	dc09      	bgt.n	8008610 <_printf_float+0x264>
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	079b      	lsls	r3, r3, #30
 8008600:	f100 8105 	bmi.w	800880e <_printf_float+0x462>
 8008604:	68e0      	ldr	r0, [r4, #12]
 8008606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008608:	4298      	cmp	r0, r3
 800860a:	bfb8      	it	lt
 800860c:	4618      	movlt	r0, r3
 800860e:	e730      	b.n	8008472 <_printf_float+0xc6>
 8008610:	2301      	movs	r3, #1
 8008612:	464a      	mov	r2, r9
 8008614:	4631      	mov	r1, r6
 8008616:	4628      	mov	r0, r5
 8008618:	47b8      	blx	r7
 800861a:	3001      	adds	r0, #1
 800861c:	f43f af27 	beq.w	800846e <_printf_float+0xc2>
 8008620:	f108 0801 	add.w	r8, r8, #1
 8008624:	e7e6      	b.n	80085f4 <_printf_float+0x248>
 8008626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008628:	2b00      	cmp	r3, #0
 800862a:	dc39      	bgt.n	80086a0 <_printf_float+0x2f4>
 800862c:	4a1b      	ldr	r2, [pc, #108]	; (800869c <_printf_float+0x2f0>)
 800862e:	2301      	movs	r3, #1
 8008630:	4631      	mov	r1, r6
 8008632:	4628      	mov	r0, r5
 8008634:	47b8      	blx	r7
 8008636:	3001      	adds	r0, #1
 8008638:	f43f af19 	beq.w	800846e <_printf_float+0xc2>
 800863c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008640:	4313      	orrs	r3, r2
 8008642:	d102      	bne.n	800864a <_printf_float+0x29e>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	07d9      	lsls	r1, r3, #31
 8008648:	d5d8      	bpl.n	80085fc <_printf_float+0x250>
 800864a:	ee18 3a10 	vmov	r3, s16
 800864e:	4652      	mov	r2, sl
 8008650:	4631      	mov	r1, r6
 8008652:	4628      	mov	r0, r5
 8008654:	47b8      	blx	r7
 8008656:	3001      	adds	r0, #1
 8008658:	f43f af09 	beq.w	800846e <_printf_float+0xc2>
 800865c:	f04f 0900 	mov.w	r9, #0
 8008660:	f104 0a1a 	add.w	sl, r4, #26
 8008664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008666:	425b      	negs	r3, r3
 8008668:	454b      	cmp	r3, r9
 800866a:	dc01      	bgt.n	8008670 <_printf_float+0x2c4>
 800866c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800866e:	e792      	b.n	8008596 <_printf_float+0x1ea>
 8008670:	2301      	movs	r3, #1
 8008672:	4652      	mov	r2, sl
 8008674:	4631      	mov	r1, r6
 8008676:	4628      	mov	r0, r5
 8008678:	47b8      	blx	r7
 800867a:	3001      	adds	r0, #1
 800867c:	f43f aef7 	beq.w	800846e <_printf_float+0xc2>
 8008680:	f109 0901 	add.w	r9, r9, #1
 8008684:	e7ee      	b.n	8008664 <_printf_float+0x2b8>
 8008686:	bf00      	nop
 8008688:	7fefffff 	.word	0x7fefffff
 800868c:	0800d9e4 	.word	0x0800d9e4
 8008690:	0800d9e8 	.word	0x0800d9e8
 8008694:	0800d9f0 	.word	0x0800d9f0
 8008698:	0800d9ec 	.word	0x0800d9ec
 800869c:	0800d9f4 	.word	0x0800d9f4
 80086a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086a4:	429a      	cmp	r2, r3
 80086a6:	bfa8      	it	ge
 80086a8:	461a      	movge	r2, r3
 80086aa:	2a00      	cmp	r2, #0
 80086ac:	4691      	mov	r9, r2
 80086ae:	dc37      	bgt.n	8008720 <_printf_float+0x374>
 80086b0:	f04f 0b00 	mov.w	fp, #0
 80086b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086b8:	f104 021a 	add.w	r2, r4, #26
 80086bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086be:	9305      	str	r3, [sp, #20]
 80086c0:	eba3 0309 	sub.w	r3, r3, r9
 80086c4:	455b      	cmp	r3, fp
 80086c6:	dc33      	bgt.n	8008730 <_printf_float+0x384>
 80086c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086cc:	429a      	cmp	r2, r3
 80086ce:	db3b      	blt.n	8008748 <_printf_float+0x39c>
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	07da      	lsls	r2, r3, #31
 80086d4:	d438      	bmi.n	8008748 <_printf_float+0x39c>
 80086d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086d8:	9a05      	ldr	r2, [sp, #20]
 80086da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086dc:	1a9a      	subs	r2, r3, r2
 80086de:	eba3 0901 	sub.w	r9, r3, r1
 80086e2:	4591      	cmp	r9, r2
 80086e4:	bfa8      	it	ge
 80086e6:	4691      	movge	r9, r2
 80086e8:	f1b9 0f00 	cmp.w	r9, #0
 80086ec:	dc35      	bgt.n	800875a <_printf_float+0x3ae>
 80086ee:	f04f 0800 	mov.w	r8, #0
 80086f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086f6:	f104 0a1a 	add.w	sl, r4, #26
 80086fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086fe:	1a9b      	subs	r3, r3, r2
 8008700:	eba3 0309 	sub.w	r3, r3, r9
 8008704:	4543      	cmp	r3, r8
 8008706:	f77f af79 	ble.w	80085fc <_printf_float+0x250>
 800870a:	2301      	movs	r3, #1
 800870c:	4652      	mov	r2, sl
 800870e:	4631      	mov	r1, r6
 8008710:	4628      	mov	r0, r5
 8008712:	47b8      	blx	r7
 8008714:	3001      	adds	r0, #1
 8008716:	f43f aeaa 	beq.w	800846e <_printf_float+0xc2>
 800871a:	f108 0801 	add.w	r8, r8, #1
 800871e:	e7ec      	b.n	80086fa <_printf_float+0x34e>
 8008720:	4613      	mov	r3, r2
 8008722:	4631      	mov	r1, r6
 8008724:	4642      	mov	r2, r8
 8008726:	4628      	mov	r0, r5
 8008728:	47b8      	blx	r7
 800872a:	3001      	adds	r0, #1
 800872c:	d1c0      	bne.n	80086b0 <_printf_float+0x304>
 800872e:	e69e      	b.n	800846e <_printf_float+0xc2>
 8008730:	2301      	movs	r3, #1
 8008732:	4631      	mov	r1, r6
 8008734:	4628      	mov	r0, r5
 8008736:	9205      	str	r2, [sp, #20]
 8008738:	47b8      	blx	r7
 800873a:	3001      	adds	r0, #1
 800873c:	f43f ae97 	beq.w	800846e <_printf_float+0xc2>
 8008740:	9a05      	ldr	r2, [sp, #20]
 8008742:	f10b 0b01 	add.w	fp, fp, #1
 8008746:	e7b9      	b.n	80086bc <_printf_float+0x310>
 8008748:	ee18 3a10 	vmov	r3, s16
 800874c:	4652      	mov	r2, sl
 800874e:	4631      	mov	r1, r6
 8008750:	4628      	mov	r0, r5
 8008752:	47b8      	blx	r7
 8008754:	3001      	adds	r0, #1
 8008756:	d1be      	bne.n	80086d6 <_printf_float+0x32a>
 8008758:	e689      	b.n	800846e <_printf_float+0xc2>
 800875a:	9a05      	ldr	r2, [sp, #20]
 800875c:	464b      	mov	r3, r9
 800875e:	4442      	add	r2, r8
 8008760:	4631      	mov	r1, r6
 8008762:	4628      	mov	r0, r5
 8008764:	47b8      	blx	r7
 8008766:	3001      	adds	r0, #1
 8008768:	d1c1      	bne.n	80086ee <_printf_float+0x342>
 800876a:	e680      	b.n	800846e <_printf_float+0xc2>
 800876c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800876e:	2a01      	cmp	r2, #1
 8008770:	dc01      	bgt.n	8008776 <_printf_float+0x3ca>
 8008772:	07db      	lsls	r3, r3, #31
 8008774:	d538      	bpl.n	80087e8 <_printf_float+0x43c>
 8008776:	2301      	movs	r3, #1
 8008778:	4642      	mov	r2, r8
 800877a:	4631      	mov	r1, r6
 800877c:	4628      	mov	r0, r5
 800877e:	47b8      	blx	r7
 8008780:	3001      	adds	r0, #1
 8008782:	f43f ae74 	beq.w	800846e <_printf_float+0xc2>
 8008786:	ee18 3a10 	vmov	r3, s16
 800878a:	4652      	mov	r2, sl
 800878c:	4631      	mov	r1, r6
 800878e:	4628      	mov	r0, r5
 8008790:	47b8      	blx	r7
 8008792:	3001      	adds	r0, #1
 8008794:	f43f ae6b 	beq.w	800846e <_printf_float+0xc2>
 8008798:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800879c:	2200      	movs	r2, #0
 800879e:	2300      	movs	r3, #0
 80087a0:	f7f8 f992 	bl	8000ac8 <__aeabi_dcmpeq>
 80087a4:	b9d8      	cbnz	r0, 80087de <_printf_float+0x432>
 80087a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a8:	f108 0201 	add.w	r2, r8, #1
 80087ac:	3b01      	subs	r3, #1
 80087ae:	4631      	mov	r1, r6
 80087b0:	4628      	mov	r0, r5
 80087b2:	47b8      	blx	r7
 80087b4:	3001      	adds	r0, #1
 80087b6:	d10e      	bne.n	80087d6 <_printf_float+0x42a>
 80087b8:	e659      	b.n	800846e <_printf_float+0xc2>
 80087ba:	2301      	movs	r3, #1
 80087bc:	4652      	mov	r2, sl
 80087be:	4631      	mov	r1, r6
 80087c0:	4628      	mov	r0, r5
 80087c2:	47b8      	blx	r7
 80087c4:	3001      	adds	r0, #1
 80087c6:	f43f ae52 	beq.w	800846e <_printf_float+0xc2>
 80087ca:	f108 0801 	add.w	r8, r8, #1
 80087ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087d0:	3b01      	subs	r3, #1
 80087d2:	4543      	cmp	r3, r8
 80087d4:	dcf1      	bgt.n	80087ba <_printf_float+0x40e>
 80087d6:	464b      	mov	r3, r9
 80087d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80087dc:	e6dc      	b.n	8008598 <_printf_float+0x1ec>
 80087de:	f04f 0800 	mov.w	r8, #0
 80087e2:	f104 0a1a 	add.w	sl, r4, #26
 80087e6:	e7f2      	b.n	80087ce <_printf_float+0x422>
 80087e8:	2301      	movs	r3, #1
 80087ea:	4642      	mov	r2, r8
 80087ec:	e7df      	b.n	80087ae <_printf_float+0x402>
 80087ee:	2301      	movs	r3, #1
 80087f0:	464a      	mov	r2, r9
 80087f2:	4631      	mov	r1, r6
 80087f4:	4628      	mov	r0, r5
 80087f6:	47b8      	blx	r7
 80087f8:	3001      	adds	r0, #1
 80087fa:	f43f ae38 	beq.w	800846e <_printf_float+0xc2>
 80087fe:	f108 0801 	add.w	r8, r8, #1
 8008802:	68e3      	ldr	r3, [r4, #12]
 8008804:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008806:	1a5b      	subs	r3, r3, r1
 8008808:	4543      	cmp	r3, r8
 800880a:	dcf0      	bgt.n	80087ee <_printf_float+0x442>
 800880c:	e6fa      	b.n	8008604 <_printf_float+0x258>
 800880e:	f04f 0800 	mov.w	r8, #0
 8008812:	f104 0919 	add.w	r9, r4, #25
 8008816:	e7f4      	b.n	8008802 <_printf_float+0x456>

08008818 <_printf_common>:
 8008818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800881c:	4616      	mov	r6, r2
 800881e:	4699      	mov	r9, r3
 8008820:	688a      	ldr	r2, [r1, #8]
 8008822:	690b      	ldr	r3, [r1, #16]
 8008824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008828:	4293      	cmp	r3, r2
 800882a:	bfb8      	it	lt
 800882c:	4613      	movlt	r3, r2
 800882e:	6033      	str	r3, [r6, #0]
 8008830:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008834:	4607      	mov	r7, r0
 8008836:	460c      	mov	r4, r1
 8008838:	b10a      	cbz	r2, 800883e <_printf_common+0x26>
 800883a:	3301      	adds	r3, #1
 800883c:	6033      	str	r3, [r6, #0]
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	0699      	lsls	r1, r3, #26
 8008842:	bf42      	ittt	mi
 8008844:	6833      	ldrmi	r3, [r6, #0]
 8008846:	3302      	addmi	r3, #2
 8008848:	6033      	strmi	r3, [r6, #0]
 800884a:	6825      	ldr	r5, [r4, #0]
 800884c:	f015 0506 	ands.w	r5, r5, #6
 8008850:	d106      	bne.n	8008860 <_printf_common+0x48>
 8008852:	f104 0a19 	add.w	sl, r4, #25
 8008856:	68e3      	ldr	r3, [r4, #12]
 8008858:	6832      	ldr	r2, [r6, #0]
 800885a:	1a9b      	subs	r3, r3, r2
 800885c:	42ab      	cmp	r3, r5
 800885e:	dc26      	bgt.n	80088ae <_printf_common+0x96>
 8008860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008864:	1e13      	subs	r3, r2, #0
 8008866:	6822      	ldr	r2, [r4, #0]
 8008868:	bf18      	it	ne
 800886a:	2301      	movne	r3, #1
 800886c:	0692      	lsls	r2, r2, #26
 800886e:	d42b      	bmi.n	80088c8 <_printf_common+0xb0>
 8008870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008874:	4649      	mov	r1, r9
 8008876:	4638      	mov	r0, r7
 8008878:	47c0      	blx	r8
 800887a:	3001      	adds	r0, #1
 800887c:	d01e      	beq.n	80088bc <_printf_common+0xa4>
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	68e5      	ldr	r5, [r4, #12]
 8008882:	6832      	ldr	r2, [r6, #0]
 8008884:	f003 0306 	and.w	r3, r3, #6
 8008888:	2b04      	cmp	r3, #4
 800888a:	bf08      	it	eq
 800888c:	1aad      	subeq	r5, r5, r2
 800888e:	68a3      	ldr	r3, [r4, #8]
 8008890:	6922      	ldr	r2, [r4, #16]
 8008892:	bf0c      	ite	eq
 8008894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008898:	2500      	movne	r5, #0
 800889a:	4293      	cmp	r3, r2
 800889c:	bfc4      	itt	gt
 800889e:	1a9b      	subgt	r3, r3, r2
 80088a0:	18ed      	addgt	r5, r5, r3
 80088a2:	2600      	movs	r6, #0
 80088a4:	341a      	adds	r4, #26
 80088a6:	42b5      	cmp	r5, r6
 80088a8:	d11a      	bne.n	80088e0 <_printf_common+0xc8>
 80088aa:	2000      	movs	r0, #0
 80088ac:	e008      	b.n	80088c0 <_printf_common+0xa8>
 80088ae:	2301      	movs	r3, #1
 80088b0:	4652      	mov	r2, sl
 80088b2:	4649      	mov	r1, r9
 80088b4:	4638      	mov	r0, r7
 80088b6:	47c0      	blx	r8
 80088b8:	3001      	adds	r0, #1
 80088ba:	d103      	bne.n	80088c4 <_printf_common+0xac>
 80088bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c4:	3501      	adds	r5, #1
 80088c6:	e7c6      	b.n	8008856 <_printf_common+0x3e>
 80088c8:	18e1      	adds	r1, r4, r3
 80088ca:	1c5a      	adds	r2, r3, #1
 80088cc:	2030      	movs	r0, #48	; 0x30
 80088ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088d2:	4422      	add	r2, r4
 80088d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088dc:	3302      	adds	r3, #2
 80088de:	e7c7      	b.n	8008870 <_printf_common+0x58>
 80088e0:	2301      	movs	r3, #1
 80088e2:	4622      	mov	r2, r4
 80088e4:	4649      	mov	r1, r9
 80088e6:	4638      	mov	r0, r7
 80088e8:	47c0      	blx	r8
 80088ea:	3001      	adds	r0, #1
 80088ec:	d0e6      	beq.n	80088bc <_printf_common+0xa4>
 80088ee:	3601      	adds	r6, #1
 80088f0:	e7d9      	b.n	80088a6 <_printf_common+0x8e>
	...

080088f4 <_printf_i>:
 80088f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088f8:	7e0f      	ldrb	r7, [r1, #24]
 80088fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088fc:	2f78      	cmp	r7, #120	; 0x78
 80088fe:	4691      	mov	r9, r2
 8008900:	4680      	mov	r8, r0
 8008902:	460c      	mov	r4, r1
 8008904:	469a      	mov	sl, r3
 8008906:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800890a:	d807      	bhi.n	800891c <_printf_i+0x28>
 800890c:	2f62      	cmp	r7, #98	; 0x62
 800890e:	d80a      	bhi.n	8008926 <_printf_i+0x32>
 8008910:	2f00      	cmp	r7, #0
 8008912:	f000 80d8 	beq.w	8008ac6 <_printf_i+0x1d2>
 8008916:	2f58      	cmp	r7, #88	; 0x58
 8008918:	f000 80a3 	beq.w	8008a62 <_printf_i+0x16e>
 800891c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008920:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008924:	e03a      	b.n	800899c <_printf_i+0xa8>
 8008926:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800892a:	2b15      	cmp	r3, #21
 800892c:	d8f6      	bhi.n	800891c <_printf_i+0x28>
 800892e:	a101      	add	r1, pc, #4	; (adr r1, 8008934 <_printf_i+0x40>)
 8008930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008934:	0800898d 	.word	0x0800898d
 8008938:	080089a1 	.word	0x080089a1
 800893c:	0800891d 	.word	0x0800891d
 8008940:	0800891d 	.word	0x0800891d
 8008944:	0800891d 	.word	0x0800891d
 8008948:	0800891d 	.word	0x0800891d
 800894c:	080089a1 	.word	0x080089a1
 8008950:	0800891d 	.word	0x0800891d
 8008954:	0800891d 	.word	0x0800891d
 8008958:	0800891d 	.word	0x0800891d
 800895c:	0800891d 	.word	0x0800891d
 8008960:	08008aad 	.word	0x08008aad
 8008964:	080089d1 	.word	0x080089d1
 8008968:	08008a8f 	.word	0x08008a8f
 800896c:	0800891d 	.word	0x0800891d
 8008970:	0800891d 	.word	0x0800891d
 8008974:	08008acf 	.word	0x08008acf
 8008978:	0800891d 	.word	0x0800891d
 800897c:	080089d1 	.word	0x080089d1
 8008980:	0800891d 	.word	0x0800891d
 8008984:	0800891d 	.word	0x0800891d
 8008988:	08008a97 	.word	0x08008a97
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	1d1a      	adds	r2, r3, #4
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	602a      	str	r2, [r5, #0]
 8008994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800899c:	2301      	movs	r3, #1
 800899e:	e0a3      	b.n	8008ae8 <_printf_i+0x1f4>
 80089a0:	6820      	ldr	r0, [r4, #0]
 80089a2:	6829      	ldr	r1, [r5, #0]
 80089a4:	0606      	lsls	r6, r0, #24
 80089a6:	f101 0304 	add.w	r3, r1, #4
 80089aa:	d50a      	bpl.n	80089c2 <_printf_i+0xce>
 80089ac:	680e      	ldr	r6, [r1, #0]
 80089ae:	602b      	str	r3, [r5, #0]
 80089b0:	2e00      	cmp	r6, #0
 80089b2:	da03      	bge.n	80089bc <_printf_i+0xc8>
 80089b4:	232d      	movs	r3, #45	; 0x2d
 80089b6:	4276      	negs	r6, r6
 80089b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089bc:	485e      	ldr	r0, [pc, #376]	; (8008b38 <_printf_i+0x244>)
 80089be:	230a      	movs	r3, #10
 80089c0:	e019      	b.n	80089f6 <_printf_i+0x102>
 80089c2:	680e      	ldr	r6, [r1, #0]
 80089c4:	602b      	str	r3, [r5, #0]
 80089c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089ca:	bf18      	it	ne
 80089cc:	b236      	sxthne	r6, r6
 80089ce:	e7ef      	b.n	80089b0 <_printf_i+0xbc>
 80089d0:	682b      	ldr	r3, [r5, #0]
 80089d2:	6820      	ldr	r0, [r4, #0]
 80089d4:	1d19      	adds	r1, r3, #4
 80089d6:	6029      	str	r1, [r5, #0]
 80089d8:	0601      	lsls	r1, r0, #24
 80089da:	d501      	bpl.n	80089e0 <_printf_i+0xec>
 80089dc:	681e      	ldr	r6, [r3, #0]
 80089de:	e002      	b.n	80089e6 <_printf_i+0xf2>
 80089e0:	0646      	lsls	r6, r0, #25
 80089e2:	d5fb      	bpl.n	80089dc <_printf_i+0xe8>
 80089e4:	881e      	ldrh	r6, [r3, #0]
 80089e6:	4854      	ldr	r0, [pc, #336]	; (8008b38 <_printf_i+0x244>)
 80089e8:	2f6f      	cmp	r7, #111	; 0x6f
 80089ea:	bf0c      	ite	eq
 80089ec:	2308      	moveq	r3, #8
 80089ee:	230a      	movne	r3, #10
 80089f0:	2100      	movs	r1, #0
 80089f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089f6:	6865      	ldr	r5, [r4, #4]
 80089f8:	60a5      	str	r5, [r4, #8]
 80089fa:	2d00      	cmp	r5, #0
 80089fc:	bfa2      	ittt	ge
 80089fe:	6821      	ldrge	r1, [r4, #0]
 8008a00:	f021 0104 	bicge.w	r1, r1, #4
 8008a04:	6021      	strge	r1, [r4, #0]
 8008a06:	b90e      	cbnz	r6, 8008a0c <_printf_i+0x118>
 8008a08:	2d00      	cmp	r5, #0
 8008a0a:	d04d      	beq.n	8008aa8 <_printf_i+0x1b4>
 8008a0c:	4615      	mov	r5, r2
 8008a0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a12:	fb03 6711 	mls	r7, r3, r1, r6
 8008a16:	5dc7      	ldrb	r7, [r0, r7]
 8008a18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a1c:	4637      	mov	r7, r6
 8008a1e:	42bb      	cmp	r3, r7
 8008a20:	460e      	mov	r6, r1
 8008a22:	d9f4      	bls.n	8008a0e <_printf_i+0x11a>
 8008a24:	2b08      	cmp	r3, #8
 8008a26:	d10b      	bne.n	8008a40 <_printf_i+0x14c>
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	07de      	lsls	r6, r3, #31
 8008a2c:	d508      	bpl.n	8008a40 <_printf_i+0x14c>
 8008a2e:	6923      	ldr	r3, [r4, #16]
 8008a30:	6861      	ldr	r1, [r4, #4]
 8008a32:	4299      	cmp	r1, r3
 8008a34:	bfde      	ittt	le
 8008a36:	2330      	movle	r3, #48	; 0x30
 8008a38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a3c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008a40:	1b52      	subs	r2, r2, r5
 8008a42:	6122      	str	r2, [r4, #16]
 8008a44:	f8cd a000 	str.w	sl, [sp]
 8008a48:	464b      	mov	r3, r9
 8008a4a:	aa03      	add	r2, sp, #12
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	4640      	mov	r0, r8
 8008a50:	f7ff fee2 	bl	8008818 <_printf_common>
 8008a54:	3001      	adds	r0, #1
 8008a56:	d14c      	bne.n	8008af2 <_printf_i+0x1fe>
 8008a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a5c:	b004      	add	sp, #16
 8008a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a62:	4835      	ldr	r0, [pc, #212]	; (8008b38 <_printf_i+0x244>)
 8008a64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a68:	6829      	ldr	r1, [r5, #0]
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a70:	6029      	str	r1, [r5, #0]
 8008a72:	061d      	lsls	r5, r3, #24
 8008a74:	d514      	bpl.n	8008aa0 <_printf_i+0x1ac>
 8008a76:	07df      	lsls	r7, r3, #31
 8008a78:	bf44      	itt	mi
 8008a7a:	f043 0320 	orrmi.w	r3, r3, #32
 8008a7e:	6023      	strmi	r3, [r4, #0]
 8008a80:	b91e      	cbnz	r6, 8008a8a <_printf_i+0x196>
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	f023 0320 	bic.w	r3, r3, #32
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	2310      	movs	r3, #16
 8008a8c:	e7b0      	b.n	80089f0 <_printf_i+0xfc>
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	f043 0320 	orr.w	r3, r3, #32
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	2378      	movs	r3, #120	; 0x78
 8008a98:	4828      	ldr	r0, [pc, #160]	; (8008b3c <_printf_i+0x248>)
 8008a9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a9e:	e7e3      	b.n	8008a68 <_printf_i+0x174>
 8008aa0:	0659      	lsls	r1, r3, #25
 8008aa2:	bf48      	it	mi
 8008aa4:	b2b6      	uxthmi	r6, r6
 8008aa6:	e7e6      	b.n	8008a76 <_printf_i+0x182>
 8008aa8:	4615      	mov	r5, r2
 8008aaa:	e7bb      	b.n	8008a24 <_printf_i+0x130>
 8008aac:	682b      	ldr	r3, [r5, #0]
 8008aae:	6826      	ldr	r6, [r4, #0]
 8008ab0:	6961      	ldr	r1, [r4, #20]
 8008ab2:	1d18      	adds	r0, r3, #4
 8008ab4:	6028      	str	r0, [r5, #0]
 8008ab6:	0635      	lsls	r5, r6, #24
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	d501      	bpl.n	8008ac0 <_printf_i+0x1cc>
 8008abc:	6019      	str	r1, [r3, #0]
 8008abe:	e002      	b.n	8008ac6 <_printf_i+0x1d2>
 8008ac0:	0670      	lsls	r0, r6, #25
 8008ac2:	d5fb      	bpl.n	8008abc <_printf_i+0x1c8>
 8008ac4:	8019      	strh	r1, [r3, #0]
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	6123      	str	r3, [r4, #16]
 8008aca:	4615      	mov	r5, r2
 8008acc:	e7ba      	b.n	8008a44 <_printf_i+0x150>
 8008ace:	682b      	ldr	r3, [r5, #0]
 8008ad0:	1d1a      	adds	r2, r3, #4
 8008ad2:	602a      	str	r2, [r5, #0]
 8008ad4:	681d      	ldr	r5, [r3, #0]
 8008ad6:	6862      	ldr	r2, [r4, #4]
 8008ad8:	2100      	movs	r1, #0
 8008ada:	4628      	mov	r0, r5
 8008adc:	f7f7 fb80 	bl	80001e0 <memchr>
 8008ae0:	b108      	cbz	r0, 8008ae6 <_printf_i+0x1f2>
 8008ae2:	1b40      	subs	r0, r0, r5
 8008ae4:	6060      	str	r0, [r4, #4]
 8008ae6:	6863      	ldr	r3, [r4, #4]
 8008ae8:	6123      	str	r3, [r4, #16]
 8008aea:	2300      	movs	r3, #0
 8008aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008af0:	e7a8      	b.n	8008a44 <_printf_i+0x150>
 8008af2:	6923      	ldr	r3, [r4, #16]
 8008af4:	462a      	mov	r2, r5
 8008af6:	4649      	mov	r1, r9
 8008af8:	4640      	mov	r0, r8
 8008afa:	47d0      	blx	sl
 8008afc:	3001      	adds	r0, #1
 8008afe:	d0ab      	beq.n	8008a58 <_printf_i+0x164>
 8008b00:	6823      	ldr	r3, [r4, #0]
 8008b02:	079b      	lsls	r3, r3, #30
 8008b04:	d413      	bmi.n	8008b2e <_printf_i+0x23a>
 8008b06:	68e0      	ldr	r0, [r4, #12]
 8008b08:	9b03      	ldr	r3, [sp, #12]
 8008b0a:	4298      	cmp	r0, r3
 8008b0c:	bfb8      	it	lt
 8008b0e:	4618      	movlt	r0, r3
 8008b10:	e7a4      	b.n	8008a5c <_printf_i+0x168>
 8008b12:	2301      	movs	r3, #1
 8008b14:	4632      	mov	r2, r6
 8008b16:	4649      	mov	r1, r9
 8008b18:	4640      	mov	r0, r8
 8008b1a:	47d0      	blx	sl
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	d09b      	beq.n	8008a58 <_printf_i+0x164>
 8008b20:	3501      	adds	r5, #1
 8008b22:	68e3      	ldr	r3, [r4, #12]
 8008b24:	9903      	ldr	r1, [sp, #12]
 8008b26:	1a5b      	subs	r3, r3, r1
 8008b28:	42ab      	cmp	r3, r5
 8008b2a:	dcf2      	bgt.n	8008b12 <_printf_i+0x21e>
 8008b2c:	e7eb      	b.n	8008b06 <_printf_i+0x212>
 8008b2e:	2500      	movs	r5, #0
 8008b30:	f104 0619 	add.w	r6, r4, #25
 8008b34:	e7f5      	b.n	8008b22 <_printf_i+0x22e>
 8008b36:	bf00      	nop
 8008b38:	0800d9f6 	.word	0x0800d9f6
 8008b3c:	0800da07 	.word	0x0800da07

08008b40 <iprintf>:
 8008b40:	b40f      	push	{r0, r1, r2, r3}
 8008b42:	4b0a      	ldr	r3, [pc, #40]	; (8008b6c <iprintf+0x2c>)
 8008b44:	b513      	push	{r0, r1, r4, lr}
 8008b46:	681c      	ldr	r4, [r3, #0]
 8008b48:	b124      	cbz	r4, 8008b54 <iprintf+0x14>
 8008b4a:	69a3      	ldr	r3, [r4, #24]
 8008b4c:	b913      	cbnz	r3, 8008b54 <iprintf+0x14>
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f7ff f96c 	bl	8007e2c <__sinit>
 8008b54:	ab05      	add	r3, sp, #20
 8008b56:	9a04      	ldr	r2, [sp, #16]
 8008b58:	68a1      	ldr	r1, [r4, #8]
 8008b5a:	9301      	str	r3, [sp, #4]
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f001 fc3d 	bl	800a3dc <_vfiprintf_r>
 8008b62:	b002      	add	sp, #8
 8008b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b68:	b004      	add	sp, #16
 8008b6a:	4770      	bx	lr
 8008b6c:	20000014 	.word	0x20000014

08008b70 <_puts_r>:
 8008b70:	b570      	push	{r4, r5, r6, lr}
 8008b72:	460e      	mov	r6, r1
 8008b74:	4605      	mov	r5, r0
 8008b76:	b118      	cbz	r0, 8008b80 <_puts_r+0x10>
 8008b78:	6983      	ldr	r3, [r0, #24]
 8008b7a:	b90b      	cbnz	r3, 8008b80 <_puts_r+0x10>
 8008b7c:	f7ff f956 	bl	8007e2c <__sinit>
 8008b80:	69ab      	ldr	r3, [r5, #24]
 8008b82:	68ac      	ldr	r4, [r5, #8]
 8008b84:	b913      	cbnz	r3, 8008b8c <_puts_r+0x1c>
 8008b86:	4628      	mov	r0, r5
 8008b88:	f7ff f950 	bl	8007e2c <__sinit>
 8008b8c:	4b2c      	ldr	r3, [pc, #176]	; (8008c40 <_puts_r+0xd0>)
 8008b8e:	429c      	cmp	r4, r3
 8008b90:	d120      	bne.n	8008bd4 <_puts_r+0x64>
 8008b92:	686c      	ldr	r4, [r5, #4]
 8008b94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b96:	07db      	lsls	r3, r3, #31
 8008b98:	d405      	bmi.n	8008ba6 <_puts_r+0x36>
 8008b9a:	89a3      	ldrh	r3, [r4, #12]
 8008b9c:	0598      	lsls	r0, r3, #22
 8008b9e:	d402      	bmi.n	8008ba6 <_puts_r+0x36>
 8008ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ba2:	f7ff fa06 	bl	8007fb2 <__retarget_lock_acquire_recursive>
 8008ba6:	89a3      	ldrh	r3, [r4, #12]
 8008ba8:	0719      	lsls	r1, r3, #28
 8008baa:	d51d      	bpl.n	8008be8 <_puts_r+0x78>
 8008bac:	6923      	ldr	r3, [r4, #16]
 8008bae:	b1db      	cbz	r3, 8008be8 <_puts_r+0x78>
 8008bb0:	3e01      	subs	r6, #1
 8008bb2:	68a3      	ldr	r3, [r4, #8]
 8008bb4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	60a3      	str	r3, [r4, #8]
 8008bbc:	bb39      	cbnz	r1, 8008c0e <_puts_r+0x9e>
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	da38      	bge.n	8008c34 <_puts_r+0xc4>
 8008bc2:	4622      	mov	r2, r4
 8008bc4:	210a      	movs	r1, #10
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	f000 f89c 	bl	8008d04 <__swbuf_r>
 8008bcc:	3001      	adds	r0, #1
 8008bce:	d011      	beq.n	8008bf4 <_puts_r+0x84>
 8008bd0:	250a      	movs	r5, #10
 8008bd2:	e011      	b.n	8008bf8 <_puts_r+0x88>
 8008bd4:	4b1b      	ldr	r3, [pc, #108]	; (8008c44 <_puts_r+0xd4>)
 8008bd6:	429c      	cmp	r4, r3
 8008bd8:	d101      	bne.n	8008bde <_puts_r+0x6e>
 8008bda:	68ac      	ldr	r4, [r5, #8]
 8008bdc:	e7da      	b.n	8008b94 <_puts_r+0x24>
 8008bde:	4b1a      	ldr	r3, [pc, #104]	; (8008c48 <_puts_r+0xd8>)
 8008be0:	429c      	cmp	r4, r3
 8008be2:	bf08      	it	eq
 8008be4:	68ec      	ldreq	r4, [r5, #12]
 8008be6:	e7d5      	b.n	8008b94 <_puts_r+0x24>
 8008be8:	4621      	mov	r1, r4
 8008bea:	4628      	mov	r0, r5
 8008bec:	f000 f8ee 	bl	8008dcc <__swsetup_r>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d0dd      	beq.n	8008bb0 <_puts_r+0x40>
 8008bf4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008bf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bfa:	07da      	lsls	r2, r3, #31
 8008bfc:	d405      	bmi.n	8008c0a <_puts_r+0x9a>
 8008bfe:	89a3      	ldrh	r3, [r4, #12]
 8008c00:	059b      	lsls	r3, r3, #22
 8008c02:	d402      	bmi.n	8008c0a <_puts_r+0x9a>
 8008c04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c06:	f7ff f9d5 	bl	8007fb4 <__retarget_lock_release_recursive>
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	bd70      	pop	{r4, r5, r6, pc}
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	da04      	bge.n	8008c1c <_puts_r+0xac>
 8008c12:	69a2      	ldr	r2, [r4, #24]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	dc06      	bgt.n	8008c26 <_puts_r+0xb6>
 8008c18:	290a      	cmp	r1, #10
 8008c1a:	d004      	beq.n	8008c26 <_puts_r+0xb6>
 8008c1c:	6823      	ldr	r3, [r4, #0]
 8008c1e:	1c5a      	adds	r2, r3, #1
 8008c20:	6022      	str	r2, [r4, #0]
 8008c22:	7019      	strb	r1, [r3, #0]
 8008c24:	e7c5      	b.n	8008bb2 <_puts_r+0x42>
 8008c26:	4622      	mov	r2, r4
 8008c28:	4628      	mov	r0, r5
 8008c2a:	f000 f86b 	bl	8008d04 <__swbuf_r>
 8008c2e:	3001      	adds	r0, #1
 8008c30:	d1bf      	bne.n	8008bb2 <_puts_r+0x42>
 8008c32:	e7df      	b.n	8008bf4 <_puts_r+0x84>
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	250a      	movs	r5, #10
 8008c38:	1c5a      	adds	r2, r3, #1
 8008c3a:	6022      	str	r2, [r4, #0]
 8008c3c:	701d      	strb	r5, [r3, #0]
 8008c3e:	e7db      	b.n	8008bf8 <_puts_r+0x88>
 8008c40:	0800d9a0 	.word	0x0800d9a0
 8008c44:	0800d9c0 	.word	0x0800d9c0
 8008c48:	0800d980 	.word	0x0800d980

08008c4c <puts>:
 8008c4c:	4b02      	ldr	r3, [pc, #8]	; (8008c58 <puts+0xc>)
 8008c4e:	4601      	mov	r1, r0
 8008c50:	6818      	ldr	r0, [r3, #0]
 8008c52:	f7ff bf8d 	b.w	8008b70 <_puts_r>
 8008c56:	bf00      	nop
 8008c58:	20000014 	.word	0x20000014

08008c5c <_sbrk_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	4d06      	ldr	r5, [pc, #24]	; (8008c78 <_sbrk_r+0x1c>)
 8008c60:	2300      	movs	r3, #0
 8008c62:	4604      	mov	r4, r0
 8008c64:	4608      	mov	r0, r1
 8008c66:	602b      	str	r3, [r5, #0]
 8008c68:	f7f9 f968 	bl	8001f3c <_sbrk>
 8008c6c:	1c43      	adds	r3, r0, #1
 8008c6e:	d102      	bne.n	8008c76 <_sbrk_r+0x1a>
 8008c70:	682b      	ldr	r3, [r5, #0]
 8008c72:	b103      	cbz	r3, 8008c76 <_sbrk_r+0x1a>
 8008c74:	6023      	str	r3, [r4, #0]
 8008c76:	bd38      	pop	{r3, r4, r5, pc}
 8008c78:	2000a3d8 	.word	0x2000a3d8

08008c7c <__sread>:
 8008c7c:	b510      	push	{r4, lr}
 8008c7e:	460c      	mov	r4, r1
 8008c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c84:	f001 fcda 	bl	800a63c <_read_r>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	bfab      	itete	ge
 8008c8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c8e:	89a3      	ldrhlt	r3, [r4, #12]
 8008c90:	181b      	addge	r3, r3, r0
 8008c92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c96:	bfac      	ite	ge
 8008c98:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c9a:	81a3      	strhlt	r3, [r4, #12]
 8008c9c:	bd10      	pop	{r4, pc}

08008c9e <__swrite>:
 8008c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca2:	461f      	mov	r7, r3
 8008ca4:	898b      	ldrh	r3, [r1, #12]
 8008ca6:	05db      	lsls	r3, r3, #23
 8008ca8:	4605      	mov	r5, r0
 8008caa:	460c      	mov	r4, r1
 8008cac:	4616      	mov	r6, r2
 8008cae:	d505      	bpl.n	8008cbc <__swrite+0x1e>
 8008cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f000 ffa6 	bl	8009c08 <_lseek_r>
 8008cbc:	89a3      	ldrh	r3, [r4, #12]
 8008cbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cc6:	81a3      	strh	r3, [r4, #12]
 8008cc8:	4632      	mov	r2, r6
 8008cca:	463b      	mov	r3, r7
 8008ccc:	4628      	mov	r0, r5
 8008cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd2:	f000 b869 	b.w	8008da8 <_write_r>

08008cd6 <__sseek>:
 8008cd6:	b510      	push	{r4, lr}
 8008cd8:	460c      	mov	r4, r1
 8008cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cde:	f000 ff93 	bl	8009c08 <_lseek_r>
 8008ce2:	1c43      	adds	r3, r0, #1
 8008ce4:	89a3      	ldrh	r3, [r4, #12]
 8008ce6:	bf15      	itete	ne
 8008ce8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008cea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cf2:	81a3      	strheq	r3, [r4, #12]
 8008cf4:	bf18      	it	ne
 8008cf6:	81a3      	strhne	r3, [r4, #12]
 8008cf8:	bd10      	pop	{r4, pc}

08008cfa <__sclose>:
 8008cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cfe:	f000 b8d3 	b.w	8008ea8 <_close_r>
	...

08008d04 <__swbuf_r>:
 8008d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d06:	460e      	mov	r6, r1
 8008d08:	4614      	mov	r4, r2
 8008d0a:	4605      	mov	r5, r0
 8008d0c:	b118      	cbz	r0, 8008d16 <__swbuf_r+0x12>
 8008d0e:	6983      	ldr	r3, [r0, #24]
 8008d10:	b90b      	cbnz	r3, 8008d16 <__swbuf_r+0x12>
 8008d12:	f7ff f88b 	bl	8007e2c <__sinit>
 8008d16:	4b21      	ldr	r3, [pc, #132]	; (8008d9c <__swbuf_r+0x98>)
 8008d18:	429c      	cmp	r4, r3
 8008d1a:	d12b      	bne.n	8008d74 <__swbuf_r+0x70>
 8008d1c:	686c      	ldr	r4, [r5, #4]
 8008d1e:	69a3      	ldr	r3, [r4, #24]
 8008d20:	60a3      	str	r3, [r4, #8]
 8008d22:	89a3      	ldrh	r3, [r4, #12]
 8008d24:	071a      	lsls	r2, r3, #28
 8008d26:	d52f      	bpl.n	8008d88 <__swbuf_r+0x84>
 8008d28:	6923      	ldr	r3, [r4, #16]
 8008d2a:	b36b      	cbz	r3, 8008d88 <__swbuf_r+0x84>
 8008d2c:	6923      	ldr	r3, [r4, #16]
 8008d2e:	6820      	ldr	r0, [r4, #0]
 8008d30:	1ac0      	subs	r0, r0, r3
 8008d32:	6963      	ldr	r3, [r4, #20]
 8008d34:	b2f6      	uxtb	r6, r6
 8008d36:	4283      	cmp	r3, r0
 8008d38:	4637      	mov	r7, r6
 8008d3a:	dc04      	bgt.n	8008d46 <__swbuf_r+0x42>
 8008d3c:	4621      	mov	r1, r4
 8008d3e:	4628      	mov	r0, r5
 8008d40:	f7fe ffe0 	bl	8007d04 <_fflush_r>
 8008d44:	bb30      	cbnz	r0, 8008d94 <__swbuf_r+0x90>
 8008d46:	68a3      	ldr	r3, [r4, #8]
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	60a3      	str	r3, [r4, #8]
 8008d4c:	6823      	ldr	r3, [r4, #0]
 8008d4e:	1c5a      	adds	r2, r3, #1
 8008d50:	6022      	str	r2, [r4, #0]
 8008d52:	701e      	strb	r6, [r3, #0]
 8008d54:	6963      	ldr	r3, [r4, #20]
 8008d56:	3001      	adds	r0, #1
 8008d58:	4283      	cmp	r3, r0
 8008d5a:	d004      	beq.n	8008d66 <__swbuf_r+0x62>
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	07db      	lsls	r3, r3, #31
 8008d60:	d506      	bpl.n	8008d70 <__swbuf_r+0x6c>
 8008d62:	2e0a      	cmp	r6, #10
 8008d64:	d104      	bne.n	8008d70 <__swbuf_r+0x6c>
 8008d66:	4621      	mov	r1, r4
 8008d68:	4628      	mov	r0, r5
 8008d6a:	f7fe ffcb 	bl	8007d04 <_fflush_r>
 8008d6e:	b988      	cbnz	r0, 8008d94 <__swbuf_r+0x90>
 8008d70:	4638      	mov	r0, r7
 8008d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d74:	4b0a      	ldr	r3, [pc, #40]	; (8008da0 <__swbuf_r+0x9c>)
 8008d76:	429c      	cmp	r4, r3
 8008d78:	d101      	bne.n	8008d7e <__swbuf_r+0x7a>
 8008d7a:	68ac      	ldr	r4, [r5, #8]
 8008d7c:	e7cf      	b.n	8008d1e <__swbuf_r+0x1a>
 8008d7e:	4b09      	ldr	r3, [pc, #36]	; (8008da4 <__swbuf_r+0xa0>)
 8008d80:	429c      	cmp	r4, r3
 8008d82:	bf08      	it	eq
 8008d84:	68ec      	ldreq	r4, [r5, #12]
 8008d86:	e7ca      	b.n	8008d1e <__swbuf_r+0x1a>
 8008d88:	4621      	mov	r1, r4
 8008d8a:	4628      	mov	r0, r5
 8008d8c:	f000 f81e 	bl	8008dcc <__swsetup_r>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	d0cb      	beq.n	8008d2c <__swbuf_r+0x28>
 8008d94:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008d98:	e7ea      	b.n	8008d70 <__swbuf_r+0x6c>
 8008d9a:	bf00      	nop
 8008d9c:	0800d9a0 	.word	0x0800d9a0
 8008da0:	0800d9c0 	.word	0x0800d9c0
 8008da4:	0800d980 	.word	0x0800d980

08008da8 <_write_r>:
 8008da8:	b538      	push	{r3, r4, r5, lr}
 8008daa:	4d07      	ldr	r5, [pc, #28]	; (8008dc8 <_write_r+0x20>)
 8008dac:	4604      	mov	r4, r0
 8008dae:	4608      	mov	r0, r1
 8008db0:	4611      	mov	r1, r2
 8008db2:	2200      	movs	r2, #0
 8008db4:	602a      	str	r2, [r5, #0]
 8008db6:	461a      	mov	r2, r3
 8008db8:	f7f9 f870 	bl	8001e9c <_write>
 8008dbc:	1c43      	adds	r3, r0, #1
 8008dbe:	d102      	bne.n	8008dc6 <_write_r+0x1e>
 8008dc0:	682b      	ldr	r3, [r5, #0]
 8008dc2:	b103      	cbz	r3, 8008dc6 <_write_r+0x1e>
 8008dc4:	6023      	str	r3, [r4, #0]
 8008dc6:	bd38      	pop	{r3, r4, r5, pc}
 8008dc8:	2000a3d8 	.word	0x2000a3d8

08008dcc <__swsetup_r>:
 8008dcc:	4b32      	ldr	r3, [pc, #200]	; (8008e98 <__swsetup_r+0xcc>)
 8008dce:	b570      	push	{r4, r5, r6, lr}
 8008dd0:	681d      	ldr	r5, [r3, #0]
 8008dd2:	4606      	mov	r6, r0
 8008dd4:	460c      	mov	r4, r1
 8008dd6:	b125      	cbz	r5, 8008de2 <__swsetup_r+0x16>
 8008dd8:	69ab      	ldr	r3, [r5, #24]
 8008dda:	b913      	cbnz	r3, 8008de2 <__swsetup_r+0x16>
 8008ddc:	4628      	mov	r0, r5
 8008dde:	f7ff f825 	bl	8007e2c <__sinit>
 8008de2:	4b2e      	ldr	r3, [pc, #184]	; (8008e9c <__swsetup_r+0xd0>)
 8008de4:	429c      	cmp	r4, r3
 8008de6:	d10f      	bne.n	8008e08 <__swsetup_r+0x3c>
 8008de8:	686c      	ldr	r4, [r5, #4]
 8008dea:	89a3      	ldrh	r3, [r4, #12]
 8008dec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008df0:	0719      	lsls	r1, r3, #28
 8008df2:	d42c      	bmi.n	8008e4e <__swsetup_r+0x82>
 8008df4:	06dd      	lsls	r5, r3, #27
 8008df6:	d411      	bmi.n	8008e1c <__swsetup_r+0x50>
 8008df8:	2309      	movs	r3, #9
 8008dfa:	6033      	str	r3, [r6, #0]
 8008dfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e00:	81a3      	strh	r3, [r4, #12]
 8008e02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e06:	e03e      	b.n	8008e86 <__swsetup_r+0xba>
 8008e08:	4b25      	ldr	r3, [pc, #148]	; (8008ea0 <__swsetup_r+0xd4>)
 8008e0a:	429c      	cmp	r4, r3
 8008e0c:	d101      	bne.n	8008e12 <__swsetup_r+0x46>
 8008e0e:	68ac      	ldr	r4, [r5, #8]
 8008e10:	e7eb      	b.n	8008dea <__swsetup_r+0x1e>
 8008e12:	4b24      	ldr	r3, [pc, #144]	; (8008ea4 <__swsetup_r+0xd8>)
 8008e14:	429c      	cmp	r4, r3
 8008e16:	bf08      	it	eq
 8008e18:	68ec      	ldreq	r4, [r5, #12]
 8008e1a:	e7e6      	b.n	8008dea <__swsetup_r+0x1e>
 8008e1c:	0758      	lsls	r0, r3, #29
 8008e1e:	d512      	bpl.n	8008e46 <__swsetup_r+0x7a>
 8008e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e22:	b141      	cbz	r1, 8008e36 <__swsetup_r+0x6a>
 8008e24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e28:	4299      	cmp	r1, r3
 8008e2a:	d002      	beq.n	8008e32 <__swsetup_r+0x66>
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	f7ff f93d 	bl	80080ac <_free_r>
 8008e32:	2300      	movs	r3, #0
 8008e34:	6363      	str	r3, [r4, #52]	; 0x34
 8008e36:	89a3      	ldrh	r3, [r4, #12]
 8008e38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e3c:	81a3      	strh	r3, [r4, #12]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	6063      	str	r3, [r4, #4]
 8008e42:	6923      	ldr	r3, [r4, #16]
 8008e44:	6023      	str	r3, [r4, #0]
 8008e46:	89a3      	ldrh	r3, [r4, #12]
 8008e48:	f043 0308 	orr.w	r3, r3, #8
 8008e4c:	81a3      	strh	r3, [r4, #12]
 8008e4e:	6923      	ldr	r3, [r4, #16]
 8008e50:	b94b      	cbnz	r3, 8008e66 <__swsetup_r+0x9a>
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e5c:	d003      	beq.n	8008e66 <__swsetup_r+0x9a>
 8008e5e:	4621      	mov	r1, r4
 8008e60:	4630      	mov	r0, r6
 8008e62:	f7ff f8cd 	bl	8008000 <__smakebuf_r>
 8008e66:	89a0      	ldrh	r0, [r4, #12]
 8008e68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e6c:	f010 0301 	ands.w	r3, r0, #1
 8008e70:	d00a      	beq.n	8008e88 <__swsetup_r+0xbc>
 8008e72:	2300      	movs	r3, #0
 8008e74:	60a3      	str	r3, [r4, #8]
 8008e76:	6963      	ldr	r3, [r4, #20]
 8008e78:	425b      	negs	r3, r3
 8008e7a:	61a3      	str	r3, [r4, #24]
 8008e7c:	6923      	ldr	r3, [r4, #16]
 8008e7e:	b943      	cbnz	r3, 8008e92 <__swsetup_r+0xc6>
 8008e80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e84:	d1ba      	bne.n	8008dfc <__swsetup_r+0x30>
 8008e86:	bd70      	pop	{r4, r5, r6, pc}
 8008e88:	0781      	lsls	r1, r0, #30
 8008e8a:	bf58      	it	pl
 8008e8c:	6963      	ldrpl	r3, [r4, #20]
 8008e8e:	60a3      	str	r3, [r4, #8]
 8008e90:	e7f4      	b.n	8008e7c <__swsetup_r+0xb0>
 8008e92:	2000      	movs	r0, #0
 8008e94:	e7f7      	b.n	8008e86 <__swsetup_r+0xba>
 8008e96:	bf00      	nop
 8008e98:	20000014 	.word	0x20000014
 8008e9c:	0800d9a0 	.word	0x0800d9a0
 8008ea0:	0800d9c0 	.word	0x0800d9c0
 8008ea4:	0800d980 	.word	0x0800d980

08008ea8 <_close_r>:
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	4d06      	ldr	r5, [pc, #24]	; (8008ec4 <_close_r+0x1c>)
 8008eac:	2300      	movs	r3, #0
 8008eae:	4604      	mov	r4, r0
 8008eb0:	4608      	mov	r0, r1
 8008eb2:	602b      	str	r3, [r5, #0]
 8008eb4:	f7f9 f80e 	bl	8001ed4 <_close>
 8008eb8:	1c43      	adds	r3, r0, #1
 8008eba:	d102      	bne.n	8008ec2 <_close_r+0x1a>
 8008ebc:	682b      	ldr	r3, [r5, #0]
 8008ebe:	b103      	cbz	r3, 8008ec2 <_close_r+0x1a>
 8008ec0:	6023      	str	r3, [r4, #0]
 8008ec2:	bd38      	pop	{r3, r4, r5, pc}
 8008ec4:	2000a3d8 	.word	0x2000a3d8

08008ec8 <quorem>:
 8008ec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ecc:	6903      	ldr	r3, [r0, #16]
 8008ece:	690c      	ldr	r4, [r1, #16]
 8008ed0:	42a3      	cmp	r3, r4
 8008ed2:	4607      	mov	r7, r0
 8008ed4:	f2c0 8081 	blt.w	8008fda <quorem+0x112>
 8008ed8:	3c01      	subs	r4, #1
 8008eda:	f101 0814 	add.w	r8, r1, #20
 8008ede:	f100 0514 	add.w	r5, r0, #20
 8008ee2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ee6:	9301      	str	r3, [sp, #4]
 8008ee8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008eec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ef8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008efc:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f00:	d331      	bcc.n	8008f66 <quorem+0x9e>
 8008f02:	f04f 0e00 	mov.w	lr, #0
 8008f06:	4640      	mov	r0, r8
 8008f08:	46ac      	mov	ip, r5
 8008f0a:	46f2      	mov	sl, lr
 8008f0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f10:	b293      	uxth	r3, r2
 8008f12:	fb06 e303 	mla	r3, r6, r3, lr
 8008f16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	ebaa 0303 	sub.w	r3, sl, r3
 8008f20:	f8dc a000 	ldr.w	sl, [ip]
 8008f24:	0c12      	lsrs	r2, r2, #16
 8008f26:	fa13 f38a 	uxtah	r3, r3, sl
 8008f2a:	fb06 e202 	mla	r2, r6, r2, lr
 8008f2e:	9300      	str	r3, [sp, #0]
 8008f30:	9b00      	ldr	r3, [sp, #0]
 8008f32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f36:	b292      	uxth	r2, r2
 8008f38:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008f3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f40:	f8bd 3000 	ldrh.w	r3, [sp]
 8008f44:	4581      	cmp	r9, r0
 8008f46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f4a:	f84c 3b04 	str.w	r3, [ip], #4
 8008f4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f52:	d2db      	bcs.n	8008f0c <quorem+0x44>
 8008f54:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f58:	b92b      	cbnz	r3, 8008f66 <quorem+0x9e>
 8008f5a:	9b01      	ldr	r3, [sp, #4]
 8008f5c:	3b04      	subs	r3, #4
 8008f5e:	429d      	cmp	r5, r3
 8008f60:	461a      	mov	r2, r3
 8008f62:	d32e      	bcc.n	8008fc2 <quorem+0xfa>
 8008f64:	613c      	str	r4, [r7, #16]
 8008f66:	4638      	mov	r0, r7
 8008f68:	f001 f8f6 	bl	800a158 <__mcmp>
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	db24      	blt.n	8008fba <quorem+0xf2>
 8008f70:	3601      	adds	r6, #1
 8008f72:	4628      	mov	r0, r5
 8008f74:	f04f 0c00 	mov.w	ip, #0
 8008f78:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f7c:	f8d0 e000 	ldr.w	lr, [r0]
 8008f80:	b293      	uxth	r3, r2
 8008f82:	ebac 0303 	sub.w	r3, ip, r3
 8008f86:	0c12      	lsrs	r2, r2, #16
 8008f88:	fa13 f38e 	uxtah	r3, r3, lr
 8008f8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f9a:	45c1      	cmp	r9, r8
 8008f9c:	f840 3b04 	str.w	r3, [r0], #4
 8008fa0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008fa4:	d2e8      	bcs.n	8008f78 <quorem+0xb0>
 8008fa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008faa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fae:	b922      	cbnz	r2, 8008fba <quorem+0xf2>
 8008fb0:	3b04      	subs	r3, #4
 8008fb2:	429d      	cmp	r5, r3
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	d30a      	bcc.n	8008fce <quorem+0x106>
 8008fb8:	613c      	str	r4, [r7, #16]
 8008fba:	4630      	mov	r0, r6
 8008fbc:	b003      	add	sp, #12
 8008fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc2:	6812      	ldr	r2, [r2, #0]
 8008fc4:	3b04      	subs	r3, #4
 8008fc6:	2a00      	cmp	r2, #0
 8008fc8:	d1cc      	bne.n	8008f64 <quorem+0x9c>
 8008fca:	3c01      	subs	r4, #1
 8008fcc:	e7c7      	b.n	8008f5e <quorem+0x96>
 8008fce:	6812      	ldr	r2, [r2, #0]
 8008fd0:	3b04      	subs	r3, #4
 8008fd2:	2a00      	cmp	r2, #0
 8008fd4:	d1f0      	bne.n	8008fb8 <quorem+0xf0>
 8008fd6:	3c01      	subs	r4, #1
 8008fd8:	e7eb      	b.n	8008fb2 <quorem+0xea>
 8008fda:	2000      	movs	r0, #0
 8008fdc:	e7ee      	b.n	8008fbc <quorem+0xf4>
	...

08008fe0 <_dtoa_r>:
 8008fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe4:	ed2d 8b04 	vpush	{d8-d9}
 8008fe8:	ec57 6b10 	vmov	r6, r7, d0
 8008fec:	b093      	sub	sp, #76	; 0x4c
 8008fee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ff0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008ff4:	9106      	str	r1, [sp, #24]
 8008ff6:	ee10 aa10 	vmov	sl, s0
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8008ffe:	930c      	str	r3, [sp, #48]	; 0x30
 8009000:	46bb      	mov	fp, r7
 8009002:	b975      	cbnz	r5, 8009022 <_dtoa_r+0x42>
 8009004:	2010      	movs	r0, #16
 8009006:	f000 fe11 	bl	8009c2c <malloc>
 800900a:	4602      	mov	r2, r0
 800900c:	6260      	str	r0, [r4, #36]	; 0x24
 800900e:	b920      	cbnz	r0, 800901a <_dtoa_r+0x3a>
 8009010:	4ba7      	ldr	r3, [pc, #668]	; (80092b0 <_dtoa_r+0x2d0>)
 8009012:	21ea      	movs	r1, #234	; 0xea
 8009014:	48a7      	ldr	r0, [pc, #668]	; (80092b4 <_dtoa_r+0x2d4>)
 8009016:	f001 fb23 	bl	800a660 <__assert_func>
 800901a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800901e:	6005      	str	r5, [r0, #0]
 8009020:	60c5      	str	r5, [r0, #12]
 8009022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009024:	6819      	ldr	r1, [r3, #0]
 8009026:	b151      	cbz	r1, 800903e <_dtoa_r+0x5e>
 8009028:	685a      	ldr	r2, [r3, #4]
 800902a:	604a      	str	r2, [r1, #4]
 800902c:	2301      	movs	r3, #1
 800902e:	4093      	lsls	r3, r2
 8009030:	608b      	str	r3, [r1, #8]
 8009032:	4620      	mov	r0, r4
 8009034:	f000 fe4e 	bl	8009cd4 <_Bfree>
 8009038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800903a:	2200      	movs	r2, #0
 800903c:	601a      	str	r2, [r3, #0]
 800903e:	1e3b      	subs	r3, r7, #0
 8009040:	bfaa      	itet	ge
 8009042:	2300      	movge	r3, #0
 8009044:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009048:	f8c8 3000 	strge.w	r3, [r8]
 800904c:	4b9a      	ldr	r3, [pc, #616]	; (80092b8 <_dtoa_r+0x2d8>)
 800904e:	bfbc      	itt	lt
 8009050:	2201      	movlt	r2, #1
 8009052:	f8c8 2000 	strlt.w	r2, [r8]
 8009056:	ea33 030b 	bics.w	r3, r3, fp
 800905a:	d11b      	bne.n	8009094 <_dtoa_r+0xb4>
 800905c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800905e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009062:	6013      	str	r3, [r2, #0]
 8009064:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009068:	4333      	orrs	r3, r6
 800906a:	f000 8592 	beq.w	8009b92 <_dtoa_r+0xbb2>
 800906e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009070:	b963      	cbnz	r3, 800908c <_dtoa_r+0xac>
 8009072:	4b92      	ldr	r3, [pc, #584]	; (80092bc <_dtoa_r+0x2dc>)
 8009074:	e022      	b.n	80090bc <_dtoa_r+0xdc>
 8009076:	4b92      	ldr	r3, [pc, #584]	; (80092c0 <_dtoa_r+0x2e0>)
 8009078:	9301      	str	r3, [sp, #4]
 800907a:	3308      	adds	r3, #8
 800907c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800907e:	6013      	str	r3, [r2, #0]
 8009080:	9801      	ldr	r0, [sp, #4]
 8009082:	b013      	add	sp, #76	; 0x4c
 8009084:	ecbd 8b04 	vpop	{d8-d9}
 8009088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908c:	4b8b      	ldr	r3, [pc, #556]	; (80092bc <_dtoa_r+0x2dc>)
 800908e:	9301      	str	r3, [sp, #4]
 8009090:	3303      	adds	r3, #3
 8009092:	e7f3      	b.n	800907c <_dtoa_r+0x9c>
 8009094:	2200      	movs	r2, #0
 8009096:	2300      	movs	r3, #0
 8009098:	4650      	mov	r0, sl
 800909a:	4659      	mov	r1, fp
 800909c:	f7f7 fd14 	bl	8000ac8 <__aeabi_dcmpeq>
 80090a0:	ec4b ab19 	vmov	d9, sl, fp
 80090a4:	4680      	mov	r8, r0
 80090a6:	b158      	cbz	r0, 80090c0 <_dtoa_r+0xe0>
 80090a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090aa:	2301      	movs	r3, #1
 80090ac:	6013      	str	r3, [r2, #0]
 80090ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 856b 	beq.w	8009b8c <_dtoa_r+0xbac>
 80090b6:	4883      	ldr	r0, [pc, #524]	; (80092c4 <_dtoa_r+0x2e4>)
 80090b8:	6018      	str	r0, [r3, #0]
 80090ba:	1e43      	subs	r3, r0, #1
 80090bc:	9301      	str	r3, [sp, #4]
 80090be:	e7df      	b.n	8009080 <_dtoa_r+0xa0>
 80090c0:	ec4b ab10 	vmov	d0, sl, fp
 80090c4:	aa10      	add	r2, sp, #64	; 0x40
 80090c6:	a911      	add	r1, sp, #68	; 0x44
 80090c8:	4620      	mov	r0, r4
 80090ca:	f001 f8eb 	bl	800a2a4 <__d2b>
 80090ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80090d2:	ee08 0a10 	vmov	s16, r0
 80090d6:	2d00      	cmp	r5, #0
 80090d8:	f000 8084 	beq.w	80091e4 <_dtoa_r+0x204>
 80090dc:	ee19 3a90 	vmov	r3, s19
 80090e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80090e8:	4656      	mov	r6, sl
 80090ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80090ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80090f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80090f6:	4b74      	ldr	r3, [pc, #464]	; (80092c8 <_dtoa_r+0x2e8>)
 80090f8:	2200      	movs	r2, #0
 80090fa:	4630      	mov	r0, r6
 80090fc:	4639      	mov	r1, r7
 80090fe:	f7f7 f8c3 	bl	8000288 <__aeabi_dsub>
 8009102:	a365      	add	r3, pc, #404	; (adr r3, 8009298 <_dtoa_r+0x2b8>)
 8009104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009108:	f7f7 fa76 	bl	80005f8 <__aeabi_dmul>
 800910c:	a364      	add	r3, pc, #400	; (adr r3, 80092a0 <_dtoa_r+0x2c0>)
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f7f7 f8bb 	bl	800028c <__adddf3>
 8009116:	4606      	mov	r6, r0
 8009118:	4628      	mov	r0, r5
 800911a:	460f      	mov	r7, r1
 800911c:	f7f7 fa02 	bl	8000524 <__aeabi_i2d>
 8009120:	a361      	add	r3, pc, #388	; (adr r3, 80092a8 <_dtoa_r+0x2c8>)
 8009122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009126:	f7f7 fa67 	bl	80005f8 <__aeabi_dmul>
 800912a:	4602      	mov	r2, r0
 800912c:	460b      	mov	r3, r1
 800912e:	4630      	mov	r0, r6
 8009130:	4639      	mov	r1, r7
 8009132:	f7f7 f8ab 	bl	800028c <__adddf3>
 8009136:	4606      	mov	r6, r0
 8009138:	460f      	mov	r7, r1
 800913a:	f7f7 fd0d 	bl	8000b58 <__aeabi_d2iz>
 800913e:	2200      	movs	r2, #0
 8009140:	9000      	str	r0, [sp, #0]
 8009142:	2300      	movs	r3, #0
 8009144:	4630      	mov	r0, r6
 8009146:	4639      	mov	r1, r7
 8009148:	f7f7 fcc8 	bl	8000adc <__aeabi_dcmplt>
 800914c:	b150      	cbz	r0, 8009164 <_dtoa_r+0x184>
 800914e:	9800      	ldr	r0, [sp, #0]
 8009150:	f7f7 f9e8 	bl	8000524 <__aeabi_i2d>
 8009154:	4632      	mov	r2, r6
 8009156:	463b      	mov	r3, r7
 8009158:	f7f7 fcb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800915c:	b910      	cbnz	r0, 8009164 <_dtoa_r+0x184>
 800915e:	9b00      	ldr	r3, [sp, #0]
 8009160:	3b01      	subs	r3, #1
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	9b00      	ldr	r3, [sp, #0]
 8009166:	2b16      	cmp	r3, #22
 8009168:	d85a      	bhi.n	8009220 <_dtoa_r+0x240>
 800916a:	9a00      	ldr	r2, [sp, #0]
 800916c:	4b57      	ldr	r3, [pc, #348]	; (80092cc <_dtoa_r+0x2ec>)
 800916e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009176:	ec51 0b19 	vmov	r0, r1, d9
 800917a:	f7f7 fcaf 	bl	8000adc <__aeabi_dcmplt>
 800917e:	2800      	cmp	r0, #0
 8009180:	d050      	beq.n	8009224 <_dtoa_r+0x244>
 8009182:	9b00      	ldr	r3, [sp, #0]
 8009184:	3b01      	subs	r3, #1
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	2300      	movs	r3, #0
 800918a:	930b      	str	r3, [sp, #44]	; 0x2c
 800918c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800918e:	1b5d      	subs	r5, r3, r5
 8009190:	1e6b      	subs	r3, r5, #1
 8009192:	9305      	str	r3, [sp, #20]
 8009194:	bf45      	ittet	mi
 8009196:	f1c5 0301 	rsbmi	r3, r5, #1
 800919a:	9304      	strmi	r3, [sp, #16]
 800919c:	2300      	movpl	r3, #0
 800919e:	2300      	movmi	r3, #0
 80091a0:	bf4c      	ite	mi
 80091a2:	9305      	strmi	r3, [sp, #20]
 80091a4:	9304      	strpl	r3, [sp, #16]
 80091a6:	9b00      	ldr	r3, [sp, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	db3d      	blt.n	8009228 <_dtoa_r+0x248>
 80091ac:	9b05      	ldr	r3, [sp, #20]
 80091ae:	9a00      	ldr	r2, [sp, #0]
 80091b0:	920a      	str	r2, [sp, #40]	; 0x28
 80091b2:	4413      	add	r3, r2
 80091b4:	9305      	str	r3, [sp, #20]
 80091b6:	2300      	movs	r3, #0
 80091b8:	9307      	str	r3, [sp, #28]
 80091ba:	9b06      	ldr	r3, [sp, #24]
 80091bc:	2b09      	cmp	r3, #9
 80091be:	f200 8089 	bhi.w	80092d4 <_dtoa_r+0x2f4>
 80091c2:	2b05      	cmp	r3, #5
 80091c4:	bfc4      	itt	gt
 80091c6:	3b04      	subgt	r3, #4
 80091c8:	9306      	strgt	r3, [sp, #24]
 80091ca:	9b06      	ldr	r3, [sp, #24]
 80091cc:	f1a3 0302 	sub.w	r3, r3, #2
 80091d0:	bfcc      	ite	gt
 80091d2:	2500      	movgt	r5, #0
 80091d4:	2501      	movle	r5, #1
 80091d6:	2b03      	cmp	r3, #3
 80091d8:	f200 8087 	bhi.w	80092ea <_dtoa_r+0x30a>
 80091dc:	e8df f003 	tbb	[pc, r3]
 80091e0:	59383a2d 	.word	0x59383a2d
 80091e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80091e8:	441d      	add	r5, r3
 80091ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80091ee:	2b20      	cmp	r3, #32
 80091f0:	bfc1      	itttt	gt
 80091f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80091f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80091fa:	fa0b f303 	lslgt.w	r3, fp, r3
 80091fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009202:	bfda      	itte	le
 8009204:	f1c3 0320 	rsble	r3, r3, #32
 8009208:	fa06 f003 	lslle.w	r0, r6, r3
 800920c:	4318      	orrgt	r0, r3
 800920e:	f7f7 f979 	bl	8000504 <__aeabi_ui2d>
 8009212:	2301      	movs	r3, #1
 8009214:	4606      	mov	r6, r0
 8009216:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800921a:	3d01      	subs	r5, #1
 800921c:	930e      	str	r3, [sp, #56]	; 0x38
 800921e:	e76a      	b.n	80090f6 <_dtoa_r+0x116>
 8009220:	2301      	movs	r3, #1
 8009222:	e7b2      	b.n	800918a <_dtoa_r+0x1aa>
 8009224:	900b      	str	r0, [sp, #44]	; 0x2c
 8009226:	e7b1      	b.n	800918c <_dtoa_r+0x1ac>
 8009228:	9b04      	ldr	r3, [sp, #16]
 800922a:	9a00      	ldr	r2, [sp, #0]
 800922c:	1a9b      	subs	r3, r3, r2
 800922e:	9304      	str	r3, [sp, #16]
 8009230:	4253      	negs	r3, r2
 8009232:	9307      	str	r3, [sp, #28]
 8009234:	2300      	movs	r3, #0
 8009236:	930a      	str	r3, [sp, #40]	; 0x28
 8009238:	e7bf      	b.n	80091ba <_dtoa_r+0x1da>
 800923a:	2300      	movs	r3, #0
 800923c:	9308      	str	r3, [sp, #32]
 800923e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009240:	2b00      	cmp	r3, #0
 8009242:	dc55      	bgt.n	80092f0 <_dtoa_r+0x310>
 8009244:	2301      	movs	r3, #1
 8009246:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800924a:	461a      	mov	r2, r3
 800924c:	9209      	str	r2, [sp, #36]	; 0x24
 800924e:	e00c      	b.n	800926a <_dtoa_r+0x28a>
 8009250:	2301      	movs	r3, #1
 8009252:	e7f3      	b.n	800923c <_dtoa_r+0x25c>
 8009254:	2300      	movs	r3, #0
 8009256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009258:	9308      	str	r3, [sp, #32]
 800925a:	9b00      	ldr	r3, [sp, #0]
 800925c:	4413      	add	r3, r2
 800925e:	9302      	str	r3, [sp, #8]
 8009260:	3301      	adds	r3, #1
 8009262:	2b01      	cmp	r3, #1
 8009264:	9303      	str	r3, [sp, #12]
 8009266:	bfb8      	it	lt
 8009268:	2301      	movlt	r3, #1
 800926a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800926c:	2200      	movs	r2, #0
 800926e:	6042      	str	r2, [r0, #4]
 8009270:	2204      	movs	r2, #4
 8009272:	f102 0614 	add.w	r6, r2, #20
 8009276:	429e      	cmp	r6, r3
 8009278:	6841      	ldr	r1, [r0, #4]
 800927a:	d93d      	bls.n	80092f8 <_dtoa_r+0x318>
 800927c:	4620      	mov	r0, r4
 800927e:	f000 fce9 	bl	8009c54 <_Balloc>
 8009282:	9001      	str	r0, [sp, #4]
 8009284:	2800      	cmp	r0, #0
 8009286:	d13b      	bne.n	8009300 <_dtoa_r+0x320>
 8009288:	4b11      	ldr	r3, [pc, #68]	; (80092d0 <_dtoa_r+0x2f0>)
 800928a:	4602      	mov	r2, r0
 800928c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009290:	e6c0      	b.n	8009014 <_dtoa_r+0x34>
 8009292:	2301      	movs	r3, #1
 8009294:	e7df      	b.n	8009256 <_dtoa_r+0x276>
 8009296:	bf00      	nop
 8009298:	636f4361 	.word	0x636f4361
 800929c:	3fd287a7 	.word	0x3fd287a7
 80092a0:	8b60c8b3 	.word	0x8b60c8b3
 80092a4:	3fc68a28 	.word	0x3fc68a28
 80092a8:	509f79fb 	.word	0x509f79fb
 80092ac:	3fd34413 	.word	0x3fd34413
 80092b0:	0800da25 	.word	0x0800da25
 80092b4:	0800da3c 	.word	0x0800da3c
 80092b8:	7ff00000 	.word	0x7ff00000
 80092bc:	0800da21 	.word	0x0800da21
 80092c0:	0800da18 	.word	0x0800da18
 80092c4:	0800d9f5 	.word	0x0800d9f5
 80092c8:	3ff80000 	.word	0x3ff80000
 80092cc:	0800db30 	.word	0x0800db30
 80092d0:	0800da97 	.word	0x0800da97
 80092d4:	2501      	movs	r5, #1
 80092d6:	2300      	movs	r3, #0
 80092d8:	9306      	str	r3, [sp, #24]
 80092da:	9508      	str	r5, [sp, #32]
 80092dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80092e4:	2200      	movs	r2, #0
 80092e6:	2312      	movs	r3, #18
 80092e8:	e7b0      	b.n	800924c <_dtoa_r+0x26c>
 80092ea:	2301      	movs	r3, #1
 80092ec:	9308      	str	r3, [sp, #32]
 80092ee:	e7f5      	b.n	80092dc <_dtoa_r+0x2fc>
 80092f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80092f6:	e7b8      	b.n	800926a <_dtoa_r+0x28a>
 80092f8:	3101      	adds	r1, #1
 80092fa:	6041      	str	r1, [r0, #4]
 80092fc:	0052      	lsls	r2, r2, #1
 80092fe:	e7b8      	b.n	8009272 <_dtoa_r+0x292>
 8009300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009302:	9a01      	ldr	r2, [sp, #4]
 8009304:	601a      	str	r2, [r3, #0]
 8009306:	9b03      	ldr	r3, [sp, #12]
 8009308:	2b0e      	cmp	r3, #14
 800930a:	f200 809d 	bhi.w	8009448 <_dtoa_r+0x468>
 800930e:	2d00      	cmp	r5, #0
 8009310:	f000 809a 	beq.w	8009448 <_dtoa_r+0x468>
 8009314:	9b00      	ldr	r3, [sp, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	dd32      	ble.n	8009380 <_dtoa_r+0x3a0>
 800931a:	4ab7      	ldr	r2, [pc, #732]	; (80095f8 <_dtoa_r+0x618>)
 800931c:	f003 030f 	and.w	r3, r3, #15
 8009320:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009324:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009328:	9b00      	ldr	r3, [sp, #0]
 800932a:	05d8      	lsls	r0, r3, #23
 800932c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009330:	d516      	bpl.n	8009360 <_dtoa_r+0x380>
 8009332:	4bb2      	ldr	r3, [pc, #712]	; (80095fc <_dtoa_r+0x61c>)
 8009334:	ec51 0b19 	vmov	r0, r1, d9
 8009338:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800933c:	f7f7 fa86 	bl	800084c <__aeabi_ddiv>
 8009340:	f007 070f 	and.w	r7, r7, #15
 8009344:	4682      	mov	sl, r0
 8009346:	468b      	mov	fp, r1
 8009348:	2503      	movs	r5, #3
 800934a:	4eac      	ldr	r6, [pc, #688]	; (80095fc <_dtoa_r+0x61c>)
 800934c:	b957      	cbnz	r7, 8009364 <_dtoa_r+0x384>
 800934e:	4642      	mov	r2, r8
 8009350:	464b      	mov	r3, r9
 8009352:	4650      	mov	r0, sl
 8009354:	4659      	mov	r1, fp
 8009356:	f7f7 fa79 	bl	800084c <__aeabi_ddiv>
 800935a:	4682      	mov	sl, r0
 800935c:	468b      	mov	fp, r1
 800935e:	e028      	b.n	80093b2 <_dtoa_r+0x3d2>
 8009360:	2502      	movs	r5, #2
 8009362:	e7f2      	b.n	800934a <_dtoa_r+0x36a>
 8009364:	07f9      	lsls	r1, r7, #31
 8009366:	d508      	bpl.n	800937a <_dtoa_r+0x39a>
 8009368:	4640      	mov	r0, r8
 800936a:	4649      	mov	r1, r9
 800936c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009370:	f7f7 f942 	bl	80005f8 <__aeabi_dmul>
 8009374:	3501      	adds	r5, #1
 8009376:	4680      	mov	r8, r0
 8009378:	4689      	mov	r9, r1
 800937a:	107f      	asrs	r7, r7, #1
 800937c:	3608      	adds	r6, #8
 800937e:	e7e5      	b.n	800934c <_dtoa_r+0x36c>
 8009380:	f000 809b 	beq.w	80094ba <_dtoa_r+0x4da>
 8009384:	9b00      	ldr	r3, [sp, #0]
 8009386:	4f9d      	ldr	r7, [pc, #628]	; (80095fc <_dtoa_r+0x61c>)
 8009388:	425e      	negs	r6, r3
 800938a:	4b9b      	ldr	r3, [pc, #620]	; (80095f8 <_dtoa_r+0x618>)
 800938c:	f006 020f 	and.w	r2, r6, #15
 8009390:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	ec51 0b19 	vmov	r0, r1, d9
 800939c:	f7f7 f92c 	bl	80005f8 <__aeabi_dmul>
 80093a0:	1136      	asrs	r6, r6, #4
 80093a2:	4682      	mov	sl, r0
 80093a4:	468b      	mov	fp, r1
 80093a6:	2300      	movs	r3, #0
 80093a8:	2502      	movs	r5, #2
 80093aa:	2e00      	cmp	r6, #0
 80093ac:	d17a      	bne.n	80094a4 <_dtoa_r+0x4c4>
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1d3      	bne.n	800935a <_dtoa_r+0x37a>
 80093b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f000 8082 	beq.w	80094be <_dtoa_r+0x4de>
 80093ba:	4b91      	ldr	r3, [pc, #580]	; (8009600 <_dtoa_r+0x620>)
 80093bc:	2200      	movs	r2, #0
 80093be:	4650      	mov	r0, sl
 80093c0:	4659      	mov	r1, fp
 80093c2:	f7f7 fb8b 	bl	8000adc <__aeabi_dcmplt>
 80093c6:	2800      	cmp	r0, #0
 80093c8:	d079      	beq.n	80094be <_dtoa_r+0x4de>
 80093ca:	9b03      	ldr	r3, [sp, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d076      	beq.n	80094be <_dtoa_r+0x4de>
 80093d0:	9b02      	ldr	r3, [sp, #8]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	dd36      	ble.n	8009444 <_dtoa_r+0x464>
 80093d6:	9b00      	ldr	r3, [sp, #0]
 80093d8:	4650      	mov	r0, sl
 80093da:	4659      	mov	r1, fp
 80093dc:	1e5f      	subs	r7, r3, #1
 80093de:	2200      	movs	r2, #0
 80093e0:	4b88      	ldr	r3, [pc, #544]	; (8009604 <_dtoa_r+0x624>)
 80093e2:	f7f7 f909 	bl	80005f8 <__aeabi_dmul>
 80093e6:	9e02      	ldr	r6, [sp, #8]
 80093e8:	4682      	mov	sl, r0
 80093ea:	468b      	mov	fp, r1
 80093ec:	3501      	adds	r5, #1
 80093ee:	4628      	mov	r0, r5
 80093f0:	f7f7 f898 	bl	8000524 <__aeabi_i2d>
 80093f4:	4652      	mov	r2, sl
 80093f6:	465b      	mov	r3, fp
 80093f8:	f7f7 f8fe 	bl	80005f8 <__aeabi_dmul>
 80093fc:	4b82      	ldr	r3, [pc, #520]	; (8009608 <_dtoa_r+0x628>)
 80093fe:	2200      	movs	r2, #0
 8009400:	f7f6 ff44 	bl	800028c <__adddf3>
 8009404:	46d0      	mov	r8, sl
 8009406:	46d9      	mov	r9, fp
 8009408:	4682      	mov	sl, r0
 800940a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800940e:	2e00      	cmp	r6, #0
 8009410:	d158      	bne.n	80094c4 <_dtoa_r+0x4e4>
 8009412:	4b7e      	ldr	r3, [pc, #504]	; (800960c <_dtoa_r+0x62c>)
 8009414:	2200      	movs	r2, #0
 8009416:	4640      	mov	r0, r8
 8009418:	4649      	mov	r1, r9
 800941a:	f7f6 ff35 	bl	8000288 <__aeabi_dsub>
 800941e:	4652      	mov	r2, sl
 8009420:	465b      	mov	r3, fp
 8009422:	4680      	mov	r8, r0
 8009424:	4689      	mov	r9, r1
 8009426:	f7f7 fb77 	bl	8000b18 <__aeabi_dcmpgt>
 800942a:	2800      	cmp	r0, #0
 800942c:	f040 8295 	bne.w	800995a <_dtoa_r+0x97a>
 8009430:	4652      	mov	r2, sl
 8009432:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009436:	4640      	mov	r0, r8
 8009438:	4649      	mov	r1, r9
 800943a:	f7f7 fb4f 	bl	8000adc <__aeabi_dcmplt>
 800943e:	2800      	cmp	r0, #0
 8009440:	f040 8289 	bne.w	8009956 <_dtoa_r+0x976>
 8009444:	ec5b ab19 	vmov	sl, fp, d9
 8009448:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800944a:	2b00      	cmp	r3, #0
 800944c:	f2c0 8148 	blt.w	80096e0 <_dtoa_r+0x700>
 8009450:	9a00      	ldr	r2, [sp, #0]
 8009452:	2a0e      	cmp	r2, #14
 8009454:	f300 8144 	bgt.w	80096e0 <_dtoa_r+0x700>
 8009458:	4b67      	ldr	r3, [pc, #412]	; (80095f8 <_dtoa_r+0x618>)
 800945a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800945e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009464:	2b00      	cmp	r3, #0
 8009466:	f280 80d5 	bge.w	8009614 <_dtoa_r+0x634>
 800946a:	9b03      	ldr	r3, [sp, #12]
 800946c:	2b00      	cmp	r3, #0
 800946e:	f300 80d1 	bgt.w	8009614 <_dtoa_r+0x634>
 8009472:	f040 826f 	bne.w	8009954 <_dtoa_r+0x974>
 8009476:	4b65      	ldr	r3, [pc, #404]	; (800960c <_dtoa_r+0x62c>)
 8009478:	2200      	movs	r2, #0
 800947a:	4640      	mov	r0, r8
 800947c:	4649      	mov	r1, r9
 800947e:	f7f7 f8bb 	bl	80005f8 <__aeabi_dmul>
 8009482:	4652      	mov	r2, sl
 8009484:	465b      	mov	r3, fp
 8009486:	f7f7 fb3d 	bl	8000b04 <__aeabi_dcmpge>
 800948a:	9e03      	ldr	r6, [sp, #12]
 800948c:	4637      	mov	r7, r6
 800948e:	2800      	cmp	r0, #0
 8009490:	f040 8245 	bne.w	800991e <_dtoa_r+0x93e>
 8009494:	9d01      	ldr	r5, [sp, #4]
 8009496:	2331      	movs	r3, #49	; 0x31
 8009498:	f805 3b01 	strb.w	r3, [r5], #1
 800949c:	9b00      	ldr	r3, [sp, #0]
 800949e:	3301      	adds	r3, #1
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	e240      	b.n	8009926 <_dtoa_r+0x946>
 80094a4:	07f2      	lsls	r2, r6, #31
 80094a6:	d505      	bpl.n	80094b4 <_dtoa_r+0x4d4>
 80094a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094ac:	f7f7 f8a4 	bl	80005f8 <__aeabi_dmul>
 80094b0:	3501      	adds	r5, #1
 80094b2:	2301      	movs	r3, #1
 80094b4:	1076      	asrs	r6, r6, #1
 80094b6:	3708      	adds	r7, #8
 80094b8:	e777      	b.n	80093aa <_dtoa_r+0x3ca>
 80094ba:	2502      	movs	r5, #2
 80094bc:	e779      	b.n	80093b2 <_dtoa_r+0x3d2>
 80094be:	9f00      	ldr	r7, [sp, #0]
 80094c0:	9e03      	ldr	r6, [sp, #12]
 80094c2:	e794      	b.n	80093ee <_dtoa_r+0x40e>
 80094c4:	9901      	ldr	r1, [sp, #4]
 80094c6:	4b4c      	ldr	r3, [pc, #304]	; (80095f8 <_dtoa_r+0x618>)
 80094c8:	4431      	add	r1, r6
 80094ca:	910d      	str	r1, [sp, #52]	; 0x34
 80094cc:	9908      	ldr	r1, [sp, #32]
 80094ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80094d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80094d6:	2900      	cmp	r1, #0
 80094d8:	d043      	beq.n	8009562 <_dtoa_r+0x582>
 80094da:	494d      	ldr	r1, [pc, #308]	; (8009610 <_dtoa_r+0x630>)
 80094dc:	2000      	movs	r0, #0
 80094de:	f7f7 f9b5 	bl	800084c <__aeabi_ddiv>
 80094e2:	4652      	mov	r2, sl
 80094e4:	465b      	mov	r3, fp
 80094e6:	f7f6 fecf 	bl	8000288 <__aeabi_dsub>
 80094ea:	9d01      	ldr	r5, [sp, #4]
 80094ec:	4682      	mov	sl, r0
 80094ee:	468b      	mov	fp, r1
 80094f0:	4649      	mov	r1, r9
 80094f2:	4640      	mov	r0, r8
 80094f4:	f7f7 fb30 	bl	8000b58 <__aeabi_d2iz>
 80094f8:	4606      	mov	r6, r0
 80094fa:	f7f7 f813 	bl	8000524 <__aeabi_i2d>
 80094fe:	4602      	mov	r2, r0
 8009500:	460b      	mov	r3, r1
 8009502:	4640      	mov	r0, r8
 8009504:	4649      	mov	r1, r9
 8009506:	f7f6 febf 	bl	8000288 <__aeabi_dsub>
 800950a:	3630      	adds	r6, #48	; 0x30
 800950c:	f805 6b01 	strb.w	r6, [r5], #1
 8009510:	4652      	mov	r2, sl
 8009512:	465b      	mov	r3, fp
 8009514:	4680      	mov	r8, r0
 8009516:	4689      	mov	r9, r1
 8009518:	f7f7 fae0 	bl	8000adc <__aeabi_dcmplt>
 800951c:	2800      	cmp	r0, #0
 800951e:	d163      	bne.n	80095e8 <_dtoa_r+0x608>
 8009520:	4642      	mov	r2, r8
 8009522:	464b      	mov	r3, r9
 8009524:	4936      	ldr	r1, [pc, #216]	; (8009600 <_dtoa_r+0x620>)
 8009526:	2000      	movs	r0, #0
 8009528:	f7f6 feae 	bl	8000288 <__aeabi_dsub>
 800952c:	4652      	mov	r2, sl
 800952e:	465b      	mov	r3, fp
 8009530:	f7f7 fad4 	bl	8000adc <__aeabi_dcmplt>
 8009534:	2800      	cmp	r0, #0
 8009536:	f040 80b5 	bne.w	80096a4 <_dtoa_r+0x6c4>
 800953a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800953c:	429d      	cmp	r5, r3
 800953e:	d081      	beq.n	8009444 <_dtoa_r+0x464>
 8009540:	4b30      	ldr	r3, [pc, #192]	; (8009604 <_dtoa_r+0x624>)
 8009542:	2200      	movs	r2, #0
 8009544:	4650      	mov	r0, sl
 8009546:	4659      	mov	r1, fp
 8009548:	f7f7 f856 	bl	80005f8 <__aeabi_dmul>
 800954c:	4b2d      	ldr	r3, [pc, #180]	; (8009604 <_dtoa_r+0x624>)
 800954e:	4682      	mov	sl, r0
 8009550:	468b      	mov	fp, r1
 8009552:	4640      	mov	r0, r8
 8009554:	4649      	mov	r1, r9
 8009556:	2200      	movs	r2, #0
 8009558:	f7f7 f84e 	bl	80005f8 <__aeabi_dmul>
 800955c:	4680      	mov	r8, r0
 800955e:	4689      	mov	r9, r1
 8009560:	e7c6      	b.n	80094f0 <_dtoa_r+0x510>
 8009562:	4650      	mov	r0, sl
 8009564:	4659      	mov	r1, fp
 8009566:	f7f7 f847 	bl	80005f8 <__aeabi_dmul>
 800956a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800956c:	9d01      	ldr	r5, [sp, #4]
 800956e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009570:	4682      	mov	sl, r0
 8009572:	468b      	mov	fp, r1
 8009574:	4649      	mov	r1, r9
 8009576:	4640      	mov	r0, r8
 8009578:	f7f7 faee 	bl	8000b58 <__aeabi_d2iz>
 800957c:	4606      	mov	r6, r0
 800957e:	f7f6 ffd1 	bl	8000524 <__aeabi_i2d>
 8009582:	3630      	adds	r6, #48	; 0x30
 8009584:	4602      	mov	r2, r0
 8009586:	460b      	mov	r3, r1
 8009588:	4640      	mov	r0, r8
 800958a:	4649      	mov	r1, r9
 800958c:	f7f6 fe7c 	bl	8000288 <__aeabi_dsub>
 8009590:	f805 6b01 	strb.w	r6, [r5], #1
 8009594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009596:	429d      	cmp	r5, r3
 8009598:	4680      	mov	r8, r0
 800959a:	4689      	mov	r9, r1
 800959c:	f04f 0200 	mov.w	r2, #0
 80095a0:	d124      	bne.n	80095ec <_dtoa_r+0x60c>
 80095a2:	4b1b      	ldr	r3, [pc, #108]	; (8009610 <_dtoa_r+0x630>)
 80095a4:	4650      	mov	r0, sl
 80095a6:	4659      	mov	r1, fp
 80095a8:	f7f6 fe70 	bl	800028c <__adddf3>
 80095ac:	4602      	mov	r2, r0
 80095ae:	460b      	mov	r3, r1
 80095b0:	4640      	mov	r0, r8
 80095b2:	4649      	mov	r1, r9
 80095b4:	f7f7 fab0 	bl	8000b18 <__aeabi_dcmpgt>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d173      	bne.n	80096a4 <_dtoa_r+0x6c4>
 80095bc:	4652      	mov	r2, sl
 80095be:	465b      	mov	r3, fp
 80095c0:	4913      	ldr	r1, [pc, #76]	; (8009610 <_dtoa_r+0x630>)
 80095c2:	2000      	movs	r0, #0
 80095c4:	f7f6 fe60 	bl	8000288 <__aeabi_dsub>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	4640      	mov	r0, r8
 80095ce:	4649      	mov	r1, r9
 80095d0:	f7f7 fa84 	bl	8000adc <__aeabi_dcmplt>
 80095d4:	2800      	cmp	r0, #0
 80095d6:	f43f af35 	beq.w	8009444 <_dtoa_r+0x464>
 80095da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80095dc:	1e6b      	subs	r3, r5, #1
 80095de:	930f      	str	r3, [sp, #60]	; 0x3c
 80095e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80095e4:	2b30      	cmp	r3, #48	; 0x30
 80095e6:	d0f8      	beq.n	80095da <_dtoa_r+0x5fa>
 80095e8:	9700      	str	r7, [sp, #0]
 80095ea:	e049      	b.n	8009680 <_dtoa_r+0x6a0>
 80095ec:	4b05      	ldr	r3, [pc, #20]	; (8009604 <_dtoa_r+0x624>)
 80095ee:	f7f7 f803 	bl	80005f8 <__aeabi_dmul>
 80095f2:	4680      	mov	r8, r0
 80095f4:	4689      	mov	r9, r1
 80095f6:	e7bd      	b.n	8009574 <_dtoa_r+0x594>
 80095f8:	0800db30 	.word	0x0800db30
 80095fc:	0800db08 	.word	0x0800db08
 8009600:	3ff00000 	.word	0x3ff00000
 8009604:	40240000 	.word	0x40240000
 8009608:	401c0000 	.word	0x401c0000
 800960c:	40140000 	.word	0x40140000
 8009610:	3fe00000 	.word	0x3fe00000
 8009614:	9d01      	ldr	r5, [sp, #4]
 8009616:	4656      	mov	r6, sl
 8009618:	465f      	mov	r7, fp
 800961a:	4642      	mov	r2, r8
 800961c:	464b      	mov	r3, r9
 800961e:	4630      	mov	r0, r6
 8009620:	4639      	mov	r1, r7
 8009622:	f7f7 f913 	bl	800084c <__aeabi_ddiv>
 8009626:	f7f7 fa97 	bl	8000b58 <__aeabi_d2iz>
 800962a:	4682      	mov	sl, r0
 800962c:	f7f6 ff7a 	bl	8000524 <__aeabi_i2d>
 8009630:	4642      	mov	r2, r8
 8009632:	464b      	mov	r3, r9
 8009634:	f7f6 ffe0 	bl	80005f8 <__aeabi_dmul>
 8009638:	4602      	mov	r2, r0
 800963a:	460b      	mov	r3, r1
 800963c:	4630      	mov	r0, r6
 800963e:	4639      	mov	r1, r7
 8009640:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009644:	f7f6 fe20 	bl	8000288 <__aeabi_dsub>
 8009648:	f805 6b01 	strb.w	r6, [r5], #1
 800964c:	9e01      	ldr	r6, [sp, #4]
 800964e:	9f03      	ldr	r7, [sp, #12]
 8009650:	1bae      	subs	r6, r5, r6
 8009652:	42b7      	cmp	r7, r6
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	d135      	bne.n	80096c6 <_dtoa_r+0x6e6>
 800965a:	f7f6 fe17 	bl	800028c <__adddf3>
 800965e:	4642      	mov	r2, r8
 8009660:	464b      	mov	r3, r9
 8009662:	4606      	mov	r6, r0
 8009664:	460f      	mov	r7, r1
 8009666:	f7f7 fa57 	bl	8000b18 <__aeabi_dcmpgt>
 800966a:	b9d0      	cbnz	r0, 80096a2 <_dtoa_r+0x6c2>
 800966c:	4642      	mov	r2, r8
 800966e:	464b      	mov	r3, r9
 8009670:	4630      	mov	r0, r6
 8009672:	4639      	mov	r1, r7
 8009674:	f7f7 fa28 	bl	8000ac8 <__aeabi_dcmpeq>
 8009678:	b110      	cbz	r0, 8009680 <_dtoa_r+0x6a0>
 800967a:	f01a 0f01 	tst.w	sl, #1
 800967e:	d110      	bne.n	80096a2 <_dtoa_r+0x6c2>
 8009680:	4620      	mov	r0, r4
 8009682:	ee18 1a10 	vmov	r1, s16
 8009686:	f000 fb25 	bl	8009cd4 <_Bfree>
 800968a:	2300      	movs	r3, #0
 800968c:	9800      	ldr	r0, [sp, #0]
 800968e:	702b      	strb	r3, [r5, #0]
 8009690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009692:	3001      	adds	r0, #1
 8009694:	6018      	str	r0, [r3, #0]
 8009696:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009698:	2b00      	cmp	r3, #0
 800969a:	f43f acf1 	beq.w	8009080 <_dtoa_r+0xa0>
 800969e:	601d      	str	r5, [r3, #0]
 80096a0:	e4ee      	b.n	8009080 <_dtoa_r+0xa0>
 80096a2:	9f00      	ldr	r7, [sp, #0]
 80096a4:	462b      	mov	r3, r5
 80096a6:	461d      	mov	r5, r3
 80096a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096ac:	2a39      	cmp	r2, #57	; 0x39
 80096ae:	d106      	bne.n	80096be <_dtoa_r+0x6de>
 80096b0:	9a01      	ldr	r2, [sp, #4]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d1f7      	bne.n	80096a6 <_dtoa_r+0x6c6>
 80096b6:	9901      	ldr	r1, [sp, #4]
 80096b8:	2230      	movs	r2, #48	; 0x30
 80096ba:	3701      	adds	r7, #1
 80096bc:	700a      	strb	r2, [r1, #0]
 80096be:	781a      	ldrb	r2, [r3, #0]
 80096c0:	3201      	adds	r2, #1
 80096c2:	701a      	strb	r2, [r3, #0]
 80096c4:	e790      	b.n	80095e8 <_dtoa_r+0x608>
 80096c6:	4ba6      	ldr	r3, [pc, #664]	; (8009960 <_dtoa_r+0x980>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	f7f6 ff95 	bl	80005f8 <__aeabi_dmul>
 80096ce:	2200      	movs	r2, #0
 80096d0:	2300      	movs	r3, #0
 80096d2:	4606      	mov	r6, r0
 80096d4:	460f      	mov	r7, r1
 80096d6:	f7f7 f9f7 	bl	8000ac8 <__aeabi_dcmpeq>
 80096da:	2800      	cmp	r0, #0
 80096dc:	d09d      	beq.n	800961a <_dtoa_r+0x63a>
 80096de:	e7cf      	b.n	8009680 <_dtoa_r+0x6a0>
 80096e0:	9a08      	ldr	r2, [sp, #32]
 80096e2:	2a00      	cmp	r2, #0
 80096e4:	f000 80d7 	beq.w	8009896 <_dtoa_r+0x8b6>
 80096e8:	9a06      	ldr	r2, [sp, #24]
 80096ea:	2a01      	cmp	r2, #1
 80096ec:	f300 80ba 	bgt.w	8009864 <_dtoa_r+0x884>
 80096f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096f2:	2a00      	cmp	r2, #0
 80096f4:	f000 80b2 	beq.w	800985c <_dtoa_r+0x87c>
 80096f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80096fc:	9e07      	ldr	r6, [sp, #28]
 80096fe:	9d04      	ldr	r5, [sp, #16]
 8009700:	9a04      	ldr	r2, [sp, #16]
 8009702:	441a      	add	r2, r3
 8009704:	9204      	str	r2, [sp, #16]
 8009706:	9a05      	ldr	r2, [sp, #20]
 8009708:	2101      	movs	r1, #1
 800970a:	441a      	add	r2, r3
 800970c:	4620      	mov	r0, r4
 800970e:	9205      	str	r2, [sp, #20]
 8009710:	f000 fb98 	bl	8009e44 <__i2b>
 8009714:	4607      	mov	r7, r0
 8009716:	2d00      	cmp	r5, #0
 8009718:	dd0c      	ble.n	8009734 <_dtoa_r+0x754>
 800971a:	9b05      	ldr	r3, [sp, #20]
 800971c:	2b00      	cmp	r3, #0
 800971e:	dd09      	ble.n	8009734 <_dtoa_r+0x754>
 8009720:	42ab      	cmp	r3, r5
 8009722:	9a04      	ldr	r2, [sp, #16]
 8009724:	bfa8      	it	ge
 8009726:	462b      	movge	r3, r5
 8009728:	1ad2      	subs	r2, r2, r3
 800972a:	9204      	str	r2, [sp, #16]
 800972c:	9a05      	ldr	r2, [sp, #20]
 800972e:	1aed      	subs	r5, r5, r3
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	9305      	str	r3, [sp, #20]
 8009734:	9b07      	ldr	r3, [sp, #28]
 8009736:	b31b      	cbz	r3, 8009780 <_dtoa_r+0x7a0>
 8009738:	9b08      	ldr	r3, [sp, #32]
 800973a:	2b00      	cmp	r3, #0
 800973c:	f000 80af 	beq.w	800989e <_dtoa_r+0x8be>
 8009740:	2e00      	cmp	r6, #0
 8009742:	dd13      	ble.n	800976c <_dtoa_r+0x78c>
 8009744:	4639      	mov	r1, r7
 8009746:	4632      	mov	r2, r6
 8009748:	4620      	mov	r0, r4
 800974a:	f000 fc3b 	bl	8009fc4 <__pow5mult>
 800974e:	ee18 2a10 	vmov	r2, s16
 8009752:	4601      	mov	r1, r0
 8009754:	4607      	mov	r7, r0
 8009756:	4620      	mov	r0, r4
 8009758:	f000 fb8a 	bl	8009e70 <__multiply>
 800975c:	ee18 1a10 	vmov	r1, s16
 8009760:	4680      	mov	r8, r0
 8009762:	4620      	mov	r0, r4
 8009764:	f000 fab6 	bl	8009cd4 <_Bfree>
 8009768:	ee08 8a10 	vmov	s16, r8
 800976c:	9b07      	ldr	r3, [sp, #28]
 800976e:	1b9a      	subs	r2, r3, r6
 8009770:	d006      	beq.n	8009780 <_dtoa_r+0x7a0>
 8009772:	ee18 1a10 	vmov	r1, s16
 8009776:	4620      	mov	r0, r4
 8009778:	f000 fc24 	bl	8009fc4 <__pow5mult>
 800977c:	ee08 0a10 	vmov	s16, r0
 8009780:	2101      	movs	r1, #1
 8009782:	4620      	mov	r0, r4
 8009784:	f000 fb5e 	bl	8009e44 <__i2b>
 8009788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800978a:	2b00      	cmp	r3, #0
 800978c:	4606      	mov	r6, r0
 800978e:	f340 8088 	ble.w	80098a2 <_dtoa_r+0x8c2>
 8009792:	461a      	mov	r2, r3
 8009794:	4601      	mov	r1, r0
 8009796:	4620      	mov	r0, r4
 8009798:	f000 fc14 	bl	8009fc4 <__pow5mult>
 800979c:	9b06      	ldr	r3, [sp, #24]
 800979e:	2b01      	cmp	r3, #1
 80097a0:	4606      	mov	r6, r0
 80097a2:	f340 8081 	ble.w	80098a8 <_dtoa_r+0x8c8>
 80097a6:	f04f 0800 	mov.w	r8, #0
 80097aa:	6933      	ldr	r3, [r6, #16]
 80097ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80097b0:	6918      	ldr	r0, [r3, #16]
 80097b2:	f000 faf7 	bl	8009da4 <__hi0bits>
 80097b6:	f1c0 0020 	rsb	r0, r0, #32
 80097ba:	9b05      	ldr	r3, [sp, #20]
 80097bc:	4418      	add	r0, r3
 80097be:	f010 001f 	ands.w	r0, r0, #31
 80097c2:	f000 8092 	beq.w	80098ea <_dtoa_r+0x90a>
 80097c6:	f1c0 0320 	rsb	r3, r0, #32
 80097ca:	2b04      	cmp	r3, #4
 80097cc:	f340 808a 	ble.w	80098e4 <_dtoa_r+0x904>
 80097d0:	f1c0 001c 	rsb	r0, r0, #28
 80097d4:	9b04      	ldr	r3, [sp, #16]
 80097d6:	4403      	add	r3, r0
 80097d8:	9304      	str	r3, [sp, #16]
 80097da:	9b05      	ldr	r3, [sp, #20]
 80097dc:	4403      	add	r3, r0
 80097de:	4405      	add	r5, r0
 80097e0:	9305      	str	r3, [sp, #20]
 80097e2:	9b04      	ldr	r3, [sp, #16]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	dd07      	ble.n	80097f8 <_dtoa_r+0x818>
 80097e8:	ee18 1a10 	vmov	r1, s16
 80097ec:	461a      	mov	r2, r3
 80097ee:	4620      	mov	r0, r4
 80097f0:	f000 fc42 	bl	800a078 <__lshift>
 80097f4:	ee08 0a10 	vmov	s16, r0
 80097f8:	9b05      	ldr	r3, [sp, #20]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	dd05      	ble.n	800980a <_dtoa_r+0x82a>
 80097fe:	4631      	mov	r1, r6
 8009800:	461a      	mov	r2, r3
 8009802:	4620      	mov	r0, r4
 8009804:	f000 fc38 	bl	800a078 <__lshift>
 8009808:	4606      	mov	r6, r0
 800980a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800980c:	2b00      	cmp	r3, #0
 800980e:	d06e      	beq.n	80098ee <_dtoa_r+0x90e>
 8009810:	ee18 0a10 	vmov	r0, s16
 8009814:	4631      	mov	r1, r6
 8009816:	f000 fc9f 	bl	800a158 <__mcmp>
 800981a:	2800      	cmp	r0, #0
 800981c:	da67      	bge.n	80098ee <_dtoa_r+0x90e>
 800981e:	9b00      	ldr	r3, [sp, #0]
 8009820:	3b01      	subs	r3, #1
 8009822:	ee18 1a10 	vmov	r1, s16
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	220a      	movs	r2, #10
 800982a:	2300      	movs	r3, #0
 800982c:	4620      	mov	r0, r4
 800982e:	f000 fa73 	bl	8009d18 <__multadd>
 8009832:	9b08      	ldr	r3, [sp, #32]
 8009834:	ee08 0a10 	vmov	s16, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 81b1 	beq.w	8009ba0 <_dtoa_r+0xbc0>
 800983e:	2300      	movs	r3, #0
 8009840:	4639      	mov	r1, r7
 8009842:	220a      	movs	r2, #10
 8009844:	4620      	mov	r0, r4
 8009846:	f000 fa67 	bl	8009d18 <__multadd>
 800984a:	9b02      	ldr	r3, [sp, #8]
 800984c:	2b00      	cmp	r3, #0
 800984e:	4607      	mov	r7, r0
 8009850:	f300 808e 	bgt.w	8009970 <_dtoa_r+0x990>
 8009854:	9b06      	ldr	r3, [sp, #24]
 8009856:	2b02      	cmp	r3, #2
 8009858:	dc51      	bgt.n	80098fe <_dtoa_r+0x91e>
 800985a:	e089      	b.n	8009970 <_dtoa_r+0x990>
 800985c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800985e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009862:	e74b      	b.n	80096fc <_dtoa_r+0x71c>
 8009864:	9b03      	ldr	r3, [sp, #12]
 8009866:	1e5e      	subs	r6, r3, #1
 8009868:	9b07      	ldr	r3, [sp, #28]
 800986a:	42b3      	cmp	r3, r6
 800986c:	bfbf      	itttt	lt
 800986e:	9b07      	ldrlt	r3, [sp, #28]
 8009870:	9607      	strlt	r6, [sp, #28]
 8009872:	1af2      	sublt	r2, r6, r3
 8009874:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009876:	bfb6      	itet	lt
 8009878:	189b      	addlt	r3, r3, r2
 800987a:	1b9e      	subge	r6, r3, r6
 800987c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800987e:	9b03      	ldr	r3, [sp, #12]
 8009880:	bfb8      	it	lt
 8009882:	2600      	movlt	r6, #0
 8009884:	2b00      	cmp	r3, #0
 8009886:	bfb7      	itett	lt
 8009888:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800988c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009890:	1a9d      	sublt	r5, r3, r2
 8009892:	2300      	movlt	r3, #0
 8009894:	e734      	b.n	8009700 <_dtoa_r+0x720>
 8009896:	9e07      	ldr	r6, [sp, #28]
 8009898:	9d04      	ldr	r5, [sp, #16]
 800989a:	9f08      	ldr	r7, [sp, #32]
 800989c:	e73b      	b.n	8009716 <_dtoa_r+0x736>
 800989e:	9a07      	ldr	r2, [sp, #28]
 80098a0:	e767      	b.n	8009772 <_dtoa_r+0x792>
 80098a2:	9b06      	ldr	r3, [sp, #24]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	dc18      	bgt.n	80098da <_dtoa_r+0x8fa>
 80098a8:	f1ba 0f00 	cmp.w	sl, #0
 80098ac:	d115      	bne.n	80098da <_dtoa_r+0x8fa>
 80098ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098b2:	b993      	cbnz	r3, 80098da <_dtoa_r+0x8fa>
 80098b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80098b8:	0d1b      	lsrs	r3, r3, #20
 80098ba:	051b      	lsls	r3, r3, #20
 80098bc:	b183      	cbz	r3, 80098e0 <_dtoa_r+0x900>
 80098be:	9b04      	ldr	r3, [sp, #16]
 80098c0:	3301      	adds	r3, #1
 80098c2:	9304      	str	r3, [sp, #16]
 80098c4:	9b05      	ldr	r3, [sp, #20]
 80098c6:	3301      	adds	r3, #1
 80098c8:	9305      	str	r3, [sp, #20]
 80098ca:	f04f 0801 	mov.w	r8, #1
 80098ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f47f af6a 	bne.w	80097aa <_dtoa_r+0x7ca>
 80098d6:	2001      	movs	r0, #1
 80098d8:	e76f      	b.n	80097ba <_dtoa_r+0x7da>
 80098da:	f04f 0800 	mov.w	r8, #0
 80098de:	e7f6      	b.n	80098ce <_dtoa_r+0x8ee>
 80098e0:	4698      	mov	r8, r3
 80098e2:	e7f4      	b.n	80098ce <_dtoa_r+0x8ee>
 80098e4:	f43f af7d 	beq.w	80097e2 <_dtoa_r+0x802>
 80098e8:	4618      	mov	r0, r3
 80098ea:	301c      	adds	r0, #28
 80098ec:	e772      	b.n	80097d4 <_dtoa_r+0x7f4>
 80098ee:	9b03      	ldr	r3, [sp, #12]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	dc37      	bgt.n	8009964 <_dtoa_r+0x984>
 80098f4:	9b06      	ldr	r3, [sp, #24]
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	dd34      	ble.n	8009964 <_dtoa_r+0x984>
 80098fa:	9b03      	ldr	r3, [sp, #12]
 80098fc:	9302      	str	r3, [sp, #8]
 80098fe:	9b02      	ldr	r3, [sp, #8]
 8009900:	b96b      	cbnz	r3, 800991e <_dtoa_r+0x93e>
 8009902:	4631      	mov	r1, r6
 8009904:	2205      	movs	r2, #5
 8009906:	4620      	mov	r0, r4
 8009908:	f000 fa06 	bl	8009d18 <__multadd>
 800990c:	4601      	mov	r1, r0
 800990e:	4606      	mov	r6, r0
 8009910:	ee18 0a10 	vmov	r0, s16
 8009914:	f000 fc20 	bl	800a158 <__mcmp>
 8009918:	2800      	cmp	r0, #0
 800991a:	f73f adbb 	bgt.w	8009494 <_dtoa_r+0x4b4>
 800991e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009920:	9d01      	ldr	r5, [sp, #4]
 8009922:	43db      	mvns	r3, r3
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	f04f 0800 	mov.w	r8, #0
 800992a:	4631      	mov	r1, r6
 800992c:	4620      	mov	r0, r4
 800992e:	f000 f9d1 	bl	8009cd4 <_Bfree>
 8009932:	2f00      	cmp	r7, #0
 8009934:	f43f aea4 	beq.w	8009680 <_dtoa_r+0x6a0>
 8009938:	f1b8 0f00 	cmp.w	r8, #0
 800993c:	d005      	beq.n	800994a <_dtoa_r+0x96a>
 800993e:	45b8      	cmp	r8, r7
 8009940:	d003      	beq.n	800994a <_dtoa_r+0x96a>
 8009942:	4641      	mov	r1, r8
 8009944:	4620      	mov	r0, r4
 8009946:	f000 f9c5 	bl	8009cd4 <_Bfree>
 800994a:	4639      	mov	r1, r7
 800994c:	4620      	mov	r0, r4
 800994e:	f000 f9c1 	bl	8009cd4 <_Bfree>
 8009952:	e695      	b.n	8009680 <_dtoa_r+0x6a0>
 8009954:	2600      	movs	r6, #0
 8009956:	4637      	mov	r7, r6
 8009958:	e7e1      	b.n	800991e <_dtoa_r+0x93e>
 800995a:	9700      	str	r7, [sp, #0]
 800995c:	4637      	mov	r7, r6
 800995e:	e599      	b.n	8009494 <_dtoa_r+0x4b4>
 8009960:	40240000 	.word	0x40240000
 8009964:	9b08      	ldr	r3, [sp, #32]
 8009966:	2b00      	cmp	r3, #0
 8009968:	f000 80ca 	beq.w	8009b00 <_dtoa_r+0xb20>
 800996c:	9b03      	ldr	r3, [sp, #12]
 800996e:	9302      	str	r3, [sp, #8]
 8009970:	2d00      	cmp	r5, #0
 8009972:	dd05      	ble.n	8009980 <_dtoa_r+0x9a0>
 8009974:	4639      	mov	r1, r7
 8009976:	462a      	mov	r2, r5
 8009978:	4620      	mov	r0, r4
 800997a:	f000 fb7d 	bl	800a078 <__lshift>
 800997e:	4607      	mov	r7, r0
 8009980:	f1b8 0f00 	cmp.w	r8, #0
 8009984:	d05b      	beq.n	8009a3e <_dtoa_r+0xa5e>
 8009986:	6879      	ldr	r1, [r7, #4]
 8009988:	4620      	mov	r0, r4
 800998a:	f000 f963 	bl	8009c54 <_Balloc>
 800998e:	4605      	mov	r5, r0
 8009990:	b928      	cbnz	r0, 800999e <_dtoa_r+0x9be>
 8009992:	4b87      	ldr	r3, [pc, #540]	; (8009bb0 <_dtoa_r+0xbd0>)
 8009994:	4602      	mov	r2, r0
 8009996:	f240 21ea 	movw	r1, #746	; 0x2ea
 800999a:	f7ff bb3b 	b.w	8009014 <_dtoa_r+0x34>
 800999e:	693a      	ldr	r2, [r7, #16]
 80099a0:	3202      	adds	r2, #2
 80099a2:	0092      	lsls	r2, r2, #2
 80099a4:	f107 010c 	add.w	r1, r7, #12
 80099a8:	300c      	adds	r0, #12
 80099aa:	f7fe fb69 	bl	8008080 <memcpy>
 80099ae:	2201      	movs	r2, #1
 80099b0:	4629      	mov	r1, r5
 80099b2:	4620      	mov	r0, r4
 80099b4:	f000 fb60 	bl	800a078 <__lshift>
 80099b8:	9b01      	ldr	r3, [sp, #4]
 80099ba:	f103 0901 	add.w	r9, r3, #1
 80099be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80099c2:	4413      	add	r3, r2
 80099c4:	9305      	str	r3, [sp, #20]
 80099c6:	f00a 0301 	and.w	r3, sl, #1
 80099ca:	46b8      	mov	r8, r7
 80099cc:	9304      	str	r3, [sp, #16]
 80099ce:	4607      	mov	r7, r0
 80099d0:	4631      	mov	r1, r6
 80099d2:	ee18 0a10 	vmov	r0, s16
 80099d6:	f7ff fa77 	bl	8008ec8 <quorem>
 80099da:	4641      	mov	r1, r8
 80099dc:	9002      	str	r0, [sp, #8]
 80099de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80099e2:	ee18 0a10 	vmov	r0, s16
 80099e6:	f000 fbb7 	bl	800a158 <__mcmp>
 80099ea:	463a      	mov	r2, r7
 80099ec:	9003      	str	r0, [sp, #12]
 80099ee:	4631      	mov	r1, r6
 80099f0:	4620      	mov	r0, r4
 80099f2:	f000 fbcd 	bl	800a190 <__mdiff>
 80099f6:	68c2      	ldr	r2, [r0, #12]
 80099f8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80099fc:	4605      	mov	r5, r0
 80099fe:	bb02      	cbnz	r2, 8009a42 <_dtoa_r+0xa62>
 8009a00:	4601      	mov	r1, r0
 8009a02:	ee18 0a10 	vmov	r0, s16
 8009a06:	f000 fba7 	bl	800a158 <__mcmp>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	4629      	mov	r1, r5
 8009a0e:	4620      	mov	r0, r4
 8009a10:	9207      	str	r2, [sp, #28]
 8009a12:	f000 f95f 	bl	8009cd4 <_Bfree>
 8009a16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009a1a:	ea43 0102 	orr.w	r1, r3, r2
 8009a1e:	9b04      	ldr	r3, [sp, #16]
 8009a20:	430b      	orrs	r3, r1
 8009a22:	464d      	mov	r5, r9
 8009a24:	d10f      	bne.n	8009a46 <_dtoa_r+0xa66>
 8009a26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009a2a:	d02a      	beq.n	8009a82 <_dtoa_r+0xaa2>
 8009a2c:	9b03      	ldr	r3, [sp, #12]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	dd02      	ble.n	8009a38 <_dtoa_r+0xa58>
 8009a32:	9b02      	ldr	r3, [sp, #8]
 8009a34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009a38:	f88b a000 	strb.w	sl, [fp]
 8009a3c:	e775      	b.n	800992a <_dtoa_r+0x94a>
 8009a3e:	4638      	mov	r0, r7
 8009a40:	e7ba      	b.n	80099b8 <_dtoa_r+0x9d8>
 8009a42:	2201      	movs	r2, #1
 8009a44:	e7e2      	b.n	8009a0c <_dtoa_r+0xa2c>
 8009a46:	9b03      	ldr	r3, [sp, #12]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	db04      	blt.n	8009a56 <_dtoa_r+0xa76>
 8009a4c:	9906      	ldr	r1, [sp, #24]
 8009a4e:	430b      	orrs	r3, r1
 8009a50:	9904      	ldr	r1, [sp, #16]
 8009a52:	430b      	orrs	r3, r1
 8009a54:	d122      	bne.n	8009a9c <_dtoa_r+0xabc>
 8009a56:	2a00      	cmp	r2, #0
 8009a58:	ddee      	ble.n	8009a38 <_dtoa_r+0xa58>
 8009a5a:	ee18 1a10 	vmov	r1, s16
 8009a5e:	2201      	movs	r2, #1
 8009a60:	4620      	mov	r0, r4
 8009a62:	f000 fb09 	bl	800a078 <__lshift>
 8009a66:	4631      	mov	r1, r6
 8009a68:	ee08 0a10 	vmov	s16, r0
 8009a6c:	f000 fb74 	bl	800a158 <__mcmp>
 8009a70:	2800      	cmp	r0, #0
 8009a72:	dc03      	bgt.n	8009a7c <_dtoa_r+0xa9c>
 8009a74:	d1e0      	bne.n	8009a38 <_dtoa_r+0xa58>
 8009a76:	f01a 0f01 	tst.w	sl, #1
 8009a7a:	d0dd      	beq.n	8009a38 <_dtoa_r+0xa58>
 8009a7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009a80:	d1d7      	bne.n	8009a32 <_dtoa_r+0xa52>
 8009a82:	2339      	movs	r3, #57	; 0x39
 8009a84:	f88b 3000 	strb.w	r3, [fp]
 8009a88:	462b      	mov	r3, r5
 8009a8a:	461d      	mov	r5, r3
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009a92:	2a39      	cmp	r2, #57	; 0x39
 8009a94:	d071      	beq.n	8009b7a <_dtoa_r+0xb9a>
 8009a96:	3201      	adds	r2, #1
 8009a98:	701a      	strb	r2, [r3, #0]
 8009a9a:	e746      	b.n	800992a <_dtoa_r+0x94a>
 8009a9c:	2a00      	cmp	r2, #0
 8009a9e:	dd07      	ble.n	8009ab0 <_dtoa_r+0xad0>
 8009aa0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009aa4:	d0ed      	beq.n	8009a82 <_dtoa_r+0xaa2>
 8009aa6:	f10a 0301 	add.w	r3, sl, #1
 8009aaa:	f88b 3000 	strb.w	r3, [fp]
 8009aae:	e73c      	b.n	800992a <_dtoa_r+0x94a>
 8009ab0:	9b05      	ldr	r3, [sp, #20]
 8009ab2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009ab6:	4599      	cmp	r9, r3
 8009ab8:	d047      	beq.n	8009b4a <_dtoa_r+0xb6a>
 8009aba:	ee18 1a10 	vmov	r1, s16
 8009abe:	2300      	movs	r3, #0
 8009ac0:	220a      	movs	r2, #10
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f000 f928 	bl	8009d18 <__multadd>
 8009ac8:	45b8      	cmp	r8, r7
 8009aca:	ee08 0a10 	vmov	s16, r0
 8009ace:	f04f 0300 	mov.w	r3, #0
 8009ad2:	f04f 020a 	mov.w	r2, #10
 8009ad6:	4641      	mov	r1, r8
 8009ad8:	4620      	mov	r0, r4
 8009ada:	d106      	bne.n	8009aea <_dtoa_r+0xb0a>
 8009adc:	f000 f91c 	bl	8009d18 <__multadd>
 8009ae0:	4680      	mov	r8, r0
 8009ae2:	4607      	mov	r7, r0
 8009ae4:	f109 0901 	add.w	r9, r9, #1
 8009ae8:	e772      	b.n	80099d0 <_dtoa_r+0x9f0>
 8009aea:	f000 f915 	bl	8009d18 <__multadd>
 8009aee:	4639      	mov	r1, r7
 8009af0:	4680      	mov	r8, r0
 8009af2:	2300      	movs	r3, #0
 8009af4:	220a      	movs	r2, #10
 8009af6:	4620      	mov	r0, r4
 8009af8:	f000 f90e 	bl	8009d18 <__multadd>
 8009afc:	4607      	mov	r7, r0
 8009afe:	e7f1      	b.n	8009ae4 <_dtoa_r+0xb04>
 8009b00:	9b03      	ldr	r3, [sp, #12]
 8009b02:	9302      	str	r3, [sp, #8]
 8009b04:	9d01      	ldr	r5, [sp, #4]
 8009b06:	ee18 0a10 	vmov	r0, s16
 8009b0a:	4631      	mov	r1, r6
 8009b0c:	f7ff f9dc 	bl	8008ec8 <quorem>
 8009b10:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009b14:	9b01      	ldr	r3, [sp, #4]
 8009b16:	f805 ab01 	strb.w	sl, [r5], #1
 8009b1a:	1aea      	subs	r2, r5, r3
 8009b1c:	9b02      	ldr	r3, [sp, #8]
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	dd09      	ble.n	8009b36 <_dtoa_r+0xb56>
 8009b22:	ee18 1a10 	vmov	r1, s16
 8009b26:	2300      	movs	r3, #0
 8009b28:	220a      	movs	r2, #10
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f000 f8f4 	bl	8009d18 <__multadd>
 8009b30:	ee08 0a10 	vmov	s16, r0
 8009b34:	e7e7      	b.n	8009b06 <_dtoa_r+0xb26>
 8009b36:	9b02      	ldr	r3, [sp, #8]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	bfc8      	it	gt
 8009b3c:	461d      	movgt	r5, r3
 8009b3e:	9b01      	ldr	r3, [sp, #4]
 8009b40:	bfd8      	it	le
 8009b42:	2501      	movle	r5, #1
 8009b44:	441d      	add	r5, r3
 8009b46:	f04f 0800 	mov.w	r8, #0
 8009b4a:	ee18 1a10 	vmov	r1, s16
 8009b4e:	2201      	movs	r2, #1
 8009b50:	4620      	mov	r0, r4
 8009b52:	f000 fa91 	bl	800a078 <__lshift>
 8009b56:	4631      	mov	r1, r6
 8009b58:	ee08 0a10 	vmov	s16, r0
 8009b5c:	f000 fafc 	bl	800a158 <__mcmp>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	dc91      	bgt.n	8009a88 <_dtoa_r+0xaa8>
 8009b64:	d102      	bne.n	8009b6c <_dtoa_r+0xb8c>
 8009b66:	f01a 0f01 	tst.w	sl, #1
 8009b6a:	d18d      	bne.n	8009a88 <_dtoa_r+0xaa8>
 8009b6c:	462b      	mov	r3, r5
 8009b6e:	461d      	mov	r5, r3
 8009b70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b74:	2a30      	cmp	r2, #48	; 0x30
 8009b76:	d0fa      	beq.n	8009b6e <_dtoa_r+0xb8e>
 8009b78:	e6d7      	b.n	800992a <_dtoa_r+0x94a>
 8009b7a:	9a01      	ldr	r2, [sp, #4]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d184      	bne.n	8009a8a <_dtoa_r+0xaaa>
 8009b80:	9b00      	ldr	r3, [sp, #0]
 8009b82:	3301      	adds	r3, #1
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	2331      	movs	r3, #49	; 0x31
 8009b88:	7013      	strb	r3, [r2, #0]
 8009b8a:	e6ce      	b.n	800992a <_dtoa_r+0x94a>
 8009b8c:	4b09      	ldr	r3, [pc, #36]	; (8009bb4 <_dtoa_r+0xbd4>)
 8009b8e:	f7ff ba95 	b.w	80090bc <_dtoa_r+0xdc>
 8009b92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f47f aa6e 	bne.w	8009076 <_dtoa_r+0x96>
 8009b9a:	4b07      	ldr	r3, [pc, #28]	; (8009bb8 <_dtoa_r+0xbd8>)
 8009b9c:	f7ff ba8e 	b.w	80090bc <_dtoa_r+0xdc>
 8009ba0:	9b02      	ldr	r3, [sp, #8]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	dcae      	bgt.n	8009b04 <_dtoa_r+0xb24>
 8009ba6:	9b06      	ldr	r3, [sp, #24]
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	f73f aea8 	bgt.w	80098fe <_dtoa_r+0x91e>
 8009bae:	e7a9      	b.n	8009b04 <_dtoa_r+0xb24>
 8009bb0:	0800da97 	.word	0x0800da97
 8009bb4:	0800d9f4 	.word	0x0800d9f4
 8009bb8:	0800da18 	.word	0x0800da18

08009bbc <_fstat_r>:
 8009bbc:	b538      	push	{r3, r4, r5, lr}
 8009bbe:	4d07      	ldr	r5, [pc, #28]	; (8009bdc <_fstat_r+0x20>)
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	4608      	mov	r0, r1
 8009bc6:	4611      	mov	r1, r2
 8009bc8:	602b      	str	r3, [r5, #0]
 8009bca:	f7f8 f98f 	bl	8001eec <_fstat>
 8009bce:	1c43      	adds	r3, r0, #1
 8009bd0:	d102      	bne.n	8009bd8 <_fstat_r+0x1c>
 8009bd2:	682b      	ldr	r3, [r5, #0]
 8009bd4:	b103      	cbz	r3, 8009bd8 <_fstat_r+0x1c>
 8009bd6:	6023      	str	r3, [r4, #0]
 8009bd8:	bd38      	pop	{r3, r4, r5, pc}
 8009bda:	bf00      	nop
 8009bdc:	2000a3d8 	.word	0x2000a3d8

08009be0 <_isatty_r>:
 8009be0:	b538      	push	{r3, r4, r5, lr}
 8009be2:	4d06      	ldr	r5, [pc, #24]	; (8009bfc <_isatty_r+0x1c>)
 8009be4:	2300      	movs	r3, #0
 8009be6:	4604      	mov	r4, r0
 8009be8:	4608      	mov	r0, r1
 8009bea:	602b      	str	r3, [r5, #0]
 8009bec:	f7f8 f98e 	bl	8001f0c <_isatty>
 8009bf0:	1c43      	adds	r3, r0, #1
 8009bf2:	d102      	bne.n	8009bfa <_isatty_r+0x1a>
 8009bf4:	682b      	ldr	r3, [r5, #0]
 8009bf6:	b103      	cbz	r3, 8009bfa <_isatty_r+0x1a>
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	bd38      	pop	{r3, r4, r5, pc}
 8009bfc:	2000a3d8 	.word	0x2000a3d8

08009c00 <_localeconv_r>:
 8009c00:	4800      	ldr	r0, [pc, #0]	; (8009c04 <_localeconv_r+0x4>)
 8009c02:	4770      	bx	lr
 8009c04:	20000168 	.word	0x20000168

08009c08 <_lseek_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	4d07      	ldr	r5, [pc, #28]	; (8009c28 <_lseek_r+0x20>)
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	4608      	mov	r0, r1
 8009c10:	4611      	mov	r1, r2
 8009c12:	2200      	movs	r2, #0
 8009c14:	602a      	str	r2, [r5, #0]
 8009c16:	461a      	mov	r2, r3
 8009c18:	f7f8 f983 	bl	8001f22 <_lseek>
 8009c1c:	1c43      	adds	r3, r0, #1
 8009c1e:	d102      	bne.n	8009c26 <_lseek_r+0x1e>
 8009c20:	682b      	ldr	r3, [r5, #0]
 8009c22:	b103      	cbz	r3, 8009c26 <_lseek_r+0x1e>
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	bd38      	pop	{r3, r4, r5, pc}
 8009c28:	2000a3d8 	.word	0x2000a3d8

08009c2c <malloc>:
 8009c2c:	4b02      	ldr	r3, [pc, #8]	; (8009c38 <malloc+0xc>)
 8009c2e:	4601      	mov	r1, r0
 8009c30:	6818      	ldr	r0, [r3, #0]
 8009c32:	f7fe baa7 	b.w	8008184 <_malloc_r>
 8009c36:	bf00      	nop
 8009c38:	20000014 	.word	0x20000014

08009c3c <__malloc_lock>:
 8009c3c:	4801      	ldr	r0, [pc, #4]	; (8009c44 <__malloc_lock+0x8>)
 8009c3e:	f7fe b9b8 	b.w	8007fb2 <__retarget_lock_acquire_recursive>
 8009c42:	bf00      	nop
 8009c44:	2000a3cc 	.word	0x2000a3cc

08009c48 <__malloc_unlock>:
 8009c48:	4801      	ldr	r0, [pc, #4]	; (8009c50 <__malloc_unlock+0x8>)
 8009c4a:	f7fe b9b3 	b.w	8007fb4 <__retarget_lock_release_recursive>
 8009c4e:	bf00      	nop
 8009c50:	2000a3cc 	.word	0x2000a3cc

08009c54 <_Balloc>:
 8009c54:	b570      	push	{r4, r5, r6, lr}
 8009c56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c58:	4604      	mov	r4, r0
 8009c5a:	460d      	mov	r5, r1
 8009c5c:	b976      	cbnz	r6, 8009c7c <_Balloc+0x28>
 8009c5e:	2010      	movs	r0, #16
 8009c60:	f7ff ffe4 	bl	8009c2c <malloc>
 8009c64:	4602      	mov	r2, r0
 8009c66:	6260      	str	r0, [r4, #36]	; 0x24
 8009c68:	b920      	cbnz	r0, 8009c74 <_Balloc+0x20>
 8009c6a:	4b18      	ldr	r3, [pc, #96]	; (8009ccc <_Balloc+0x78>)
 8009c6c:	4818      	ldr	r0, [pc, #96]	; (8009cd0 <_Balloc+0x7c>)
 8009c6e:	2166      	movs	r1, #102	; 0x66
 8009c70:	f000 fcf6 	bl	800a660 <__assert_func>
 8009c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c78:	6006      	str	r6, [r0, #0]
 8009c7a:	60c6      	str	r6, [r0, #12]
 8009c7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009c7e:	68f3      	ldr	r3, [r6, #12]
 8009c80:	b183      	cbz	r3, 8009ca4 <_Balloc+0x50>
 8009c82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c8a:	b9b8      	cbnz	r0, 8009cbc <_Balloc+0x68>
 8009c8c:	2101      	movs	r1, #1
 8009c8e:	fa01 f605 	lsl.w	r6, r1, r5
 8009c92:	1d72      	adds	r2, r6, #5
 8009c94:	0092      	lsls	r2, r2, #2
 8009c96:	4620      	mov	r0, r4
 8009c98:	f000 fb60 	bl	800a35c <_calloc_r>
 8009c9c:	b160      	cbz	r0, 8009cb8 <_Balloc+0x64>
 8009c9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ca2:	e00e      	b.n	8009cc2 <_Balloc+0x6e>
 8009ca4:	2221      	movs	r2, #33	; 0x21
 8009ca6:	2104      	movs	r1, #4
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f000 fb57 	bl	800a35c <_calloc_r>
 8009cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cb0:	60f0      	str	r0, [r6, #12]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1e4      	bne.n	8009c82 <_Balloc+0x2e>
 8009cb8:	2000      	movs	r0, #0
 8009cba:	bd70      	pop	{r4, r5, r6, pc}
 8009cbc:	6802      	ldr	r2, [r0, #0]
 8009cbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009cc8:	e7f7      	b.n	8009cba <_Balloc+0x66>
 8009cca:	bf00      	nop
 8009ccc:	0800da25 	.word	0x0800da25
 8009cd0:	0800daa8 	.word	0x0800daa8

08009cd4 <_Bfree>:
 8009cd4:	b570      	push	{r4, r5, r6, lr}
 8009cd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009cd8:	4605      	mov	r5, r0
 8009cda:	460c      	mov	r4, r1
 8009cdc:	b976      	cbnz	r6, 8009cfc <_Bfree+0x28>
 8009cde:	2010      	movs	r0, #16
 8009ce0:	f7ff ffa4 	bl	8009c2c <malloc>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	6268      	str	r0, [r5, #36]	; 0x24
 8009ce8:	b920      	cbnz	r0, 8009cf4 <_Bfree+0x20>
 8009cea:	4b09      	ldr	r3, [pc, #36]	; (8009d10 <_Bfree+0x3c>)
 8009cec:	4809      	ldr	r0, [pc, #36]	; (8009d14 <_Bfree+0x40>)
 8009cee:	218a      	movs	r1, #138	; 0x8a
 8009cf0:	f000 fcb6 	bl	800a660 <__assert_func>
 8009cf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cf8:	6006      	str	r6, [r0, #0]
 8009cfa:	60c6      	str	r6, [r0, #12]
 8009cfc:	b13c      	cbz	r4, 8009d0e <_Bfree+0x3a>
 8009cfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d00:	6862      	ldr	r2, [r4, #4]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d08:	6021      	str	r1, [r4, #0]
 8009d0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d0e:	bd70      	pop	{r4, r5, r6, pc}
 8009d10:	0800da25 	.word	0x0800da25
 8009d14:	0800daa8 	.word	0x0800daa8

08009d18 <__multadd>:
 8009d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d1c:	690d      	ldr	r5, [r1, #16]
 8009d1e:	4607      	mov	r7, r0
 8009d20:	460c      	mov	r4, r1
 8009d22:	461e      	mov	r6, r3
 8009d24:	f101 0c14 	add.w	ip, r1, #20
 8009d28:	2000      	movs	r0, #0
 8009d2a:	f8dc 3000 	ldr.w	r3, [ip]
 8009d2e:	b299      	uxth	r1, r3
 8009d30:	fb02 6101 	mla	r1, r2, r1, r6
 8009d34:	0c1e      	lsrs	r6, r3, #16
 8009d36:	0c0b      	lsrs	r3, r1, #16
 8009d38:	fb02 3306 	mla	r3, r2, r6, r3
 8009d3c:	b289      	uxth	r1, r1
 8009d3e:	3001      	adds	r0, #1
 8009d40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d44:	4285      	cmp	r5, r0
 8009d46:	f84c 1b04 	str.w	r1, [ip], #4
 8009d4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009d4e:	dcec      	bgt.n	8009d2a <__multadd+0x12>
 8009d50:	b30e      	cbz	r6, 8009d96 <__multadd+0x7e>
 8009d52:	68a3      	ldr	r3, [r4, #8]
 8009d54:	42ab      	cmp	r3, r5
 8009d56:	dc19      	bgt.n	8009d8c <__multadd+0x74>
 8009d58:	6861      	ldr	r1, [r4, #4]
 8009d5a:	4638      	mov	r0, r7
 8009d5c:	3101      	adds	r1, #1
 8009d5e:	f7ff ff79 	bl	8009c54 <_Balloc>
 8009d62:	4680      	mov	r8, r0
 8009d64:	b928      	cbnz	r0, 8009d72 <__multadd+0x5a>
 8009d66:	4602      	mov	r2, r0
 8009d68:	4b0c      	ldr	r3, [pc, #48]	; (8009d9c <__multadd+0x84>)
 8009d6a:	480d      	ldr	r0, [pc, #52]	; (8009da0 <__multadd+0x88>)
 8009d6c:	21b5      	movs	r1, #181	; 0xb5
 8009d6e:	f000 fc77 	bl	800a660 <__assert_func>
 8009d72:	6922      	ldr	r2, [r4, #16]
 8009d74:	3202      	adds	r2, #2
 8009d76:	f104 010c 	add.w	r1, r4, #12
 8009d7a:	0092      	lsls	r2, r2, #2
 8009d7c:	300c      	adds	r0, #12
 8009d7e:	f7fe f97f 	bl	8008080 <memcpy>
 8009d82:	4621      	mov	r1, r4
 8009d84:	4638      	mov	r0, r7
 8009d86:	f7ff ffa5 	bl	8009cd4 <_Bfree>
 8009d8a:	4644      	mov	r4, r8
 8009d8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009d90:	3501      	adds	r5, #1
 8009d92:	615e      	str	r6, [r3, #20]
 8009d94:	6125      	str	r5, [r4, #16]
 8009d96:	4620      	mov	r0, r4
 8009d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d9c:	0800da97 	.word	0x0800da97
 8009da0:	0800daa8 	.word	0x0800daa8

08009da4 <__hi0bits>:
 8009da4:	0c03      	lsrs	r3, r0, #16
 8009da6:	041b      	lsls	r3, r3, #16
 8009da8:	b9d3      	cbnz	r3, 8009de0 <__hi0bits+0x3c>
 8009daa:	0400      	lsls	r0, r0, #16
 8009dac:	2310      	movs	r3, #16
 8009dae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009db2:	bf04      	itt	eq
 8009db4:	0200      	lsleq	r0, r0, #8
 8009db6:	3308      	addeq	r3, #8
 8009db8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009dbc:	bf04      	itt	eq
 8009dbe:	0100      	lsleq	r0, r0, #4
 8009dc0:	3304      	addeq	r3, #4
 8009dc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009dc6:	bf04      	itt	eq
 8009dc8:	0080      	lsleq	r0, r0, #2
 8009dca:	3302      	addeq	r3, #2
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	db05      	blt.n	8009ddc <__hi0bits+0x38>
 8009dd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009dd4:	f103 0301 	add.w	r3, r3, #1
 8009dd8:	bf08      	it	eq
 8009dda:	2320      	moveq	r3, #32
 8009ddc:	4618      	mov	r0, r3
 8009dde:	4770      	bx	lr
 8009de0:	2300      	movs	r3, #0
 8009de2:	e7e4      	b.n	8009dae <__hi0bits+0xa>

08009de4 <__lo0bits>:
 8009de4:	6803      	ldr	r3, [r0, #0]
 8009de6:	f013 0207 	ands.w	r2, r3, #7
 8009dea:	4601      	mov	r1, r0
 8009dec:	d00b      	beq.n	8009e06 <__lo0bits+0x22>
 8009dee:	07da      	lsls	r2, r3, #31
 8009df0:	d423      	bmi.n	8009e3a <__lo0bits+0x56>
 8009df2:	0798      	lsls	r0, r3, #30
 8009df4:	bf49      	itett	mi
 8009df6:	085b      	lsrmi	r3, r3, #1
 8009df8:	089b      	lsrpl	r3, r3, #2
 8009dfa:	2001      	movmi	r0, #1
 8009dfc:	600b      	strmi	r3, [r1, #0]
 8009dfe:	bf5c      	itt	pl
 8009e00:	600b      	strpl	r3, [r1, #0]
 8009e02:	2002      	movpl	r0, #2
 8009e04:	4770      	bx	lr
 8009e06:	b298      	uxth	r0, r3
 8009e08:	b9a8      	cbnz	r0, 8009e36 <__lo0bits+0x52>
 8009e0a:	0c1b      	lsrs	r3, r3, #16
 8009e0c:	2010      	movs	r0, #16
 8009e0e:	b2da      	uxtb	r2, r3
 8009e10:	b90a      	cbnz	r2, 8009e16 <__lo0bits+0x32>
 8009e12:	3008      	adds	r0, #8
 8009e14:	0a1b      	lsrs	r3, r3, #8
 8009e16:	071a      	lsls	r2, r3, #28
 8009e18:	bf04      	itt	eq
 8009e1a:	091b      	lsreq	r3, r3, #4
 8009e1c:	3004      	addeq	r0, #4
 8009e1e:	079a      	lsls	r2, r3, #30
 8009e20:	bf04      	itt	eq
 8009e22:	089b      	lsreq	r3, r3, #2
 8009e24:	3002      	addeq	r0, #2
 8009e26:	07da      	lsls	r2, r3, #31
 8009e28:	d403      	bmi.n	8009e32 <__lo0bits+0x4e>
 8009e2a:	085b      	lsrs	r3, r3, #1
 8009e2c:	f100 0001 	add.w	r0, r0, #1
 8009e30:	d005      	beq.n	8009e3e <__lo0bits+0x5a>
 8009e32:	600b      	str	r3, [r1, #0]
 8009e34:	4770      	bx	lr
 8009e36:	4610      	mov	r0, r2
 8009e38:	e7e9      	b.n	8009e0e <__lo0bits+0x2a>
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	4770      	bx	lr
 8009e3e:	2020      	movs	r0, #32
 8009e40:	4770      	bx	lr
	...

08009e44 <__i2b>:
 8009e44:	b510      	push	{r4, lr}
 8009e46:	460c      	mov	r4, r1
 8009e48:	2101      	movs	r1, #1
 8009e4a:	f7ff ff03 	bl	8009c54 <_Balloc>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	b928      	cbnz	r0, 8009e5e <__i2b+0x1a>
 8009e52:	4b05      	ldr	r3, [pc, #20]	; (8009e68 <__i2b+0x24>)
 8009e54:	4805      	ldr	r0, [pc, #20]	; (8009e6c <__i2b+0x28>)
 8009e56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009e5a:	f000 fc01 	bl	800a660 <__assert_func>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	6144      	str	r4, [r0, #20]
 8009e62:	6103      	str	r3, [r0, #16]
 8009e64:	bd10      	pop	{r4, pc}
 8009e66:	bf00      	nop
 8009e68:	0800da97 	.word	0x0800da97
 8009e6c:	0800daa8 	.word	0x0800daa8

08009e70 <__multiply>:
 8009e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e74:	4691      	mov	r9, r2
 8009e76:	690a      	ldr	r2, [r1, #16]
 8009e78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	bfb8      	it	lt
 8009e80:	460b      	movlt	r3, r1
 8009e82:	460c      	mov	r4, r1
 8009e84:	bfbc      	itt	lt
 8009e86:	464c      	movlt	r4, r9
 8009e88:	4699      	movlt	r9, r3
 8009e8a:	6927      	ldr	r7, [r4, #16]
 8009e8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009e90:	68a3      	ldr	r3, [r4, #8]
 8009e92:	6861      	ldr	r1, [r4, #4]
 8009e94:	eb07 060a 	add.w	r6, r7, sl
 8009e98:	42b3      	cmp	r3, r6
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	bfb8      	it	lt
 8009e9e:	3101      	addlt	r1, #1
 8009ea0:	f7ff fed8 	bl	8009c54 <_Balloc>
 8009ea4:	b930      	cbnz	r0, 8009eb4 <__multiply+0x44>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	4b44      	ldr	r3, [pc, #272]	; (8009fbc <__multiply+0x14c>)
 8009eaa:	4845      	ldr	r0, [pc, #276]	; (8009fc0 <__multiply+0x150>)
 8009eac:	f240 115d 	movw	r1, #349	; 0x15d
 8009eb0:	f000 fbd6 	bl	800a660 <__assert_func>
 8009eb4:	f100 0514 	add.w	r5, r0, #20
 8009eb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ebc:	462b      	mov	r3, r5
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	4543      	cmp	r3, r8
 8009ec2:	d321      	bcc.n	8009f08 <__multiply+0x98>
 8009ec4:	f104 0314 	add.w	r3, r4, #20
 8009ec8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ecc:	f109 0314 	add.w	r3, r9, #20
 8009ed0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ed4:	9202      	str	r2, [sp, #8]
 8009ed6:	1b3a      	subs	r2, r7, r4
 8009ed8:	3a15      	subs	r2, #21
 8009eda:	f022 0203 	bic.w	r2, r2, #3
 8009ede:	3204      	adds	r2, #4
 8009ee0:	f104 0115 	add.w	r1, r4, #21
 8009ee4:	428f      	cmp	r7, r1
 8009ee6:	bf38      	it	cc
 8009ee8:	2204      	movcc	r2, #4
 8009eea:	9201      	str	r2, [sp, #4]
 8009eec:	9a02      	ldr	r2, [sp, #8]
 8009eee:	9303      	str	r3, [sp, #12]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d80c      	bhi.n	8009f0e <__multiply+0x9e>
 8009ef4:	2e00      	cmp	r6, #0
 8009ef6:	dd03      	ble.n	8009f00 <__multiply+0x90>
 8009ef8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d05a      	beq.n	8009fb6 <__multiply+0x146>
 8009f00:	6106      	str	r6, [r0, #16]
 8009f02:	b005      	add	sp, #20
 8009f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f08:	f843 2b04 	str.w	r2, [r3], #4
 8009f0c:	e7d8      	b.n	8009ec0 <__multiply+0x50>
 8009f0e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f12:	f1ba 0f00 	cmp.w	sl, #0
 8009f16:	d024      	beq.n	8009f62 <__multiply+0xf2>
 8009f18:	f104 0e14 	add.w	lr, r4, #20
 8009f1c:	46a9      	mov	r9, r5
 8009f1e:	f04f 0c00 	mov.w	ip, #0
 8009f22:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009f26:	f8d9 1000 	ldr.w	r1, [r9]
 8009f2a:	fa1f fb82 	uxth.w	fp, r2
 8009f2e:	b289      	uxth	r1, r1
 8009f30:	fb0a 110b 	mla	r1, sl, fp, r1
 8009f34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009f38:	f8d9 2000 	ldr.w	r2, [r9]
 8009f3c:	4461      	add	r1, ip
 8009f3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f42:	fb0a c20b 	mla	r2, sl, fp, ip
 8009f46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009f4a:	b289      	uxth	r1, r1
 8009f4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009f50:	4577      	cmp	r7, lr
 8009f52:	f849 1b04 	str.w	r1, [r9], #4
 8009f56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f5a:	d8e2      	bhi.n	8009f22 <__multiply+0xb2>
 8009f5c:	9a01      	ldr	r2, [sp, #4]
 8009f5e:	f845 c002 	str.w	ip, [r5, r2]
 8009f62:	9a03      	ldr	r2, [sp, #12]
 8009f64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009f68:	3304      	adds	r3, #4
 8009f6a:	f1b9 0f00 	cmp.w	r9, #0
 8009f6e:	d020      	beq.n	8009fb2 <__multiply+0x142>
 8009f70:	6829      	ldr	r1, [r5, #0]
 8009f72:	f104 0c14 	add.w	ip, r4, #20
 8009f76:	46ae      	mov	lr, r5
 8009f78:	f04f 0a00 	mov.w	sl, #0
 8009f7c:	f8bc b000 	ldrh.w	fp, [ip]
 8009f80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009f84:	fb09 220b 	mla	r2, r9, fp, r2
 8009f88:	4492      	add	sl, r2
 8009f8a:	b289      	uxth	r1, r1
 8009f8c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009f90:	f84e 1b04 	str.w	r1, [lr], #4
 8009f94:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009f98:	f8be 1000 	ldrh.w	r1, [lr]
 8009f9c:	0c12      	lsrs	r2, r2, #16
 8009f9e:	fb09 1102 	mla	r1, r9, r2, r1
 8009fa2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009fa6:	4567      	cmp	r7, ip
 8009fa8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009fac:	d8e6      	bhi.n	8009f7c <__multiply+0x10c>
 8009fae:	9a01      	ldr	r2, [sp, #4]
 8009fb0:	50a9      	str	r1, [r5, r2]
 8009fb2:	3504      	adds	r5, #4
 8009fb4:	e79a      	b.n	8009eec <__multiply+0x7c>
 8009fb6:	3e01      	subs	r6, #1
 8009fb8:	e79c      	b.n	8009ef4 <__multiply+0x84>
 8009fba:	bf00      	nop
 8009fbc:	0800da97 	.word	0x0800da97
 8009fc0:	0800daa8 	.word	0x0800daa8

08009fc4 <__pow5mult>:
 8009fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fc8:	4615      	mov	r5, r2
 8009fca:	f012 0203 	ands.w	r2, r2, #3
 8009fce:	4606      	mov	r6, r0
 8009fd0:	460f      	mov	r7, r1
 8009fd2:	d007      	beq.n	8009fe4 <__pow5mult+0x20>
 8009fd4:	4c25      	ldr	r4, [pc, #148]	; (800a06c <__pow5mult+0xa8>)
 8009fd6:	3a01      	subs	r2, #1
 8009fd8:	2300      	movs	r3, #0
 8009fda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009fde:	f7ff fe9b 	bl	8009d18 <__multadd>
 8009fe2:	4607      	mov	r7, r0
 8009fe4:	10ad      	asrs	r5, r5, #2
 8009fe6:	d03d      	beq.n	800a064 <__pow5mult+0xa0>
 8009fe8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009fea:	b97c      	cbnz	r4, 800a00c <__pow5mult+0x48>
 8009fec:	2010      	movs	r0, #16
 8009fee:	f7ff fe1d 	bl	8009c2c <malloc>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	6270      	str	r0, [r6, #36]	; 0x24
 8009ff6:	b928      	cbnz	r0, 800a004 <__pow5mult+0x40>
 8009ff8:	4b1d      	ldr	r3, [pc, #116]	; (800a070 <__pow5mult+0xac>)
 8009ffa:	481e      	ldr	r0, [pc, #120]	; (800a074 <__pow5mult+0xb0>)
 8009ffc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a000:	f000 fb2e 	bl	800a660 <__assert_func>
 800a004:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a008:	6004      	str	r4, [r0, #0]
 800a00a:	60c4      	str	r4, [r0, #12]
 800a00c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a010:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a014:	b94c      	cbnz	r4, 800a02a <__pow5mult+0x66>
 800a016:	f240 2171 	movw	r1, #625	; 0x271
 800a01a:	4630      	mov	r0, r6
 800a01c:	f7ff ff12 	bl	8009e44 <__i2b>
 800a020:	2300      	movs	r3, #0
 800a022:	f8c8 0008 	str.w	r0, [r8, #8]
 800a026:	4604      	mov	r4, r0
 800a028:	6003      	str	r3, [r0, #0]
 800a02a:	f04f 0900 	mov.w	r9, #0
 800a02e:	07eb      	lsls	r3, r5, #31
 800a030:	d50a      	bpl.n	800a048 <__pow5mult+0x84>
 800a032:	4639      	mov	r1, r7
 800a034:	4622      	mov	r2, r4
 800a036:	4630      	mov	r0, r6
 800a038:	f7ff ff1a 	bl	8009e70 <__multiply>
 800a03c:	4639      	mov	r1, r7
 800a03e:	4680      	mov	r8, r0
 800a040:	4630      	mov	r0, r6
 800a042:	f7ff fe47 	bl	8009cd4 <_Bfree>
 800a046:	4647      	mov	r7, r8
 800a048:	106d      	asrs	r5, r5, #1
 800a04a:	d00b      	beq.n	800a064 <__pow5mult+0xa0>
 800a04c:	6820      	ldr	r0, [r4, #0]
 800a04e:	b938      	cbnz	r0, 800a060 <__pow5mult+0x9c>
 800a050:	4622      	mov	r2, r4
 800a052:	4621      	mov	r1, r4
 800a054:	4630      	mov	r0, r6
 800a056:	f7ff ff0b 	bl	8009e70 <__multiply>
 800a05a:	6020      	str	r0, [r4, #0]
 800a05c:	f8c0 9000 	str.w	r9, [r0]
 800a060:	4604      	mov	r4, r0
 800a062:	e7e4      	b.n	800a02e <__pow5mult+0x6a>
 800a064:	4638      	mov	r0, r7
 800a066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a06a:	bf00      	nop
 800a06c:	0800dbf8 	.word	0x0800dbf8
 800a070:	0800da25 	.word	0x0800da25
 800a074:	0800daa8 	.word	0x0800daa8

0800a078 <__lshift>:
 800a078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a07c:	460c      	mov	r4, r1
 800a07e:	6849      	ldr	r1, [r1, #4]
 800a080:	6923      	ldr	r3, [r4, #16]
 800a082:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a086:	68a3      	ldr	r3, [r4, #8]
 800a088:	4607      	mov	r7, r0
 800a08a:	4691      	mov	r9, r2
 800a08c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a090:	f108 0601 	add.w	r6, r8, #1
 800a094:	42b3      	cmp	r3, r6
 800a096:	db0b      	blt.n	800a0b0 <__lshift+0x38>
 800a098:	4638      	mov	r0, r7
 800a09a:	f7ff fddb 	bl	8009c54 <_Balloc>
 800a09e:	4605      	mov	r5, r0
 800a0a0:	b948      	cbnz	r0, 800a0b6 <__lshift+0x3e>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	4b2a      	ldr	r3, [pc, #168]	; (800a150 <__lshift+0xd8>)
 800a0a6:	482b      	ldr	r0, [pc, #172]	; (800a154 <__lshift+0xdc>)
 800a0a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a0ac:	f000 fad8 	bl	800a660 <__assert_func>
 800a0b0:	3101      	adds	r1, #1
 800a0b2:	005b      	lsls	r3, r3, #1
 800a0b4:	e7ee      	b.n	800a094 <__lshift+0x1c>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	f100 0114 	add.w	r1, r0, #20
 800a0bc:	f100 0210 	add.w	r2, r0, #16
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	4553      	cmp	r3, sl
 800a0c4:	db37      	blt.n	800a136 <__lshift+0xbe>
 800a0c6:	6920      	ldr	r0, [r4, #16]
 800a0c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a0cc:	f104 0314 	add.w	r3, r4, #20
 800a0d0:	f019 091f 	ands.w	r9, r9, #31
 800a0d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a0d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a0dc:	d02f      	beq.n	800a13e <__lshift+0xc6>
 800a0de:	f1c9 0e20 	rsb	lr, r9, #32
 800a0e2:	468a      	mov	sl, r1
 800a0e4:	f04f 0c00 	mov.w	ip, #0
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	fa02 f209 	lsl.w	r2, r2, r9
 800a0ee:	ea42 020c 	orr.w	r2, r2, ip
 800a0f2:	f84a 2b04 	str.w	r2, [sl], #4
 800a0f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0fa:	4298      	cmp	r0, r3
 800a0fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a100:	d8f2      	bhi.n	800a0e8 <__lshift+0x70>
 800a102:	1b03      	subs	r3, r0, r4
 800a104:	3b15      	subs	r3, #21
 800a106:	f023 0303 	bic.w	r3, r3, #3
 800a10a:	3304      	adds	r3, #4
 800a10c:	f104 0215 	add.w	r2, r4, #21
 800a110:	4290      	cmp	r0, r2
 800a112:	bf38      	it	cc
 800a114:	2304      	movcc	r3, #4
 800a116:	f841 c003 	str.w	ip, [r1, r3]
 800a11a:	f1bc 0f00 	cmp.w	ip, #0
 800a11e:	d001      	beq.n	800a124 <__lshift+0xac>
 800a120:	f108 0602 	add.w	r6, r8, #2
 800a124:	3e01      	subs	r6, #1
 800a126:	4638      	mov	r0, r7
 800a128:	612e      	str	r6, [r5, #16]
 800a12a:	4621      	mov	r1, r4
 800a12c:	f7ff fdd2 	bl	8009cd4 <_Bfree>
 800a130:	4628      	mov	r0, r5
 800a132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a136:	f842 0f04 	str.w	r0, [r2, #4]!
 800a13a:	3301      	adds	r3, #1
 800a13c:	e7c1      	b.n	800a0c2 <__lshift+0x4a>
 800a13e:	3904      	subs	r1, #4
 800a140:	f853 2b04 	ldr.w	r2, [r3], #4
 800a144:	f841 2f04 	str.w	r2, [r1, #4]!
 800a148:	4298      	cmp	r0, r3
 800a14a:	d8f9      	bhi.n	800a140 <__lshift+0xc8>
 800a14c:	e7ea      	b.n	800a124 <__lshift+0xac>
 800a14e:	bf00      	nop
 800a150:	0800da97 	.word	0x0800da97
 800a154:	0800daa8 	.word	0x0800daa8

0800a158 <__mcmp>:
 800a158:	b530      	push	{r4, r5, lr}
 800a15a:	6902      	ldr	r2, [r0, #16]
 800a15c:	690c      	ldr	r4, [r1, #16]
 800a15e:	1b12      	subs	r2, r2, r4
 800a160:	d10e      	bne.n	800a180 <__mcmp+0x28>
 800a162:	f100 0314 	add.w	r3, r0, #20
 800a166:	3114      	adds	r1, #20
 800a168:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a16c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a170:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a174:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a178:	42a5      	cmp	r5, r4
 800a17a:	d003      	beq.n	800a184 <__mcmp+0x2c>
 800a17c:	d305      	bcc.n	800a18a <__mcmp+0x32>
 800a17e:	2201      	movs	r2, #1
 800a180:	4610      	mov	r0, r2
 800a182:	bd30      	pop	{r4, r5, pc}
 800a184:	4283      	cmp	r3, r0
 800a186:	d3f3      	bcc.n	800a170 <__mcmp+0x18>
 800a188:	e7fa      	b.n	800a180 <__mcmp+0x28>
 800a18a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a18e:	e7f7      	b.n	800a180 <__mcmp+0x28>

0800a190 <__mdiff>:
 800a190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a194:	460c      	mov	r4, r1
 800a196:	4606      	mov	r6, r0
 800a198:	4611      	mov	r1, r2
 800a19a:	4620      	mov	r0, r4
 800a19c:	4690      	mov	r8, r2
 800a19e:	f7ff ffdb 	bl	800a158 <__mcmp>
 800a1a2:	1e05      	subs	r5, r0, #0
 800a1a4:	d110      	bne.n	800a1c8 <__mdiff+0x38>
 800a1a6:	4629      	mov	r1, r5
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	f7ff fd53 	bl	8009c54 <_Balloc>
 800a1ae:	b930      	cbnz	r0, 800a1be <__mdiff+0x2e>
 800a1b0:	4b3a      	ldr	r3, [pc, #232]	; (800a29c <__mdiff+0x10c>)
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	f240 2132 	movw	r1, #562	; 0x232
 800a1b8:	4839      	ldr	r0, [pc, #228]	; (800a2a0 <__mdiff+0x110>)
 800a1ba:	f000 fa51 	bl	800a660 <__assert_func>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a1c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c8:	bfa4      	itt	ge
 800a1ca:	4643      	movge	r3, r8
 800a1cc:	46a0      	movge	r8, r4
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a1d4:	bfa6      	itte	ge
 800a1d6:	461c      	movge	r4, r3
 800a1d8:	2500      	movge	r5, #0
 800a1da:	2501      	movlt	r5, #1
 800a1dc:	f7ff fd3a 	bl	8009c54 <_Balloc>
 800a1e0:	b920      	cbnz	r0, 800a1ec <__mdiff+0x5c>
 800a1e2:	4b2e      	ldr	r3, [pc, #184]	; (800a29c <__mdiff+0x10c>)
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a1ea:	e7e5      	b.n	800a1b8 <__mdiff+0x28>
 800a1ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a1f0:	6926      	ldr	r6, [r4, #16]
 800a1f2:	60c5      	str	r5, [r0, #12]
 800a1f4:	f104 0914 	add.w	r9, r4, #20
 800a1f8:	f108 0514 	add.w	r5, r8, #20
 800a1fc:	f100 0e14 	add.w	lr, r0, #20
 800a200:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a204:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a208:	f108 0210 	add.w	r2, r8, #16
 800a20c:	46f2      	mov	sl, lr
 800a20e:	2100      	movs	r1, #0
 800a210:	f859 3b04 	ldr.w	r3, [r9], #4
 800a214:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a218:	fa1f f883 	uxth.w	r8, r3
 800a21c:	fa11 f18b 	uxtah	r1, r1, fp
 800a220:	0c1b      	lsrs	r3, r3, #16
 800a222:	eba1 0808 	sub.w	r8, r1, r8
 800a226:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a22a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a22e:	fa1f f888 	uxth.w	r8, r8
 800a232:	1419      	asrs	r1, r3, #16
 800a234:	454e      	cmp	r6, r9
 800a236:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a23a:	f84a 3b04 	str.w	r3, [sl], #4
 800a23e:	d8e7      	bhi.n	800a210 <__mdiff+0x80>
 800a240:	1b33      	subs	r3, r6, r4
 800a242:	3b15      	subs	r3, #21
 800a244:	f023 0303 	bic.w	r3, r3, #3
 800a248:	3304      	adds	r3, #4
 800a24a:	3415      	adds	r4, #21
 800a24c:	42a6      	cmp	r6, r4
 800a24e:	bf38      	it	cc
 800a250:	2304      	movcc	r3, #4
 800a252:	441d      	add	r5, r3
 800a254:	4473      	add	r3, lr
 800a256:	469e      	mov	lr, r3
 800a258:	462e      	mov	r6, r5
 800a25a:	4566      	cmp	r6, ip
 800a25c:	d30e      	bcc.n	800a27c <__mdiff+0xec>
 800a25e:	f10c 0203 	add.w	r2, ip, #3
 800a262:	1b52      	subs	r2, r2, r5
 800a264:	f022 0203 	bic.w	r2, r2, #3
 800a268:	3d03      	subs	r5, #3
 800a26a:	45ac      	cmp	ip, r5
 800a26c:	bf38      	it	cc
 800a26e:	2200      	movcc	r2, #0
 800a270:	441a      	add	r2, r3
 800a272:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a276:	b17b      	cbz	r3, 800a298 <__mdiff+0x108>
 800a278:	6107      	str	r7, [r0, #16]
 800a27a:	e7a3      	b.n	800a1c4 <__mdiff+0x34>
 800a27c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a280:	fa11 f288 	uxtah	r2, r1, r8
 800a284:	1414      	asrs	r4, r2, #16
 800a286:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a28a:	b292      	uxth	r2, r2
 800a28c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a290:	f84e 2b04 	str.w	r2, [lr], #4
 800a294:	1421      	asrs	r1, r4, #16
 800a296:	e7e0      	b.n	800a25a <__mdiff+0xca>
 800a298:	3f01      	subs	r7, #1
 800a29a:	e7ea      	b.n	800a272 <__mdiff+0xe2>
 800a29c:	0800da97 	.word	0x0800da97
 800a2a0:	0800daa8 	.word	0x0800daa8

0800a2a4 <__d2b>:
 800a2a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2a8:	4689      	mov	r9, r1
 800a2aa:	2101      	movs	r1, #1
 800a2ac:	ec57 6b10 	vmov	r6, r7, d0
 800a2b0:	4690      	mov	r8, r2
 800a2b2:	f7ff fccf 	bl	8009c54 <_Balloc>
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	b930      	cbnz	r0, 800a2c8 <__d2b+0x24>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	4b25      	ldr	r3, [pc, #148]	; (800a354 <__d2b+0xb0>)
 800a2be:	4826      	ldr	r0, [pc, #152]	; (800a358 <__d2b+0xb4>)
 800a2c0:	f240 310a 	movw	r1, #778	; 0x30a
 800a2c4:	f000 f9cc 	bl	800a660 <__assert_func>
 800a2c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a2cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a2d0:	bb35      	cbnz	r5, 800a320 <__d2b+0x7c>
 800a2d2:	2e00      	cmp	r6, #0
 800a2d4:	9301      	str	r3, [sp, #4]
 800a2d6:	d028      	beq.n	800a32a <__d2b+0x86>
 800a2d8:	4668      	mov	r0, sp
 800a2da:	9600      	str	r6, [sp, #0]
 800a2dc:	f7ff fd82 	bl	8009de4 <__lo0bits>
 800a2e0:	9900      	ldr	r1, [sp, #0]
 800a2e2:	b300      	cbz	r0, 800a326 <__d2b+0x82>
 800a2e4:	9a01      	ldr	r2, [sp, #4]
 800a2e6:	f1c0 0320 	rsb	r3, r0, #32
 800a2ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ee:	430b      	orrs	r3, r1
 800a2f0:	40c2      	lsrs	r2, r0
 800a2f2:	6163      	str	r3, [r4, #20]
 800a2f4:	9201      	str	r2, [sp, #4]
 800a2f6:	9b01      	ldr	r3, [sp, #4]
 800a2f8:	61a3      	str	r3, [r4, #24]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	bf14      	ite	ne
 800a2fe:	2202      	movne	r2, #2
 800a300:	2201      	moveq	r2, #1
 800a302:	6122      	str	r2, [r4, #16]
 800a304:	b1d5      	cbz	r5, 800a33c <__d2b+0x98>
 800a306:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a30a:	4405      	add	r5, r0
 800a30c:	f8c9 5000 	str.w	r5, [r9]
 800a310:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a314:	f8c8 0000 	str.w	r0, [r8]
 800a318:	4620      	mov	r0, r4
 800a31a:	b003      	add	sp, #12
 800a31c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a320:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a324:	e7d5      	b.n	800a2d2 <__d2b+0x2e>
 800a326:	6161      	str	r1, [r4, #20]
 800a328:	e7e5      	b.n	800a2f6 <__d2b+0x52>
 800a32a:	a801      	add	r0, sp, #4
 800a32c:	f7ff fd5a 	bl	8009de4 <__lo0bits>
 800a330:	9b01      	ldr	r3, [sp, #4]
 800a332:	6163      	str	r3, [r4, #20]
 800a334:	2201      	movs	r2, #1
 800a336:	6122      	str	r2, [r4, #16]
 800a338:	3020      	adds	r0, #32
 800a33a:	e7e3      	b.n	800a304 <__d2b+0x60>
 800a33c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a340:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a344:	f8c9 0000 	str.w	r0, [r9]
 800a348:	6918      	ldr	r0, [r3, #16]
 800a34a:	f7ff fd2b 	bl	8009da4 <__hi0bits>
 800a34e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a352:	e7df      	b.n	800a314 <__d2b+0x70>
 800a354:	0800da97 	.word	0x0800da97
 800a358:	0800daa8 	.word	0x0800daa8

0800a35c <_calloc_r>:
 800a35c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a35e:	fba1 2402 	umull	r2, r4, r1, r2
 800a362:	b94c      	cbnz	r4, 800a378 <_calloc_r+0x1c>
 800a364:	4611      	mov	r1, r2
 800a366:	9201      	str	r2, [sp, #4]
 800a368:	f7fd ff0c 	bl	8008184 <_malloc_r>
 800a36c:	9a01      	ldr	r2, [sp, #4]
 800a36e:	4605      	mov	r5, r0
 800a370:	b930      	cbnz	r0, 800a380 <_calloc_r+0x24>
 800a372:	4628      	mov	r0, r5
 800a374:	b003      	add	sp, #12
 800a376:	bd30      	pop	{r4, r5, pc}
 800a378:	220c      	movs	r2, #12
 800a37a:	6002      	str	r2, [r0, #0]
 800a37c:	2500      	movs	r5, #0
 800a37e:	e7f8      	b.n	800a372 <_calloc_r+0x16>
 800a380:	4621      	mov	r1, r4
 800a382:	f7fd fe8b 	bl	800809c <memset>
 800a386:	e7f4      	b.n	800a372 <_calloc_r+0x16>

0800a388 <__sfputc_r>:
 800a388:	6893      	ldr	r3, [r2, #8]
 800a38a:	3b01      	subs	r3, #1
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	b410      	push	{r4}
 800a390:	6093      	str	r3, [r2, #8]
 800a392:	da08      	bge.n	800a3a6 <__sfputc_r+0x1e>
 800a394:	6994      	ldr	r4, [r2, #24]
 800a396:	42a3      	cmp	r3, r4
 800a398:	db01      	blt.n	800a39e <__sfputc_r+0x16>
 800a39a:	290a      	cmp	r1, #10
 800a39c:	d103      	bne.n	800a3a6 <__sfputc_r+0x1e>
 800a39e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3a2:	f7fe bcaf 	b.w	8008d04 <__swbuf_r>
 800a3a6:	6813      	ldr	r3, [r2, #0]
 800a3a8:	1c58      	adds	r0, r3, #1
 800a3aa:	6010      	str	r0, [r2, #0]
 800a3ac:	7019      	strb	r1, [r3, #0]
 800a3ae:	4608      	mov	r0, r1
 800a3b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3b4:	4770      	bx	lr

0800a3b6 <__sfputs_r>:
 800a3b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b8:	4606      	mov	r6, r0
 800a3ba:	460f      	mov	r7, r1
 800a3bc:	4614      	mov	r4, r2
 800a3be:	18d5      	adds	r5, r2, r3
 800a3c0:	42ac      	cmp	r4, r5
 800a3c2:	d101      	bne.n	800a3c8 <__sfputs_r+0x12>
 800a3c4:	2000      	movs	r0, #0
 800a3c6:	e007      	b.n	800a3d8 <__sfputs_r+0x22>
 800a3c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3cc:	463a      	mov	r2, r7
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	f7ff ffda 	bl	800a388 <__sfputc_r>
 800a3d4:	1c43      	adds	r3, r0, #1
 800a3d6:	d1f3      	bne.n	800a3c0 <__sfputs_r+0xa>
 800a3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3dc <_vfiprintf_r>:
 800a3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e0:	460d      	mov	r5, r1
 800a3e2:	b09d      	sub	sp, #116	; 0x74
 800a3e4:	4614      	mov	r4, r2
 800a3e6:	4698      	mov	r8, r3
 800a3e8:	4606      	mov	r6, r0
 800a3ea:	b118      	cbz	r0, 800a3f4 <_vfiprintf_r+0x18>
 800a3ec:	6983      	ldr	r3, [r0, #24]
 800a3ee:	b90b      	cbnz	r3, 800a3f4 <_vfiprintf_r+0x18>
 800a3f0:	f7fd fd1c 	bl	8007e2c <__sinit>
 800a3f4:	4b89      	ldr	r3, [pc, #548]	; (800a61c <_vfiprintf_r+0x240>)
 800a3f6:	429d      	cmp	r5, r3
 800a3f8:	d11b      	bne.n	800a432 <_vfiprintf_r+0x56>
 800a3fa:	6875      	ldr	r5, [r6, #4]
 800a3fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3fe:	07d9      	lsls	r1, r3, #31
 800a400:	d405      	bmi.n	800a40e <_vfiprintf_r+0x32>
 800a402:	89ab      	ldrh	r3, [r5, #12]
 800a404:	059a      	lsls	r2, r3, #22
 800a406:	d402      	bmi.n	800a40e <_vfiprintf_r+0x32>
 800a408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a40a:	f7fd fdd2 	bl	8007fb2 <__retarget_lock_acquire_recursive>
 800a40e:	89ab      	ldrh	r3, [r5, #12]
 800a410:	071b      	lsls	r3, r3, #28
 800a412:	d501      	bpl.n	800a418 <_vfiprintf_r+0x3c>
 800a414:	692b      	ldr	r3, [r5, #16]
 800a416:	b9eb      	cbnz	r3, 800a454 <_vfiprintf_r+0x78>
 800a418:	4629      	mov	r1, r5
 800a41a:	4630      	mov	r0, r6
 800a41c:	f7fe fcd6 	bl	8008dcc <__swsetup_r>
 800a420:	b1c0      	cbz	r0, 800a454 <_vfiprintf_r+0x78>
 800a422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a424:	07dc      	lsls	r4, r3, #31
 800a426:	d50e      	bpl.n	800a446 <_vfiprintf_r+0x6a>
 800a428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a42c:	b01d      	add	sp, #116	; 0x74
 800a42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a432:	4b7b      	ldr	r3, [pc, #492]	; (800a620 <_vfiprintf_r+0x244>)
 800a434:	429d      	cmp	r5, r3
 800a436:	d101      	bne.n	800a43c <_vfiprintf_r+0x60>
 800a438:	68b5      	ldr	r5, [r6, #8]
 800a43a:	e7df      	b.n	800a3fc <_vfiprintf_r+0x20>
 800a43c:	4b79      	ldr	r3, [pc, #484]	; (800a624 <_vfiprintf_r+0x248>)
 800a43e:	429d      	cmp	r5, r3
 800a440:	bf08      	it	eq
 800a442:	68f5      	ldreq	r5, [r6, #12]
 800a444:	e7da      	b.n	800a3fc <_vfiprintf_r+0x20>
 800a446:	89ab      	ldrh	r3, [r5, #12]
 800a448:	0598      	lsls	r0, r3, #22
 800a44a:	d4ed      	bmi.n	800a428 <_vfiprintf_r+0x4c>
 800a44c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a44e:	f7fd fdb1 	bl	8007fb4 <__retarget_lock_release_recursive>
 800a452:	e7e9      	b.n	800a428 <_vfiprintf_r+0x4c>
 800a454:	2300      	movs	r3, #0
 800a456:	9309      	str	r3, [sp, #36]	; 0x24
 800a458:	2320      	movs	r3, #32
 800a45a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a45e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a462:	2330      	movs	r3, #48	; 0x30
 800a464:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a628 <_vfiprintf_r+0x24c>
 800a468:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a46c:	f04f 0901 	mov.w	r9, #1
 800a470:	4623      	mov	r3, r4
 800a472:	469a      	mov	sl, r3
 800a474:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a478:	b10a      	cbz	r2, 800a47e <_vfiprintf_r+0xa2>
 800a47a:	2a25      	cmp	r2, #37	; 0x25
 800a47c:	d1f9      	bne.n	800a472 <_vfiprintf_r+0x96>
 800a47e:	ebba 0b04 	subs.w	fp, sl, r4
 800a482:	d00b      	beq.n	800a49c <_vfiprintf_r+0xc0>
 800a484:	465b      	mov	r3, fp
 800a486:	4622      	mov	r2, r4
 800a488:	4629      	mov	r1, r5
 800a48a:	4630      	mov	r0, r6
 800a48c:	f7ff ff93 	bl	800a3b6 <__sfputs_r>
 800a490:	3001      	adds	r0, #1
 800a492:	f000 80aa 	beq.w	800a5ea <_vfiprintf_r+0x20e>
 800a496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a498:	445a      	add	r2, fp
 800a49a:	9209      	str	r2, [sp, #36]	; 0x24
 800a49c:	f89a 3000 	ldrb.w	r3, [sl]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f000 80a2 	beq.w	800a5ea <_vfiprintf_r+0x20e>
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4b0:	f10a 0a01 	add.w	sl, sl, #1
 800a4b4:	9304      	str	r3, [sp, #16]
 800a4b6:	9307      	str	r3, [sp, #28]
 800a4b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4bc:	931a      	str	r3, [sp, #104]	; 0x68
 800a4be:	4654      	mov	r4, sl
 800a4c0:	2205      	movs	r2, #5
 800a4c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c6:	4858      	ldr	r0, [pc, #352]	; (800a628 <_vfiprintf_r+0x24c>)
 800a4c8:	f7f5 fe8a 	bl	80001e0 <memchr>
 800a4cc:	9a04      	ldr	r2, [sp, #16]
 800a4ce:	b9d8      	cbnz	r0, 800a508 <_vfiprintf_r+0x12c>
 800a4d0:	06d1      	lsls	r1, r2, #27
 800a4d2:	bf44      	itt	mi
 800a4d4:	2320      	movmi	r3, #32
 800a4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4da:	0713      	lsls	r3, r2, #28
 800a4dc:	bf44      	itt	mi
 800a4de:	232b      	movmi	r3, #43	; 0x2b
 800a4e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a4e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a4ea:	d015      	beq.n	800a518 <_vfiprintf_r+0x13c>
 800a4ec:	9a07      	ldr	r2, [sp, #28]
 800a4ee:	4654      	mov	r4, sl
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	f04f 0c0a 	mov.w	ip, #10
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4fc:	3b30      	subs	r3, #48	; 0x30
 800a4fe:	2b09      	cmp	r3, #9
 800a500:	d94e      	bls.n	800a5a0 <_vfiprintf_r+0x1c4>
 800a502:	b1b0      	cbz	r0, 800a532 <_vfiprintf_r+0x156>
 800a504:	9207      	str	r2, [sp, #28]
 800a506:	e014      	b.n	800a532 <_vfiprintf_r+0x156>
 800a508:	eba0 0308 	sub.w	r3, r0, r8
 800a50c:	fa09 f303 	lsl.w	r3, r9, r3
 800a510:	4313      	orrs	r3, r2
 800a512:	9304      	str	r3, [sp, #16]
 800a514:	46a2      	mov	sl, r4
 800a516:	e7d2      	b.n	800a4be <_vfiprintf_r+0xe2>
 800a518:	9b03      	ldr	r3, [sp, #12]
 800a51a:	1d19      	adds	r1, r3, #4
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	9103      	str	r1, [sp, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	bfbb      	ittet	lt
 800a524:	425b      	neglt	r3, r3
 800a526:	f042 0202 	orrlt.w	r2, r2, #2
 800a52a:	9307      	strge	r3, [sp, #28]
 800a52c:	9307      	strlt	r3, [sp, #28]
 800a52e:	bfb8      	it	lt
 800a530:	9204      	strlt	r2, [sp, #16]
 800a532:	7823      	ldrb	r3, [r4, #0]
 800a534:	2b2e      	cmp	r3, #46	; 0x2e
 800a536:	d10c      	bne.n	800a552 <_vfiprintf_r+0x176>
 800a538:	7863      	ldrb	r3, [r4, #1]
 800a53a:	2b2a      	cmp	r3, #42	; 0x2a
 800a53c:	d135      	bne.n	800a5aa <_vfiprintf_r+0x1ce>
 800a53e:	9b03      	ldr	r3, [sp, #12]
 800a540:	1d1a      	adds	r2, r3, #4
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	9203      	str	r2, [sp, #12]
 800a546:	2b00      	cmp	r3, #0
 800a548:	bfb8      	it	lt
 800a54a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a54e:	3402      	adds	r4, #2
 800a550:	9305      	str	r3, [sp, #20]
 800a552:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a638 <_vfiprintf_r+0x25c>
 800a556:	7821      	ldrb	r1, [r4, #0]
 800a558:	2203      	movs	r2, #3
 800a55a:	4650      	mov	r0, sl
 800a55c:	f7f5 fe40 	bl	80001e0 <memchr>
 800a560:	b140      	cbz	r0, 800a574 <_vfiprintf_r+0x198>
 800a562:	2340      	movs	r3, #64	; 0x40
 800a564:	eba0 000a 	sub.w	r0, r0, sl
 800a568:	fa03 f000 	lsl.w	r0, r3, r0
 800a56c:	9b04      	ldr	r3, [sp, #16]
 800a56e:	4303      	orrs	r3, r0
 800a570:	3401      	adds	r4, #1
 800a572:	9304      	str	r3, [sp, #16]
 800a574:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a578:	482c      	ldr	r0, [pc, #176]	; (800a62c <_vfiprintf_r+0x250>)
 800a57a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a57e:	2206      	movs	r2, #6
 800a580:	f7f5 fe2e 	bl	80001e0 <memchr>
 800a584:	2800      	cmp	r0, #0
 800a586:	d03f      	beq.n	800a608 <_vfiprintf_r+0x22c>
 800a588:	4b29      	ldr	r3, [pc, #164]	; (800a630 <_vfiprintf_r+0x254>)
 800a58a:	bb1b      	cbnz	r3, 800a5d4 <_vfiprintf_r+0x1f8>
 800a58c:	9b03      	ldr	r3, [sp, #12]
 800a58e:	3307      	adds	r3, #7
 800a590:	f023 0307 	bic.w	r3, r3, #7
 800a594:	3308      	adds	r3, #8
 800a596:	9303      	str	r3, [sp, #12]
 800a598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a59a:	443b      	add	r3, r7
 800a59c:	9309      	str	r3, [sp, #36]	; 0x24
 800a59e:	e767      	b.n	800a470 <_vfiprintf_r+0x94>
 800a5a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5a4:	460c      	mov	r4, r1
 800a5a6:	2001      	movs	r0, #1
 800a5a8:	e7a5      	b.n	800a4f6 <_vfiprintf_r+0x11a>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	3401      	adds	r4, #1
 800a5ae:	9305      	str	r3, [sp, #20]
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	f04f 0c0a 	mov.w	ip, #10
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5bc:	3a30      	subs	r2, #48	; 0x30
 800a5be:	2a09      	cmp	r2, #9
 800a5c0:	d903      	bls.n	800a5ca <_vfiprintf_r+0x1ee>
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d0c5      	beq.n	800a552 <_vfiprintf_r+0x176>
 800a5c6:	9105      	str	r1, [sp, #20]
 800a5c8:	e7c3      	b.n	800a552 <_vfiprintf_r+0x176>
 800a5ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e7f0      	b.n	800a5b6 <_vfiprintf_r+0x1da>
 800a5d4:	ab03      	add	r3, sp, #12
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	462a      	mov	r2, r5
 800a5da:	4b16      	ldr	r3, [pc, #88]	; (800a634 <_vfiprintf_r+0x258>)
 800a5dc:	a904      	add	r1, sp, #16
 800a5de:	4630      	mov	r0, r6
 800a5e0:	f7fd fee4 	bl	80083ac <_printf_float>
 800a5e4:	4607      	mov	r7, r0
 800a5e6:	1c78      	adds	r0, r7, #1
 800a5e8:	d1d6      	bne.n	800a598 <_vfiprintf_r+0x1bc>
 800a5ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5ec:	07d9      	lsls	r1, r3, #31
 800a5ee:	d405      	bmi.n	800a5fc <_vfiprintf_r+0x220>
 800a5f0:	89ab      	ldrh	r3, [r5, #12]
 800a5f2:	059a      	lsls	r2, r3, #22
 800a5f4:	d402      	bmi.n	800a5fc <_vfiprintf_r+0x220>
 800a5f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5f8:	f7fd fcdc 	bl	8007fb4 <__retarget_lock_release_recursive>
 800a5fc:	89ab      	ldrh	r3, [r5, #12]
 800a5fe:	065b      	lsls	r3, r3, #25
 800a600:	f53f af12 	bmi.w	800a428 <_vfiprintf_r+0x4c>
 800a604:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a606:	e711      	b.n	800a42c <_vfiprintf_r+0x50>
 800a608:	ab03      	add	r3, sp, #12
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	462a      	mov	r2, r5
 800a60e:	4b09      	ldr	r3, [pc, #36]	; (800a634 <_vfiprintf_r+0x258>)
 800a610:	a904      	add	r1, sp, #16
 800a612:	4630      	mov	r0, r6
 800a614:	f7fe f96e 	bl	80088f4 <_printf_i>
 800a618:	e7e4      	b.n	800a5e4 <_vfiprintf_r+0x208>
 800a61a:	bf00      	nop
 800a61c:	0800d9a0 	.word	0x0800d9a0
 800a620:	0800d9c0 	.word	0x0800d9c0
 800a624:	0800d980 	.word	0x0800d980
 800a628:	0800dc04 	.word	0x0800dc04
 800a62c:	0800dc0e 	.word	0x0800dc0e
 800a630:	080083ad 	.word	0x080083ad
 800a634:	0800a3b7 	.word	0x0800a3b7
 800a638:	0800dc0a 	.word	0x0800dc0a

0800a63c <_read_r>:
 800a63c:	b538      	push	{r3, r4, r5, lr}
 800a63e:	4d07      	ldr	r5, [pc, #28]	; (800a65c <_read_r+0x20>)
 800a640:	4604      	mov	r4, r0
 800a642:	4608      	mov	r0, r1
 800a644:	4611      	mov	r1, r2
 800a646:	2200      	movs	r2, #0
 800a648:	602a      	str	r2, [r5, #0]
 800a64a:	461a      	mov	r2, r3
 800a64c:	f7f7 fc09 	bl	8001e62 <_read>
 800a650:	1c43      	adds	r3, r0, #1
 800a652:	d102      	bne.n	800a65a <_read_r+0x1e>
 800a654:	682b      	ldr	r3, [r5, #0]
 800a656:	b103      	cbz	r3, 800a65a <_read_r+0x1e>
 800a658:	6023      	str	r3, [r4, #0]
 800a65a:	bd38      	pop	{r3, r4, r5, pc}
 800a65c:	2000a3d8 	.word	0x2000a3d8

0800a660 <__assert_func>:
 800a660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a662:	4614      	mov	r4, r2
 800a664:	461a      	mov	r2, r3
 800a666:	4b09      	ldr	r3, [pc, #36]	; (800a68c <__assert_func+0x2c>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4605      	mov	r5, r0
 800a66c:	68d8      	ldr	r0, [r3, #12]
 800a66e:	b14c      	cbz	r4, 800a684 <__assert_func+0x24>
 800a670:	4b07      	ldr	r3, [pc, #28]	; (800a690 <__assert_func+0x30>)
 800a672:	9100      	str	r1, [sp, #0]
 800a674:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a678:	4906      	ldr	r1, [pc, #24]	; (800a694 <__assert_func+0x34>)
 800a67a:	462b      	mov	r3, r5
 800a67c:	f000 f80e 	bl	800a69c <fiprintf>
 800a680:	f000 f83d 	bl	800a6fe <abort>
 800a684:	4b04      	ldr	r3, [pc, #16]	; (800a698 <__assert_func+0x38>)
 800a686:	461c      	mov	r4, r3
 800a688:	e7f3      	b.n	800a672 <__assert_func+0x12>
 800a68a:	bf00      	nop
 800a68c:	20000014 	.word	0x20000014
 800a690:	0800dc15 	.word	0x0800dc15
 800a694:	0800dc22 	.word	0x0800dc22
 800a698:	0800dc50 	.word	0x0800dc50

0800a69c <fiprintf>:
 800a69c:	b40e      	push	{r1, r2, r3}
 800a69e:	b503      	push	{r0, r1, lr}
 800a6a0:	4601      	mov	r1, r0
 800a6a2:	ab03      	add	r3, sp, #12
 800a6a4:	4805      	ldr	r0, [pc, #20]	; (800a6bc <fiprintf+0x20>)
 800a6a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6aa:	6800      	ldr	r0, [r0, #0]
 800a6ac:	9301      	str	r3, [sp, #4]
 800a6ae:	f7ff fe95 	bl	800a3dc <_vfiprintf_r>
 800a6b2:	b002      	add	sp, #8
 800a6b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6b8:	b003      	add	sp, #12
 800a6ba:	4770      	bx	lr
 800a6bc:	20000014 	.word	0x20000014

0800a6c0 <__ascii_mbtowc>:
 800a6c0:	b082      	sub	sp, #8
 800a6c2:	b901      	cbnz	r1, 800a6c6 <__ascii_mbtowc+0x6>
 800a6c4:	a901      	add	r1, sp, #4
 800a6c6:	b142      	cbz	r2, 800a6da <__ascii_mbtowc+0x1a>
 800a6c8:	b14b      	cbz	r3, 800a6de <__ascii_mbtowc+0x1e>
 800a6ca:	7813      	ldrb	r3, [r2, #0]
 800a6cc:	600b      	str	r3, [r1, #0]
 800a6ce:	7812      	ldrb	r2, [r2, #0]
 800a6d0:	1e10      	subs	r0, r2, #0
 800a6d2:	bf18      	it	ne
 800a6d4:	2001      	movne	r0, #1
 800a6d6:	b002      	add	sp, #8
 800a6d8:	4770      	bx	lr
 800a6da:	4610      	mov	r0, r2
 800a6dc:	e7fb      	b.n	800a6d6 <__ascii_mbtowc+0x16>
 800a6de:	f06f 0001 	mvn.w	r0, #1
 800a6e2:	e7f8      	b.n	800a6d6 <__ascii_mbtowc+0x16>

0800a6e4 <__ascii_wctomb>:
 800a6e4:	b149      	cbz	r1, 800a6fa <__ascii_wctomb+0x16>
 800a6e6:	2aff      	cmp	r2, #255	; 0xff
 800a6e8:	bf85      	ittet	hi
 800a6ea:	238a      	movhi	r3, #138	; 0x8a
 800a6ec:	6003      	strhi	r3, [r0, #0]
 800a6ee:	700a      	strbls	r2, [r1, #0]
 800a6f0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a6f4:	bf98      	it	ls
 800a6f6:	2001      	movls	r0, #1
 800a6f8:	4770      	bx	lr
 800a6fa:	4608      	mov	r0, r1
 800a6fc:	4770      	bx	lr

0800a6fe <abort>:
 800a6fe:	b508      	push	{r3, lr}
 800a700:	2006      	movs	r0, #6
 800a702:	f000 f82b 	bl	800a75c <raise>
 800a706:	2001      	movs	r0, #1
 800a708:	f7f7 fba1 	bl	8001e4e <_exit>

0800a70c <_raise_r>:
 800a70c:	291f      	cmp	r1, #31
 800a70e:	b538      	push	{r3, r4, r5, lr}
 800a710:	4604      	mov	r4, r0
 800a712:	460d      	mov	r5, r1
 800a714:	d904      	bls.n	800a720 <_raise_r+0x14>
 800a716:	2316      	movs	r3, #22
 800a718:	6003      	str	r3, [r0, #0]
 800a71a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a71e:	bd38      	pop	{r3, r4, r5, pc}
 800a720:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a722:	b112      	cbz	r2, 800a72a <_raise_r+0x1e>
 800a724:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a728:	b94b      	cbnz	r3, 800a73e <_raise_r+0x32>
 800a72a:	4620      	mov	r0, r4
 800a72c:	f000 f830 	bl	800a790 <_getpid_r>
 800a730:	462a      	mov	r2, r5
 800a732:	4601      	mov	r1, r0
 800a734:	4620      	mov	r0, r4
 800a736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a73a:	f000 b817 	b.w	800a76c <_kill_r>
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d00a      	beq.n	800a758 <_raise_r+0x4c>
 800a742:	1c59      	adds	r1, r3, #1
 800a744:	d103      	bne.n	800a74e <_raise_r+0x42>
 800a746:	2316      	movs	r3, #22
 800a748:	6003      	str	r3, [r0, #0]
 800a74a:	2001      	movs	r0, #1
 800a74c:	e7e7      	b.n	800a71e <_raise_r+0x12>
 800a74e:	2400      	movs	r4, #0
 800a750:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a754:	4628      	mov	r0, r5
 800a756:	4798      	blx	r3
 800a758:	2000      	movs	r0, #0
 800a75a:	e7e0      	b.n	800a71e <_raise_r+0x12>

0800a75c <raise>:
 800a75c:	4b02      	ldr	r3, [pc, #8]	; (800a768 <raise+0xc>)
 800a75e:	4601      	mov	r1, r0
 800a760:	6818      	ldr	r0, [r3, #0]
 800a762:	f7ff bfd3 	b.w	800a70c <_raise_r>
 800a766:	bf00      	nop
 800a768:	20000014 	.word	0x20000014

0800a76c <_kill_r>:
 800a76c:	b538      	push	{r3, r4, r5, lr}
 800a76e:	4d07      	ldr	r5, [pc, #28]	; (800a78c <_kill_r+0x20>)
 800a770:	2300      	movs	r3, #0
 800a772:	4604      	mov	r4, r0
 800a774:	4608      	mov	r0, r1
 800a776:	4611      	mov	r1, r2
 800a778:	602b      	str	r3, [r5, #0]
 800a77a:	f7f7 fb58 	bl	8001e2e <_kill>
 800a77e:	1c43      	adds	r3, r0, #1
 800a780:	d102      	bne.n	800a788 <_kill_r+0x1c>
 800a782:	682b      	ldr	r3, [r5, #0]
 800a784:	b103      	cbz	r3, 800a788 <_kill_r+0x1c>
 800a786:	6023      	str	r3, [r4, #0]
 800a788:	bd38      	pop	{r3, r4, r5, pc}
 800a78a:	bf00      	nop
 800a78c:	2000a3d8 	.word	0x2000a3d8

0800a790 <_getpid_r>:
 800a790:	f7f7 bb45 	b.w	8001e1e <_getpid>

0800a794 <_init>:
 800a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a796:	bf00      	nop
 800a798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a79a:	bc08      	pop	{r3}
 800a79c:	469e      	mov	lr, r3
 800a79e:	4770      	bx	lr

0800a7a0 <_fini>:
 800a7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a2:	bf00      	nop
 800a7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7a6:	bc08      	pop	{r3}
 800a7a8:	469e      	mov	lr, r3
 800a7aa:	4770      	bx	lr
