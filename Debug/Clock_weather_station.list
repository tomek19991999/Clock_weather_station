
Clock_weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c39c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002da44  0800c530  0800c530  0001c530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08039f74  08039f74  000501e4  2**0
                  CONTENTS
  4 .ARM          00000008  08039f74  08039f74  00049f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08039f7c  08039f7c  000501e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08039f7c  08039f7c  00049f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08039f80  08039f80  00049f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08039f84  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a2d8  200001e4  0803a168  000501e4  2**2
                  ALLOC
 10 ._user_heap_stack 00002204  2000a4bc  0803a168  0005a4bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000501e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f235  00000000  00000000  00050214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044fb  00000000  00000000  0006f449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a08  00000000  00000000  00073948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001800  00000000  00000000  00075350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002be3a  00000000  00000000  00076b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022486  00000000  00000000  000a298a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101c5a  00000000  00000000  000c4e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c6a6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e30  00000000  00000000  001c6abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c514 	.word	0x0800c514

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800c514 	.word	0x0800c514

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_DMA_Init+0x38>)
 8000eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <MX_DMA_Init+0x38>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6493      	str	r3, [r2, #72]	; 0x48
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_DMA_Init+0x38>)
 8000ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	200f      	movs	r0, #15
 8000ed0:	f001 fee9 	bl	8002ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ed4:	200f      	movs	r0, #15
 8000ed6:	f001 ff02 	bl	8002cde <HAL_NVIC_EnableIRQ>

}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	4b3d      	ldr	r3, [pc, #244]	; (8000ff4 <MX_GPIO_Init+0x10c>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a3c      	ldr	r2, [pc, #240]	; (8000ff4 <MX_GPIO_Init+0x10c>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ff4 <MX_GPIO_Init+0x10c>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b37      	ldr	r3, [pc, #220]	; (8000ff4 <MX_GPIO_Init+0x10c>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	4a36      	ldr	r2, [pc, #216]	; (8000ff4 <MX_GPIO_Init+0x10c>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f22:	4b34      	ldr	r3, [pc, #208]	; (8000ff4 <MX_GPIO_Init+0x10c>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	4b31      	ldr	r3, [pc, #196]	; (8000ff4 <MX_GPIO_Init+0x10c>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	4a30      	ldr	r2, [pc, #192]	; (8000ff4 <MX_GPIO_Init+0x10c>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <MX_GPIO_Init+0x10c>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2120      	movs	r1, #32
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4e:	f002 fa83 	bl	8003458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2104      	movs	r1, #4
 8000f56:	4828      	ldr	r0, [pc, #160]	; (8000ff8 <MX_GPIO_Init+0x110>)
 8000f58:	f002 fa7e 	bl	8003458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000f62:	4825      	ldr	r0, [pc, #148]	; (8000ff8 <MX_GPIO_Init+0x110>)
 8000f64:	f002 fa78 	bl	8003458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f6c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f80:	f002 f8c0 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f84:	2320      	movs	r3, #32
 8000f86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9e:	f002 f8b1 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTONA6_Pin;
 8000fa2:	2340      	movs	r3, #64	; 0x40
 8000fa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTONA6_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f002 f8a4 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8000fbc:	f641 0304 	movw	r3, #6148	; 0x1804
 8000fc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4808      	ldr	r0, [pc, #32]	; (8000ff8 <MX_GPIO_Init+0x110>)
 8000fd6:	f002 f895 	bl	8003104 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2103      	movs	r1, #3
 8000fde:	2006      	movs	r0, #6
 8000fe0:	f001 fe61 	bl	8002ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fe4:	2006      	movs	r0, #6
 8000fe6:	f001 fe7a 	bl	8002cde <HAL_NVIC_EnableIRQ>

}
 8000fea:	bf00      	nop
 8000fec:	3720      	adds	r7, #32
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	48000400 	.word	0x48000400

08000ffc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <MX_I2C1_Init+0x74>)
 8001002:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <MX_I2C1_Init+0x78>)
 8001004:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_I2C1_Init+0x74>)
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <MX_I2C1_Init+0x7c>)
 800100a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <MX_I2C1_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_I2C1_Init+0x74>)
 8001014:	2201      	movs	r2, #1
 8001016:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <MX_I2C1_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MX_I2C1_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <MX_I2C1_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_I2C1_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_I2C1_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001036:	480e      	ldr	r0, [pc, #56]	; (8001070 <MX_I2C1_Init+0x74>)
 8001038:	f002 fa3e 	bl	80034b8 <HAL_I2C_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001042:	f001 f839 	bl	80020b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001046:	2100      	movs	r1, #0
 8001048:	4809      	ldr	r0, [pc, #36]	; (8001070 <MX_I2C1_Init+0x74>)
 800104a:	f002 ff99 	bl	8003f80 <HAL_I2CEx_ConfigAnalogFilter>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001054:	f001 f830 	bl	80020b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001058:	2100      	movs	r1, #0
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_I2C1_Init+0x74>)
 800105c:	f002 ffdb 	bl	8004016 <HAL_I2CEx_ConfigDigitalFilter>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001066:	f001 f827 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000200 	.word	0x20000200
 8001074:	40005400 	.word	0x40005400
 8001078:	2000090e 	.word	0x2000090e

0800107c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b0ac      	sub	sp, #176	; 0xb0
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2288      	movs	r2, #136	; 0x88
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f007 ff8f 	bl	8008fc0 <memset>
  if(i2cHandle->Instance==I2C1)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a21      	ldr	r2, [pc, #132]	; (800112c <HAL_I2C_MspInit+0xb0>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d13a      	bne.n	8001122 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010ac:	2340      	movs	r3, #64	; 0x40
 80010ae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 fecb 	bl	8004e54 <HAL_RCCEx_PeriphCLKConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010c4:	f000 fff8 	bl	80020b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_I2C_MspInit+0xb4>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010cc:	4a18      	ldr	r2, [pc, #96]	; (8001130 <HAL_I2C_MspInit+0xb4>)
 80010ce:	f043 0302 	orr.w	r3, r3, #2
 80010d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <HAL_I2C_MspInit+0xb4>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010e0:	23c0      	movs	r3, #192	; 0xc0
 80010e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e6:	2312      	movs	r3, #18
 80010e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f8:	2304      	movs	r3, #4
 80010fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001102:	4619      	mov	r1, r3
 8001104:	480b      	ldr	r0, [pc, #44]	; (8001134 <HAL_I2C_MspInit+0xb8>)
 8001106:	f001 fffd 	bl	8003104 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_I2C_MspInit+0xb4>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_I2C_MspInit+0xb4>)
 8001110:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001114:	6593      	str	r3, [r2, #88]	; 0x58
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_I2C_MspInit+0xb4>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001122:	bf00      	nop
 8001124:	37b0      	adds	r7, #176	; 0xb0
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40005400 	.word	0x40005400
 8001130:	40021000 	.word	0x40021000
 8001134:	48000400 	.word	0x48000400

08001138 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MX_IWDG_Init+0x34>)
 800113e:	4a0c      	ldr	r2, [pc, #48]	; (8001170 <MX_IWDG_Init+0x38>)
 8001140:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <MX_IWDG_Init+0x34>)
 8001144:	2206      	movs	r2, #6
 8001146:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_IWDG_Init+0x34>)
 800114a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800114e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_IWDG_Init+0x34>)
 8001152:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001156:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001158:	4804      	ldr	r0, [pc, #16]	; (800116c <MX_IWDG_Init+0x34>)
 800115a:	f002 ffa8 	bl	80040ae <HAL_IWDG_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001164:	f000 ffa8 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000254 	.word	0x20000254
 8001170:	40003000 	.word	0x40003000

08001174 <lcd_cmd>:
#define LCD_OFFSET_Y  2

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];

static void lcd_cmd(uint8_t cmd) //send command
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <lcd_cmd+0x44>)
 8001186:	f002 f967 	bl	8003458 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001190:	4809      	ldr	r0, [pc, #36]	; (80011b8 <lcd_cmd+0x44>)
 8001192:	f002 f961 	bl	8003458 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8001196:	1df9      	adds	r1, r7, #7
 8001198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800119c:	2201      	movs	r2, #1
 800119e:	4807      	ldr	r0, [pc, #28]	; (80011bc <lcd_cmd+0x48>)
 80011a0:	f004 fee1 	bl	8005f66 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011aa:	4803      	ldr	r0, [pc, #12]	; (80011b8 <lcd_cmd+0x44>)
 80011ac:	f002 f954 	bl	8003458 <HAL_GPIO_WritePin>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	48000400 	.word	0x48000400
 80011bc:	2000a290 	.word	0x2000a290

080011c0 <lcd_data>:


static void lcd_data(uint8_t data) //send data
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d0:	480c      	ldr	r0, [pc, #48]	; (8001204 <lcd_data+0x44>)
 80011d2:	f002 f941 	bl	8003458 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011dc:	4809      	ldr	r0, [pc, #36]	; (8001204 <lcd_data+0x44>)
 80011de:	f002 f93b 	bl	8003458 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80011e2:	1df9      	adds	r1, r7, #7
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011e8:	2201      	movs	r2, #1
 80011ea:	4807      	ldr	r0, [pc, #28]	; (8001208 <lcd_data+0x48>)
 80011ec:	f004 febb 	bl	8005f66 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011f6:	4803      	ldr	r0, [pc, #12]	; (8001204 <lcd_data+0x44>)
 80011f8:	f002 f92e 	bl	8003458 <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	48000400 	.word	0x48000400
 8001208:	2000a290 	.word	0x2000a290

0800120c <lcd_send>:


static void lcd_send(uint16_t value)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <lcd_send+0x20>
		lcd_cmd(value);
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ffa5 	bl	8001174 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 800122a:	e004      	b.n	8001236 <lcd_send+0x2a>
		lcd_data(value);
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ffc5 	bl	80011c0 <lcd_data>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <lcd_data16>:
  CMD(ST7735S_MADCTL), 0xa0,
};


static void lcd_data16(uint16_t value)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	0a1b      	lsrs	r3, r3, #8
 800124c:	b29b      	uxth	r3, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ffb5 	bl	80011c0 <lcd_data>
	lcd_data(value);
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ffb0 	bl	80011c0 <lcd_data>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <lcd_set_window>:


static void lcd_set_window(int x, int y, int width, int height)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 8001276:	202a      	movs	r0, #42	; 0x2a
 8001278:	f7ff ff7c 	bl	8001174 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	b29b      	uxth	r3, r3
 8001280:	3301      	adds	r3, #1
 8001282:	b29b      	uxth	r3, r3
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ffda 	bl	800123e <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	b29a      	uxth	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	b29b      	uxth	r3, r3
 8001292:	4413      	add	r3, r2
 8001294:	b29b      	uxth	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ffd1 	bl	800123e <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 800129c:	202b      	movs	r0, #43	; 0x2b
 800129e:	f7ff ff69 	bl	8001174 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	3302      	adds	r3, #2
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ffc7 	bl	800123e <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4413      	add	r3, r2
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	3301      	adds	r3, #1
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ffbc 	bl	800123e <lcd_data16>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <lcd_init>:




void lcd_init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2104      	movs	r1, #4
 80012da:	4817      	ldr	r0, [pc, #92]	; (8001338 <lcd_init+0x68>)
 80012dc:	f002 f8bc 	bl	8003458 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80012e0:	2064      	movs	r0, #100	; 0x64
 80012e2:	f000 f91b 	bl	800151c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80012e6:	2201      	movs	r2, #1
 80012e8:	2104      	movs	r1, #4
 80012ea:	4813      	ldr	r0, [pc, #76]	; (8001338 <lcd_init+0x68>)
 80012ec:	f002 f8b4 	bl	8003458 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80012f0:	2064      	movs	r0, #100	; 0x64
 80012f2:	f000 f913 	bl	800151c <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	e009      	b.n	8001310 <lcd_init+0x40>
    lcd_send(init_table[i]);
 80012fc:	4a0f      	ldr	r2, [pc, #60]	; (800133c <lcd_init+0x6c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff81 	bl	800120c <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3301      	adds	r3, #1
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b4b      	cmp	r3, #75	; 0x4b
 8001314:	d9f2      	bls.n	80012fc <lcd_init+0x2c>
  }

  HAL_Delay(200);
 8001316:	20c8      	movs	r0, #200	; 0xc8
 8001318:	f000 f900 	bl	800151c <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 800131c:	2011      	movs	r0, #17
 800131e:	f7ff ff29 	bl	8001174 <lcd_cmd>
  HAL_Delay(120);
 8001322:	2078      	movs	r0, #120	; 0x78
 8001324:	f000 f8fa 	bl	800151c <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
 8001328:	2029      	movs	r0, #41	; 0x29
 800132a:	f7ff ff23 	bl	8001174 <lcd_cmd>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	48000400 	.word	0x48000400
 800133c:	0800c74c 	.word	0x0800c74c

08001340 <lcd_put_pixel>:

void lcd_put_pixel(int x, int y, uint16_t color)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	4613      	mov	r3, r2
 800134c:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	015b      	lsls	r3, r3, #5
 8001358:	461a      	mov	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4413      	add	r3, r2
 800135e:	4905      	ldr	r1, [pc, #20]	; (8001374 <lcd_put_pixel+0x34>)
 8001360:	88fa      	ldrh	r2, [r7, #6]
 8001362:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000264 	.word	0x20000264

08001378 <lcd_copy>:

void lcd_copy(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	22a0      	movs	r2, #160	; 0xa0
 8001380:	2100      	movs	r1, #0
 8001382:	2000      	movs	r0, #0
 8001384:	f7ff ff70 	bl	8001268 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 8001388:	202c      	movs	r0, #44	; 0x2c
 800138a:	f7ff fef3 	bl	8001174 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800138e:	2201      	movs	r2, #1
 8001390:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001394:	4808      	ldr	r0, [pc, #32]	; (80013b8 <lcd_copy+0x40>)
 8001396:	f002 f85f 	bl	8003458 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <lcd_copy+0x40>)
 80013a2:	f002 f859 	bl	8003458 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer));
 80013a6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80013aa:	4904      	ldr	r1, [pc, #16]	; (80013bc <lcd_copy+0x44>)
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <lcd_copy+0x48>)
 80013ae:	f004 ff49 	bl	8006244 <HAL_SPI_Transmit_DMA>
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	48000400 	.word	0x48000400
 80013bc:	20000264 	.word	0x20000264
 80013c0:	2000a290 	.word	0x2000a290

080013c4 <lps_read_reg>:
#define LPS25HB_TEMP_OUT_H 		0x2C

#define TIMEOUT                 100

static uint8_t lps_read_reg(uint8_t reg)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af04      	add	r7, sp, #16
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	2364      	movs	r3, #100	; 0x64
 80013d8:	9302      	str	r3, [sp, #8]
 80013da:	2301      	movs	r3, #1
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	f107 030f 	add.w	r3, r7, #15
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2301      	movs	r3, #1
 80013e6:	21ba      	movs	r1, #186	; 0xba
 80013e8:	4803      	ldr	r0, [pc, #12]	; (80013f8 <lps_read_reg+0x34>)
 80013ea:	f002 fa09 	bl	8003800 <HAL_I2C_Mem_Read>

    return value;
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000200 	.word	0x20000200

080013fc <lps_write_reg>:

static void lps_write_reg(uint8_t reg, uint8_t value)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af04      	add	r7, sp, #16
 8001402:	4603      	mov	r3, r0
 8001404:	460a      	mov	r2, r1
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	4613      	mov	r3, r2
 800140a:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	b29a      	uxth	r2, r3
 8001410:	2364      	movs	r3, #100	; 0x64
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	2301      	movs	r3, #1
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	1dbb      	adds	r3, r7, #6
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2301      	movs	r3, #1
 800141e:	21ba      	movs	r1, #186	; 0xba
 8001420:	4803      	ldr	r0, [pc, #12]	; (8001430 <lps_write_reg+0x34>)
 8001422:	f002 f8d9 	bl	80035d8 <HAL_I2C_Mem_Write>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000200 	.word	0x20000200

08001434 <lps25hb_init>:

HAL_StatusTypeDef lps25hb_init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
    if (lps_read_reg(LPS25HB_WHO_AM_I) != 0xBD)
 8001438:	200f      	movs	r0, #15
 800143a:	f7ff ffc3 	bl	80013c4 <lps_read_reg>
 800143e:	4603      	mov	r3, r0
 8001440:	2bbd      	cmp	r3, #189	; 0xbd
 8001442:	d001      	beq.n	8001448 <lps25hb_init+0x14>
         return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e004      	b.n	8001452 <lps25hb_init+0x1e>

    lps_write_reg(LPS25HB_CTRL_REG1,  0x80); //wake up sensor
 8001448:	2180      	movs	r1, #128	; 0x80
 800144a:	2020      	movs	r0, #32
 800144c:	f7ff ffd6 	bl	80013fc <lps_write_reg>
    return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}

08001456 <lps25hb_one_shot>:
    lps_write_reg(LPS25HB_CTRL_REG1,  0xC0);
        return HAL_OK;
}

HAL_StatusTypeDef lps25hb_one_shot(void)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	af00      	add	r7, sp, #0
    lps_write_reg(LPS25HB_CTRL_REG2, 0x01);
 800145a:	2101      	movs	r1, #1
 800145c:	2021      	movs	r0, #33	; 0x21
 800145e:	f7ff ffcd 	bl	80013fc <lps_write_reg>
    return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	bd80      	pop	{r7, pc}

08001468 <lps25hb_read_temp>:
	  lps_write_reg(LPS25HB_CTRL_REG1, 0);
    return HAL_OK;
}

float lps25hb_read_temp(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af04      	add	r7, sp, #16
     int16_t temp;

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_TEMP_OUT_L | 0x80, 1, (uint8_t*)&temp, sizeof(temp), TIMEOUT) != HAL_OK)
 800146e:	2364      	movs	r3, #100	; 0x64
 8001470:	9302      	str	r3, [sp, #8]
 8001472:	2302      	movs	r3, #2
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	1dbb      	adds	r3, r7, #6
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2301      	movs	r3, #1
 800147c:	22ab      	movs	r2, #171	; 0xab
 800147e:	21ba      	movs	r1, #186	; 0xba
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <lps25hb_read_temp+0x50>)
 8001482:	f002 f9bd 	bl	8003800 <HAL_I2C_Mem_Read>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <lps25hb_read_temp+0x28>
         Error_Handler();
 800148c:	f000 fe14 	bl	80020b8 <Error_Handler>

     return 42.5f + temp / 480.0f;
 8001490:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800149c:	eddf 6a07 	vldr	s13, [pc, #28]	; 80014bc <lps25hb_read_temp+0x54>
 80014a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80014c0 <lps25hb_read_temp+0x58>
 80014a8:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80014ac:	eeb0 0a67 	vmov.f32	s0, s15
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000200 	.word	0x20000200
 80014bc:	43f00000 	.word	0x43f00000
 80014c0:	422a0000 	.word	0x422a0000

080014c4 <lps25hb_read_pressure>:

float lps25hb_read_pressure(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af04      	add	r7, sp, #16
     int32_t pressure = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_PRESS_OUT_XL | 0x80, 1, (uint8_t*)&pressure, 3, TIMEOUT) != HAL_OK)
 80014ce:	2364      	movs	r3, #100	; 0x64
 80014d0:	9302      	str	r3, [sp, #8]
 80014d2:	2303      	movs	r3, #3
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2301      	movs	r3, #1
 80014dc:	22a8      	movs	r2, #168	; 0xa8
 80014de:	21ba      	movs	r1, #186	; 0xba
 80014e0:	480c      	ldr	r0, [pc, #48]	; (8001514 <lps25hb_read_pressure+0x50>)
 80014e2:	f002 f98d 	bl	8003800 <HAL_I2C_Mem_Read>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <lps25hb_read_pressure+0x2c>
         Error_Handler();
 80014ec:	f000 fde4 	bl	80020b8 <Error_Handler>

     return (pressure / 4096.0f)+9;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	ee07 3a90 	vmov	s15, r3
 80014f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014fa:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001518 <lps25hb_read_pressure+0x54>
 80014fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001502:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001506:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800150a:	eeb0 0a67 	vmov.f32	s0, s15
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000200 	.word	0x20000200
 8001518:	45800000 	.word	0x45800000

0800151c <HAL_Delay>:
/* USER CODE BEGIN 0 */


//Add __WFI() -> sleep (wait for interrupt)
void HAL_Delay(uint32_t Delay)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001524:	f001 fac8 	bl	8002ab8 <HAL_GetTick>
 8001528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001534:	d007      	beq.n	8001546 <HAL_Delay+0x2a>
  {
    wait += (uint32_t)uwTickFreq;
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_Delay+0x44>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4413      	add	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001542:	e000      	b.n	8001546 <HAL_Delay+0x2a>
  {
	  __WFI();
 8001544:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001546:	f001 fab7 	bl	8002ab8 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	429a      	cmp	r2, r3
 8001554:	d8f6      	bhi.n	8001544 <HAL_Delay+0x28>
  }
}
 8001556:	bf00      	nop
 8001558:	bf00      	nop
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000008 	.word	0x20000008

08001564 <__io_putchar>:

int __io_putchar(int ch)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b0a      	cmp	r3, #10
 8001570:	d102      	bne.n	8001578 <__io_putchar+0x14>
    __io_putchar('\r');
 8001572:	200d      	movs	r0, #13
 8001574:	f7ff fff6 	bl	8001564 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001578:	1d39      	adds	r1, r7, #4
 800157a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800157e:	2201      	movs	r2, #1
 8001580:	4803      	ldr	r0, [pc, #12]	; (8001590 <__io_putchar+0x2c>)
 8001582:	f005 ff1b 	bl	80073bc <HAL_UART_Transmit>

  return 1;
 8001586:	2301      	movs	r3, #1
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	2000a424 	.word	0x2000a424

08001594 <HAL_GPIO_EXTI_Callback>:

volatile uint8_t flag = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	80fb      	strh	r3, [r7, #6]
  SystemClock_Config ();
 800159e:	f000 fd33 	bl	8002008 <SystemClock_Config>
  HAL_ResumeTick();
 80015a2:	f001 fa95 	bl	8002ad0 <HAL_ResumeTick>
  if (GPIO_Pin == USER_BUTTON_Pin) {
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d138      	bne.n	800161e <HAL_GPIO_EXTI_Callback+0x8a>
	  static uint32_t last_interrupt_time = 0;
	  uint32_t current_interrupt_time = HAL_GetTick();
 80015ac:	f001 fa84 	bl	8002ab8 <HAL_GetTick>
 80015b0:	60f8      	str	r0, [r7, #12]
	  // button filter ( 100ms)
	  if ((current_interrupt_time - last_interrupt_time) > 300) {
 80015b2:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <HAL_GPIO_EXTI_Callback+0x94>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80015be:	d92e      	bls.n	800161e <HAL_GPIO_EXTI_Callback+0x8a>
		  last_interrupt_time = current_interrupt_time;
 80015c0:	4a19      	ldr	r2, [pc, #100]	; (8001628 <HAL_GPIO_EXTI_Callback+0x94>)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6013      	str	r3, [r2, #0]
		  printf("Enter interrupt!\n");
 80015c6:	4819      	ldr	r0, [pc, #100]	; (800162c <HAL_GPIO_EXTI_Callback+0x98>)
 80015c8:	f008 fad2 	bl	8009b70 <puts>
		  HAL_Delay(100);
 80015cc:	2064      	movs	r0, #100	; 0x64
 80015ce:	f7ff ffa5 	bl	800151c <HAL_Delay>
		  if(flag==0) {
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <HAL_GPIO_EXTI_Callback+0x9c>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d109      	bne.n	80015f0 <HAL_GPIO_EXTI_Callback+0x5c>
			  flag=1;
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <HAL_GPIO_EXTI_Callback+0x9c>)
 80015de:	2201      	movs	r2, #1
 80015e0:	701a      	strb	r2, [r3, #0]
			  printf("Set flag 1\n");
 80015e2:	4814      	ldr	r0, [pc, #80]	; (8001634 <HAL_GPIO_EXTI_Callback+0xa0>)
 80015e4:	f008 fac4 	bl	8009b70 <puts>
			  HAL_Delay(200);
 80015e8:	20c8      	movs	r0, #200	; 0xc8
 80015ea:	f7ff ff97 	bl	800151c <HAL_Delay>
		  else if (flag==2){
			  flag=0;
	  }
	}
  }
}
 80015ee:	e016      	b.n	800161e <HAL_GPIO_EXTI_Callback+0x8a>
		  else if(flag==1) {
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_GPIO_EXTI_Callback+0x9c>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d109      	bne.n	800160e <HAL_GPIO_EXTI_Callback+0x7a>
			  flag=2;
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <HAL_GPIO_EXTI_Callback+0x9c>)
 80015fc:	2202      	movs	r2, #2
 80015fe:	701a      	strb	r2, [r3, #0]
			  printf("Set flag 2\n");
 8001600:	480d      	ldr	r0, [pc, #52]	; (8001638 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001602:	f008 fab5 	bl	8009b70 <puts>
			  HAL_Delay(200);
 8001606:	20c8      	movs	r0, #200	; 0xc8
 8001608:	f7ff ff88 	bl	800151c <HAL_Delay>
}
 800160c:	e007      	b.n	800161e <HAL_GPIO_EXTI_Callback+0x8a>
		  else if (flag==2){
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d102      	bne.n	800161e <HAL_GPIO_EXTI_Callback+0x8a>
			  flag=0;
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <HAL_GPIO_EXTI_Callback+0x9c>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000a268 	.word	0x2000a268
 800162c:	0800c530 	.word	0x0800c530
 8001630:	2000a264 	.word	0x2000a264
 8001634:	0800c544 	.word	0x0800c544
 8001638:	0800c550 	.word	0x0800c550

0800163c <lps_temperature_pressure_measure>:
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, currentTime.Minutes);
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, currentTime.Seconds);
}

void lps_temperature_pressure_measure()
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b09c      	sub	sp, #112	; 0x70
 8001640:	af02      	add	r7, sp, #8
	  printf("LPS measure init!\n");
 8001642:	4846      	ldr	r0, [pc, #280]	; (800175c <lps_temperature_pressure_measure+0x120>)
 8001644:	f008 fa94 	bl	8009b70 <puts>
	  printf("Searching...\n");
 8001648:	4845      	ldr	r0, [pc, #276]	; (8001760 <lps_temperature_pressure_measure+0x124>)
 800164a:	f008 fa91 	bl	8009b70 <puts>
	  if (lps25hb_init() == HAL_OK) {
 800164e:	f7ff fef1 	bl	8001434 <lps25hb_init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d177      	bne.n	8001748 <lps_temperature_pressure_measure+0x10c>
	    printf("OK: LPS25HB\n");
 8001658:	4842      	ldr	r0, [pc, #264]	; (8001764 <lps_temperature_pressure_measure+0x128>)
 800165a:	f008 fa89 	bl	8009b70 <puts>
	    lps25hb_one_shot();
 800165e:	f7ff fefa 	bl	8001456 <lps25hb_one_shot>
	    HAL_Delay(100);
 8001662:	2064      	movs	r0, #100	; 0x64
 8001664:	f7ff ff5a 	bl	800151c <HAL_Delay>
	    printf("T = %.1f*C\n", lps25hb_read_temp()-2);
 8001668:	f7ff fefe 	bl	8001468 <lps25hb_read_temp>
 800166c:	eef0 7a40 	vmov.f32	s15, s0
 8001670:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001674:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001678:	ee17 0a90 	vmov	r0, s15
 800167c:	f7fe ff64 	bl	8000548 <__aeabi_f2d>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4838      	ldr	r0, [pc, #224]	; (8001768 <lps_temperature_pressure_measure+0x12c>)
 8001686:	f008 f9ed 	bl	8009a64 <iprintf>
	    printf("p = %.1f hPa\n", lps25hb_read_pressure());
 800168a:	f7ff ff1b 	bl	80014c4 <lps25hb_read_pressure>
 800168e:	ee10 3a10 	vmov	r3, s0
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe ff58 	bl	8000548 <__aeabi_f2d>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4833      	ldr	r0, [pc, #204]	; (800176c <lps_temperature_pressure_measure+0x130>)
 800169e:	f008 f9e1 	bl	8009a64 <iprintf>

	    wchar_t buffer[20];
	    swprintf(buffer, 20, L"Temperatura: %.1f°C", lps25hb_read_temp()-2);
 80016a2:	f7ff fee1 	bl	8001468 <lps25hb_read_temp>
 80016a6:	eef0 7a40 	vmov.f32	s15, s0
 80016aa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80016ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016b2:	ee17 0a90 	vmov	r0, s15
 80016b6:	f7fe ff47 	bl	8000548 <__aeabi_f2d>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4638      	mov	r0, r7
 80016c0:	e9cd 2300 	strd	r2, r3, [sp]
 80016c4:	4a2a      	ldr	r2, [pc, #168]	; (8001770 <lps_temperature_pressure_measure+0x134>)
 80016c6:	2114      	movs	r1, #20
 80016c8:	f008 faae 	bl	8009c28 <swprintf>
	    hagl_put_text(buffer, 20, 75, YELLOW, font6x9);
 80016cc:	4638      	mov	r0, r7
 80016ce:	4b29      	ldr	r3, [pc, #164]	; (8001774 <lps_temperature_pressure_measure+0x138>)
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80016d6:	224b      	movs	r2, #75	; 0x4b
 80016d8:	2114      	movs	r1, #20
 80016da:	f006 ffc5 	bl	8008668 <hagl_put_text>
	    swprintf(buffer, 20, L"Cisnienie: %.0fhPa", lps25hb_read_pressure());
 80016de:	f7ff fef1 	bl	80014c4 <lps25hb_read_pressure>
 80016e2:	ee10 3a10 	vmov	r3, s0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe ff2e 	bl	8000548 <__aeabi_f2d>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4638      	mov	r0, r7
 80016f2:	e9cd 2300 	strd	r2, r3, [sp]
 80016f6:	4a20      	ldr	r2, [pc, #128]	; (8001778 <lps_temperature_pressure_measure+0x13c>)
 80016f8:	2114      	movs	r1, #20
 80016fa:	f008 fa95 	bl	8009c28 <swprintf>
	    hagl_put_text(buffer, 20, 95, YELLOW, font6x9);
 80016fe:	4638      	mov	r0, r7
 8001700:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <lps_temperature_pressure_measure+0x138>)
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001708:	225f      	movs	r2, #95	; 0x5f
 800170a:	2114      	movs	r1, #20
 800170c:	f006 ffac 	bl	8008668 <hagl_put_text>
	    lcd_copy();
 8001710:	f7ff fe32 	bl	8001378 <lcd_copy>

	    RTC_TimeTypeDef time;
	    RTC_DateTypeDef date;
		HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001714:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001718:	2200      	movs	r2, #0
 800171a:	4619      	mov	r1, r3
 800171c:	4817      	ldr	r0, [pc, #92]	; (800177c <lps_temperature_pressure_measure+0x140>)
 800171e:	f004 f97d 	bl	8005a1c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001722:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001726:	2200      	movs	r2, #0
 8001728:	4619      	mov	r1, r3
 800172a:	4814      	ldr	r0, [pc, #80]	; (800177c <lps_temperature_pressure_measure+0x140>)
 800172c:	f004 fa59 	bl	8005be2 <HAL_RTC_GetDate>
		printf("Aktualny czas: %02d:%02d:%02d\n", time.Hours, time.Minutes, time.Seconds);
 8001730:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001734:	4619      	mov	r1, r3
 8001736:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800173a:	461a      	mov	r2, r3
 800173c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001740:	480f      	ldr	r0, [pc, #60]	; (8001780 <lps_temperature_pressure_measure+0x144>)
 8001742:	f008 f98f 	bl	8009a64 <iprintf>
	  }
	  else {
	    printf("Error: LPS25HB not found\n");
	    Error_Handler();
	  }
}
 8001746:	e004      	b.n	8001752 <lps_temperature_pressure_measure+0x116>
	    printf("Error: LPS25HB not found\n");
 8001748:	480e      	ldr	r0, [pc, #56]	; (8001784 <lps_temperature_pressure_measure+0x148>)
 800174a:	f008 fa11 	bl	8009b70 <puts>
	    Error_Handler();
 800174e:	f000 fcb3 	bl	80020b8 <Error_Handler>
}
 8001752:	bf00      	nop
 8001754:	3768      	adds	r7, #104	; 0x68
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	0800c55c 	.word	0x0800c55c
 8001760:	0800c570 	.word	0x0800c570
 8001764:	0800c580 	.word	0x0800c580
 8001768:	0800c58c 	.word	0x0800c58c
 800176c:	0800c598 	.word	0x0800c598
 8001770:	0800c5a8 	.word	0x0800c5a8
 8001774:	0800c7e4 	.word	0x0800c7e4
 8001778:	0800c5f8 	.word	0x0800c5f8
 800177c:	2000a26c 	.word	0x2000a26c
 8001780:	0800c644 	.word	0x0800c644
 8001784:	0800c664 	.word	0x0800c664

08001788 <first_procedure_hour_change>:

void first_procedure_hour_change()
{
 8001788:	b5b0      	push	{r4, r5, r7, lr}
 800178a:	b0a0      	sub	sp, #128	; 0x80
 800178c:	af02      	add	r7, sp, #8
	  printf("Entering first procedure!\n");
 800178e:	489f      	ldr	r0, [pc, #636]	; (8001a0c <first_procedure_hour_change+0x284>)
 8001790:	f008 f9ee 	bl	8009b70 <puts>
	  int16_t prev_value=0;
 8001794:	2300      	movs	r3, #0
 8001796:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  uint8_t i=0;
 800179a:	2300      	movs	r3, #0
 800179c:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	  RTC_TimeTypeDef time;
	  RTC_DateTypeDef date;
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80017a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017a4:	2200      	movs	r2, #0
 80017a6:	4619      	mov	r1, r3
 80017a8:	4899      	ldr	r0, [pc, #612]	; (8001a10 <first_procedure_hour_change+0x288>)
 80017aa:	f004 f937 	bl	8005a1c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80017ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017b2:	2200      	movs	r2, #0
 80017b4:	4619      	mov	r1, r3
 80017b6:	4896      	ldr	r0, [pc, #600]	; (8001a10 <first_procedure_hour_change+0x288>)
 80017b8:	f004 fa13 	bl	8005be2 <HAL_RTC_GetDate>
	  wchar_t buffer[20];
	  //draw rectangle at Hour
	  for (int i = 0; i < 2; i++) {
 80017bc:	2300      	movs	r3, #0
 80017be:	673b      	str	r3, [r7, #112]	; 0x70
 80017c0:	e025      	b.n	800180e <first_procedure_hour_change+0x86>
	    hagl_draw_rounded_rectangle(52+i, 30+i, 75-i, 55-i, 2-i, YELLOW);
 80017c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	3334      	adds	r3, #52	; 0x34
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	b218      	sxth	r0, r3
 80017cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	331e      	adds	r3, #30
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	b219      	sxth	r1, r3
 80017d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017d8:	b29b      	uxth	r3, r3
 80017da:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
 80017de:	b29b      	uxth	r3, r3
 80017e0:	b21a      	sxth	r2, r3
 80017e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	f1c3 0337 	rsb	r3, r3, #55	; 0x37
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	b21c      	sxth	r4, r3
 80017ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	f1c3 0302 	rsb	r3, r3, #2
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	f24e 05ff 	movw	r5, #57599	; 0xe0ff
 80017fe:	9501      	str	r5, [sp, #4]
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	4623      	mov	r3, r4
 8001804:	f006 ffb8 	bl	8008778 <hagl_draw_rounded_rectangle>
	  for (int i = 0; i < 2; i++) {
 8001808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800180a:	3301      	adds	r3, #1
 800180c:	673b      	str	r3, [r7, #112]	; 0x70
 800180e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001810:	2b01      	cmp	r3, #1
 8001812:	ddd6      	ble.n	80017c2 <first_procedure_hour_change+0x3a>
	  }
	  swprintf(buffer, 20, L"%02d:%02d", time.Hours, time.Minutes);
 8001814:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001818:	461a      	mov	r2, r3
 800181a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800181e:	4638      	mov	r0, r7
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	4613      	mov	r3, r2
 8001824:	4a7b      	ldr	r2, [pc, #492]	; (8001a14 <first_procedure_hour_change+0x28c>)
 8001826:	2114      	movs	r1, #20
 8001828:	f008 f9fe 	bl	8009c28 <swprintf>
	  hagl_put_text(buffer, 55, 35, YELLOW, font9x18);
 800182c:	4638      	mov	r0, r7
 800182e:	4b7a      	ldr	r3, [pc, #488]	; (8001a18 <first_procedure_hour_change+0x290>)
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001836:	2223      	movs	r2, #35	; 0x23
 8001838:	2137      	movs	r1, #55	; 0x37
 800183a:	f006 ff15 	bl	8008668 <hagl_put_text>
	  lcd_copy();
 800183e:	f7ff fd9b 	bl	8001378 <lcd_copy>
	  while(flag==1){
 8001842:	e0ad      	b.n	80019a0 <first_procedure_hour_change+0x218>
		  int16_t value = __HAL_TIM_GET_COUNTER(&htim3);
 8001844:	4b75      	ldr	r3, [pc, #468]	; (8001a1c <first_procedure_hour_change+0x294>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		  if (value != prev_value) {
 800184e:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 8001852:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8001856:	429a      	cmp	r2, r3
 8001858:	f000 80a2 	beq.w	80019a0 <first_procedure_hour_change+0x218>
			  //printf("value = %d\n", value);
			  i++;
 800185c:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001860:	3301      	adds	r3, #1
 8001862:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			  if(value==prev_value+1){
 8001866:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 800186a:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800186e:	3301      	adds	r3, #1
 8001870:	429a      	cmp	r2, r3
 8001872:	d14f      	bne.n	8001914 <first_procedure_hour_change+0x18c>
				  if(i==2)
 8001874:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001878:	2b02      	cmp	r3, #2
 800187a:	d14b      	bne.n	8001914 <first_procedure_hour_change+0x18c>
				  {
					  HAL_IWDG_Refresh(&hiwdg);
 800187c:	4868      	ldr	r0, [pc, #416]	; (8001a20 <first_procedure_hour_change+0x298>)
 800187e:	f002 fc65 	bl	800414c <HAL_IWDG_Refresh>
					  time.Hours=time.Hours+1;
 8001882:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001886:	3301      	adds	r3, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
					  if(time.Hours==24) time.Hours=0;
 800188e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001892:	2b18      	cmp	r3, #24
 8001894:	d102      	bne.n	800189c <first_procedure_hour_change+0x114>
 8001896:	2300      	movs	r3, #0
 8001898:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
					  HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800189c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018a0:	2200      	movs	r2, #0
 80018a2:	4619      	mov	r1, r3
 80018a4:	485a      	ldr	r0, [pc, #360]	; (8001a10 <first_procedure_hour_change+0x288>)
 80018a6:	f004 f81c 	bl	80058e2 <HAL_RTC_SetTime>
					  HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80018aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018ae:	2200      	movs	r2, #0
 80018b0:	4619      	mov	r1, r3
 80018b2:	4857      	ldr	r0, [pc, #348]	; (8001a10 <first_procedure_hour_change+0x288>)
 80018b4:	f004 f90e 	bl	8005ad4 <HAL_RTC_SetDate>
					  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80018b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018bc:	2200      	movs	r2, #0
 80018be:	4619      	mov	r1, r3
 80018c0:	4853      	ldr	r0, [pc, #332]	; (8001a10 <first_procedure_hour_change+0x288>)
 80018c2:	f004 f8ab 	bl	8005a1c <HAL_RTC_GetTime>
					  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80018c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018ca:	2200      	movs	r2, #0
 80018cc:	4619      	mov	r1, r3
 80018ce:	4850      	ldr	r0, [pc, #320]	; (8001a10 <first_procedure_hour_change+0x288>)
 80018d0:	f004 f987 	bl	8005be2 <HAL_RTC_GetDate>
					  printf("Hours: %d\n", time.Hours);
 80018d4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80018d8:	4619      	mov	r1, r3
 80018da:	4852      	ldr	r0, [pc, #328]	; (8001a24 <first_procedure_hour_change+0x29c>)
 80018dc:	f008 f8c2 	bl	8009a64 <iprintf>
					  i=0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
					  swprintf(buffer, 20, L"%02d:%02d", time.Hours, time.Minutes);
 80018e6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80018ea:	461a      	mov	r2, r3
 80018ec:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80018f0:	4638      	mov	r0, r7
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	4613      	mov	r3, r2
 80018f6:	4a47      	ldr	r2, [pc, #284]	; (8001a14 <first_procedure_hour_change+0x28c>)
 80018f8:	2114      	movs	r1, #20
 80018fa:	f008 f995 	bl	8009c28 <swprintf>
					  hagl_put_text(buffer, 55, 35, YELLOW, font9x18);
 80018fe:	4638      	mov	r0, r7
 8001900:	4b45      	ldr	r3, [pc, #276]	; (8001a18 <first_procedure_hour_change+0x290>)
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001908:	2223      	movs	r2, #35	; 0x23
 800190a:	2137      	movs	r1, #55	; 0x37
 800190c:	f006 feac 	bl	8008668 <hagl_put_text>
					  lcd_copy();
 8001910:	f7ff fd32 	bl	8001378 <lcd_copy>
				  }
			  }
			  if(value==prev_value-1){
 8001914:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 8001918:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800191c:	3b01      	subs	r3, #1
 800191e:	429a      	cmp	r2, r3
 8001920:	d13a      	bne.n	8001998 <first_procedure_hour_change+0x210>
				  if(i==2)
 8001922:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001926:	2b02      	cmp	r3, #2
 8001928:	d136      	bne.n	8001998 <first_procedure_hour_change+0x210>
				  {
					  HAL_IWDG_Refresh(&hiwdg);
 800192a:	483d      	ldr	r0, [pc, #244]	; (8001a20 <first_procedure_hour_change+0x298>)
 800192c:	f002 fc0e 	bl	800414c <HAL_IWDG_Refresh>
					  time.Hours=time.Hours-1;
 8001930:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001934:	3b01      	subs	r3, #1
 8001936:	b2db      	uxtb	r3, r3
 8001938:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
					  if(time.Hours==255) time.Hours=23;
 800193c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001940:	2bff      	cmp	r3, #255	; 0xff
 8001942:	d102      	bne.n	800194a <first_procedure_hour_change+0x1c2>
 8001944:	2317      	movs	r3, #23
 8001946:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
					  HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800194a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800194e:	2200      	movs	r2, #0
 8001950:	4619      	mov	r1, r3
 8001952:	482f      	ldr	r0, [pc, #188]	; (8001a10 <first_procedure_hour_change+0x288>)
 8001954:	f003 ffc5 	bl	80058e2 <HAL_RTC_SetTime>
					  printf("Hours: %d\n", time.Hours);
 8001958:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800195c:	4619      	mov	r1, r3
 800195e:	4831      	ldr	r0, [pc, #196]	; (8001a24 <first_procedure_hour_change+0x29c>)
 8001960:	f008 f880 	bl	8009a64 <iprintf>
					  i=0;
 8001964:	2300      	movs	r3, #0
 8001966:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
					  swprintf(buffer, 20, L"%02d:%02d", time.Hours, time.Minutes);
 800196a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800196e:	461a      	mov	r2, r3
 8001970:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001974:	4638      	mov	r0, r7
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	4613      	mov	r3, r2
 800197a:	4a26      	ldr	r2, [pc, #152]	; (8001a14 <first_procedure_hour_change+0x28c>)
 800197c:	2114      	movs	r1, #20
 800197e:	f008 f953 	bl	8009c28 <swprintf>
					  hagl_put_text(buffer, 55, 35, YELLOW, font9x18);
 8001982:	4638      	mov	r0, r7
 8001984:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <first_procedure_hour_change+0x290>)
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 800198c:	2223      	movs	r2, #35	; 0x23
 800198e:	2137      	movs	r1, #55	; 0x37
 8001990:	f006 fe6a 	bl	8008668 <hagl_put_text>
					  lcd_copy();
 8001994:	f7ff fcf0 	bl	8001378 <lcd_copy>
				  }
			  }
			  prev_value = value;
 8001998:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800199c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  while(flag==1){
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <first_procedure_hour_change+0x2a0>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	f43f af4c 	beq.w	8001844 <first_procedure_hour_change+0xbc>
		  }
	  }
	  for (int i = 0; i < 2; i++) {
 80019ac:	2300      	movs	r3, #0
 80019ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80019b0:	e024      	b.n	80019fc <first_procedure_hour_change+0x274>
	    hagl_draw_rounded_rectangle(52+i, 30+i, 75-i, 55-i, 2-i, BLACK);
 80019b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	3334      	adds	r3, #52	; 0x34
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	b218      	sxth	r0, r3
 80019bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019be:	b29b      	uxth	r3, r3
 80019c0:	331e      	adds	r3, #30
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	b219      	sxth	r1, r3
 80019c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	b21a      	sxth	r2, r3
 80019d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	f1c3 0337 	rsb	r3, r3, #55	; 0x37
 80019da:	b29b      	uxth	r3, r3
 80019dc:	b21c      	sxth	r4, r3
 80019de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	f1c3 0302 	rsb	r3, r3, #2
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	b21b      	sxth	r3, r3
 80019ea:	2500      	movs	r5, #0
 80019ec:	9501      	str	r5, [sp, #4]
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	4623      	mov	r3, r4
 80019f2:	f006 fec1 	bl	8008778 <hagl_draw_rounded_rectangle>
	  for (int i = 0; i < 2; i++) {
 80019f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019f8:	3301      	adds	r3, #1
 80019fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80019fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	ddd7      	ble.n	80019b2 <first_procedure_hour_change+0x22a>
	  }
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	3778      	adds	r7, #120	; 0x78
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a0c:	0800c680 	.word	0x0800c680
 8001a10:	2000a26c 	.word	0x2000a26c
 8001a14:	0800c69c 	.word	0x0800c69c
 8001a18:	0800f79c 	.word	0x0800f79c
 8001a1c:	2000a340 	.word	0x2000a340
 8001a20:	20000254 	.word	0x20000254
 8001a24:	0800c6c4 	.word	0x0800c6c4
 8001a28:	2000a264 	.word	0x2000a264

08001a2c <second_procedure_minutes_change>:

void second_procedure_minutes_change()
{
 8001a2c:	b5b0      	push	{r4, r5, r7, lr}
 8001a2e:	b0a8      	sub	sp, #160	; 0xa0
 8001a30:	af02      	add	r7, sp, #8
	  printf("Entering second procedure!\n");
 8001a32:	48c1      	ldr	r0, [pc, #772]	; (8001d38 <second_procedure_minutes_change+0x30c>)
 8001a34:	f008 f89c 	bl	8009b70 <puts>
	  HAL_Delay(100);
 8001a38:	2064      	movs	r0, #100	; 0x64
 8001a3a:	f7ff fd6f 	bl	800151c <HAL_Delay>
	  int16_t prev_value=0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	  uint8_t i=0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
	  RTC_TimeTypeDef time;
	  RTC_DateTypeDef date;
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001a4a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a4e:	2200      	movs	r2, #0
 8001a50:	4619      	mov	r1, r3
 8001a52:	48ba      	ldr	r0, [pc, #744]	; (8001d3c <second_procedure_minutes_change+0x310>)
 8001a54:	f003 ffe2 	bl	8005a1c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001a58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4619      	mov	r1, r3
 8001a60:	48b6      	ldr	r0, [pc, #728]	; (8001d3c <second_procedure_minutes_change+0x310>)
 8001a62:	f004 f8be 	bl	8005be2 <HAL_RTC_GetDate>
	  wchar_t buffer[20];
	  for (int i = 0; i < 2; i++) {
 8001a66:	2300      	movs	r3, #0
 8001a68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a6c:	e02c      	b.n	8001ac8 <second_procedure_minutes_change+0x9c>
	    hagl_draw_rounded_rectangle(80+i, 30+i, 105-i, 55-i, 2-i, YELLOW);
 8001a6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	3350      	adds	r3, #80	; 0x50
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	b218      	sxth	r0, r3
 8001a7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	331e      	adds	r3, #30
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	b219      	sxth	r1, r3
 8001a86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	f1c3 0369 	rsb	r3, r3, #105	; 0x69
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	f1c3 0337 	rsb	r3, r3, #55	; 0x37
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	b21c      	sxth	r4, r3
 8001aa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	f1c3 0302 	rsb	r3, r3, #2
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	f24e 05ff 	movw	r5, #57599	; 0xe0ff
 8001ab4:	9501      	str	r5, [sp, #4]
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	4623      	mov	r3, r4
 8001aba:	f006 fe5d 	bl	8008778 <hagl_draw_rounded_rectangle>
	  for (int i = 0; i < 2; i++) {
 8001abe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ac8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	ddce      	ble.n	8001a6e <second_procedure_minutes_change+0x42>
	  }
	  swprintf(buffer, 20, L"%02d:%02d", time.Hours, time.Minutes);
 8001ad0:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001ada:	f107 001c 	add.w	r0, r7, #28
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	4a97      	ldr	r2, [pc, #604]	; (8001d40 <second_procedure_minutes_change+0x314>)
 8001ae4:	2114      	movs	r1, #20
 8001ae6:	f008 f89f 	bl	8009c28 <swprintf>
	  hagl_put_text(buffer, 55, 35, YELLOW, font9x18);
 8001aea:	f107 001c 	add.w	r0, r7, #28
 8001aee:	4b95      	ldr	r3, [pc, #596]	; (8001d44 <second_procedure_minutes_change+0x318>)
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001af6:	2223      	movs	r2, #35	; 0x23
 8001af8:	2137      	movs	r1, #55	; 0x37
 8001afa:	f006 fdb5 	bl	8008668 <hagl_put_text>
	  lcd_copy();
 8001afe:	f7ff fc3b 	bl	8001378 <lcd_copy>
	  while(flag==2){
 8001b02:	e09c      	b.n	8001c3e <second_procedure_minutes_change+0x212>
		  int16_t value = __HAL_TIM_GET_COUNTER(&htim3);
 8001b04:	4b90      	ldr	r3, [pc, #576]	; (8001d48 <second_procedure_minutes_change+0x31c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		  if (value != prev_value) {
 8001b0e:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 8001b12:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8001b16:	429a      	cmp	r2, r3
 8001b18:	f000 8091 	beq.w	8001c3e <second_procedure_minutes_change+0x212>
			  //printf("value = %d\n", value);
			  i++;
 8001b1c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001b20:	3301      	adds	r3, #1
 8001b22:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
			  if(value==prev_value+1){
 8001b26:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 8001b2a:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8001b2e:	3301      	adds	r3, #1
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d13c      	bne.n	8001bae <second_procedure_minutes_change+0x182>
				  if(i==2)
 8001b34:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d138      	bne.n	8001bae <second_procedure_minutes_change+0x182>
				  {
					  HAL_IWDG_Refresh(&hiwdg);
 8001b3c:	4883      	ldr	r0, [pc, #524]	; (8001d4c <second_procedure_minutes_change+0x320>)
 8001b3e:	f002 fb05 	bl	800414c <HAL_IWDG_Refresh>
					  time.Minutes=time.Minutes+1;
 8001b42:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001b46:	3301      	adds	r3, #1
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
					  if(time.Minutes==60) time.Minutes=0;
 8001b4e:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001b52:	2b3c      	cmp	r3, #60	; 0x3c
 8001b54:	d102      	bne.n	8001b5c <second_procedure_minutes_change+0x130>
 8001b56:	2300      	movs	r3, #0
 8001b58:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
					  HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001b5c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b60:	2200      	movs	r2, #0
 8001b62:	4619      	mov	r1, r3
 8001b64:	4875      	ldr	r0, [pc, #468]	; (8001d3c <second_procedure_minutes_change+0x310>)
 8001b66:	f003 febc 	bl	80058e2 <HAL_RTC_SetTime>
					  printf("Minutes: %d\n", time.Minutes);
 8001b6a:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4877      	ldr	r0, [pc, #476]	; (8001d50 <second_procedure_minutes_change+0x324>)
 8001b72:	f007 ff77 	bl	8009a64 <iprintf>
					  i=0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
					  swprintf(buffer, 20, L"%02d:%02d", time.Hours, time.Minutes);
 8001b7c:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001b80:	461a      	mov	r2, r3
 8001b82:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001b86:	f107 001c 	add.w	r0, r7, #28
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	4a6c      	ldr	r2, [pc, #432]	; (8001d40 <second_procedure_minutes_change+0x314>)
 8001b90:	2114      	movs	r1, #20
 8001b92:	f008 f849 	bl	8009c28 <swprintf>
					  hagl_put_text(buffer, 55, 35, YELLOW, font9x18);
 8001b96:	f107 001c 	add.w	r0, r7, #28
 8001b9a:	4b6a      	ldr	r3, [pc, #424]	; (8001d44 <second_procedure_minutes_change+0x318>)
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001ba2:	2223      	movs	r2, #35	; 0x23
 8001ba4:	2137      	movs	r1, #55	; 0x37
 8001ba6:	f006 fd5f 	bl	8008668 <hagl_put_text>
					  lcd_copy();
 8001baa:	f7ff fbe5 	bl	8001378 <lcd_copy>
				  }
			  }
			  if(value==prev_value-1){
 8001bae:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 8001bb2:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d13c      	bne.n	8001c36 <second_procedure_minutes_change+0x20a>
				  if(i==2)
 8001bbc:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d138      	bne.n	8001c36 <second_procedure_minutes_change+0x20a>
				  {
					  HAL_IWDG_Refresh(&hiwdg);
 8001bc4:	4861      	ldr	r0, [pc, #388]	; (8001d4c <second_procedure_minutes_change+0x320>)
 8001bc6:	f002 fac1 	bl	800414c <HAL_IWDG_Refresh>
					  time.Minutes=time.Minutes-1;
 8001bca:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
					  if(time.Minutes==255) time.Minutes=59;
 8001bd6:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001bda:	2bff      	cmp	r3, #255	; 0xff
 8001bdc:	d102      	bne.n	8001be4 <second_procedure_minutes_change+0x1b8>
 8001bde:	233b      	movs	r3, #59	; 0x3b
 8001be0:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
					  HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001be4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001be8:	2200      	movs	r2, #0
 8001bea:	4619      	mov	r1, r3
 8001bec:	4853      	ldr	r0, [pc, #332]	; (8001d3c <second_procedure_minutes_change+0x310>)
 8001bee:	f003 fe78 	bl	80058e2 <HAL_RTC_SetTime>
					  printf("Minutes: %d\n", time.Minutes);
 8001bf2:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4855      	ldr	r0, [pc, #340]	; (8001d50 <second_procedure_minutes_change+0x324>)
 8001bfa:	f007 ff33 	bl	8009a64 <iprintf>
					  i=0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
					  swprintf(buffer, 20, L"%02d:%02d", time.Hours, time.Minutes);
 8001c04:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001c08:	461a      	mov	r2, r3
 8001c0a:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001c0e:	f107 001c 	add.w	r0, r7, #28
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	4613      	mov	r3, r2
 8001c16:	4a4a      	ldr	r2, [pc, #296]	; (8001d40 <second_procedure_minutes_change+0x314>)
 8001c18:	2114      	movs	r1, #20
 8001c1a:	f008 f805 	bl	8009c28 <swprintf>
					  hagl_put_text(buffer, 55, 35, YELLOW, font9x18);
 8001c1e:	f107 001c 	add.w	r0, r7, #28
 8001c22:	4b48      	ldr	r3, [pc, #288]	; (8001d44 <second_procedure_minutes_change+0x318>)
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001c2a:	2223      	movs	r2, #35	; 0x23
 8001c2c:	2137      	movs	r1, #55	; 0x37
 8001c2e:	f006 fd1b 	bl	8008668 <hagl_put_text>
					  lcd_copy();
 8001c32:	f7ff fba1 	bl	8001378 <lcd_copy>
				  }
			  }
			  prev_value = value;
 8001c36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001c3a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	  while(flag==2){
 8001c3e:	4b45      	ldr	r3, [pc, #276]	; (8001d54 <second_procedure_minutes_change+0x328>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	f43f af5d 	beq.w	8001b04 <second_procedure_minutes_change+0xd8>
		  }
	  }
	  for (int i = 0; i < 2; i++) {
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001c50:	e02b      	b.n	8001caa <second_procedure_minutes_change+0x27e>
	    hagl_draw_rounded_rectangle(80+i, 30+i, 105-i, 55-i, 2-i, BLACK);
 8001c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	3350      	adds	r3, #80	; 0x50
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	b218      	sxth	r0, r3
 8001c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	331e      	adds	r3, #30
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	b219      	sxth	r1, r3
 8001c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	f1c3 0369 	rsb	r3, r3, #105	; 0x69
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	f1c3 0337 	rsb	r3, r3, #55	; 0x37
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	b21c      	sxth	r4, r3
 8001c86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	f1c3 0302 	rsb	r3, r3, #2
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	2500      	movs	r5, #0
 8001c96:	9501      	str	r5, [sp, #4]
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	4623      	mov	r3, r4
 8001c9c:	f006 fd6c 	bl	8008778 <hagl_draw_rounded_rectangle>
	  for (int i = 0; i < 2; i++) {
 8001ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	ddcf      	ble.n	8001c52 <second_procedure_minutes_change+0x226>
	  }
	  swprintf(buffer, 20, L"%02d:%02d", time.Hours, time.Minutes);
 8001cb2:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001cbc:	f107 001c 	add.w	r0, r7, #28
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	4a1e      	ldr	r2, [pc, #120]	; (8001d40 <second_procedure_minutes_change+0x314>)
 8001cc6:	2114      	movs	r1, #20
 8001cc8:	f007 ffae 	bl	8009c28 <swprintf>
	  hagl_put_text(buffer, 55, 35, YELLOW, font9x18);
 8001ccc:	f107 001c 	add.w	r0, r7, #28
 8001cd0:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <second_procedure_minutes_change+0x318>)
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001cd8:	2223      	movs	r2, #35	; 0x23
 8001cda:	2137      	movs	r1, #55	; 0x37
 8001cdc:	f006 fcc4 	bl	8008668 <hagl_put_text>
	  lcd_copy();
 8001ce0:	f7ff fb4a 	bl	8001378 <lcd_copy>

	for(int i=0;i<1;i++){
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001cea:	e01c      	b.n	8001d26 <second_procedure_minutes_change+0x2fa>
		RTC_TimeTypeDef time;
		RTC_DateTypeDef date;
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001cec:	f107 0308 	add.w	r3, r7, #8
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4811      	ldr	r0, [pc, #68]	; (8001d3c <second_procedure_minutes_change+0x310>)
 8001cf6:	f003 fe91 	bl	8005a1c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	4619      	mov	r1, r3
 8001d00:	480e      	ldr	r0, [pc, #56]	; (8001d3c <second_procedure_minutes_change+0x310>)
 8001d02:	f003 ff6e 	bl	8005be2 <HAL_RTC_GetDate>
	  printf("Aktualny czas: %02d:%02d:%02d\n", time.Hours, time.Minutes, time.Seconds);
 8001d06:	7a3b      	ldrb	r3, [r7, #8]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	7a7b      	ldrb	r3, [r7, #9]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	7abb      	ldrb	r3, [r7, #10]
 8001d10:	4811      	ldr	r0, [pc, #68]	; (8001d58 <second_procedure_minutes_change+0x32c>)
 8001d12:	f007 fea7 	bl	8009a64 <iprintf>
	  HAL_Delay(100);
 8001d16:	2064      	movs	r0, #100	; 0x64
 8001d18:	f7ff fc00 	bl	800151c <HAL_Delay>
	for(int i=0;i<1;i++){
 8001d1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d20:	3301      	adds	r3, #1
 8001d22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001d26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	ddde      	ble.n	8001cec <second_procedure_minutes_change+0x2c0>
	}
}
 8001d2e:	bf00      	nop
 8001d30:	bf00      	nop
 8001d32:	3798      	adds	r7, #152	; 0x98
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bdb0      	pop	{r4, r5, r7, pc}
 8001d38:	0800c6d0 	.word	0x0800c6d0
 8001d3c:	2000a26c 	.word	0x2000a26c
 8001d40:	0800c69c 	.word	0x0800c69c
 8001d44:	0800f79c 	.word	0x0800f79c
 8001d48:	2000a340 	.word	0x2000a340
 8001d4c:	20000254 	.word	0x20000254
 8001d50:	0800c6ec 	.word	0x0800c6ec
 8001d54:	2000a264 	.word	0x2000a264
 8001d58:	0800c644 	.word	0x0800c644

08001d5c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) //When we get interrupt (If DMA finish send data to LCD)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <HAL_SPI_TxCpltCallback+0x1c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d101      	bne.n	8001d70 <HAL_SPI_TxCpltCallback+0x14>
	{
		lcd_transfer_done();
 8001d6c:	f000 f806 	bl	8001d7c <lcd_transfer_done>
	}
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	2000a290 	.word	0x2000a290

08001d7c <lcd_transfer_done>:

void lcd_transfer_done(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001d80:	2201      	movs	r2, #1
 8001d82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d86:	4802      	ldr	r0, [pc, #8]	; (8001d90 <lcd_transfer_done+0x14>)
 8001d88:	f001 fb66 	bl	8003458 <HAL_GPIO_WritePin>
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	48000400 	.word	0x48000400

08001d94 <check_time>:

volatile uint8_t flag_lps=0;
volatile uint8_t flag_check_time=0;

void check_time()
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b09c      	sub	sp, #112	; 0x70
 8001d98:	af02      	add	r7, sp, #8
	  printf("Time check init!\n");
 8001d9a:	4816      	ldr	r0, [pc, #88]	; (8001df4 <check_time+0x60>)
 8001d9c:	f007 fee8 	bl	8009b70 <puts>
	  RTC_TimeTypeDef time;
	  RTC_DateTypeDef date;
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001da0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001da4:	2200      	movs	r2, #0
 8001da6:	4619      	mov	r1, r3
 8001da8:	4813      	ldr	r0, [pc, #76]	; (8001df8 <check_time+0x64>)
 8001daa:	f003 fe37 	bl	8005a1c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001dae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001db2:	2200      	movs	r2, #0
 8001db4:	4619      	mov	r1, r3
 8001db6:	4810      	ldr	r0, [pc, #64]	; (8001df8 <check_time+0x64>)
 8001db8:	f003 ff13 	bl	8005be2 <HAL_RTC_GetDate>
	  wchar_t buffer[20];
	  swprintf(buffer, 20, L"%02d:%02d", time.Hours, time.Minutes);
 8001dbc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001dc6:	4638      	mov	r0, r7
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <check_time+0x68>)
 8001dce:	2114      	movs	r1, #20
 8001dd0:	f007 ff2a 	bl	8009c28 <swprintf>
	  hagl_put_text(buffer, 55, 35, YELLOW, font9x18);
 8001dd4:	4638      	mov	r0, r7
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <check_time+0x6c>)
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001dde:	2223      	movs	r2, #35	; 0x23
 8001de0:	2137      	movs	r1, #55	; 0x37
 8001de2:	f006 fc41 	bl	8008668 <hagl_put_text>
	  lcd_copy();
 8001de6:	f7ff fac7 	bl	8001378 <lcd_copy>
}
 8001dea:	bf00      	nop
 8001dec:	3768      	adds	r7, #104	; 0x68
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	0800c6fc 	.word	0x0800c6fc
 8001df8:	2000a26c 	.word	0x2000a26c
 8001dfc:	0800c69c 	.word	0x0800c69c
 8001e00:	0800f79c 	.word	0x0800f79c

08001e04 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if (htim == &htim6) {
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d102      	bne.n	8001e1a <HAL_TIM_PeriodElapsedCallback+0x16>
	  flag_check_time=1;
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
  }
  if (htim == &htim7) {
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d102      	bne.n	8001e28 <HAL_TIM_PeriodElapsedCallback+0x24>
	  flag_lps=1;
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	701a      	strb	r2, [r3, #0]
  }
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	2000a38c 	.word	0x2000a38c
 8001e38:	2000a266 	.word	0x2000a266
 8001e3c:	2000a3d8 	.word	0x2000a3d8
 8001e40:	2000a265 	.word	0x2000a265

08001e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e48:	b09f      	sub	sp, #124	; 0x7c
 8001e4a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e4c:	f000 fdcb 	bl	80029e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e50:	f000 f8da 	bl	8002008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e54:	f7ff f848 	bl	8000ee8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e58:	f7ff f828 	bl	8000eac <MX_DMA_Init>
  MX_RTC_Init();
 8001e5c:	f000 f932 	bl	80020c4 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001e60:	f000 fd0c 	bl	800287c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001e64:	f7ff f8ca 	bl	8000ffc <MX_I2C1_Init>
  MX_SPI2_Init();
 8001e68:	f000 f986 	bl	8002178 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001e6c:	f000 fb9e 	bl	80025ac <MX_TIM3_Init>
  MX_IWDG_Init();
 8001e70:	f7ff f962 	bl	8001138 <MX_IWDG_Init>
  MX_TIM6_Init();
 8001e74:	f000 fbf0 	bl	8002658 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001e78:	f000 fc26 	bl	80026c8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 8001e7c:	f7ff fa28 	bl	80012d0 <lcd_init>
  printf("LCD initialization!\n");
 8001e80:	4855      	ldr	r0, [pc, #340]	; (8001fd8 <main+0x194>)
 8001e82:	f007 fe75 	bl	8009b70 <puts>
  for (int i = 0; i < 8; i++) {
 8001e86:	2300      	movs	r3, #0
 8001e88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e8a:	e032      	b.n	8001ef2 <main+0xae>
    hagl_draw_rounded_rectangle(2+i, 2+i, 158-i, 126-i, 8-i, rgb565(0, 0, i*16));
 8001e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	3302      	adds	r3, #2
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	b21d      	sxth	r5, r3
 8001e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	b21e      	sxth	r6, r3
 8001ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	f1c3 039e 	rsb	r3, r3, #158	; 0x9e
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	fa0f f883 	sxth.w	r8, r3
 8001eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	f1c3 037e 	rsb	r3, r3, #126	; 0x7e
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	fa0f f983 	sxth.w	r9, r3
 8001ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	f1c3 0308 	rsb	r3, r3, #8
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	b21c      	sxth	r4, r3
 8001ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f006 fde9 	bl	8008aac <rgb565>
 8001eda:	4603      	mov	r3, r0
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	9400      	str	r4, [sp, #0]
 8001ee0:	464b      	mov	r3, r9
 8001ee2:	4642      	mov	r2, r8
 8001ee4:	4631      	mov	r1, r6
 8001ee6:	4628      	mov	r0, r5
 8001ee8:	f006 fc46 	bl	8008778 <hagl_draw_rounded_rectangle>
  for (int i = 0; i < 8; i++) {
 8001eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eee:	3301      	adds	r3, #1
 8001ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ef4:	2b07      	cmp	r3, #7
 8001ef6:	ddc9      	ble.n	8001e8c <main+0x48>
  }

  RTC_TimeTypeDef time;
  RTC_DateTypeDef date;
  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001ef8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001efc:	2200      	movs	r2, #0
 8001efe:	4619      	mov	r1, r3
 8001f00:	4836      	ldr	r0, [pc, #216]	; (8001fdc <main+0x198>)
 8001f02:	f003 fd8b 	bl	8005a1c <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001f06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4833      	ldr	r0, [pc, #204]	; (8001fdc <main+0x198>)
 8001f10:	f003 fe67 	bl	8005be2 <HAL_RTC_GetDate>
  wchar_t buffer[20];
  swprintf(buffer, 20, L"%02d:%02d", time.Hours, time.Minutes);
 8001f14:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001f1e:	1d38      	adds	r0, r7, #4
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	4613      	mov	r3, r2
 8001f24:	4a2e      	ldr	r2, [pc, #184]	; (8001fe0 <main+0x19c>)
 8001f26:	2114      	movs	r1, #20
 8001f28:	f007 fe7e 	bl	8009c28 <swprintf>
  hagl_put_text(buffer, 55, 35, YELLOW, font9x18);
 8001f2c:	1d38      	adds	r0, r7, #4
 8001f2e:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <main+0x1a0>)
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001f36:	2223      	movs	r2, #35	; 0x23
 8001f38:	2137      	movs	r1, #55	; 0x37
 8001f3a:	f006 fb95 	bl	8008668 <hagl_put_text>

  lps_temperature_pressure_measure();
 8001f3e:	f7ff fb7d 	bl	800163c <lps_temperature_pressure_measure>

  HAL_TIM_Base_Start_IT(&htim6);
 8001f42:	4829      	ldr	r0, [pc, #164]	; (8001fe8 <main+0x1a4>)
 8001f44:	f004 fcc4 	bl	80068d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8001f48:	4828      	ldr	r0, [pc, #160]	; (8001fec <main+0x1a8>)
 8001f4a:	f004 fcc1 	bl	80068d0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_IWDG_Refresh(&hiwdg);
 8001f4e:	4828      	ldr	r0, [pc, #160]	; (8001ff0 <main+0x1ac>)
 8001f50:	f002 f8fc 	bl	800414c <HAL_IWDG_Refresh>
	  /*SET HOURS*/
	  if(flag==1)
 8001f54:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <main+0x1b0>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d10e      	bne.n	8001f7c <main+0x138>
	  {
		  HAL_TIM_Base_Stop_IT(&htim6);
 8001f5e:	4822      	ldr	r0, [pc, #136]	; (8001fe8 <main+0x1a4>)
 8001f60:	f004 fd26 	bl	80069b0 <HAL_TIM_Base_Stop_IT>
		  HAL_TIM_Base_Stop_IT(&htim7);
 8001f64:	4821      	ldr	r0, [pc, #132]	; (8001fec <main+0x1a8>)
 8001f66:	f004 fd23 	bl	80069b0 <HAL_TIM_Base_Stop_IT>
		  printf("First procedure!!\n");
 8001f6a:	4823      	ldr	r0, [pc, #140]	; (8001ff8 <main+0x1b4>)
 8001f6c:	f007 fe00 	bl	8009b70 <puts>
		  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001f70:	213c      	movs	r1, #60	; 0x3c
 8001f72:	4822      	ldr	r0, [pc, #136]	; (8001ffc <main+0x1b8>)
 8001f74:	f004 fdf1 	bl	8006b5a <HAL_TIM_Encoder_Start>
		  first_procedure_hour_change();
 8001f78:	f7ff fc06 	bl	8001788 <first_procedure_hour_change>
	  }
	  if(flag==2)
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <main+0x1b0>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d10e      	bne.n	8001fa4 <main+0x160>
	  {
		  printf("Second procedure!\n");
 8001f86:	481e      	ldr	r0, [pc, #120]	; (8002000 <main+0x1bc>)
 8001f88:	f007 fdf2 	bl	8009b70 <puts>
		  second_procedure_minutes_change();
 8001f8c:	f7ff fd4e 	bl	8001a2c <second_procedure_minutes_change>
		  HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8001f90:	213c      	movs	r1, #60	; 0x3c
 8001f92:	481a      	ldr	r0, [pc, #104]	; (8001ffc <main+0x1b8>)
 8001f94:	f004 fe6f 	bl	8006c76 <HAL_TIM_Encoder_Stop>
		  HAL_TIM_Base_Start_IT(&htim6);
 8001f98:	4813      	ldr	r0, [pc, #76]	; (8001fe8 <main+0x1a4>)
 8001f9a:	f004 fc99 	bl	80068d0 <HAL_TIM_Base_Start_IT>
		  HAL_TIM_Base_Start_IT(&htim7);
 8001f9e:	4813      	ldr	r0, [pc, #76]	; (8001fec <main+0x1a8>)
 8001fa0:	f004 fc96 	bl	80068d0 <HAL_TIM_Base_Start_IT>
	  }

	  if(__HAL_TIM_GET_FLAG(&htim6, TIM_FLAG_UPDATE) != RESET) // Sprawdzenie flagi timera
 8001fa4:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <main+0x1a4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d106      	bne.n	8001fc0 <main+0x17c>
	  {
		__HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE); // Wyczyszczenie flagi timera
 8001fb2:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <main+0x1a4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f06f 0201 	mvn.w	r2, #1
 8001fba:	611a      	str	r2, [r3, #16]
		check_time();
 8001fbc:	f7ff feea 	bl	8001d94 <check_time>
	  {
		  check_time();
		  flag_check_time=0;
	  }
	  */
	  if(flag_lps==1)
 8001fc0:	4b10      	ldr	r3, [pc, #64]	; (8002004 <main+0x1c0>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d1c1      	bne.n	8001f4e <main+0x10a>
	  {
		  lps_temperature_pressure_measure();
 8001fca:	f7ff fb37 	bl	800163c <lps_temperature_pressure_measure>
		  flag_lps=0;
 8001fce:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <main+0x1c0>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
	  HAL_IWDG_Refresh(&hiwdg);
 8001fd4:	e7bb      	b.n	8001f4e <main+0x10a>
 8001fd6:	bf00      	nop
 8001fd8:	0800c710 	.word	0x0800c710
 8001fdc:	2000a26c 	.word	0x2000a26c
 8001fe0:	0800c69c 	.word	0x0800c69c
 8001fe4:	0800f79c 	.word	0x0800f79c
 8001fe8:	2000a38c 	.word	0x2000a38c
 8001fec:	2000a3d8 	.word	0x2000a3d8
 8001ff0:	20000254 	.word	0x20000254
 8001ff4:	2000a264 	.word	0x2000a264
 8001ff8:	0800c724 	.word	0x0800c724
 8001ffc:	2000a340 	.word	0x2000a340
 8002000:	0800c738 	.word	0x0800c738
 8002004:	2000a265 	.word	0x2000a265

08002008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b096      	sub	sp, #88	; 0x58
 800200c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	2244      	movs	r2, #68	; 0x44
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f006 ffd2 	bl	8008fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800201c:	463b      	mov	r3, r7
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]
 8002028:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800202a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800202e:	f002 f8bb 	bl	80041a8 <HAL_PWREx_ControlVoltageScaling>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002038:	f000 f83e 	bl	80020b8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800203c:	f002 f896 	bl	800416c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002040:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <SystemClock_Config+0xac>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	4a1b      	ldr	r2, [pc, #108]	; (80020b4 <SystemClock_Config+0xac>)
 8002048:	f023 0318 	bic.w	r3, r3, #24
 800204c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8002050:	231c      	movs	r3, #28
 8002052:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002054:	2301      	movs	r3, #1
 8002056:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002058:	2301      	movs	r3, #1
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800205c:	2301      	movs	r3, #1
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8002064:	2370      	movs	r3, #112	; 0x70
 8002066:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002068:	2300      	movs	r3, #0
 800206a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	4618      	mov	r0, r3
 8002072:	f002 f8ef 	bl	8004254 <HAL_RCC_OscConfig>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800207c:	f000 f81c 	bl	80020b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002080:	230f      	movs	r3, #15
 8002082:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002084:	2300      	movs	r3, #0
 8002086:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002088:	2300      	movs	r3, #0
 800208a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002094:	463b      	mov	r3, r7
 8002096:	2100      	movs	r1, #0
 8002098:	4618      	mov	r0, r3
 800209a:	f002 fcb7 	bl	8004a0c <HAL_RCC_ClockConfig>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80020a4:	f000 f808 	bl	80020b8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80020a8:	f003 f9be 	bl	8005428 <HAL_RCCEx_EnableMSIPLLMode>
}
 80020ac:	bf00      	nop
 80020ae:	3758      	adds	r7, #88	; 0x58
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40021000 	.word	0x40021000

080020b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020bc:	b672      	cpsid	i
}
 80020be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <Error_Handler+0x8>
	...

080020c4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80020c8:	4b10      	ldr	r3, [pc, #64]	; (800210c <MX_RTC_Init+0x48>)
 80020ca:	4a11      	ldr	r2, [pc, #68]	; (8002110 <MX_RTC_Init+0x4c>)
 80020cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80020ce:	4b0f      	ldr	r3, [pc, #60]	; (800210c <MX_RTC_Init+0x48>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80020d4:	4b0d      	ldr	r3, [pc, #52]	; (800210c <MX_RTC_Init+0x48>)
 80020d6:	227f      	movs	r2, #127	; 0x7f
 80020d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80020da:	4b0c      	ldr	r3, [pc, #48]	; (800210c <MX_RTC_Init+0x48>)
 80020dc:	22ff      	movs	r2, #255	; 0xff
 80020de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80020e0:	4b0a      	ldr	r3, [pc, #40]	; (800210c <MX_RTC_Init+0x48>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <MX_RTC_Init+0x48>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020ec:	4b07      	ldr	r3, [pc, #28]	; (800210c <MX_RTC_Init+0x48>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <MX_RTC_Init+0x48>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80020f8:	4804      	ldr	r0, [pc, #16]	; (800210c <MX_RTC_Init+0x48>)
 80020fa:	f003 fb77 	bl	80057ec <HAL_RTC_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8002104:	f7ff ffd8 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}
 800210c:	2000a26c 	.word	0x2000a26c
 8002110:	40002800 	.word	0x40002800

08002114 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b0a4      	sub	sp, #144	; 0x90
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800211c:	f107 0308 	add.w	r3, r7, #8
 8002120:	2288      	movs	r2, #136	; 0x88
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f006 ff4b 	bl	8008fc0 <memset>
  if(rtcHandle->Instance==RTC)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a10      	ldr	r2, [pc, #64]	; (8002170 <HAL_RTC_MspInit+0x5c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d118      	bne.n	8002166 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002134:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002138:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800213a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800213e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002142:	f107 0308 	add.w	r3, r7, #8
 8002146:	4618      	mov	r0, r3
 8002148:	f002 fe84 	bl	8004e54 <HAL_RCCEx_PeriphCLKConfig>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002152:	f7ff ffb1 	bl	80020b8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002156:	4b07      	ldr	r3, [pc, #28]	; (8002174 <HAL_RTC_MspInit+0x60>)
 8002158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215c:	4a05      	ldr	r2, [pc, #20]	; (8002174 <HAL_RTC_MspInit+0x60>)
 800215e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002166:	bf00      	nop
 8002168:	3790      	adds	r7, #144	; 0x90
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40002800 	.word	0x40002800
 8002174:	40021000 	.word	0x40021000

08002178 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800217c:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <MX_SPI2_Init+0x74>)
 800217e:	4a1c      	ldr	r2, [pc, #112]	; (80021f0 <MX_SPI2_Init+0x78>)
 8002180:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002182:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <MX_SPI2_Init+0x74>)
 8002184:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002188:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800218a:	4b18      	ldr	r3, [pc, #96]	; (80021ec <MX_SPI2_Init+0x74>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002190:	4b16      	ldr	r3, [pc, #88]	; (80021ec <MX_SPI2_Init+0x74>)
 8002192:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002196:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002198:	4b14      	ldr	r3, [pc, #80]	; (80021ec <MX_SPI2_Init+0x74>)
 800219a:	2200      	movs	r2, #0
 800219c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800219e:	4b13      	ldr	r3, [pc, #76]	; (80021ec <MX_SPI2_Init+0x74>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <MX_SPI2_Init+0x74>)
 80021a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021aa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <MX_SPI2_Init+0x74>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <MX_SPI2_Init+0x74>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <MX_SPI2_Init+0x74>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <MX_SPI2_Init+0x74>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <MX_SPI2_Init+0x74>)
 80021c6:	2207      	movs	r2, #7
 80021c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <MX_SPI2_Init+0x74>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <MX_SPI2_Init+0x74>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021d6:	4805      	ldr	r0, [pc, #20]	; (80021ec <MX_SPI2_Init+0x74>)
 80021d8:	f003 fe22 	bl	8005e20 <HAL_SPI_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80021e2:	f7ff ff69 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	2000a290 	.word	0x2000a290
 80021f0:	40003800 	.word	0x40003800

080021f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	; 0x28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a3a      	ldr	r2, [pc, #232]	; (80022fc <HAL_SPI_MspInit+0x108>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d16d      	bne.n	80022f2 <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002216:	4b3a      	ldr	r3, [pc, #232]	; (8002300 <HAL_SPI_MspInit+0x10c>)
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	4a39      	ldr	r2, [pc, #228]	; (8002300 <HAL_SPI_MspInit+0x10c>)
 800221c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002220:	6593      	str	r3, [r2, #88]	; 0x58
 8002222:	4b37      	ldr	r3, [pc, #220]	; (8002300 <HAL_SPI_MspInit+0x10c>)
 8002224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800222e:	4b34      	ldr	r3, [pc, #208]	; (8002300 <HAL_SPI_MspInit+0x10c>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	4a33      	ldr	r2, [pc, #204]	; (8002300 <HAL_SPI_MspInit+0x10c>)
 8002234:	f043 0304 	orr.w	r3, r3, #4
 8002238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800223a:	4b31      	ldr	r3, [pc, #196]	; (8002300 <HAL_SPI_MspInit+0x10c>)
 800223c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002246:	4b2e      	ldr	r3, [pc, #184]	; (8002300 <HAL_SPI_MspInit+0x10c>)
 8002248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224a:	4a2d      	ldr	r2, [pc, #180]	; (8002300 <HAL_SPI_MspInit+0x10c>)
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002252:	4b2b      	ldr	r3, [pc, #172]	; (8002300 <HAL_SPI_MspInit+0x10c>)
 8002254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800225e:	2308      	movs	r3, #8
 8002260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226a:	2303      	movs	r3, #3
 800226c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800226e:	2305      	movs	r3, #5
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002272:	f107 0314 	add.w	r3, r7, #20
 8002276:	4619      	mov	r1, r3
 8002278:	4822      	ldr	r0, [pc, #136]	; (8002304 <HAL_SPI_MspInit+0x110>)
 800227a:	f000 ff43 	bl	8003104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800227e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002284:	2302      	movs	r3, #2
 8002286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228c:	2303      	movs	r3, #3
 800228e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002290:	2305      	movs	r3, #5
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	4619      	mov	r1, r3
 800229a:	481b      	ldr	r0, [pc, #108]	; (8002308 <HAL_SPI_MspInit+0x114>)
 800229c:	f000 ff32 	bl	8003104 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80022a0:	4b1a      	ldr	r3, [pc, #104]	; (800230c <HAL_SPI_MspInit+0x118>)
 80022a2:	4a1b      	ldr	r2, [pc, #108]	; (8002310 <HAL_SPI_MspInit+0x11c>)
 80022a4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 80022a6:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_SPI_MspInit+0x118>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022ac:	4b17      	ldr	r3, [pc, #92]	; (800230c <HAL_SPI_MspInit+0x118>)
 80022ae:	2210      	movs	r2, #16
 80022b0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022b2:	4b16      	ldr	r3, [pc, #88]	; (800230c <HAL_SPI_MspInit+0x118>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <HAL_SPI_MspInit+0x118>)
 80022ba:	2280      	movs	r2, #128	; 0x80
 80022bc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022be:	4b13      	ldr	r3, [pc, #76]	; (800230c <HAL_SPI_MspInit+0x118>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_SPI_MspInit+0x118>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <HAL_SPI_MspInit+0x118>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <HAL_SPI_MspInit+0x118>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80022d6:	480d      	ldr	r0, [pc, #52]	; (800230c <HAL_SPI_MspInit+0x118>)
 80022d8:	f000 fd1c 	bl	8002d14 <HAL_DMA_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 80022e2:	f7ff fee9 	bl	80020b8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a08      	ldr	r2, [pc, #32]	; (800230c <HAL_SPI_MspInit+0x118>)
 80022ea:	655a      	str	r2, [r3, #84]	; 0x54
 80022ec:	4a07      	ldr	r2, [pc, #28]	; (800230c <HAL_SPI_MspInit+0x118>)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80022f2:	bf00      	nop
 80022f4:	3728      	adds	r7, #40	; 0x28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40003800 	.word	0x40003800
 8002300:	40021000 	.word	0x40021000
 8002304:	48000800 	.word	0x48000800
 8002308:	48000400 	.word	0x48000400
 800230c:	2000a2f4 	.word	0x2000a2f4
 8002310:	40020058 	.word	0x40020058

08002314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <HAL_MspInit+0x44>)
 800231c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231e:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <HAL_MspInit+0x44>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6613      	str	r3, [r2, #96]	; 0x60
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <HAL_MspInit+0x44>)
 8002328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_MspInit+0x44>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	4a08      	ldr	r2, [pc, #32]	; (8002358 <HAL_MspInit+0x44>)
 8002338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233c:	6593      	str	r3, [r2, #88]	; 0x58
 800233e:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_MspInit+0x44>)
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000

0800235c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <NMI_Handler+0x4>

08002362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002366:	e7fe      	b.n	8002366 <HardFault_Handler+0x4>

08002368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800236c:	e7fe      	b.n	800236c <MemManage_Handler+0x4>

0800236e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002372:	e7fe      	b.n	8002372 <BusFault_Handler+0x4>

08002374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002378:	e7fe      	b.n	8002378 <UsageFault_Handler+0x4>

0800237a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023a8:	f000 fb72 	bl	8002a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 80023b4:	2001      	movs	r0, #1
 80023b6:	f001 f867 	bl	8003488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <DMA1_Channel5_IRQHandler+0x10>)
 80023c6:	f000 fdbd 	bl	8002f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	2000a2f4 	.word	0x2000a2f4

080023d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <TIM6_DAC_IRQHandler+0x10>)
 80023da:	f004 fcf3 	bl	8006dc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	2000a38c 	.word	0x2000a38c

080023e8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <TIM7_IRQHandler+0x10>)
 80023ee:	f004 fce9 	bl	8006dc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	2000a3d8 	.word	0x2000a3d8

080023fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return 1;
 8002400:	2301      	movs	r3, #1
}
 8002402:	4618      	mov	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <_kill>:

int _kill(int pid, int sig)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002416:	f006 fb7b 	bl	8008b10 <__errno>
 800241a:	4603      	mov	r3, r0
 800241c:	2216      	movs	r2, #22
 800241e:	601a      	str	r2, [r3, #0]
  return -1;
 8002420:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002424:	4618      	mov	r0, r3
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <_exit>:

void _exit (int status)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002434:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ffe7 	bl	800240c <_kill>
  while (1) {}    /* Make sure we hang here */
 800243e:	e7fe      	b.n	800243e <_exit+0x12>

08002440 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	e00a      	b.n	8002468 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002452:	f3af 8000 	nop.w
 8002456:	4601      	mov	r1, r0
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	60ba      	str	r2, [r7, #8]
 800245e:	b2ca      	uxtb	r2, r1
 8002460:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	3301      	adds	r3, #1
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	429a      	cmp	r2, r3
 800246e:	dbf0      	blt.n	8002452 <_read+0x12>
  }

  return len;
 8002470:	687b      	ldr	r3, [r7, #4]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	e009      	b.n	80024a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	60ba      	str	r2, [r7, #8]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff f865 	bl	8001564 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	3301      	adds	r3, #1
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	dbf1      	blt.n	800248c <_write+0x12>
  }
  return len;
 80024a8:	687b      	ldr	r3, [r7, #4]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <_close>:

int _close(int file)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024da:	605a      	str	r2, [r3, #4]
  return 0;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <_isatty>:

int _isatty(int file)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024f2:	2301      	movs	r3, #1
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002524:	4a14      	ldr	r2, [pc, #80]	; (8002578 <_sbrk+0x5c>)
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <_sbrk+0x60>)
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002530:	4b13      	ldr	r3, [pc, #76]	; (8002580 <_sbrk+0x64>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d102      	bne.n	800253e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <_sbrk+0x64>)
 800253a:	4a12      	ldr	r2, [pc, #72]	; (8002584 <_sbrk+0x68>)
 800253c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <_sbrk+0x64>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	429a      	cmp	r2, r3
 800254a:	d207      	bcs.n	800255c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800254c:	f006 fae0 	bl	8008b10 <__errno>
 8002550:	4603      	mov	r3, r0
 8002552:	220c      	movs	r2, #12
 8002554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800255a:	e009      	b.n	8002570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <_sbrk+0x64>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <_sbrk+0x64>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	4a05      	ldr	r2, [pc, #20]	; (8002580 <_sbrk+0x64>)
 800256c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800256e:	68fb      	ldr	r3, [r7, #12]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20018000 	.word	0x20018000
 800257c:	00002000 	.word	0x00002000
 8002580:	2000a33c 	.word	0x2000a33c
 8002584:	2000a4c0 	.word	0x2000a4c0

08002588 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <SystemInit+0x20>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <SystemInit+0x20>)
 8002594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08c      	sub	sp, #48	; 0x30
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025b2:	f107 030c 	add.w	r3, r7, #12
 80025b6:	2224      	movs	r2, #36	; 0x24
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f006 fd00 	bl	8008fc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c0:	463b      	mov	r3, r7
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025ca:	4b21      	ldr	r3, [pc, #132]	; (8002650 <MX_TIM3_Init+0xa4>)
 80025cc:	4a21      	ldr	r2, [pc, #132]	; (8002654 <MX_TIM3_Init+0xa8>)
 80025ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80025d0:	4b1f      	ldr	r3, [pc, #124]	; (8002650 <MX_TIM3_Init+0xa4>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d6:	4b1e      	ldr	r3, [pc, #120]	; (8002650 <MX_TIM3_Init+0xa4>)
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80025dc:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <MX_TIM3_Init+0xa4>)
 80025de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e4:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <MX_TIM3_Init+0xa4>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ea:	4b19      	ldr	r3, [pc, #100]	; (8002650 <MX_TIM3_Init+0xa4>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80025f0:	2301      	movs	r3, #1
 80025f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025f4:	2300      	movs	r3, #0
 80025f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025f8:	2301      	movs	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8002600:	2301      	movs	r3, #1
 8002602:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002604:	2300      	movs	r3, #0
 8002606:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002608:	2301      	movs	r3, #1
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800260c:	2300      	movs	r3, #0
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002610:	230f      	movs	r3, #15
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002614:	f107 030c 	add.w	r3, r7, #12
 8002618:	4619      	mov	r1, r3
 800261a:	480d      	ldr	r0, [pc, #52]	; (8002650 <MX_TIM3_Init+0xa4>)
 800261c:	f004 f9f7 	bl	8006a0e <HAL_TIM_Encoder_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002626:	f7ff fd47 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800262a:	2300      	movs	r3, #0
 800262c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002632:	463b      	mov	r3, r7
 8002634:	4619      	mov	r1, r3
 8002636:	4806      	ldr	r0, [pc, #24]	; (8002650 <MX_TIM3_Init+0xa4>)
 8002638:	f004 fdcc 	bl	80071d4 <HAL_TIMEx_MasterConfigSynchronization>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002642:	f7ff fd39 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002646:	bf00      	nop
 8002648:	3730      	adds	r7, #48	; 0x30
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	2000a340 	.word	0x2000a340
 8002654:	40000400 	.word	0x40000400

08002658 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002668:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <MX_TIM6_Init+0x68>)
 800266a:	4a16      	ldr	r2, [pc, #88]	; (80026c4 <MX_TIM6_Init+0x6c>)
 800266c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 800266e:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <MX_TIM6_Init+0x68>)
 8002670:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002674:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002676:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <MX_TIM6_Init+0x68>)
 8002678:	2200      	movs	r2, #0
 800267a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800267c:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <MX_TIM6_Init+0x68>)
 800267e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002682:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002684:	4b0e      	ldr	r3, [pc, #56]	; (80026c0 <MX_TIM6_Init+0x68>)
 8002686:	2200      	movs	r2, #0
 8002688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800268a:	480d      	ldr	r0, [pc, #52]	; (80026c0 <MX_TIM6_Init+0x68>)
 800268c:	f004 f8c8 	bl	8006820 <HAL_TIM_Base_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002696:	f7ff fd0f 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	4619      	mov	r1, r3
 80026a6:	4806      	ldr	r0, [pc, #24]	; (80026c0 <MX_TIM6_Init+0x68>)
 80026a8:	f004 fd94 	bl	80071d4 <HAL_TIMEx_MasterConfigSynchronization>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80026b2:	f7ff fd01 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	2000a38c 	.word	0x2000a38c
 80026c4:	40001000 	.word	0x40001000

080026c8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80026d8:	4b15      	ldr	r3, [pc, #84]	; (8002730 <MX_TIM7_Init+0x68>)
 80026da:	4a16      	ldr	r2, [pc, #88]	; (8002734 <MX_TIM7_Init+0x6c>)
 80026dc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 80026de:	4b14      	ldr	r3, [pc, #80]	; (8002730 <MX_TIM7_Init+0x68>)
 80026e0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80026e4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <MX_TIM7_Init+0x68>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80026ec:	4b10      	ldr	r3, [pc, #64]	; (8002730 <MX_TIM7_Init+0x68>)
 80026ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f4:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <MX_TIM7_Init+0x68>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80026fa:	480d      	ldr	r0, [pc, #52]	; (8002730 <MX_TIM7_Init+0x68>)
 80026fc:	f004 f890 	bl	8006820 <HAL_TIM_Base_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002706:	f7ff fcd7 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800270a:	2300      	movs	r3, #0
 800270c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002712:	1d3b      	adds	r3, r7, #4
 8002714:	4619      	mov	r1, r3
 8002716:	4806      	ldr	r0, [pc, #24]	; (8002730 <MX_TIM7_Init+0x68>)
 8002718:	f004 fd5c 	bl	80071d4 <HAL_TIMEx_MasterConfigSynchronization>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002722:	f7ff fcc9 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	2000a3d8 	.word	0x2000a3d8
 8002734:	40001400 	.word	0x40001400

08002738 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a25      	ldr	r2, [pc, #148]	; (80027ec <HAL_TIM_Encoder_MspInit+0xb4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d144      	bne.n	80027e4 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800275a:	4b25      	ldr	r3, [pc, #148]	; (80027f0 <HAL_TIM_Encoder_MspInit+0xb8>)
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	4a24      	ldr	r2, [pc, #144]	; (80027f0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8002760:	f043 0302 	orr.w	r3, r3, #2
 8002764:	6593      	str	r3, [r2, #88]	; 0x58
 8002766:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8002768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002772:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8002774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002776:	4a1e      	ldr	r2, [pc, #120]	; (80027f0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800277e:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8002780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800278a:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_TIM_Encoder_MspInit+0xb8>)
 800278c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278e:	4a18      	ldr	r2, [pc, #96]	; (80027f0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002796:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8002798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ae:	2300      	movs	r3, #0
 80027b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027b2:	2302      	movs	r3, #2
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	4619      	mov	r1, r3
 80027bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027c0:	f000 fca0 	bl	8003104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027c4:	2340      	movs	r3, #64	; 0x40
 80027c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c8:	2302      	movs	r3, #2
 80027ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d0:	2300      	movs	r3, #0
 80027d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027d4:	2302      	movs	r3, #2
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	4619      	mov	r1, r3
 80027de:	4805      	ldr	r0, [pc, #20]	; (80027f4 <HAL_TIM_Encoder_MspInit+0xbc>)
 80027e0:	f000 fc90 	bl	8003104 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80027e4:	bf00      	nop
 80027e6:	3728      	adds	r7, #40	; 0x28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40000400 	.word	0x40000400
 80027f0:	40021000 	.word	0x40021000
 80027f4:	48000800 	.word	0x48000800

080027f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a1a      	ldr	r2, [pc, #104]	; (8002870 <HAL_TIM_Base_MspInit+0x78>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d114      	bne.n	8002834 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800280a:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <HAL_TIM_Base_MspInit+0x7c>)
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	4a19      	ldr	r2, [pc, #100]	; (8002874 <HAL_TIM_Base_MspInit+0x7c>)
 8002810:	f043 0310 	orr.w	r3, r3, #16
 8002814:	6593      	str	r3, [r2, #88]	; 0x58
 8002816:	4b17      	ldr	r3, [pc, #92]	; (8002874 <HAL_TIM_Base_MspInit+0x7c>)
 8002818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002822:	2200      	movs	r2, #0
 8002824:	2105      	movs	r1, #5
 8002826:	2036      	movs	r0, #54	; 0x36
 8002828:	f000 fa3d 	bl	8002ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800282c:	2036      	movs	r0, #54	; 0x36
 800282e:	f000 fa56 	bl	8002cde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002832:	e018      	b.n	8002866 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a0f      	ldr	r2, [pc, #60]	; (8002878 <HAL_TIM_Base_MspInit+0x80>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d113      	bne.n	8002866 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800283e:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <HAL_TIM_Base_MspInit+0x7c>)
 8002840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002842:	4a0c      	ldr	r2, [pc, #48]	; (8002874 <HAL_TIM_Base_MspInit+0x7c>)
 8002844:	f043 0320 	orr.w	r3, r3, #32
 8002848:	6593      	str	r3, [r2, #88]	; 0x58
 800284a:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <HAL_TIM_Base_MspInit+0x7c>)
 800284c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 4, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	2104      	movs	r1, #4
 800285a:	2037      	movs	r0, #55	; 0x37
 800285c:	f000 fa23 	bl	8002ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002860:	2037      	movs	r0, #55	; 0x37
 8002862:	f000 fa3c 	bl	8002cde <HAL_NVIC_EnableIRQ>
}
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40001000 	.word	0x40001000
 8002874:	40021000 	.word	0x40021000
 8002878:	40001400 	.word	0x40001400

0800287c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002880:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <MX_USART2_UART_Init+0x58>)
 8002882:	4a15      	ldr	r2, [pc, #84]	; (80028d8 <MX_USART2_UART_Init+0x5c>)
 8002884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002886:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <MX_USART2_UART_Init+0x58>)
 8002888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800288c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800288e:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <MX_USART2_UART_Init+0x58>)
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002894:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <MX_USART2_UART_Init+0x58>)
 8002896:	2200      	movs	r2, #0
 8002898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800289a:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <MX_USART2_UART_Init+0x58>)
 800289c:	2200      	movs	r2, #0
 800289e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <MX_USART2_UART_Init+0x58>)
 80028a2:	220c      	movs	r2, #12
 80028a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028a6:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <MX_USART2_UART_Init+0x58>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028ac:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <MX_USART2_UART_Init+0x58>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028b2:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <MX_USART2_UART_Init+0x58>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <MX_USART2_UART_Init+0x58>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028be:	4805      	ldr	r0, [pc, #20]	; (80028d4 <MX_USART2_UART_Init+0x58>)
 80028c0:	f004 fd2e 	bl	8007320 <HAL_UART_Init>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80028ca:	f7ff fbf5 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	2000a424 	.word	0x2000a424
 80028d8:	40004400 	.word	0x40004400

080028dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b0ac      	sub	sp, #176	; 0xb0
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	2288      	movs	r2, #136	; 0x88
 80028fa:	2100      	movs	r1, #0
 80028fc:	4618      	mov	r0, r3
 80028fe:	f006 fb5f 	bl	8008fc0 <memset>
  if(uartHandle->Instance==USART2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a21      	ldr	r2, [pc, #132]	; (800298c <HAL_UART_MspInit+0xb0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d13b      	bne.n	8002984 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800290c:	2302      	movs	r3, #2
 800290e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002910:	2300      	movs	r3, #0
 8002912:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	4618      	mov	r0, r3
 800291a:	f002 fa9b 	bl	8004e54 <HAL_RCCEx_PeriphCLKConfig>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002924:	f7ff fbc8 	bl	80020b8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_UART_MspInit+0xb4>)
 800292a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292c:	4a18      	ldr	r2, [pc, #96]	; (8002990 <HAL_UART_MspInit+0xb4>)
 800292e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002932:	6593      	str	r3, [r2, #88]	; 0x58
 8002934:	4b16      	ldr	r3, [pc, #88]	; (8002990 <HAL_UART_MspInit+0xb4>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293c:	613b      	str	r3, [r7, #16]
 800293e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002940:	4b13      	ldr	r3, [pc, #76]	; (8002990 <HAL_UART_MspInit+0xb4>)
 8002942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002944:	4a12      	ldr	r2, [pc, #72]	; (8002990 <HAL_UART_MspInit+0xb4>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800294c:	4b10      	ldr	r3, [pc, #64]	; (8002990 <HAL_UART_MspInit+0xb4>)
 800294e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002958:	230c      	movs	r3, #12
 800295a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296a:	2303      	movs	r3, #3
 800296c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002970:	2307      	movs	r3, #7
 8002972:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002976:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800297a:	4619      	mov	r1, r3
 800297c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002980:	f000 fbc0 	bl	8003104 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002984:	bf00      	nop
 8002986:	37b0      	adds	r7, #176	; 0xb0
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40004400 	.word	0x40004400
 8002990:	40021000 	.word	0x40021000

08002994 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002998:	f7ff fdf6 	bl	8002588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800299c:	480c      	ldr	r0, [pc, #48]	; (80029d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800299e:	490d      	ldr	r1, [pc, #52]	; (80029d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029a0:	4a0d      	ldr	r2, [pc, #52]	; (80029d8 <LoopForever+0xe>)
  movs r3, #0
 80029a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029a4:	e002      	b.n	80029ac <LoopCopyDataInit>

080029a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029aa:	3304      	adds	r3, #4

080029ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029b0:	d3f9      	bcc.n	80029a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029b2:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80029b4:	4c0a      	ldr	r4, [pc, #40]	; (80029e0 <LoopForever+0x16>)
  movs r3, #0
 80029b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029b8:	e001      	b.n	80029be <LoopFillZerobss>

080029ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029bc:	3204      	adds	r2, #4

080029be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029c0:	d3fb      	bcc.n	80029ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029c2:	f006 fa63 	bl	8008e8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029c6:	f7ff fa3d 	bl	8001e44 <main>

080029ca <LoopForever>:

LoopForever:
    b LoopForever
 80029ca:	e7fe      	b.n	80029ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80029d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029d4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80029d8:	08039f84 	.word	0x08039f84
  ldr r2, =_sbss
 80029dc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80029e0:	2000a4bc 	.word	0x2000a4bc

080029e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029e4:	e7fe      	b.n	80029e4 <ADC1_2_IRQHandler>

080029e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f0:	2003      	movs	r0, #3
 80029f2:	f000 f94d 	bl	8002c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029f6:	2001      	movs	r0, #1
 80029f8:	f000 f80e 	bl	8002a18 <HAL_InitTick>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	71fb      	strb	r3, [r7, #7]
 8002a06:	e001      	b.n	8002a0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a08:	f7ff fc84 	bl	8002314 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a24:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <HAL_InitTick+0x6c>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d023      	beq.n	8002a74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a2c:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <HAL_InitTick+0x70>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <HAL_InitTick+0x6c>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	4619      	mov	r1, r3
 8002a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 f959 	bl	8002cfa <HAL_SYSTICK_Config>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10f      	bne.n	8002a6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b0f      	cmp	r3, #15
 8002a52:	d809      	bhi.n	8002a68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a54:	2200      	movs	r2, #0
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a5c:	f000 f923 	bl	8002ca6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a60:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <HAL_InitTick+0x74>)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e007      	b.n	8002a78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
 8002a6c:	e004      	b.n	8002a78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	73fb      	strb	r3, [r7, #15]
 8002a72:	e001      	b.n	8002a78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000008 	.word	0x20000008
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	20000004 	.word	0x20000004

08002a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <HAL_IncTick+0x20>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_IncTick+0x24>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <HAL_IncTick+0x24>)
 8002aa2:	6013      	str	r3, [r2, #0]
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000008 	.word	0x20000008
 8002ab4:	2000a4a8 	.word	0x2000a4a8

08002ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return uwTick;
 8002abc:	4b03      	ldr	r3, [pc, #12]	; (8002acc <HAL_GetTick+0x14>)
 8002abe:	681b      	ldr	r3, [r3, #0]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	2000a4a8 	.word	0x2000a4a8

08002ad0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_ResumeTick+0x1c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a04      	ldr	r2, [pc, #16]	; (8002aec <HAL_ResumeTick+0x1c>)
 8002ada:	f043 0302 	orr.w	r3, r3, #2
 8002ade:	6013      	str	r3, [r2, #0]
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	e000e010 	.word	0xe000e010

08002af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b22:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	60d3      	str	r3, [r2, #12]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <__NVIC_GetPriorityGrouping+0x18>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	f003 0307 	and.w	r3, r3, #7
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	db0b      	blt.n	8002b7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	f003 021f 	and.w	r2, r3, #31
 8002b6c:	4907      	ldr	r1, [pc, #28]	; (8002b8c <__NVIC_EnableIRQ+0x38>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	2001      	movs	r0, #1
 8002b76:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000e100 	.word	0xe000e100

08002b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	6039      	str	r1, [r7, #0]
 8002b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	db0a      	blt.n	8002bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	490c      	ldr	r1, [pc, #48]	; (8002bdc <__NVIC_SetPriority+0x4c>)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	0112      	lsls	r2, r2, #4
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb8:	e00a      	b.n	8002bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	4908      	ldr	r1, [pc, #32]	; (8002be0 <__NVIC_SetPriority+0x50>)
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	3b04      	subs	r3, #4
 8002bc8:	0112      	lsls	r2, r2, #4
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	440b      	add	r3, r1
 8002bce:	761a      	strb	r2, [r3, #24]
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000e100 	.word	0xe000e100
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b089      	sub	sp, #36	; 0x24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f1c3 0307 	rsb	r3, r3, #7
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	bf28      	it	cs
 8002c02:	2304      	movcs	r3, #4
 8002c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	2b06      	cmp	r3, #6
 8002c0c:	d902      	bls.n	8002c14 <NVIC_EncodePriority+0x30>
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3b03      	subs	r3, #3
 8002c12:	e000      	b.n	8002c16 <NVIC_EncodePriority+0x32>
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	401a      	ands	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	43d9      	mvns	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c3c:	4313      	orrs	r3, r2
         );
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3724      	adds	r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c5c:	d301      	bcc.n	8002c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e00f      	b.n	8002c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c62:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <SysTick_Config+0x40>)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c6a:	210f      	movs	r1, #15
 8002c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c70:	f7ff ff8e 	bl	8002b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <SysTick_Config+0x40>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7a:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <SysTick_Config+0x40>)
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	e000e010 	.word	0xe000e010

08002c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff ff29 	bl	8002af0 <__NVIC_SetPriorityGrouping>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b086      	sub	sp, #24
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb8:	f7ff ff3e 	bl	8002b38 <__NVIC_GetPriorityGrouping>
 8002cbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	6978      	ldr	r0, [r7, #20]
 8002cc4:	f7ff ff8e 	bl	8002be4 <NVIC_EncodePriority>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff5d 	bl	8002b90 <__NVIC_SetPriority>
}
 8002cd6:	bf00      	nop
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff31 	bl	8002b54 <__NVIC_EnableIRQ>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff ffa2 	bl	8002c4c <SysTick_Config>
 8002d08:	4603      	mov	r3, r0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e098      	b.n	8002e58 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4b4d      	ldr	r3, [pc, #308]	; (8002e64 <HAL_DMA_Init+0x150>)
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d80f      	bhi.n	8002d52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	4b4b      	ldr	r3, [pc, #300]	; (8002e68 <HAL_DMA_Init+0x154>)
 8002d3a:	4413      	add	r3, r2
 8002d3c:	4a4b      	ldr	r2, [pc, #300]	; (8002e6c <HAL_DMA_Init+0x158>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	091b      	lsrs	r3, r3, #4
 8002d44:	009a      	lsls	r2, r3, #2
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a48      	ldr	r2, [pc, #288]	; (8002e70 <HAL_DMA_Init+0x15c>)
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40
 8002d50:	e00e      	b.n	8002d70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	4b46      	ldr	r3, [pc, #280]	; (8002e74 <HAL_DMA_Init+0x160>)
 8002d5a:	4413      	add	r3, r2
 8002d5c:	4a43      	ldr	r2, [pc, #268]	; (8002e6c <HAL_DMA_Init+0x158>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	091b      	lsrs	r3, r3, #4
 8002d64:	009a      	lsls	r2, r3, #2
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a42      	ldr	r2, [pc, #264]	; (8002e78 <HAL_DMA_Init+0x164>)
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dca:	d039      	beq.n	8002e40 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	4a27      	ldr	r2, [pc, #156]	; (8002e70 <HAL_DMA_Init+0x15c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d11a      	bne.n	8002e0c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002dd6:	4b29      	ldr	r3, [pc, #164]	; (8002e7c <HAL_DMA_Init+0x168>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	f003 031c 	and.w	r3, r3, #28
 8002de2:	210f      	movs	r1, #15
 8002de4:	fa01 f303 	lsl.w	r3, r1, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	4924      	ldr	r1, [pc, #144]	; (8002e7c <HAL_DMA_Init+0x168>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002df0:	4b22      	ldr	r3, [pc, #136]	; (8002e7c <HAL_DMA_Init+0x168>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfc:	f003 031c 	and.w	r3, r3, #28
 8002e00:	fa01 f303 	lsl.w	r3, r1, r3
 8002e04:	491d      	ldr	r1, [pc, #116]	; (8002e7c <HAL_DMA_Init+0x168>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]
 8002e0a:	e019      	b.n	8002e40 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002e0c:	4b1c      	ldr	r3, [pc, #112]	; (8002e80 <HAL_DMA_Init+0x16c>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e14:	f003 031c 	and.w	r3, r3, #28
 8002e18:	210f      	movs	r1, #15
 8002e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	4917      	ldr	r1, [pc, #92]	; (8002e80 <HAL_DMA_Init+0x16c>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002e26:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <HAL_DMA_Init+0x16c>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6859      	ldr	r1, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	f003 031c 	and.w	r3, r3, #28
 8002e36:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3a:	4911      	ldr	r1, [pc, #68]	; (8002e80 <HAL_DMA_Init+0x16c>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40020407 	.word	0x40020407
 8002e68:	bffdfff8 	.word	0xbffdfff8
 8002e6c:	cccccccd 	.word	0xcccccccd
 8002e70:	40020000 	.word	0x40020000
 8002e74:	bffdfbf8 	.word	0xbffdfbf8
 8002e78:	40020400 	.word	0x40020400
 8002e7c:	400200a8 	.word	0x400200a8
 8002e80:	400204a8 	.word	0x400204a8

08002e84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_DMA_Start_IT+0x20>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e04b      	b.n	8002f3c <HAL_DMA_Start_IT+0xb8>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d13a      	bne.n	8002f2e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f8e0 	bl	80030a2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d008      	beq.n	8002efc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 020e 	orr.w	r2, r2, #14
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	e00f      	b.n	8002f1c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0204 	bic.w	r2, r2, #4
 8002f0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 020a 	orr.w	r2, r2, #10
 8002f1a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	e005      	b.n	8002f3a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f36:	2302      	movs	r3, #2
 8002f38:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f60:	f003 031c 	and.w	r3, r3, #28
 8002f64:	2204      	movs	r2, #4
 8002f66:	409a      	lsls	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d026      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x7a>
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d021      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d107      	bne.n	8002f98 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0204 	bic.w	r2, r2, #4
 8002f96:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9c:	f003 021c 	and.w	r2, r3, #28
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	2104      	movs	r1, #4
 8002fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8002faa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d071      	beq.n	8003098 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002fbc:	e06c      	b.n	8003098 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	f003 031c 	and.w	r3, r3, #28
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d02e      	beq.n	8003030 <HAL_DMA_IRQHandler+0xec>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d029      	beq.n	8003030 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10b      	bne.n	8003002 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 020a 	bic.w	r2, r2, #10
 8002ff8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	f003 021c 	and.w	r2, r3, #28
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	2102      	movs	r1, #2
 8003010:	fa01 f202 	lsl.w	r2, r1, r2
 8003014:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d038      	beq.n	8003098 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800302e:	e033      	b.n	8003098 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003034:	f003 031c 	and.w	r3, r3, #28
 8003038:	2208      	movs	r2, #8
 800303a:	409a      	lsls	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d02a      	beq.n	800309a <HAL_DMA_IRQHandler+0x156>
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d025      	beq.n	800309a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 020e 	bic.w	r2, r2, #14
 800305c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	f003 021c 	and.w	r2, r3, #28
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	2101      	movs	r1, #1
 800306c:	fa01 f202 	lsl.w	r2, r1, r2
 8003070:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308c:	2b00      	cmp	r3, #0
 800308e:	d004      	beq.n	800309a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003098:	bf00      	nop
 800309a:	bf00      	nop
}
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b085      	sub	sp, #20
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b4:	f003 021c 	and.w	r2, r3, #28
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	2101      	movs	r1, #1
 80030be:	fa01 f202 	lsl.w	r2, r1, r2
 80030c2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b10      	cmp	r3, #16
 80030d2:	d108      	bne.n	80030e6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030e4:	e007      	b.n	80030f6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	60da      	str	r2, [r3, #12]
}
 80030f6:	bf00      	nop
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003112:	e17f      	b.n	8003414 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	2101      	movs	r1, #1
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	fa01 f303 	lsl.w	r3, r1, r3
 8003120:	4013      	ands	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 8171 	beq.w	800340e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	2b01      	cmp	r3, #1
 8003136:	d005      	beq.n	8003144 <HAL_GPIO_Init+0x40>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d130      	bne.n	80031a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	2203      	movs	r2, #3
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4013      	ands	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4313      	orrs	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800317a:	2201      	movs	r2, #1
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	091b      	lsrs	r3, r3, #4
 8003190:	f003 0201 	and.w	r2, r3, #1
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	2b03      	cmp	r3, #3
 80031b0:	d118      	bne.n	80031e4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80031b8:	2201      	movs	r2, #1
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4013      	ands	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	08db      	lsrs	r3, r3, #3
 80031ce:	f003 0201 	and.w	r2, r3, #1
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d017      	beq.n	8003220 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	2203      	movs	r2, #3
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4013      	ands	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d123      	bne.n	8003274 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	08da      	lsrs	r2, r3, #3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3208      	adds	r2, #8
 8003234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003238:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	220f      	movs	r2, #15
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4013      	ands	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	08da      	lsrs	r2, r3, #3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3208      	adds	r2, #8
 800326e:	6939      	ldr	r1, [r7, #16]
 8003270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	2203      	movs	r2, #3
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4013      	ands	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 0203 	and.w	r2, r3, #3
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80ac 	beq.w	800340e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b6:	4b5f      	ldr	r3, [pc, #380]	; (8003434 <HAL_GPIO_Init+0x330>)
 80032b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ba:	4a5e      	ldr	r2, [pc, #376]	; (8003434 <HAL_GPIO_Init+0x330>)
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	6613      	str	r3, [r2, #96]	; 0x60
 80032c2:	4b5c      	ldr	r3, [pc, #368]	; (8003434 <HAL_GPIO_Init+0x330>)
 80032c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032ce:	4a5a      	ldr	r2, [pc, #360]	; (8003438 <HAL_GPIO_Init+0x334>)
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	089b      	lsrs	r3, r3, #2
 80032d4:	3302      	adds	r3, #2
 80032d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	220f      	movs	r2, #15
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43db      	mvns	r3, r3
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4013      	ands	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032f8:	d025      	beq.n	8003346 <HAL_GPIO_Init+0x242>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a4f      	ldr	r2, [pc, #316]	; (800343c <HAL_GPIO_Init+0x338>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01f      	beq.n	8003342 <HAL_GPIO_Init+0x23e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a4e      	ldr	r2, [pc, #312]	; (8003440 <HAL_GPIO_Init+0x33c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d019      	beq.n	800333e <HAL_GPIO_Init+0x23a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a4d      	ldr	r2, [pc, #308]	; (8003444 <HAL_GPIO_Init+0x340>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d013      	beq.n	800333a <HAL_GPIO_Init+0x236>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a4c      	ldr	r2, [pc, #304]	; (8003448 <HAL_GPIO_Init+0x344>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00d      	beq.n	8003336 <HAL_GPIO_Init+0x232>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a4b      	ldr	r2, [pc, #300]	; (800344c <HAL_GPIO_Init+0x348>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d007      	beq.n	8003332 <HAL_GPIO_Init+0x22e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a4a      	ldr	r2, [pc, #296]	; (8003450 <HAL_GPIO_Init+0x34c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d101      	bne.n	800332e <HAL_GPIO_Init+0x22a>
 800332a:	2306      	movs	r3, #6
 800332c:	e00c      	b.n	8003348 <HAL_GPIO_Init+0x244>
 800332e:	2307      	movs	r3, #7
 8003330:	e00a      	b.n	8003348 <HAL_GPIO_Init+0x244>
 8003332:	2305      	movs	r3, #5
 8003334:	e008      	b.n	8003348 <HAL_GPIO_Init+0x244>
 8003336:	2304      	movs	r3, #4
 8003338:	e006      	b.n	8003348 <HAL_GPIO_Init+0x244>
 800333a:	2303      	movs	r3, #3
 800333c:	e004      	b.n	8003348 <HAL_GPIO_Init+0x244>
 800333e:	2302      	movs	r3, #2
 8003340:	e002      	b.n	8003348 <HAL_GPIO_Init+0x244>
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <HAL_GPIO_Init+0x244>
 8003346:	2300      	movs	r3, #0
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	f002 0203 	and.w	r2, r2, #3
 800334e:	0092      	lsls	r2, r2, #2
 8003350:	4093      	lsls	r3, r2
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003358:	4937      	ldr	r1, [pc, #220]	; (8003438 <HAL_GPIO_Init+0x334>)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	089b      	lsrs	r3, r3, #2
 800335e:	3302      	adds	r3, #2
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003366:	4b3b      	ldr	r3, [pc, #236]	; (8003454 <HAL_GPIO_Init+0x350>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	43db      	mvns	r3, r3
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4013      	ands	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800338a:	4a32      	ldr	r2, [pc, #200]	; (8003454 <HAL_GPIO_Init+0x350>)
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003390:	4b30      	ldr	r3, [pc, #192]	; (8003454 <HAL_GPIO_Init+0x350>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	43db      	mvns	r3, r3
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4013      	ands	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033b4:	4a27      	ldr	r2, [pc, #156]	; (8003454 <HAL_GPIO_Init+0x350>)
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80033ba:	4b26      	ldr	r3, [pc, #152]	; (8003454 <HAL_GPIO_Init+0x350>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	43db      	mvns	r3, r3
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4013      	ands	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033de:	4a1d      	ldr	r2, [pc, #116]	; (8003454 <HAL_GPIO_Init+0x350>)
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033e4:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <HAL_GPIO_Init+0x350>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4013      	ands	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003408:	4a12      	ldr	r2, [pc, #72]	; (8003454 <HAL_GPIO_Init+0x350>)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	3301      	adds	r3, #1
 8003412:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	fa22 f303 	lsr.w	r3, r2, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	f47f ae78 	bne.w	8003114 <HAL_GPIO_Init+0x10>
  }
}
 8003424:	bf00      	nop
 8003426:	bf00      	nop
 8003428:	371c      	adds	r7, #28
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000
 8003438:	40010000 	.word	0x40010000
 800343c:	48000400 	.word	0x48000400
 8003440:	48000800 	.word	0x48000800
 8003444:	48000c00 	.word	0x48000c00
 8003448:	48001000 	.word	0x48001000
 800344c:	48001400 	.word	0x48001400
 8003450:	48001800 	.word	0x48001800
 8003454:	40010400 	.word	0x40010400

08003458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	807b      	strh	r3, [r7, #2]
 8003464:	4613      	mov	r3, r2
 8003466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003468:	787b      	ldrb	r3, [r7, #1]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800346e:	887a      	ldrh	r2, [r7, #2]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003474:	e002      	b.n	800347c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003476:	887a      	ldrh	r2, [r7, #2]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003492:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d006      	beq.n	80034ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800349e:	4a05      	ldr	r2, [pc, #20]	; (80034b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034a4:	88fb      	ldrh	r3, [r7, #6]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fe f874 	bl	8001594 <HAL_GPIO_EXTI_Callback>
  }
}
 80034ac:	bf00      	nop
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40010400 	.word	0x40010400

080034b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e081      	b.n	80035ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fd fdcc 	bl	800107c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2224      	movs	r2, #36	; 0x24
 80034e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0201 	bic.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003508:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003518:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d107      	bne.n	8003532 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	e006      	b.n	8003540 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800353e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d104      	bne.n	8003552 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003550:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003564:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003574:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691a      	ldr	r2, [r3, #16]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69d9      	ldr	r1, [r3, #28]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1a      	ldr	r2, [r3, #32]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af02      	add	r7, sp, #8
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	4608      	mov	r0, r1
 80035e2:	4611      	mov	r1, r2
 80035e4:	461a      	mov	r2, r3
 80035e6:	4603      	mov	r3, r0
 80035e8:	817b      	strh	r3, [r7, #10]
 80035ea:	460b      	mov	r3, r1
 80035ec:	813b      	strh	r3, [r7, #8]
 80035ee:	4613      	mov	r3, r2
 80035f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	f040 80f9 	bne.w	80037f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <HAL_I2C_Mem_Write+0x34>
 8003606:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003608:	2b00      	cmp	r3, #0
 800360a:	d105      	bne.n	8003618 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003612:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0ed      	b.n	80037f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_I2C_Mem_Write+0x4e>
 8003622:	2302      	movs	r3, #2
 8003624:	e0e6      	b.n	80037f4 <HAL_I2C_Mem_Write+0x21c>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800362e:	f7ff fa43 	bl	8002ab8 <HAL_GetTick>
 8003632:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	2319      	movs	r3, #25
 800363a:	2201      	movs	r2, #1
 800363c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fac3 	bl	8003bcc <I2C_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e0d1      	b.n	80037f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2221      	movs	r2, #33	; 0x21
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2240      	movs	r2, #64	; 0x40
 800365c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a3a      	ldr	r2, [r7, #32]
 800366a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003670:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003678:	88f8      	ldrh	r0, [r7, #6]
 800367a:	893a      	ldrh	r2, [r7, #8]
 800367c:	8979      	ldrh	r1, [r7, #10]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	4603      	mov	r3, r0
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f9d3 	bl	8003a34 <I2C_RequestMemoryWrite>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0a9      	b.n	80037f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2bff      	cmp	r3, #255	; 0xff
 80036a8:	d90e      	bls.n	80036c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	22ff      	movs	r2, #255	; 0xff
 80036ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	8979      	ldrh	r1, [r7, #10]
 80036b8:	2300      	movs	r3, #0
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 fc2b 	bl	8003f1c <I2C_TransferConfig>
 80036c6:	e00f      	b.n	80036e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	8979      	ldrh	r1, [r7, #10]
 80036da:	2300      	movs	r3, #0
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fc1a 	bl	8003f1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 faad 	bl	8003c4c <I2C_WaitOnTXISFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e07b      	b.n	80037f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	781a      	ldrb	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003716:	b29b      	uxth	r3, r3
 8003718:	3b01      	subs	r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d034      	beq.n	80037a0 <HAL_I2C_Mem_Write+0x1c8>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373a:	2b00      	cmp	r3, #0
 800373c:	d130      	bne.n	80037a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	2200      	movs	r2, #0
 8003746:	2180      	movs	r1, #128	; 0x80
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 fa3f 	bl	8003bcc <I2C_WaitOnFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e04d      	b.n	80037f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	2bff      	cmp	r3, #255	; 0xff
 8003760:	d90e      	bls.n	8003780 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	22ff      	movs	r2, #255	; 0xff
 8003766:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376c:	b2da      	uxtb	r2, r3
 800376e:	8979      	ldrh	r1, [r7, #10]
 8003770:	2300      	movs	r3, #0
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fbcf 	bl	8003f1c <I2C_TransferConfig>
 800377e:	e00f      	b.n	80037a0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003784:	b29a      	uxth	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378e:	b2da      	uxtb	r2, r3
 8003790:	8979      	ldrh	r1, [r7, #10]
 8003792:	2300      	movs	r3, #0
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fbbe 	bl	8003f1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d19e      	bne.n	80036e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 fa8c 	bl	8003ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e01a      	b.n	80037f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2220      	movs	r2, #32
 80037c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <HAL_I2C_Mem_Write+0x224>)
 80037d2:	400b      	ands	r3, r1
 80037d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	e000      	b.n	80037f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80037f2:	2302      	movs	r3, #2
  }
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	fe00e800 	.word	0xfe00e800

08003800 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af02      	add	r7, sp, #8
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	4608      	mov	r0, r1
 800380a:	4611      	mov	r1, r2
 800380c:	461a      	mov	r2, r3
 800380e:	4603      	mov	r3, r0
 8003810:	817b      	strh	r3, [r7, #10]
 8003812:	460b      	mov	r3, r1
 8003814:	813b      	strh	r3, [r7, #8]
 8003816:	4613      	mov	r3, r2
 8003818:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b20      	cmp	r3, #32
 8003824:	f040 80fd 	bne.w	8003a22 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_I2C_Mem_Read+0x34>
 800382e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003830:	2b00      	cmp	r3, #0
 8003832:	d105      	bne.n	8003840 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800383a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0f1      	b.n	8003a24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_I2C_Mem_Read+0x4e>
 800384a:	2302      	movs	r3, #2
 800384c:	e0ea      	b.n	8003a24 <HAL_I2C_Mem_Read+0x224>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003856:	f7ff f92f 	bl	8002ab8 <HAL_GetTick>
 800385a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	2319      	movs	r3, #25
 8003862:	2201      	movs	r2, #1
 8003864:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f9af 	bl	8003bcc <I2C_WaitOnFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0d5      	b.n	8003a24 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2222      	movs	r2, #34	; 0x22
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2240      	movs	r2, #64	; 0x40
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a3a      	ldr	r2, [r7, #32]
 8003892:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003898:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038a0:	88f8      	ldrh	r0, [r7, #6]
 80038a2:	893a      	ldrh	r2, [r7, #8]
 80038a4:	8979      	ldrh	r1, [r7, #10]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	9301      	str	r3, [sp, #4]
 80038aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	4603      	mov	r3, r0
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f913 	bl	8003adc <I2C_RequestMemoryRead>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0ad      	b.n	8003a24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2bff      	cmp	r3, #255	; 0xff
 80038d0:	d90e      	bls.n	80038f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	22ff      	movs	r2, #255	; 0xff
 80038d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	8979      	ldrh	r1, [r7, #10]
 80038e0:	4b52      	ldr	r3, [pc, #328]	; (8003a2c <HAL_I2C_Mem_Read+0x22c>)
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fb17 	bl	8003f1c <I2C_TransferConfig>
 80038ee:	e00f      	b.n	8003910 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	8979      	ldrh	r1, [r7, #10]
 8003902:	4b4a      	ldr	r3, [pc, #296]	; (8003a2c <HAL_I2C_Mem_Read+0x22c>)
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 fb06 	bl	8003f1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003916:	2200      	movs	r2, #0
 8003918:	2104      	movs	r1, #4
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f956 	bl	8003bcc <I2C_WaitOnFlagUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e07c      	b.n	8003a24 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d034      	beq.n	80039d0 <HAL_I2C_Mem_Read+0x1d0>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396a:	2b00      	cmp	r3, #0
 800396c:	d130      	bne.n	80039d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003974:	2200      	movs	r2, #0
 8003976:	2180      	movs	r1, #128	; 0x80
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f927 	bl	8003bcc <I2C_WaitOnFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e04d      	b.n	8003a24 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398c:	b29b      	uxth	r3, r3
 800398e:	2bff      	cmp	r3, #255	; 0xff
 8003990:	d90e      	bls.n	80039b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	22ff      	movs	r2, #255	; 0xff
 8003996:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399c:	b2da      	uxtb	r2, r3
 800399e:	8979      	ldrh	r1, [r7, #10]
 80039a0:	2300      	movs	r3, #0
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 fab7 	bl	8003f1c <I2C_TransferConfig>
 80039ae:	e00f      	b.n	80039d0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	8979      	ldrh	r1, [r7, #10]
 80039c2:	2300      	movs	r3, #0
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 faa6 	bl	8003f1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d19a      	bne.n	8003910 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f974 	bl	8003ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e01a      	b.n	8003a24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2220      	movs	r2, #32
 80039f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6859      	ldr	r1, [r3, #4]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_I2C_Mem_Read+0x230>)
 8003a02:	400b      	ands	r3, r1
 8003a04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e000      	b.n	8003a24 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003a22:	2302      	movs	r3, #2
  }
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	80002400 	.word	0x80002400
 8003a30:	fe00e800 	.word	0xfe00e800

08003a34 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af02      	add	r7, sp, #8
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	4608      	mov	r0, r1
 8003a3e:	4611      	mov	r1, r2
 8003a40:	461a      	mov	r2, r3
 8003a42:	4603      	mov	r3, r0
 8003a44:	817b      	strh	r3, [r7, #10]
 8003a46:	460b      	mov	r3, r1
 8003a48:	813b      	strh	r3, [r7, #8]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	8979      	ldrh	r1, [r7, #10]
 8003a54:	4b20      	ldr	r3, [pc, #128]	; (8003ad8 <I2C_RequestMemoryWrite+0xa4>)
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 fa5d 	bl	8003f1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	69b9      	ldr	r1, [r7, #24]
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f8f0 	bl	8003c4c <I2C_WaitOnTXISFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e02c      	b.n	8003ad0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a76:	88fb      	ldrh	r3, [r7, #6]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d105      	bne.n	8003a88 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a7c:	893b      	ldrh	r3, [r7, #8]
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	629a      	str	r2, [r3, #40]	; 0x28
 8003a86:	e015      	b.n	8003ab4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a88:	893b      	ldrh	r3, [r7, #8]
 8003a8a:	0a1b      	lsrs	r3, r3, #8
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a96:	69fa      	ldr	r2, [r7, #28]
 8003a98:	69b9      	ldr	r1, [r7, #24]
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f8d6 	bl	8003c4c <I2C_WaitOnTXISFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e012      	b.n	8003ad0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003aaa:	893b      	ldrh	r3, [r7, #8]
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2200      	movs	r2, #0
 8003abc:	2180      	movs	r1, #128	; 0x80
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f884 	bl	8003bcc <I2C_WaitOnFlagUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	80002000 	.word	0x80002000

08003adc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4603      	mov	r3, r0
 8003aec:	817b      	strh	r3, [r7, #10]
 8003aee:	460b      	mov	r3, r1
 8003af0:	813b      	strh	r3, [r7, #8]
 8003af2:	4613      	mov	r3, r2
 8003af4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003af6:	88fb      	ldrh	r3, [r7, #6]
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	8979      	ldrh	r1, [r7, #10]
 8003afc:	4b20      	ldr	r3, [pc, #128]	; (8003b80 <I2C_RequestMemoryRead+0xa4>)
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	2300      	movs	r3, #0
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 fa0a 	bl	8003f1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b08:	69fa      	ldr	r2, [r7, #28]
 8003b0a:	69b9      	ldr	r1, [r7, #24]
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f89d 	bl	8003c4c <I2C_WaitOnTXISFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e02c      	b.n	8003b76 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b1c:	88fb      	ldrh	r3, [r7, #6]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d105      	bne.n	8003b2e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b22:	893b      	ldrh	r3, [r7, #8]
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	629a      	str	r2, [r3, #40]	; 0x28
 8003b2c:	e015      	b.n	8003b5a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b2e:	893b      	ldrh	r3, [r7, #8]
 8003b30:	0a1b      	lsrs	r3, r3, #8
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b3c:	69fa      	ldr	r2, [r7, #28]
 8003b3e:	69b9      	ldr	r1, [r7, #24]
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f883 	bl	8003c4c <I2C_WaitOnTXISFlagUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e012      	b.n	8003b76 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b50:	893b      	ldrh	r3, [r7, #8]
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	2200      	movs	r2, #0
 8003b62:	2140      	movs	r1, #64	; 0x40
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f831 	bl	8003bcc <I2C_WaitOnFlagUntilTimeout>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	80002000 	.word	0x80002000

08003b84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d103      	bne.n	8003ba2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d007      	beq.n	8003bc0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699a      	ldr	r2, [r3, #24]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	619a      	str	r2, [r3, #24]
  }
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	603b      	str	r3, [r7, #0]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bdc:	e022      	b.n	8003c24 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003be4:	d01e      	beq.n	8003c24 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be6:	f7fe ff67 	bl	8002ab8 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d302      	bcc.n	8003bfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d113      	bne.n	8003c24 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c00:	f043 0220 	orr.w	r2, r3, #32
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e00f      	b.n	8003c44 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699a      	ldr	r2, [r3, #24]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d0cd      	beq.n	8003bde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c58:	e02c      	b.n	8003cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f870 	bl	8003d44 <I2C_IsErrorOccurred>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e02a      	b.n	8003cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c74:	d01e      	beq.n	8003cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c76:	f7fe ff1f 	bl	8002ab8 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d302      	bcc.n	8003c8c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d113      	bne.n	8003cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c90:	f043 0220 	orr.w	r2, r3, #32
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e007      	b.n	8003cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d1cb      	bne.n	8003c5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cd8:	e028      	b.n	8003d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	68b9      	ldr	r1, [r7, #8]
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 f830 	bl	8003d44 <I2C_IsErrorOccurred>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e026      	b.n	8003d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cee:	f7fe fee3 	bl	8002ab8 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d302      	bcc.n	8003d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d113      	bne.n	8003d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d08:	f043 0220 	orr.w	r2, r3, #32
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e007      	b.n	8003d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d1cf      	bne.n	8003cda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08a      	sub	sp, #40	; 0x28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	f003 0310 	and.w	r3, r3, #16
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d075      	beq.n	8003e5c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2210      	movs	r2, #16
 8003d76:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d78:	e056      	b.n	8003e28 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d80:	d052      	beq.n	8003e28 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d82:	f7fe fe99 	bl	8002ab8 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d302      	bcc.n	8003d98 <I2C_IsErrorOccurred+0x54>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d147      	bne.n	8003e28 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003da2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003daa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dba:	d12e      	bne.n	8003e1a <I2C_IsErrorOccurred+0xd6>
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dc2:	d02a      	beq.n	8003e1a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003dc4:	7cfb      	ldrb	r3, [r7, #19]
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	d027      	beq.n	8003e1a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dd8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003dda:	f7fe fe6d 	bl	8002ab8 <HAL_GetTick>
 8003dde:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003de0:	e01b      	b.n	8003e1a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003de2:	f7fe fe69 	bl	8002ab8 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b19      	cmp	r3, #25
 8003dee:	d914      	bls.n	8003e1a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df4:	f043 0220 	orr.w	r2, r3, #32
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d1dc      	bne.n	8003de2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f003 0320 	and.w	r3, r3, #32
 8003e32:	2b20      	cmp	r3, #32
 8003e34:	d003      	beq.n	8003e3e <I2C_IsErrorOccurred+0xfa>
 8003e36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d09d      	beq.n	8003d7a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d103      	bne.n	8003e4e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	f043 0304 	orr.w	r3, r3, #4
 8003e54:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00b      	beq.n	8003e86 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00b      	beq.n	8003ea8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	f043 0308 	orr.w	r3, r3, #8
 8003e96:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ea0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00b      	beq.n	8003eca <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	f043 0302 	orr.w	r3, r3, #2
 8003eb8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ec2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d01c      	beq.n	8003f0c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f7ff fe56 	bl	8003b84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6859      	ldr	r1, [r3, #4]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <I2C_IsErrorOccurred+0x1d4>)
 8003ee4:	400b      	ands	r3, r1
 8003ee6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3728      	adds	r7, #40	; 0x28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	fe00e800 	.word	0xfe00e800

08003f1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	607b      	str	r3, [r7, #4]
 8003f26:	460b      	mov	r3, r1
 8003f28:	817b      	strh	r3, [r7, #10]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f2e:	897b      	ldrh	r3, [r7, #10]
 8003f30:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f34:	7a7b      	ldrb	r3, [r7, #9]
 8003f36:	041b      	lsls	r3, r3, #16
 8003f38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f3c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f4a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	0d5b      	lsrs	r3, r3, #21
 8003f56:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f5a:	4b08      	ldr	r3, [pc, #32]	; (8003f7c <I2C_TransferConfig+0x60>)
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	ea02 0103 	and.w	r1, r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f6e:	bf00      	nop
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	03ff63ff 	.word	0x03ff63ff

08003f80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	d138      	bne.n	8004008 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e032      	b.n	800400a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2224      	movs	r2, #36	; 0x24
 8003fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0201 	bic.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6819      	ldr	r1, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	e000      	b.n	800400a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004008:	2302      	movs	r3, #2
  }
}
 800400a:	4618      	mov	r0, r3
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004016:	b480      	push	{r7}
 8004018:	b085      	sub	sp, #20
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b20      	cmp	r3, #32
 800402a:	d139      	bne.n	80040a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004036:	2302      	movs	r3, #2
 8004038:	e033      	b.n	80040a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2224      	movs	r2, #36	; 0x24
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0201 	bic.w	r2, r2, #1
 8004058:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004068:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4313      	orrs	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	e000      	b.n	80040a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040a0:	2302      	movs	r3, #2
  }
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b084      	sub	sp, #16
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e041      	b.n	8004144 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80040c8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f245 5255 	movw	r2, #21845	; 0x5555
 80040d2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6852      	ldr	r2, [r2, #4]
 80040dc:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6892      	ldr	r2, [r2, #8]
 80040e6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80040e8:	f7fe fce6 	bl	8002ab8 <HAL_GetTick>
 80040ec:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80040ee:	e00f      	b.n	8004110 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80040f0:	f7fe fce2 	bl	8002ab8 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b31      	cmp	r3, #49	; 0x31
 80040fc:	d908      	bls.n	8004110 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e019      	b.n	8004144 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e8      	bne.n	80040f0 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	429a      	cmp	r2, r3
 800412a:	d005      	beq.n	8004138 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	68d2      	ldr	r2, [r2, #12]
 8004134:	611a      	str	r2, [r3, #16]
 8004136:	e004      	b.n	8004142 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004140:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800415c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004170:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a04      	ldr	r2, [pc, #16]	; (8004188 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417a:	6013      	str	r3, [r2, #0]
}
 800417c:	bf00      	nop
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40007000 	.word	0x40007000

0800418c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004190:	4b04      	ldr	r3, [pc, #16]	; (80041a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004198:	4618      	mov	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40007000 	.word	0x40007000

080041a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b6:	d130      	bne.n	800421a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041b8:	4b23      	ldr	r3, [pc, #140]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c4:	d038      	beq.n	8004238 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041c6:	4b20      	ldr	r3, [pc, #128]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041ce:	4a1e      	ldr	r2, [pc, #120]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041d6:	4b1d      	ldr	r3, [pc, #116]	; (800424c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2232      	movs	r2, #50	; 0x32
 80041dc:	fb02 f303 	mul.w	r3, r2, r3
 80041e0:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	0c9b      	lsrs	r3, r3, #18
 80041e8:	3301      	adds	r3, #1
 80041ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041ec:	e002      	b.n	80041f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041f4:	4b14      	ldr	r3, [pc, #80]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004200:	d102      	bne.n	8004208 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1f2      	bne.n	80041ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004208:	4b0f      	ldr	r3, [pc, #60]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004214:	d110      	bne.n	8004238 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e00f      	b.n	800423a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800421a:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004226:	d007      	beq.n	8004238 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004228:	4b07      	ldr	r3, [pc, #28]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004230:	4a05      	ldr	r2, [pc, #20]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004236:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40007000 	.word	0x40007000
 800424c:	20000000 	.word	0x20000000
 8004250:	431bde83 	.word	0x431bde83

08004254 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e3ca      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004266:	4b97      	ldr	r3, [pc, #604]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004270:	4b94      	ldr	r3, [pc, #592]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80e4 	beq.w	8004450 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d007      	beq.n	800429e <HAL_RCC_OscConfig+0x4a>
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	2b0c      	cmp	r3, #12
 8004292:	f040 808b 	bne.w	80043ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2b01      	cmp	r3, #1
 800429a:	f040 8087 	bne.w	80043ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800429e:	4b89      	ldr	r3, [pc, #548]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_RCC_OscConfig+0x62>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e3a2      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1a      	ldr	r2, [r3, #32]
 80042ba:	4b82      	ldr	r3, [pc, #520]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d004      	beq.n	80042d0 <HAL_RCC_OscConfig+0x7c>
 80042c6:	4b7f      	ldr	r3, [pc, #508]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ce:	e005      	b.n	80042dc <HAL_RCC_OscConfig+0x88>
 80042d0:	4b7c      	ldr	r3, [pc, #496]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d6:	091b      	lsrs	r3, r3, #4
 80042d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042dc:	4293      	cmp	r3, r2
 80042de:	d223      	bcs.n	8004328 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fd55 	bl	8004d94 <RCC_SetFlashLatencyFromMSIRange>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e383      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042f4:	4b73      	ldr	r3, [pc, #460]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a72      	ldr	r2, [pc, #456]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80042fa:	f043 0308 	orr.w	r3, r3, #8
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	4b70      	ldr	r3, [pc, #448]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	496d      	ldr	r1, [pc, #436]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004312:	4b6c      	ldr	r3, [pc, #432]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	4968      	ldr	r1, [pc, #416]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004322:	4313      	orrs	r3, r2
 8004324:	604b      	str	r3, [r1, #4]
 8004326:	e025      	b.n	8004374 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004328:	4b66      	ldr	r3, [pc, #408]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a65      	ldr	r2, [pc, #404]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 800432e:	f043 0308 	orr.w	r3, r3, #8
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	4b63      	ldr	r3, [pc, #396]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	4960      	ldr	r1, [pc, #384]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004342:	4313      	orrs	r3, r2
 8004344:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004346:	4b5f      	ldr	r3, [pc, #380]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	021b      	lsls	r3, r3, #8
 8004354:	495b      	ldr	r1, [pc, #364]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004356:	4313      	orrs	r3, r2
 8004358:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d109      	bne.n	8004374 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fd15 	bl	8004d94 <RCC_SetFlashLatencyFromMSIRange>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e343      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004374:	f000 fc4a 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 8004378:	4602      	mov	r2, r0
 800437a:	4b52      	ldr	r3, [pc, #328]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	091b      	lsrs	r3, r3, #4
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	4950      	ldr	r1, [pc, #320]	; (80044c8 <HAL_RCC_OscConfig+0x274>)
 8004386:	5ccb      	ldrb	r3, [r1, r3]
 8004388:	f003 031f 	and.w	r3, r3, #31
 800438c:	fa22 f303 	lsr.w	r3, r2, r3
 8004390:	4a4e      	ldr	r2, [pc, #312]	; (80044cc <HAL_RCC_OscConfig+0x278>)
 8004392:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004394:	4b4e      	ldr	r3, [pc, #312]	; (80044d0 <HAL_RCC_OscConfig+0x27c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7fe fb3d 	bl	8002a18 <HAL_InitTick>
 800439e:	4603      	mov	r3, r0
 80043a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d052      	beq.n	800444e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	e327      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d032      	beq.n	800441a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043b4:	4b43      	ldr	r3, [pc, #268]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a42      	ldr	r2, [pc, #264]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043c0:	f7fe fb7a 	bl	8002ab8 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043c8:	f7fe fb76 	bl	8002ab8 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e310      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043da:	4b3a      	ldr	r3, [pc, #232]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043e6:	4b37      	ldr	r3, [pc, #220]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a36      	ldr	r2, [pc, #216]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80043ec:	f043 0308 	orr.w	r3, r3, #8
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	4b34      	ldr	r3, [pc, #208]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	4931      	ldr	r1, [pc, #196]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004400:	4313      	orrs	r3, r2
 8004402:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004404:	4b2f      	ldr	r3, [pc, #188]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	021b      	lsls	r3, r3, #8
 8004412:	492c      	ldr	r1, [pc, #176]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004414:	4313      	orrs	r3, r2
 8004416:	604b      	str	r3, [r1, #4]
 8004418:	e01a      	b.n	8004450 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800441a:	4b2a      	ldr	r3, [pc, #168]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a29      	ldr	r2, [pc, #164]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004420:	f023 0301 	bic.w	r3, r3, #1
 8004424:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004426:	f7fe fb47 	bl	8002ab8 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800442e:	f7fe fb43 	bl	8002ab8 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e2dd      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004440:	4b20      	ldr	r3, [pc, #128]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f0      	bne.n	800442e <HAL_RCC_OscConfig+0x1da>
 800444c:	e000      	b.n	8004450 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800444e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d074      	beq.n	8004546 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	2b08      	cmp	r3, #8
 8004460:	d005      	beq.n	800446e <HAL_RCC_OscConfig+0x21a>
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b0c      	cmp	r3, #12
 8004466:	d10e      	bne.n	8004486 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2b03      	cmp	r3, #3
 800446c:	d10b      	bne.n	8004486 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800446e:	4b15      	ldr	r3, [pc, #84]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d064      	beq.n	8004544 <HAL_RCC_OscConfig+0x2f0>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d160      	bne.n	8004544 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e2ba      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800448e:	d106      	bne.n	800449e <HAL_RCC_OscConfig+0x24a>
 8004490:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a0b      	ldr	r2, [pc, #44]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	e026      	b.n	80044ec <HAL_RCC_OscConfig+0x298>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a6:	d115      	bne.n	80044d4 <HAL_RCC_OscConfig+0x280>
 80044a8:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a05      	ldr	r2, [pc, #20]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80044ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	4b03      	ldr	r3, [pc, #12]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a02      	ldr	r2, [pc, #8]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80044ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	e014      	b.n	80044ec <HAL_RCC_OscConfig+0x298>
 80044c2:	bf00      	nop
 80044c4:	40021000 	.word	0x40021000
 80044c8:	080399a4 	.word	0x080399a4
 80044cc:	20000000 	.word	0x20000000
 80044d0:	20000004 	.word	0x20000004
 80044d4:	4ba0      	ldr	r3, [pc, #640]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a9f      	ldr	r2, [pc, #636]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80044da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	4b9d      	ldr	r3, [pc, #628]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a9c      	ldr	r2, [pc, #624]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80044e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d013      	beq.n	800451c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f4:	f7fe fae0 	bl	8002ab8 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044fc:	f7fe fadc 	bl	8002ab8 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	; 0x64
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e276      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800450e:	4b92      	ldr	r3, [pc, #584]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0x2a8>
 800451a:	e014      	b.n	8004546 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fe facc 	bl	8002ab8 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004524:	f7fe fac8 	bl	8002ab8 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b64      	cmp	r3, #100	; 0x64
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e262      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004536:	4b88      	ldr	r3, [pc, #544]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0x2d0>
 8004542:	e000      	b.n	8004546 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d060      	beq.n	8004614 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b04      	cmp	r3, #4
 8004556:	d005      	beq.n	8004564 <HAL_RCC_OscConfig+0x310>
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	2b0c      	cmp	r3, #12
 800455c:	d119      	bne.n	8004592 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d116      	bne.n	8004592 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004564:	4b7c      	ldr	r3, [pc, #496]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_RCC_OscConfig+0x328>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e23f      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457c:	4b76      	ldr	r3, [pc, #472]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	061b      	lsls	r3, r3, #24
 800458a:	4973      	ldr	r1, [pc, #460]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 800458c:	4313      	orrs	r3, r2
 800458e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004590:	e040      	b.n	8004614 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d023      	beq.n	80045e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459a:	4b6f      	ldr	r3, [pc, #444]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a6e      	ldr	r2, [pc, #440]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80045a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a6:	f7fe fa87 	bl	8002ab8 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ae:	f7fe fa83 	bl	8002ab8 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e21d      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045c0:	4b65      	ldr	r3, [pc, #404]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f0      	beq.n	80045ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045cc:	4b62      	ldr	r3, [pc, #392]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	061b      	lsls	r3, r3, #24
 80045da:	495f      	ldr	r1, [pc, #380]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
 80045e0:	e018      	b.n	8004614 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e2:	4b5d      	ldr	r3, [pc, #372]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a5c      	ldr	r2, [pc, #368]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80045e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ee:	f7fe fa63 	bl	8002ab8 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f6:	f7fe fa5f 	bl	8002ab8 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e1f9      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004608:	4b53      	ldr	r3, [pc, #332]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f0      	bne.n	80045f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d03c      	beq.n	800469a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01c      	beq.n	8004662 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004628:	4b4b      	ldr	r3, [pc, #300]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 800462a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800462e:	4a4a      	ldr	r2, [pc, #296]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004638:	f7fe fa3e 	bl	8002ab8 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004640:	f7fe fa3a 	bl	8002ab8 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e1d4      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004652:	4b41      	ldr	r3, [pc, #260]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 8004654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0ef      	beq.n	8004640 <HAL_RCC_OscConfig+0x3ec>
 8004660:	e01b      	b.n	800469a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004662:	4b3d      	ldr	r3, [pc, #244]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 8004664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004668:	4a3b      	ldr	r2, [pc, #236]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004672:	f7fe fa21 	bl	8002ab8 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800467a:	f7fe fa1d 	bl	8002ab8 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e1b7      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800468c:	4b32      	ldr	r3, [pc, #200]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 800468e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1ef      	bne.n	800467a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0304 	and.w	r3, r3, #4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 80a6 	beq.w	80047f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a8:	2300      	movs	r3, #0
 80046aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046ac:	4b2a      	ldr	r3, [pc, #168]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80046ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10d      	bne.n	80046d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b8:	4b27      	ldr	r3, [pc, #156]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80046ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046bc:	4a26      	ldr	r2, [pc, #152]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80046be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c2:	6593      	str	r3, [r2, #88]	; 0x58
 80046c4:	4b24      	ldr	r3, [pc, #144]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80046c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046cc:	60bb      	str	r3, [r7, #8]
 80046ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d0:	2301      	movs	r3, #1
 80046d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d4:	4b21      	ldr	r3, [pc, #132]	; (800475c <HAL_RCC_OscConfig+0x508>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d118      	bne.n	8004712 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046e0:	4b1e      	ldr	r3, [pc, #120]	; (800475c <HAL_RCC_OscConfig+0x508>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1d      	ldr	r2, [pc, #116]	; (800475c <HAL_RCC_OscConfig+0x508>)
 80046e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ec:	f7fe f9e4 	bl	8002ab8 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f4:	f7fe f9e0 	bl	8002ab8 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e17a      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004706:	4b15      	ldr	r3, [pc, #84]	; (800475c <HAL_RCC_OscConfig+0x508>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0f0      	beq.n	80046f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d108      	bne.n	800472c <HAL_RCC_OscConfig+0x4d8>
 800471a:	4b0f      	ldr	r3, [pc, #60]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004720:	4a0d      	ldr	r2, [pc, #52]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 8004722:	f043 0301 	orr.w	r3, r3, #1
 8004726:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800472a:	e029      	b.n	8004780 <HAL_RCC_OscConfig+0x52c>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b05      	cmp	r3, #5
 8004732:	d115      	bne.n	8004760 <HAL_RCC_OscConfig+0x50c>
 8004734:	4b08      	ldr	r3, [pc, #32]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 8004736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473a:	4a07      	ldr	r2, [pc, #28]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 800473c:	f043 0304 	orr.w	r3, r3, #4
 8004740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004744:	4b04      	ldr	r3, [pc, #16]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 8004746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474a:	4a03      	ldr	r2, [pc, #12]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004754:	e014      	b.n	8004780 <HAL_RCC_OscConfig+0x52c>
 8004756:	bf00      	nop
 8004758:	40021000 	.word	0x40021000
 800475c:	40007000 	.word	0x40007000
 8004760:	4b9c      	ldr	r3, [pc, #624]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004766:	4a9b      	ldr	r2, [pc, #620]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004768:	f023 0301 	bic.w	r3, r3, #1
 800476c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004770:	4b98      	ldr	r3, [pc, #608]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004776:	4a97      	ldr	r2, [pc, #604]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004778:	f023 0304 	bic.w	r3, r3, #4
 800477c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d016      	beq.n	80047b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004788:	f7fe f996 	bl	8002ab8 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800478e:	e00a      	b.n	80047a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004790:	f7fe f992 	bl	8002ab8 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f241 3288 	movw	r2, #5000	; 0x1388
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e12a      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047a6:	4b8b      	ldr	r3, [pc, #556]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 80047a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0ed      	beq.n	8004790 <HAL_RCC_OscConfig+0x53c>
 80047b4:	e015      	b.n	80047e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b6:	f7fe f97f 	bl	8002ab8 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047bc:	e00a      	b.n	80047d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047be:	f7fe f97b 	bl	8002ab8 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e113      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047d4:	4b7f      	ldr	r3, [pc, #508]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1ed      	bne.n	80047be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047e2:	7ffb      	ldrb	r3, [r7, #31]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d105      	bne.n	80047f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e8:	4b7a      	ldr	r3, [pc, #488]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 80047ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ec:	4a79      	ldr	r2, [pc, #484]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 80047ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 80fe 	beq.w	80049fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	2b02      	cmp	r3, #2
 8004804:	f040 80d0 	bne.w	80049a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004808:	4b72      	ldr	r3, [pc, #456]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f003 0203 	and.w	r2, r3, #3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	429a      	cmp	r2, r3
 800481a:	d130      	bne.n	800487e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	3b01      	subs	r3, #1
 8004828:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d127      	bne.n	800487e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004838:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800483a:	429a      	cmp	r2, r3
 800483c:	d11f      	bne.n	800487e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004848:	2a07      	cmp	r2, #7
 800484a:	bf14      	ite	ne
 800484c:	2201      	movne	r2, #1
 800484e:	2200      	moveq	r2, #0
 8004850:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004852:	4293      	cmp	r3, r2
 8004854:	d113      	bne.n	800487e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004860:	085b      	lsrs	r3, r3, #1
 8004862:	3b01      	subs	r3, #1
 8004864:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004866:	429a      	cmp	r2, r3
 8004868:	d109      	bne.n	800487e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	085b      	lsrs	r3, r3, #1
 8004876:	3b01      	subs	r3, #1
 8004878:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800487a:	429a      	cmp	r2, r3
 800487c:	d06e      	beq.n	800495c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	2b0c      	cmp	r3, #12
 8004882:	d069      	beq.n	8004958 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004884:	4b53      	ldr	r3, [pc, #332]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d105      	bne.n	800489c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004890:	4b50      	ldr	r3, [pc, #320]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0ad      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048a0:	4b4c      	ldr	r3, [pc, #304]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a4b      	ldr	r2, [pc, #300]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 80048a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048ac:	f7fe f904 	bl	8002ab8 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b4:	f7fe f900 	bl	8002ab8 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e09a      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048c6:	4b43      	ldr	r3, [pc, #268]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f0      	bne.n	80048b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048d2:	4b40      	ldr	r3, [pc, #256]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	4b40      	ldr	r3, [pc, #256]	; (80049d8 <HAL_RCC_OscConfig+0x784>)
 80048d8:	4013      	ands	r3, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048e2:	3a01      	subs	r2, #1
 80048e4:	0112      	lsls	r2, r2, #4
 80048e6:	4311      	orrs	r1, r2
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048ec:	0212      	lsls	r2, r2, #8
 80048ee:	4311      	orrs	r1, r2
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048f4:	0852      	lsrs	r2, r2, #1
 80048f6:	3a01      	subs	r2, #1
 80048f8:	0552      	lsls	r2, r2, #21
 80048fa:	4311      	orrs	r1, r2
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004900:	0852      	lsrs	r2, r2, #1
 8004902:	3a01      	subs	r2, #1
 8004904:	0652      	lsls	r2, r2, #25
 8004906:	4311      	orrs	r1, r2
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800490c:	0912      	lsrs	r2, r2, #4
 800490e:	0452      	lsls	r2, r2, #17
 8004910:	430a      	orrs	r2, r1
 8004912:	4930      	ldr	r1, [pc, #192]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004914:	4313      	orrs	r3, r2
 8004916:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004918:	4b2e      	ldr	r3, [pc, #184]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a2d      	ldr	r2, [pc, #180]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 800491e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004922:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004924:	4b2b      	ldr	r3, [pc, #172]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4a2a      	ldr	r2, [pc, #168]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 800492a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800492e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004930:	f7fe f8c2 	bl	8002ab8 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004938:	f7fe f8be 	bl	8002ab8 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e058      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800494a:	4b22      	ldr	r3, [pc, #136]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f0      	beq.n	8004938 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004956:	e050      	b.n	80049fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e04f      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800495c:	4b1d      	ldr	r3, [pc, #116]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d148      	bne.n	80049fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004968:	4b1a      	ldr	r3, [pc, #104]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a19      	ldr	r2, [pc, #100]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 800496e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004972:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004974:	4b17      	ldr	r3, [pc, #92]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	4a16      	ldr	r2, [pc, #88]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 800497a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800497e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004980:	f7fe f89a 	bl	8002ab8 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004988:	f7fe f896 	bl	8002ab8 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e030      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800499a:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x734>
 80049a6:	e028      	b.n	80049fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	2b0c      	cmp	r3, #12
 80049ac:	d023      	beq.n	80049f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ae:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a08      	ldr	r2, [pc, #32]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 80049b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ba:	f7fe f87d 	bl	8002ab8 <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c0:	e00c      	b.n	80049dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c2:	f7fe f879 	bl	8002ab8 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d905      	bls.n	80049dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e013      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
 80049d4:	40021000 	.word	0x40021000
 80049d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049dc:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <HAL_RCC_OscConfig+0x7b0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1ec      	bne.n	80049c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80049e8:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <HAL_RCC_OscConfig+0x7b0>)
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	4905      	ldr	r1, [pc, #20]	; (8004a04 <HAL_RCC_OscConfig+0x7b0>)
 80049ee:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <HAL_RCC_OscConfig+0x7b4>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	60cb      	str	r3, [r1, #12]
 80049f4:	e001      	b.n	80049fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3720      	adds	r7, #32
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40021000 	.word	0x40021000
 8004a08:	feeefffc 	.word	0xfeeefffc

08004a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e0e7      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a20:	4b75      	ldr	r3, [pc, #468]	; (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d910      	bls.n	8004a50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2e:	4b72      	ldr	r3, [pc, #456]	; (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f023 0207 	bic.w	r2, r3, #7
 8004a36:	4970      	ldr	r1, [pc, #448]	; (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3e:	4b6e      	ldr	r3, [pc, #440]	; (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0cf      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d010      	beq.n	8004a7e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	4b66      	ldr	r3, [pc, #408]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d908      	bls.n	8004a7e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a6c:	4b63      	ldr	r3, [pc, #396]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	4960      	ldr	r1, [pc, #384]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d04c      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d107      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a92:	4b5a      	ldr	r3, [pc, #360]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d121      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e0a6      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d107      	bne.n	8004aba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aaa:	4b54      	ldr	r3, [pc, #336]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d115      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e09a      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ac2:	4b4e      	ldr	r3, [pc, #312]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e08e      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ad2:	4b4a      	ldr	r3, [pc, #296]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e086      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ae2:	4b46      	ldr	r3, [pc, #280]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f023 0203 	bic.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4943      	ldr	r1, [pc, #268]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af4:	f7fd ffe0 	bl	8002ab8 <HAL_GetTick>
 8004af8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004afc:	f7fd ffdc 	bl	8002ab8 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e06e      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b12:	4b3a      	ldr	r3, [pc, #232]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 020c 	and.w	r2, r3, #12
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d1eb      	bne.n	8004afc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d010      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	4b31      	ldr	r3, [pc, #196]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d208      	bcs.n	8004b52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b40:	4b2e      	ldr	r3, [pc, #184]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	492b      	ldr	r1, [pc, #172]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b52:	4b29      	ldr	r3, [pc, #164]	; (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d210      	bcs.n	8004b82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b60:	4b25      	ldr	r3, [pc, #148]	; (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f023 0207 	bic.w	r2, r3, #7
 8004b68:	4923      	ldr	r1, [pc, #140]	; (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b70:	4b21      	ldr	r3, [pc, #132]	; (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d001      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e036      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d008      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b8e:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	4918      	ldr	r1, [pc, #96]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d009      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bac:	4b13      	ldr	r3, [pc, #76]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	4910      	ldr	r1, [pc, #64]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bc0:	f000 f824 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	4b0d      	ldr	r3, [pc, #52]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	091b      	lsrs	r3, r3, #4
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	490b      	ldr	r1, [pc, #44]	; (8004c00 <HAL_RCC_ClockConfig+0x1f4>)
 8004bd2:	5ccb      	ldrb	r3, [r1, r3]
 8004bd4:	f003 031f 	and.w	r3, r3, #31
 8004bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bdc:	4a09      	ldr	r2, [pc, #36]	; (8004c04 <HAL_RCC_ClockConfig+0x1f8>)
 8004bde:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004be0:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <HAL_RCC_ClockConfig+0x1fc>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fd ff17 	bl	8002a18 <HAL_InitTick>
 8004bea:	4603      	mov	r3, r0
 8004bec:	72fb      	strb	r3, [r7, #11]

  return status;
 8004bee:	7afb      	ldrb	r3, [r7, #11]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40022000 	.word	0x40022000
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	080399a4 	.word	0x080399a4
 8004c04:	20000000 	.word	0x20000000
 8004c08:	20000004 	.word	0x20000004

08004c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b089      	sub	sp, #36	; 0x24
 8004c10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
 8004c16:	2300      	movs	r3, #0
 8004c18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c1a:	4b3e      	ldr	r3, [pc, #248]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
 8004c22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c24:	4b3b      	ldr	r3, [pc, #236]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0303 	and.w	r3, r3, #3
 8004c2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <HAL_RCC_GetSysClockFreq+0x34>
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	2b0c      	cmp	r3, #12
 8004c38:	d121      	bne.n	8004c7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d11e      	bne.n	8004c7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c40:	4b34      	ldr	r3, [pc, #208]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d107      	bne.n	8004c5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c4c:	4b31      	ldr	r3, [pc, #196]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c52:	0a1b      	lsrs	r3, r3, #8
 8004c54:	f003 030f 	and.w	r3, r3, #15
 8004c58:	61fb      	str	r3, [r7, #28]
 8004c5a:	e005      	b.n	8004c68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c5c:	4b2d      	ldr	r3, [pc, #180]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	091b      	lsrs	r3, r3, #4
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c68:	4a2b      	ldr	r2, [pc, #172]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10d      	bne.n	8004c94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c7c:	e00a      	b.n	8004c94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d102      	bne.n	8004c8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c84:	4b25      	ldr	r3, [pc, #148]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x110>)
 8004c86:	61bb      	str	r3, [r7, #24]
 8004c88:	e004      	b.n	8004c94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d101      	bne.n	8004c94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c90:	4b23      	ldr	r3, [pc, #140]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	2b0c      	cmp	r3, #12
 8004c98:	d134      	bne.n	8004d04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c9a:	4b1e      	ldr	r3, [pc, #120]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d003      	beq.n	8004cb2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d003      	beq.n	8004cb8 <HAL_RCC_GetSysClockFreq+0xac>
 8004cb0:	e005      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004cb2:	4b1a      	ldr	r3, [pc, #104]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x110>)
 8004cb4:	617b      	str	r3, [r7, #20]
      break;
 8004cb6:	e005      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004cb8:	4b19      	ldr	r3, [pc, #100]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cba:	617b      	str	r3, [r7, #20]
      break;
 8004cbc:	e002      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	617b      	str	r3, [r7, #20]
      break;
 8004cc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cc4:	4b13      	ldr	r3, [pc, #76]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	091b      	lsrs	r3, r3, #4
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	3301      	adds	r3, #1
 8004cd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cd2:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	0a1b      	lsrs	r3, r3, #8
 8004cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	fb03 f202 	mul.w	r2, r3, r2
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cea:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	0e5b      	lsrs	r3, r3, #25
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d04:	69bb      	ldr	r3, [r7, #24]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3724      	adds	r7, #36	; 0x24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40021000 	.word	0x40021000
 8004d18:	080399bc 	.word	0x080399bc
 8004d1c:	00f42400 	.word	0x00f42400
 8004d20:	007a1200 	.word	0x007a1200

08004d24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d28:	4b03      	ldr	r3, [pc, #12]	; (8004d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	20000000 	.word	0x20000000

08004d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d40:	f7ff fff0 	bl	8004d24 <HAL_RCC_GetHCLKFreq>
 8004d44:	4602      	mov	r2, r0
 8004d46:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	0a1b      	lsrs	r3, r3, #8
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	4904      	ldr	r1, [pc, #16]	; (8004d64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d52:	5ccb      	ldrb	r3, [r1, r3]
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40021000 	.word	0x40021000
 8004d64:	080399b4 	.word	0x080399b4

08004d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d6c:	f7ff ffda 	bl	8004d24 <HAL_RCC_GetHCLKFreq>
 8004d70:	4602      	mov	r2, r0
 8004d72:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	0adb      	lsrs	r3, r3, #11
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	4904      	ldr	r1, [pc, #16]	; (8004d90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d7e:	5ccb      	ldrb	r3, [r1, r3]
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	080399b4 	.word	0x080399b4

08004d94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004da0:	4b2a      	ldr	r3, [pc, #168]	; (8004e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004dac:	f7ff f9ee 	bl	800418c <HAL_PWREx_GetVoltageRange>
 8004db0:	6178      	str	r0, [r7, #20]
 8004db2:	e014      	b.n	8004dde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004db4:	4b25      	ldr	r3, [pc, #148]	; (8004e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db8:	4a24      	ldr	r2, [pc, #144]	; (8004e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8004dc0:	4b22      	ldr	r3, [pc, #136]	; (8004e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004dcc:	f7ff f9de 	bl	800418c <HAL_PWREx_GetVoltageRange>
 8004dd0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004dd2:	4b1e      	ldr	r3, [pc, #120]	; (8004e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd6:	4a1d      	ldr	r2, [pc, #116]	; (8004e4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ddc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004de4:	d10b      	bne.n	8004dfe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b80      	cmp	r3, #128	; 0x80
 8004dea:	d919      	bls.n	8004e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2ba0      	cmp	r3, #160	; 0xa0
 8004df0:	d902      	bls.n	8004df8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004df2:	2302      	movs	r3, #2
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	e013      	b.n	8004e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004df8:	2301      	movs	r3, #1
 8004dfa:	613b      	str	r3, [r7, #16]
 8004dfc:	e010      	b.n	8004e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b80      	cmp	r3, #128	; 0x80
 8004e02:	d902      	bls.n	8004e0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e04:	2303      	movs	r3, #3
 8004e06:	613b      	str	r3, [r7, #16]
 8004e08:	e00a      	b.n	8004e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b80      	cmp	r3, #128	; 0x80
 8004e0e:	d102      	bne.n	8004e16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e10:	2302      	movs	r3, #2
 8004e12:	613b      	str	r3, [r7, #16]
 8004e14:	e004      	b.n	8004e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b70      	cmp	r3, #112	; 0x70
 8004e1a:	d101      	bne.n	8004e20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e20:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f023 0207 	bic.w	r2, r3, #7
 8004e28:	4909      	ldr	r1, [pc, #36]	; (8004e50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e30:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d001      	beq.n	8004e42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	40022000 	.word	0x40022000

08004e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e60:	2300      	movs	r3, #0
 8004e62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d041      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e74:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e78:	d02a      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004e7a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e7e:	d824      	bhi.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e84:	d008      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e8a:	d81e      	bhi.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e94:	d010      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e96:	e018      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e98:	4b86      	ldr	r3, [pc, #536]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	4a85      	ldr	r2, [pc, #532]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ea4:	e015      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	2100      	movs	r1, #0
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 facb 	bl	8005448 <RCCEx_PLLSAI1_Config>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004eb6:	e00c      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3320      	adds	r3, #32
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fbb6 	bl	8005630 <RCCEx_PLLSAI2_Config>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ec8:	e003      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	74fb      	strb	r3, [r7, #19]
      break;
 8004ece:	e000      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ed0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ed2:	7cfb      	ldrb	r3, [r7, #19]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10b      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ed8:	4b76      	ldr	r3, [pc, #472]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ede:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee6:	4973      	ldr	r1, [pc, #460]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004eee:	e001      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef0:	7cfb      	ldrb	r3, [r7, #19]
 8004ef2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d041      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f08:	d02a      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f0e:	d824      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f14:	d008      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f1a:	d81e      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f24:	d010      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f26:	e018      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f28:	4b62      	ldr	r3, [pc, #392]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	4a61      	ldr	r2, [pc, #388]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f32:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f34:	e015      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 fa83 	bl	8005448 <RCCEx_PLLSAI1_Config>
 8004f42:	4603      	mov	r3, r0
 8004f44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f46:	e00c      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3320      	adds	r3, #32
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fb6e 	bl	8005630 <RCCEx_PLLSAI2_Config>
 8004f54:	4603      	mov	r3, r0
 8004f56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f58:	e003      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	74fb      	strb	r3, [r7, #19]
      break;
 8004f5e:	e000      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f62:	7cfb      	ldrb	r3, [r7, #19]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10b      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f68:	4b52      	ldr	r3, [pc, #328]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f76:	494f      	ldr	r1, [pc, #316]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f7e:	e001      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f80:	7cfb      	ldrb	r3, [r7, #19]
 8004f82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 80a0 	beq.w	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f92:	2300      	movs	r3, #0
 8004f94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f96:	4b47      	ldr	r3, [pc, #284]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e000      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00d      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fac:	4b41      	ldr	r3, [pc, #260]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb0:	4a40      	ldr	r2, [pc, #256]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8004fb8:	4b3e      	ldr	r3, [pc, #248]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	60bb      	str	r3, [r7, #8]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fc8:	4b3b      	ldr	r3, [pc, #236]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a3a      	ldr	r2, [pc, #232]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fd4:	f7fd fd70 	bl	8002ab8 <HAL_GetTick>
 8004fd8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fda:	e009      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fdc:	f7fd fd6c 	bl	8002ab8 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d902      	bls.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	74fb      	strb	r3, [r7, #19]
        break;
 8004fee:	e005      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ff0:	4b31      	ldr	r3, [pc, #196]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0ef      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ffc:	7cfb      	ldrb	r3, [r7, #19]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d15c      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005002:	4b2c      	ldr	r3, [pc, #176]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005008:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800500c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d01f      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	429a      	cmp	r2, r3
 800501e:	d019      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005020:	4b24      	ldr	r3, [pc, #144]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800502c:	4b21      	ldr	r3, [pc, #132]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005032:	4a20      	ldr	r2, [pc, #128]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800503c:	4b1d      	ldr	r3, [pc, #116]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005042:	4a1c      	ldr	r2, [pc, #112]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800504c:	4a19      	ldr	r2, [pc, #100]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d016      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505e:	f7fd fd2b 	bl	8002ab8 <HAL_GetTick>
 8005062:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005064:	e00b      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005066:	f7fd fd27 	bl	8002ab8 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	f241 3288 	movw	r2, #5000	; 0x1388
 8005074:	4293      	cmp	r3, r2
 8005076:	d902      	bls.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	74fb      	strb	r3, [r7, #19]
            break;
 800507c:	e006      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800507e:	4b0d      	ldr	r3, [pc, #52]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0ec      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800508c:	7cfb      	ldrb	r3, [r7, #19]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10c      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005092:	4b08      	ldr	r3, [pc, #32]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005098:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050a2:	4904      	ldr	r1, [pc, #16]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050aa:	e009      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050ac:	7cfb      	ldrb	r3, [r7, #19]
 80050ae:	74bb      	strb	r3, [r7, #18]
 80050b0:	e006      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80050b2:	bf00      	nop
 80050b4:	40021000 	.word	0x40021000
 80050b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050bc:	7cfb      	ldrb	r3, [r7, #19]
 80050be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050c0:	7c7b      	ldrb	r3, [r7, #17]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d105      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c6:	4b9e      	ldr	r3, [pc, #632]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ca:	4a9d      	ldr	r2, [pc, #628]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050de:	4b98      	ldr	r3, [pc, #608]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e4:	f023 0203 	bic.w	r2, r3, #3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	4994      	ldr	r1, [pc, #592]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00a      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005100:	4b8f      	ldr	r3, [pc, #572]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005106:	f023 020c 	bic.w	r2, r3, #12
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510e:	498c      	ldr	r1, [pc, #560]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005110:	4313      	orrs	r3, r2
 8005112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0304 	and.w	r3, r3, #4
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005122:	4b87      	ldr	r3, [pc, #540]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005128:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005130:	4983      	ldr	r1, [pc, #524]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005132:	4313      	orrs	r3, r2
 8005134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005144:	4b7e      	ldr	r3, [pc, #504]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005152:	497b      	ldr	r1, [pc, #492]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005154:	4313      	orrs	r3, r2
 8005156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0310 	and.w	r3, r3, #16
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005166:	4b76      	ldr	r3, [pc, #472]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005174:	4972      	ldr	r1, [pc, #456]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0320 	and.w	r3, r3, #32
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005188:	4b6d      	ldr	r3, [pc, #436]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800518a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005196:	496a      	ldr	r1, [pc, #424]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005198:	4313      	orrs	r3, r2
 800519a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051aa:	4b65      	ldr	r3, [pc, #404]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b8:	4961      	ldr	r1, [pc, #388]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051cc:	4b5c      	ldr	r3, [pc, #368]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051da:	4959      	ldr	r1, [pc, #356]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051ee:	4b54      	ldr	r3, [pc, #336]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fc:	4950      	ldr	r1, [pc, #320]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005210:	4b4b      	ldr	r3, [pc, #300]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005216:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521e:	4948      	ldr	r1, [pc, #288]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005232:	4b43      	ldr	r3, [pc, #268]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005238:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005240:	493f      	ldr	r1, [pc, #252]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d028      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005254:	4b3a      	ldr	r3, [pc, #232]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005262:	4937      	ldr	r1, [pc, #220]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800526e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005272:	d106      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005274:	4b32      	ldr	r3, [pc, #200]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	4a31      	ldr	r2, [pc, #196]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800527a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800527e:	60d3      	str	r3, [r2, #12]
 8005280:	e011      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005286:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800528a:	d10c      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3304      	adds	r3, #4
 8005290:	2101      	movs	r1, #1
 8005292:	4618      	mov	r0, r3
 8005294:	f000 f8d8 	bl	8005448 <RCCEx_PLLSAI1_Config>
 8005298:	4603      	mov	r3, r0
 800529a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800529c:	7cfb      	ldrb	r3, [r7, #19]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80052a2:	7cfb      	ldrb	r3, [r7, #19]
 80052a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d028      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052b2:	4b23      	ldr	r3, [pc, #140]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c0:	491f      	ldr	r1, [pc, #124]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052d0:	d106      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052d2:	4b1b      	ldr	r3, [pc, #108]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	4a1a      	ldr	r2, [pc, #104]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052dc:	60d3      	str	r3, [r2, #12]
 80052de:	e011      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052e8:	d10c      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3304      	adds	r3, #4
 80052ee:	2101      	movs	r1, #1
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 f8a9 	bl	8005448 <RCCEx_PLLSAI1_Config>
 80052f6:	4603      	mov	r3, r0
 80052f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052fa:	7cfb      	ldrb	r3, [r7, #19]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005300:	7cfb      	ldrb	r3, [r7, #19]
 8005302:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d02b      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005316:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800531e:	4908      	ldr	r1, [pc, #32]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800532a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800532e:	d109      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005330:	4b03      	ldr	r3, [pc, #12]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	4a02      	ldr	r2, [pc, #8]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800533a:	60d3      	str	r3, [r2, #12]
 800533c:	e014      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800533e:	bf00      	nop
 8005340:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005348:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800534c:	d10c      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3304      	adds	r3, #4
 8005352:	2101      	movs	r1, #1
 8005354:	4618      	mov	r0, r3
 8005356:	f000 f877 	bl	8005448 <RCCEx_PLLSAI1_Config>
 800535a:	4603      	mov	r3, r0
 800535c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800535e:	7cfb      	ldrb	r3, [r7, #19]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005364:	7cfb      	ldrb	r3, [r7, #19]
 8005366:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d02f      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005374:	4b2b      	ldr	r3, [pc, #172]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005382:	4928      	ldr	r1, [pc, #160]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800538e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005392:	d10d      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3304      	adds	r3, #4
 8005398:	2102      	movs	r1, #2
 800539a:	4618      	mov	r0, r3
 800539c:	f000 f854 	bl	8005448 <RCCEx_PLLSAI1_Config>
 80053a0:	4603      	mov	r3, r0
 80053a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053a4:	7cfb      	ldrb	r3, [r7, #19]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d014      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053aa:	7cfb      	ldrb	r3, [r7, #19]
 80053ac:	74bb      	strb	r3, [r7, #18]
 80053ae:	e011      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053b8:	d10c      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3320      	adds	r3, #32
 80053be:	2102      	movs	r1, #2
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 f935 	bl	8005630 <RCCEx_PLLSAI2_Config>
 80053c6:	4603      	mov	r3, r0
 80053c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053ca:	7cfb      	ldrb	r3, [r7, #19]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053d0:	7cfb      	ldrb	r3, [r7, #19]
 80053d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00a      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053e0:	4b10      	ldr	r3, [pc, #64]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053ee:	490d      	ldr	r1, [pc, #52]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00b      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005402:	4b08      	ldr	r3, [pc, #32]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005408:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005412:	4904      	ldr	r1, [pc, #16]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005414:	4313      	orrs	r3, r2
 8005416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800541a:	7cbb      	ldrb	r3, [r7, #18]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40021000 	.word	0x40021000

08005428 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800542c:	4b05      	ldr	r3, [pc, #20]	; (8005444 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a04      	ldr	r2, [pc, #16]	; (8005444 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005432:	f043 0304 	orr.w	r3, r3, #4
 8005436:	6013      	str	r3, [r2, #0]
}
 8005438:	bf00      	nop
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40021000 	.word	0x40021000

08005448 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005456:	4b75      	ldr	r3, [pc, #468]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f003 0303 	and.w	r3, r3, #3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d018      	beq.n	8005494 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005462:	4b72      	ldr	r3, [pc, #456]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f003 0203 	and.w	r2, r3, #3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d10d      	bne.n	800548e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
       ||
 8005476:	2b00      	cmp	r3, #0
 8005478:	d009      	beq.n	800548e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800547a:	4b6c      	ldr	r3, [pc, #432]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	091b      	lsrs	r3, r3, #4
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
       ||
 800548a:	429a      	cmp	r2, r3
 800548c:	d047      	beq.n	800551e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	73fb      	strb	r3, [r7, #15]
 8005492:	e044      	b.n	800551e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b03      	cmp	r3, #3
 800549a:	d018      	beq.n	80054ce <RCCEx_PLLSAI1_Config+0x86>
 800549c:	2b03      	cmp	r3, #3
 800549e:	d825      	bhi.n	80054ec <RCCEx_PLLSAI1_Config+0xa4>
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d002      	beq.n	80054aa <RCCEx_PLLSAI1_Config+0x62>
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d009      	beq.n	80054bc <RCCEx_PLLSAI1_Config+0x74>
 80054a8:	e020      	b.n	80054ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054aa:	4b60      	ldr	r3, [pc, #384]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d11d      	bne.n	80054f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ba:	e01a      	b.n	80054f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054bc:	4b5b      	ldr	r3, [pc, #364]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d116      	bne.n	80054f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054cc:	e013      	b.n	80054f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054ce:	4b57      	ldr	r3, [pc, #348]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10f      	bne.n	80054fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054da:	4b54      	ldr	r3, [pc, #336]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d109      	bne.n	80054fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054ea:	e006      	b.n	80054fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	73fb      	strb	r3, [r7, #15]
      break;
 80054f0:	e004      	b.n	80054fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054f2:	bf00      	nop
 80054f4:	e002      	b.n	80054fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054f6:	bf00      	nop
 80054f8:	e000      	b.n	80054fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10d      	bne.n	800551e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005502:	4b4a      	ldr	r3, [pc, #296]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6819      	ldr	r1, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	3b01      	subs	r3, #1
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	430b      	orrs	r3, r1
 8005518:	4944      	ldr	r1, [pc, #272]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 800551a:	4313      	orrs	r3, r2
 800551c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800551e:	7bfb      	ldrb	r3, [r7, #15]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d17d      	bne.n	8005620 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005524:	4b41      	ldr	r3, [pc, #260]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a40      	ldr	r2, [pc, #256]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 800552a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800552e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005530:	f7fd fac2 	bl	8002ab8 <HAL_GetTick>
 8005534:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005536:	e009      	b.n	800554c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005538:	f7fd fabe 	bl	8002ab8 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d902      	bls.n	800554c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	73fb      	strb	r3, [r7, #15]
        break;
 800554a:	e005      	b.n	8005558 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800554c:	4b37      	ldr	r3, [pc, #220]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1ef      	bne.n	8005538 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005558:	7bfb      	ldrb	r3, [r7, #15]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d160      	bne.n	8005620 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d111      	bne.n	8005588 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005564:	4b31      	ldr	r3, [pc, #196]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800556c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	6892      	ldr	r2, [r2, #8]
 8005574:	0211      	lsls	r1, r2, #8
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	68d2      	ldr	r2, [r2, #12]
 800557a:	0912      	lsrs	r2, r2, #4
 800557c:	0452      	lsls	r2, r2, #17
 800557e:	430a      	orrs	r2, r1
 8005580:	492a      	ldr	r1, [pc, #168]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005582:	4313      	orrs	r3, r2
 8005584:	610b      	str	r3, [r1, #16]
 8005586:	e027      	b.n	80055d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d112      	bne.n	80055b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800558e:	4b27      	ldr	r3, [pc, #156]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005596:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6892      	ldr	r2, [r2, #8]
 800559e:	0211      	lsls	r1, r2, #8
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6912      	ldr	r2, [r2, #16]
 80055a4:	0852      	lsrs	r2, r2, #1
 80055a6:	3a01      	subs	r2, #1
 80055a8:	0552      	lsls	r2, r2, #21
 80055aa:	430a      	orrs	r2, r1
 80055ac:	491f      	ldr	r1, [pc, #124]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	610b      	str	r3, [r1, #16]
 80055b2:	e011      	b.n	80055d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055b4:	4b1d      	ldr	r3, [pc, #116]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80055bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6892      	ldr	r2, [r2, #8]
 80055c4:	0211      	lsls	r1, r2, #8
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6952      	ldr	r2, [r2, #20]
 80055ca:	0852      	lsrs	r2, r2, #1
 80055cc:	3a01      	subs	r2, #1
 80055ce:	0652      	lsls	r2, r2, #25
 80055d0:	430a      	orrs	r2, r1
 80055d2:	4916      	ldr	r1, [pc, #88]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055d8:	4b14      	ldr	r3, [pc, #80]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a13      	ldr	r2, [pc, #76]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e4:	f7fd fa68 	bl	8002ab8 <HAL_GetTick>
 80055e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055ea:	e009      	b.n	8005600 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055ec:	f7fd fa64 	bl	8002ab8 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d902      	bls.n	8005600 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	73fb      	strb	r3, [r7, #15]
          break;
 80055fe:	e005      	b.n	800560c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005600:	4b0a      	ldr	r3, [pc, #40]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0ef      	beq.n	80055ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800560c:	7bfb      	ldrb	r3, [r7, #15]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d106      	bne.n	8005620 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005612:	4b06      	ldr	r3, [pc, #24]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	4904      	ldr	r1, [pc, #16]	; (800562c <RCCEx_PLLSAI1_Config+0x1e4>)
 800561c:	4313      	orrs	r3, r2
 800561e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005620:	7bfb      	ldrb	r3, [r7, #15]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	40021000 	.word	0x40021000

08005630 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800563e:	4b6a      	ldr	r3, [pc, #424]	; (80057e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d018      	beq.n	800567c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800564a:	4b67      	ldr	r3, [pc, #412]	; (80057e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f003 0203 	and.w	r2, r3, #3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d10d      	bne.n	8005676 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
       ||
 800565e:	2b00      	cmp	r3, #0
 8005660:	d009      	beq.n	8005676 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005662:	4b61      	ldr	r3, [pc, #388]	; (80057e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	091b      	lsrs	r3, r3, #4
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
       ||
 8005672:	429a      	cmp	r2, r3
 8005674:	d047      	beq.n	8005706 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	73fb      	strb	r3, [r7, #15]
 800567a:	e044      	b.n	8005706 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b03      	cmp	r3, #3
 8005682:	d018      	beq.n	80056b6 <RCCEx_PLLSAI2_Config+0x86>
 8005684:	2b03      	cmp	r3, #3
 8005686:	d825      	bhi.n	80056d4 <RCCEx_PLLSAI2_Config+0xa4>
 8005688:	2b01      	cmp	r3, #1
 800568a:	d002      	beq.n	8005692 <RCCEx_PLLSAI2_Config+0x62>
 800568c:	2b02      	cmp	r3, #2
 800568e:	d009      	beq.n	80056a4 <RCCEx_PLLSAI2_Config+0x74>
 8005690:	e020      	b.n	80056d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005692:	4b55      	ldr	r3, [pc, #340]	; (80057e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d11d      	bne.n	80056da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056a2:	e01a      	b.n	80056da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056a4:	4b50      	ldr	r3, [pc, #320]	; (80057e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d116      	bne.n	80056de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056b4:	e013      	b.n	80056de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056b6:	4b4c      	ldr	r3, [pc, #304]	; (80057e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10f      	bne.n	80056e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056c2:	4b49      	ldr	r3, [pc, #292]	; (80057e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d109      	bne.n	80056e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056d2:	e006      	b.n	80056e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	73fb      	strb	r3, [r7, #15]
      break;
 80056d8:	e004      	b.n	80056e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056da:	bf00      	nop
 80056dc:	e002      	b.n	80056e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056de:	bf00      	nop
 80056e0:	e000      	b.n	80056e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10d      	bne.n	8005706 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056ea:	4b3f      	ldr	r3, [pc, #252]	; (80057e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6819      	ldr	r1, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	3b01      	subs	r3, #1
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	430b      	orrs	r3, r1
 8005700:	4939      	ldr	r1, [pc, #228]	; (80057e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005702:	4313      	orrs	r3, r2
 8005704:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005706:	7bfb      	ldrb	r3, [r7, #15]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d167      	bne.n	80057dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800570c:	4b36      	ldr	r3, [pc, #216]	; (80057e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a35      	ldr	r2, [pc, #212]	; (80057e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005716:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005718:	f7fd f9ce 	bl	8002ab8 <HAL_GetTick>
 800571c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800571e:	e009      	b.n	8005734 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005720:	f7fd f9ca 	bl	8002ab8 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d902      	bls.n	8005734 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	73fb      	strb	r3, [r7, #15]
        break;
 8005732:	e005      	b.n	8005740 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005734:	4b2c      	ldr	r3, [pc, #176]	; (80057e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1ef      	bne.n	8005720 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d14a      	bne.n	80057dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d111      	bne.n	8005770 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800574c:	4b26      	ldr	r3, [pc, #152]	; (80057e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6892      	ldr	r2, [r2, #8]
 800575c:	0211      	lsls	r1, r2, #8
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	68d2      	ldr	r2, [r2, #12]
 8005762:	0912      	lsrs	r2, r2, #4
 8005764:	0452      	lsls	r2, r2, #17
 8005766:	430a      	orrs	r2, r1
 8005768:	491f      	ldr	r1, [pc, #124]	; (80057e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800576a:	4313      	orrs	r3, r2
 800576c:	614b      	str	r3, [r1, #20]
 800576e:	e011      	b.n	8005794 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005770:	4b1d      	ldr	r3, [pc, #116]	; (80057e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005778:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6892      	ldr	r2, [r2, #8]
 8005780:	0211      	lsls	r1, r2, #8
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6912      	ldr	r2, [r2, #16]
 8005786:	0852      	lsrs	r2, r2, #1
 8005788:	3a01      	subs	r2, #1
 800578a:	0652      	lsls	r2, r2, #25
 800578c:	430a      	orrs	r2, r1
 800578e:	4916      	ldr	r1, [pc, #88]	; (80057e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005790:	4313      	orrs	r3, r2
 8005792:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005794:	4b14      	ldr	r3, [pc, #80]	; (80057e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a13      	ldr	r2, [pc, #76]	; (80057e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800579a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800579e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a0:	f7fd f98a 	bl	8002ab8 <HAL_GetTick>
 80057a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057a6:	e009      	b.n	80057bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057a8:	f7fd f986 	bl	8002ab8 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d902      	bls.n	80057bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	73fb      	strb	r3, [r7, #15]
          break;
 80057ba:	e005      	b.n	80057c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057bc:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0ef      	beq.n	80057a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d106      	bne.n	80057dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80057ce:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d0:	695a      	ldr	r2, [r3, #20]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	4904      	ldr	r1, [pc, #16]	; (80057e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	40021000 	.word	0x40021000

080057ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d06c      	beq.n	80058d8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fc fc7e 	bl	8002114 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	22ca      	movs	r2, #202	; 0xca
 8005826:	625a      	str	r2, [r3, #36]	; 0x24
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2253      	movs	r2, #83	; 0x53
 800582e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fa49 	bl	8005cc8 <RTC_EnterInitMode>
 8005836:	4603      	mov	r3, r0
 8005838:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800583a:	7bfb      	ldrb	r3, [r7, #15]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d14b      	bne.n	80058d8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	6812      	ldr	r2, [r2, #0]
 800584a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800584e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005852:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6899      	ldr	r1, [r3, #8]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	431a      	orrs	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	68d2      	ldr	r2, [r2, #12]
 800587a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6919      	ldr	r1, [r3, #16]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	041a      	lsls	r2, r3, #16
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fa4d 	bl	8005d30 <RTC_ExitInitMode>
 8005896:	4603      	mov	r3, r0
 8005898:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d11b      	bne.n	80058d8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 0203 	bic.w	r2, r2, #3
 80058ae:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69da      	ldr	r2, [r3, #28]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	22ff      	movs	r2, #255	; 0xff
 80058ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80058e2:	b590      	push	{r4, r7, lr}
 80058e4:	b087      	sub	sp, #28
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	60f8      	str	r0, [r7, #12]
 80058ea:	60b9      	str	r1, [r7, #8]
 80058ec:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_RTC_SetTime+0x1a>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e08b      	b.n	8005a14 <HAL_RTC_SetTime+0x132>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	22ca      	movs	r2, #202	; 0xca
 8005912:	625a      	str	r2, [r3, #36]	; 0x24
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2253      	movs	r2, #83	; 0x53
 800591a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 f9d3 	bl	8005cc8 <RTC_EnterInitMode>
 8005922:	4603      	mov	r3, r0
 8005924:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005926:	7cfb      	ldrb	r3, [r7, #19]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d163      	bne.n	80059f4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d126      	bne.n	8005980 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593c:	2b00      	cmp	r3, #0
 800593e:	d102      	bne.n	8005946 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2200      	movs	r2, #0
 8005944:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	4618      	mov	r0, r3
 800594c:	f000 fa2e 	bl	8005dac <RTC_ByteToBcd2>
 8005950:	4603      	mov	r3, r0
 8005952:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	785b      	ldrb	r3, [r3, #1]
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fa27 	bl	8005dac <RTC_ByteToBcd2>
 800595e:	4603      	mov	r3, r0
 8005960:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005962:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	789b      	ldrb	r3, [r3, #2]
 8005968:	4618      	mov	r0, r3
 800596a:	f000 fa1f 	bl	8005dac <RTC_ByteToBcd2>
 800596e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005970:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	78db      	ldrb	r3, [r3, #3]
 8005978:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	e018      	b.n	80059b2 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598a:	2b00      	cmp	r3, #0
 800598c:	d102      	bne.n	8005994 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2200      	movs	r2, #0
 8005992:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	785b      	ldrb	r3, [r3, #1]
 800599e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80059a0:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059a6:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	78db      	ldrb	r3, [r3, #3]
 80059ac:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80059ae:	4313      	orrs	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80059bc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80059c0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80059d0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6899      	ldr	r1, [r3, #8]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	431a      	orrs	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f000 f9a0 	bl	8005d30 <RTC_ExitInitMode>
 80059f0:	4603      	mov	r3, r0
 80059f2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	22ff      	movs	r2, #255	; 0xff
 80059fa:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80059fc:	7cfb      	ldrb	r3, [r7, #19]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d103      	bne.n	8005a0a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005a12:	7cfb      	ldrb	r3, [r7, #19]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	371c      	adds	r7, #28
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd90      	pop	{r4, r7, pc}

08005a1c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005a4a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005a4e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	0c1b      	lsrs	r3, r3, #16
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	0a1b      	lsrs	r3, r3, #8
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	0d9b      	lsrs	r3, r3, #22
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d11a      	bne.n	8005aca <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 f9a7 	bl	8005dec <RTC_Bcd2ToByte>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	785b      	ldrb	r3, [r3, #1]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 f99e 	bl	8005dec <RTC_Bcd2ToByte>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	789b      	ldrb	r3, [r3, #2]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 f995 	bl	8005dec <RTC_Bcd2ToByte>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ad4:	b590      	push	{r4, r7, lr}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_RTC_SetDate+0x1a>
 8005aea:	2302      	movs	r3, #2
 8005aec:	e075      	b.n	8005bda <HAL_RTC_SetDate+0x106>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2202      	movs	r2, #2
 8005afa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10e      	bne.n	8005b22 <HAL_RTC_SetDate+0x4e>
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	785b      	ldrb	r3, [r3, #1]
 8005b08:	f003 0310 	and.w	r3, r3, #16
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d008      	beq.n	8005b22 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	785b      	ldrb	r3, [r3, #1]
 8005b14:	f023 0310 	bic.w	r3, r3, #16
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	330a      	adds	r3, #10
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d11c      	bne.n	8005b62 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	78db      	ldrb	r3, [r3, #3]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 f93d 	bl	8005dac <RTC_ByteToBcd2>
 8005b32:	4603      	mov	r3, r0
 8005b34:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	785b      	ldrb	r3, [r3, #1]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 f936 	bl	8005dac <RTC_ByteToBcd2>
 8005b40:	4603      	mov	r3, r0
 8005b42:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005b44:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	789b      	ldrb	r3, [r3, #2]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 f92e 	bl	8005dac <RTC_ByteToBcd2>
 8005b50:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005b52:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	e00e      	b.n	8005b80 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	78db      	ldrb	r3, [r3, #3]
 8005b66:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	785b      	ldrb	r3, [r3, #1]
 8005b6c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005b6e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005b74:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	22ca      	movs	r2, #202	; 0xca
 8005b86:	625a      	str	r2, [r3, #36]	; 0x24
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2253      	movs	r2, #83	; 0x53
 8005b8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 f899 	bl	8005cc8 <RTC_EnterInitMode>
 8005b96:	4603      	mov	r3, r0
 8005b98:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005b9a:	7cfb      	ldrb	r3, [r7, #19]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10c      	bne.n	8005bba <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005baa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005bae:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 f8bd 	bl	8005d30 <RTC_ExitInitMode>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	22ff      	movs	r2, #255	; 0xff
 8005bc0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005bc2:	7cfb      	ldrb	r3, [r7, #19]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d103      	bne.n	8005bd0 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005bd8:	7cfb      	ldrb	r3, [r7, #19]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd90      	pop	{r4, r7, pc}

08005be2 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b086      	sub	sp, #24
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	60f8      	str	r0, [r7, #12]
 8005bea:	60b9      	str	r1, [r7, #8]
 8005bec:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005bf8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005bfc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	0c1b      	lsrs	r3, r3, #16
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	0a1b      	lsrs	r3, r3, #8
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	f003 031f 	and.w	r3, r3, #31
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	0b5b      	lsrs	r3, r3, #13
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	f003 0307 	and.w	r3, r3, #7
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d11a      	bne.n	8005c72 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	78db      	ldrb	r3, [r3, #3]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 f8d3 	bl	8005dec <RTC_Bcd2ToByte>
 8005c46:	4603      	mov	r3, r0
 8005c48:	461a      	mov	r2, r3
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	785b      	ldrb	r3, [r3, #1]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 f8ca 	bl	8005dec <RTC_Bcd2ToByte>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	789b      	ldrb	r3, [r3, #2]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 f8c1 	bl	8005dec <RTC_Bcd2ToByte>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c92:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005c94:	f7fc ff10 	bl	8002ab8 <HAL_GetTick>
 8005c98:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c9a:	e009      	b.n	8005cb0 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c9c:	f7fc ff0c 	bl	8002ab8 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005caa:	d901      	bls.n	8005cb0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e007      	b.n	8005cc0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f003 0320 	and.w	r3, r3, #32
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0ee      	beq.n	8005c9c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d120      	bne.n	8005d24 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cea:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005cec:	f7fc fee4 	bl	8002ab8 <HAL_GetTick>
 8005cf0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005cf2:	e00d      	b.n	8005d10 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005cf4:	f7fc fee0 	bl	8002ab8 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d02:	d905      	bls.n	8005d10 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2203      	movs	r2, #3
 8005d0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d102      	bne.n	8005d24 <RTC_EnterInitMode+0x5c>
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	2b03      	cmp	r3, #3
 8005d22:	d1e7      	bne.n	8005cf4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
	...

08005d30 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005d3c:	4b1a      	ldr	r3, [pc, #104]	; (8005da8 <RTC_ExitInitMode+0x78>)
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	4a19      	ldr	r2, [pc, #100]	; (8005da8 <RTC_ExitInitMode+0x78>)
 8005d42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d46:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005d48:	4b17      	ldr	r3, [pc, #92]	; (8005da8 <RTC_ExitInitMode+0x78>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f003 0320 	and.w	r3, r3, #32
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10c      	bne.n	8005d6e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7ff ff91 	bl	8005c7c <HAL_RTC_WaitForSynchro>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01e      	beq.n	8005d9e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2203      	movs	r2, #3
 8005d64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	73fb      	strb	r3, [r7, #15]
 8005d6c:	e017      	b.n	8005d9e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d6e:	4b0e      	ldr	r3, [pc, #56]	; (8005da8 <RTC_ExitInitMode+0x78>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	4a0d      	ldr	r2, [pc, #52]	; (8005da8 <RTC_ExitInitMode+0x78>)
 8005d74:	f023 0320 	bic.w	r3, r3, #32
 8005d78:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff ff7e 	bl	8005c7c <HAL_RTC_WaitForSynchro>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2203      	movs	r2, #3
 8005d8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d92:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <RTC_ExitInitMode+0x78>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	4a04      	ldr	r2, [pc, #16]	; (8005da8 <RTC_ExitInitMode+0x78>)
 8005d98:	f043 0320 	orr.w	r3, r3, #32
 8005d9c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	40002800 	.word	0x40002800

08005dac <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005dba:	79fb      	ldrb	r3, [r7, #7]
 8005dbc:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005dbe:	e005      	b.n	8005dcc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005dc6:	7afb      	ldrb	r3, [r7, #11]
 8005dc8:	3b0a      	subs	r3, #10
 8005dca:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005dcc:	7afb      	ldrb	r3, [r7, #11]
 8005dce:	2b09      	cmp	r3, #9
 8005dd0:	d8f6      	bhi.n	8005dc0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	7afb      	ldrb	r3, [r7, #11]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	b2db      	uxtb	r3, r3
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	4603      	mov	r3, r0
 8005df4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005df6:	79fb      	ldrb	r3, [r7, #7]
 8005df8:	091b      	lsrs	r3, r3, #4
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	0092      	lsls	r2, r2, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005e06:	79fb      	ldrb	r3, [r7, #7]
 8005e08:	f003 030f 	and.w	r3, r3, #15
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	7bfb      	ldrb	r3, [r7, #15]
 8005e10:	4413      	add	r3, r2
 8005e12:	b2db      	uxtb	r3, r3
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e095      	b.n	8005f5e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d108      	bne.n	8005e4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e42:	d009      	beq.n	8005e58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	61da      	str	r2, [r3, #28]
 8005e4a:	e005      	b.n	8005e58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7fc f9be 	bl	80021f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e98:	d902      	bls.n	8005ea0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	e002      	b.n	8005ea6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ea4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005eae:	d007      	beq.n	8005ec0 <HAL_SPI_Init+0xa0>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005eb8:	d002      	beq.n	8005ec0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	431a      	orrs	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f02:	ea42 0103 	orr.w	r1, r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	0c1b      	lsrs	r3, r3, #16
 8005f1c:	f003 0204 	and.w	r2, r3, #4
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2e:	f003 0308 	and.w	r3, r3, #8
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f3c:	ea42 0103 	orr.w	r1, r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b088      	sub	sp, #32
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	603b      	str	r3, [r7, #0]
 8005f72:	4613      	mov	r3, r2
 8005f74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_SPI_Transmit+0x22>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e158      	b.n	800623a <HAL_SPI_Transmit+0x2d4>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f90:	f7fc fd92 	bl	8002ab8 <HAL_GetTick>
 8005f94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005f96:	88fb      	ldrh	r3, [r7, #6]
 8005f98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d002      	beq.n	8005fac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005faa:	e13d      	b.n	8006228 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <HAL_SPI_Transmit+0x52>
 8005fb2:	88fb      	ldrh	r3, [r7, #6]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d102      	bne.n	8005fbe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fbc:	e134      	b.n	8006228 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2203      	movs	r2, #3
 8005fc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	88fa      	ldrh	r2, [r7, #6]
 8005fd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	88fa      	ldrh	r2, [r7, #6]
 8005fdc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006008:	d10f      	bne.n	800602a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006018:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006028:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006034:	2b40      	cmp	r3, #64	; 0x40
 8006036:	d007      	beq.n	8006048 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006046:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006050:	d94b      	bls.n	80060ea <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <HAL_SPI_Transmit+0xfa>
 800605a:	8afb      	ldrh	r3, [r7, #22]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d13e      	bne.n	80060de <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006064:	881a      	ldrh	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006070:	1c9a      	adds	r2, r3, #2
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800607a:	b29b      	uxth	r3, r3
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006084:	e02b      	b.n	80060de <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b02      	cmp	r3, #2
 8006092:	d112      	bne.n	80060ba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006098:	881a      	ldrh	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	1c9a      	adds	r2, r3, #2
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060b8:	e011      	b.n	80060de <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060ba:	f7fc fcfd 	bl	8002ab8 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d803      	bhi.n	80060d2 <HAL_SPI_Transmit+0x16c>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060d0:	d102      	bne.n	80060d8 <HAL_SPI_Transmit+0x172>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d102      	bne.n	80060de <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060dc:	e0a4      	b.n	8006228 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1ce      	bne.n	8006086 <HAL_SPI_Transmit+0x120>
 80060e8:	e07c      	b.n	80061e4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <HAL_SPI_Transmit+0x192>
 80060f2:	8afb      	ldrh	r3, [r7, #22]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d170      	bne.n	80061da <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d912      	bls.n	8006128 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	881a      	ldrh	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006112:	1c9a      	adds	r2, r3, #2
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b02      	subs	r3, #2
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006126:	e058      	b.n	80061da <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	330c      	adds	r3, #12
 8006132:	7812      	ldrb	r2, [r2, #0]
 8006134:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006144:	b29b      	uxth	r3, r3
 8006146:	3b01      	subs	r3, #1
 8006148:	b29a      	uxth	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800614e:	e044      	b.n	80061da <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b02      	cmp	r3, #2
 800615c:	d12b      	bne.n	80061b6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006162:	b29b      	uxth	r3, r3
 8006164:	2b01      	cmp	r3, #1
 8006166:	d912      	bls.n	800618e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616c:	881a      	ldrh	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006178:	1c9a      	adds	r2, r3, #2
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006182:	b29b      	uxth	r3, r3
 8006184:	3b02      	subs	r3, #2
 8006186:	b29a      	uxth	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800618c:	e025      	b.n	80061da <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	330c      	adds	r3, #12
 8006198:	7812      	ldrb	r2, [r2, #0]
 800619a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061b4:	e011      	b.n	80061da <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061b6:	f7fc fc7f 	bl	8002ab8 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d803      	bhi.n	80061ce <HAL_SPI_Transmit+0x268>
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061cc:	d102      	bne.n	80061d4 <HAL_SPI_Transmit+0x26e>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d102      	bne.n	80061da <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061d8:	e026      	b.n	8006228 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061de:	b29b      	uxth	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1b5      	bne.n	8006150 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	6839      	ldr	r1, [r7, #0]
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 fad3 	bl	8006794 <SPI_EndRxTxTransaction>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2220      	movs	r2, #32
 80061f8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10a      	bne.n	8006218 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006202:	2300      	movs	r3, #0
 8006204:	613b      	str	r3, [r7, #16]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	613b      	str	r3, [r7, #16]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	613b      	str	r3, [r7, #16]
 8006216:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	77fb      	strb	r3, [r7, #31]
 8006224:	e000      	b.n	8006228 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006226:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006238:	7ffb      	ldrb	r3, [r7, #31]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3720      	adds	r7, #32
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
	...

08006244 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	4613      	mov	r3, r2
 8006250:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_SPI_Transmit_DMA+0x20>
 8006260:	2302      	movs	r3, #2
 8006262:	e0d8      	b.n	8006416 <HAL_SPI_Transmit_DMA+0x1d2>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b01      	cmp	r3, #1
 8006276:	d002      	beq.n	800627e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006278:	2302      	movs	r3, #2
 800627a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800627c:	e0c6      	b.n	800640c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <HAL_SPI_Transmit_DMA+0x46>
 8006284:	88fb      	ldrh	r3, [r7, #6]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d102      	bne.n	8006290 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800628e:	e0bd      	b.n	800640c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2203      	movs	r2, #3
 8006294:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	88fa      	ldrh	r2, [r7, #6]
 80062a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	88fa      	ldrh	r2, [r7, #6]
 80062ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062da:	d10f      	bne.n	80062fc <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006300:	4a47      	ldr	r2, [pc, #284]	; (8006420 <HAL_SPI_Transmit_DMA+0x1dc>)
 8006302:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006308:	4a46      	ldr	r2, [pc, #280]	; (8006424 <HAL_SPI_Transmit_DMA+0x1e0>)
 800630a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006310:	4a45      	ldr	r2, [pc, #276]	; (8006428 <HAL_SPI_Transmit_DMA+0x1e4>)
 8006312:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006318:	2200      	movs	r2, #0
 800631a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800632a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006334:	d82d      	bhi.n	8006392 <HAL_SPI_Transmit_DMA+0x14e>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006340:	d127      	bne.n	8006392 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006346:	b29b      	uxth	r3, r3
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10f      	bne.n	8006370 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800635e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006364:	b29b      	uxth	r3, r3
 8006366:	085b      	lsrs	r3, r3, #1
 8006368:	b29a      	uxth	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800636e:	e010      	b.n	8006392 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800637e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006384:	b29b      	uxth	r3, r3
 8006386:	085b      	lsrs	r3, r3, #1
 8006388:	b29b      	uxth	r3, r3
 800638a:	3301      	adds	r3, #1
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	4619      	mov	r1, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	330c      	adds	r3, #12
 80063a2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80063aa:	f7fc fd6b 	bl	8002e84 <HAL_DMA_Start_IT>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00c      	beq.n	80063ce <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b8:	f043 0210 	orr.w	r2, r3, #16
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80063cc:	e01e      	b.n	800640c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d8:	2b40      	cmp	r3, #64	; 0x40
 80063da:	d007      	beq.n	80063ec <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063ea:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0220 	orr.w	r2, r2, #32
 80063fa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f042 0202 	orr.w	r2, r2, #2
 800640a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006414:	7dfb      	ldrb	r3, [r7, #23]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	080064fb 	.word	0x080064fb
 8006424:	08006455 	.word	0x08006455
 8006428:	08006517 	.word	0x08006517

0800642c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006460:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006462:	f7fc fb29 	bl	8002ab8 <HAL_GetTick>
 8006466:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0320 	and.w	r3, r3, #32
 8006472:	2b20      	cmp	r3, #32
 8006474:	d03b      	beq.n	80064ee <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 0220 	bic.w	r2, r2, #32
 8006484:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0202 	bic.w	r2, r2, #2
 8006494:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	2164      	movs	r1, #100	; 0x64
 800649a:	6978      	ldr	r0, [r7, #20]
 800649c:	f000 f97a 	bl	8006794 <SPI_EndRxTxTransaction>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d005      	beq.n	80064b2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064aa:	f043 0220 	orr.w	r2, r3, #32
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10a      	bne.n	80064d0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064ba:	2300      	movs	r3, #0
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	2200      	movs	r2, #0
 80064d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80064e6:	6978      	ldr	r0, [r7, #20]
 80064e8:	f7ff ffaa 	bl	8006440 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80064ec:	e002      	b.n	80064f4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80064ee:	6978      	ldr	r0, [r7, #20]
 80064f0:	f7fb fc34 	bl	8001d5c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006506:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f7ff ff8f 	bl	800642c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800650e:	bf00      	nop
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b084      	sub	sp, #16
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006522:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0203 	bic.w	r2, r2, #3
 8006532:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006538:	f043 0210 	orr.w	r2, r3, #16
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f7ff ff79 	bl	8006440 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800654e:	bf00      	nop
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b088      	sub	sp, #32
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	603b      	str	r3, [r7, #0]
 8006564:	4613      	mov	r3, r2
 8006566:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006568:	f7fc faa6 	bl	8002ab8 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	1a9b      	subs	r3, r3, r2
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	4413      	add	r3, r2
 8006576:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006578:	f7fc fa9e 	bl	8002ab8 <HAL_GetTick>
 800657c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800657e:	4b39      	ldr	r3, [pc, #228]	; (8006664 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	015b      	lsls	r3, r3, #5
 8006584:	0d1b      	lsrs	r3, r3, #20
 8006586:	69fa      	ldr	r2, [r7, #28]
 8006588:	fb02 f303 	mul.w	r3, r2, r3
 800658c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800658e:	e054      	b.n	800663a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006596:	d050      	beq.n	800663a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006598:	f7fc fa8e 	bl	8002ab8 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d902      	bls.n	80065ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d13d      	bne.n	800662a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065c6:	d111      	bne.n	80065ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d0:	d004      	beq.n	80065dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065da:	d107      	bne.n	80065ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065f4:	d10f      	bne.n	8006616 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006614:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e017      	b.n	800665a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	3b01      	subs	r3, #1
 8006638:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	4013      	ands	r3, r2
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	429a      	cmp	r2, r3
 8006648:	bf0c      	ite	eq
 800664a:	2301      	moveq	r3, #1
 800664c:	2300      	movne	r3, #0
 800664e:	b2db      	uxtb	r3, r3
 8006650:	461a      	mov	r2, r3
 8006652:	79fb      	ldrb	r3, [r7, #7]
 8006654:	429a      	cmp	r2, r3
 8006656:	d19b      	bne.n	8006590 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3720      	adds	r7, #32
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	20000000 	.word	0x20000000

08006668 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08a      	sub	sp, #40	; 0x28
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006676:	2300      	movs	r3, #0
 8006678:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800667a:	f7fc fa1d 	bl	8002ab8 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	1a9b      	subs	r3, r3, r2
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	4413      	add	r3, r2
 8006688:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800668a:	f7fc fa15 	bl	8002ab8 <HAL_GetTick>
 800668e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	330c      	adds	r3, #12
 8006696:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006698:	4b3d      	ldr	r3, [pc, #244]	; (8006790 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	4613      	mov	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	00da      	lsls	r2, r3, #3
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	0d1b      	lsrs	r3, r3, #20
 80066a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066aa:	fb02 f303 	mul.w	r3, r2, r3
 80066ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80066b0:	e060      	b.n	8006774 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80066b8:	d107      	bne.n	80066ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d104      	bne.n	80066ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80066c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066d0:	d050      	beq.n	8006774 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066d2:	f7fc f9f1 	bl	8002ab8 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066de:	429a      	cmp	r2, r3
 80066e0:	d902      	bls.n	80066e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d13d      	bne.n	8006764 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006700:	d111      	bne.n	8006726 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800670a:	d004      	beq.n	8006716 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006714:	d107      	bne.n	8006726 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006724:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800672e:	d10f      	bne.n	8006750 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800673e:	601a      	str	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800674e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e010      	b.n	8006786 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800676a:	2300      	movs	r3, #0
 800676c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	3b01      	subs	r3, #1
 8006772:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	4013      	ands	r3, r2
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	429a      	cmp	r2, r3
 8006782:	d196      	bne.n	80066b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3728      	adds	r7, #40	; 0x28
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20000000 	.word	0x20000000

08006794 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af02      	add	r7, sp, #8
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f7ff ff5b 	bl	8006668 <SPI_WaitFifoStateUntilTimeout>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d007      	beq.n	80067c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067bc:	f043 0220 	orr.w	r2, r3, #32
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e027      	b.n	8006818 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2200      	movs	r2, #0
 80067d0:	2180      	movs	r1, #128	; 0x80
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f7ff fec0 	bl	8006558 <SPI_WaitFlagStateUntilTimeout>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d007      	beq.n	80067ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067e2:	f043 0220 	orr.w	r2, r3, #32
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e014      	b.n	8006818 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f7ff ff34 	bl	8006668 <SPI_WaitFifoStateUntilTimeout>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d007      	beq.n	8006816 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800680a:	f043 0220 	orr.w	r2, r3, #32
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e000      	b.n	8006818 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e049      	b.n	80068c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d106      	bne.n	800684c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7fb ffd6 	bl	80027f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	3304      	adds	r3, #4
 800685c:	4619      	mov	r1, r3
 800685e:	4610      	mov	r0, r2
 8006860:	f000 fbf8 	bl	8007054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
	...

080068d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d001      	beq.n	80068e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e04f      	b.n	8006988 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0201 	orr.w	r2, r2, #1
 80068fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a23      	ldr	r2, [pc, #140]	; (8006994 <HAL_TIM_Base_Start_IT+0xc4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d01d      	beq.n	8006946 <HAL_TIM_Base_Start_IT+0x76>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006912:	d018      	beq.n	8006946 <HAL_TIM_Base_Start_IT+0x76>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a1f      	ldr	r2, [pc, #124]	; (8006998 <HAL_TIM_Base_Start_IT+0xc8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d013      	beq.n	8006946 <HAL_TIM_Base_Start_IT+0x76>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a1e      	ldr	r2, [pc, #120]	; (800699c <HAL_TIM_Base_Start_IT+0xcc>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00e      	beq.n	8006946 <HAL_TIM_Base_Start_IT+0x76>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a1c      	ldr	r2, [pc, #112]	; (80069a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d009      	beq.n	8006946 <HAL_TIM_Base_Start_IT+0x76>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a1b      	ldr	r2, [pc, #108]	; (80069a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d004      	beq.n	8006946 <HAL_TIM_Base_Start_IT+0x76>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a19      	ldr	r2, [pc, #100]	; (80069a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d115      	bne.n	8006972 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	4b17      	ldr	r3, [pc, #92]	; (80069ac <HAL_TIM_Base_Start_IT+0xdc>)
 800694e:	4013      	ands	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2b06      	cmp	r3, #6
 8006956:	d015      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0xb4>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800695e:	d011      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0201 	orr.w	r2, r2, #1
 800696e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006970:	e008      	b.n	8006984 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f042 0201 	orr.w	r2, r2, #1
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	e000      	b.n	8006986 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006984:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	40012c00 	.word	0x40012c00
 8006998:	40000400 	.word	0x40000400
 800699c:	40000800 	.word	0x40000800
 80069a0:	40000c00 	.word	0x40000c00
 80069a4:	40013400 	.word	0x40013400
 80069a8:	40014000 	.word	0x40014000
 80069ac:	00010007 	.word	0x00010007

080069b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68da      	ldr	r2, [r3, #12]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 0201 	bic.w	r2, r2, #1
 80069c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6a1a      	ldr	r2, [r3, #32]
 80069ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80069d2:	4013      	ands	r3, r2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10f      	bne.n	80069f8 <HAL_TIM_Base_Stop_IT+0x48>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6a1a      	ldr	r2, [r3, #32]
 80069de:	f240 4344 	movw	r3, #1092	; 0x444
 80069e2:	4013      	ands	r3, r2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d107      	bne.n	80069f8 <HAL_TIM_Base_Stop_IT+0x48>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 0201 	bic.w	r2, r2, #1
 80069f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b086      	sub	sp, #24
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e097      	b.n	8006b52 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d106      	bne.n	8006a3c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7fb fe7e 	bl	8002738 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	6812      	ldr	r2, [r2, #0]
 8006a4e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006a52:	f023 0307 	bic.w	r3, r3, #7
 8006a56:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	3304      	adds	r3, #4
 8006a60:	4619      	mov	r1, r3
 8006a62:	4610      	mov	r0, r2
 8006a64:	f000 faf6 	bl	8007054 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a90:	f023 0303 	bic.w	r3, r3, #3
 8006a94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	689a      	ldr	r2, [r3, #8]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	021b      	lsls	r3, r3, #8
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006aae:	f023 030c 	bic.w	r3, r3, #12
 8006ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	68da      	ldr	r2, [r3, #12]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	021b      	lsls	r3, r3, #8
 8006aca:	4313      	orrs	r3, r2
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	011a      	lsls	r2, r3, #4
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	031b      	lsls	r3, r3, #12
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006aec:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006af4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	4313      	orrs	r3, r2
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b6a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b72:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b7a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b82:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d110      	bne.n	8006bac <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d102      	bne.n	8006b96 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b90:	7b7b      	ldrb	r3, [r7, #13]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d001      	beq.n	8006b9a <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e069      	b.n	8006c6e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2202      	movs	r2, #2
 8006ba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006baa:	e031      	b.n	8006c10 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b04      	cmp	r3, #4
 8006bb0:	d110      	bne.n	8006bd4 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bb2:	7bbb      	ldrb	r3, [r7, #14]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d102      	bne.n	8006bbe <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bb8:	7b3b      	ldrb	r3, [r7, #12]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d001      	beq.n	8006bc2 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e055      	b.n	8006c6e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bd2:	e01d      	b.n	8006c10 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d108      	bne.n	8006bec <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bda:	7bbb      	ldrb	r3, [r7, #14]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d105      	bne.n	8006bec <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006be0:	7b7b      	ldrb	r3, [r7, #13]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d102      	bne.n	8006bec <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006be6:	7b3b      	ldrb	r3, [r7, #12]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d001      	beq.n	8006bf0 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e03e      	b.n	8006c6e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2202      	movs	r2, #2
 8006c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <HAL_TIM_Encoder_Start+0xc4>
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b04      	cmp	r3, #4
 8006c1a:	d008      	beq.n	8006c2e <HAL_TIM_Encoder_Start+0xd4>
 8006c1c:	e00f      	b.n	8006c3e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2201      	movs	r2, #1
 8006c24:	2100      	movs	r1, #0
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 faae 	bl	8007188 <TIM_CCxChannelCmd>
      break;
 8006c2c:	e016      	b.n	8006c5c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2201      	movs	r2, #1
 8006c34:	2104      	movs	r1, #4
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 faa6 	bl	8007188 <TIM_CCxChannelCmd>
      break;
 8006c3c:	e00e      	b.n	8006c5c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2201      	movs	r2, #1
 8006c44:	2100      	movs	r1, #0
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 fa9e 	bl	8007188 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2201      	movs	r2, #1
 8006c52:	2104      	movs	r1, #4
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 fa97 	bl	8007188 <TIM_CCxChannelCmd>
      break;
 8006c5a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f042 0201 	orr.w	r2, r2, #1
 8006c6a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b082      	sub	sp, #8
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_TIM_Encoder_Stop+0x18>
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2b04      	cmp	r3, #4
 8006c8a:	d008      	beq.n	8006c9e <HAL_TIM_Encoder_Stop+0x28>
 8006c8c:	e00f      	b.n	8006cae <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2200      	movs	r2, #0
 8006c94:	2100      	movs	r1, #0
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fa76 	bl	8007188 <TIM_CCxChannelCmd>
      break;
 8006c9c:	e016      	b.n	8006ccc <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2104      	movs	r1, #4
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 fa6e 	bl	8007188 <TIM_CCxChannelCmd>
      break;
 8006cac:	e00e      	b.n	8006ccc <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 fa66 	bl	8007188 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	2104      	movs	r1, #4
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 fa5f 	bl	8007188 <TIM_CCxChannelCmd>
      break;
 8006cca:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6a1a      	ldr	r2, [r3, #32]
 8006cd2:	f241 1311 	movw	r3, #4369	; 0x1111
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10f      	bne.n	8006cfc <HAL_TIM_Encoder_Stop+0x86>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6a1a      	ldr	r2, [r3, #32]
 8006ce2:	f240 4344 	movw	r3, #1092	; 0x444
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d107      	bne.n	8006cfc <HAL_TIM_Encoder_Stop+0x86>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f022 0201 	bic.w	r2, r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <HAL_TIM_Encoder_Stop+0x92>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d148      	bne.n	8006d9a <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d104      	bne.n	8006d18 <HAL_TIM_Encoder_Stop+0xa2>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d16:	e023      	b.n	8006d60 <HAL_TIM_Encoder_Stop+0xea>
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	d104      	bne.n	8006d28 <HAL_TIM_Encoder_Stop+0xb2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d26:	e01b      	b.n	8006d60 <HAL_TIM_Encoder_Stop+0xea>
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2b08      	cmp	r3, #8
 8006d2c:	d104      	bne.n	8006d38 <HAL_TIM_Encoder_Stop+0xc2>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d36:	e013      	b.n	8006d60 <HAL_TIM_Encoder_Stop+0xea>
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	2b0c      	cmp	r3, #12
 8006d3c:	d104      	bne.n	8006d48 <HAL_TIM_Encoder_Stop+0xd2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d46:	e00b      	b.n	8006d60 <HAL_TIM_Encoder_Stop+0xea>
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	2b10      	cmp	r3, #16
 8006d4c:	d104      	bne.n	8006d58 <HAL_TIM_Encoder_Stop+0xe2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d56:	e003      	b.n	8006d60 <HAL_TIM_Encoder_Stop+0xea>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d104      	bne.n	8006d70 <HAL_TIM_Encoder_Stop+0xfa>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d6e:	e024      	b.n	8006dba <HAL_TIM_Encoder_Stop+0x144>
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	d104      	bne.n	8006d80 <HAL_TIM_Encoder_Stop+0x10a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d7e:	e01c      	b.n	8006dba <HAL_TIM_Encoder_Stop+0x144>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b08      	cmp	r3, #8
 8006d84:	d104      	bne.n	8006d90 <HAL_TIM_Encoder_Stop+0x11a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d8e:	e014      	b.n	8006dba <HAL_TIM_Encoder_Stop+0x144>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8006d98:	e00f      	b.n	8006dba <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return HAL_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d122      	bne.n	8006e20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d11b      	bne.n	8006e20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f06f 0202 	mvn.w	r2, #2
 8006df0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	f003 0303 	and.w	r3, r3, #3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f905 	bl	8007016 <HAL_TIM_IC_CaptureCallback>
 8006e0c:	e005      	b.n	8006e1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f8f7 	bl	8007002 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f908 	bl	800702a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	f003 0304 	and.w	r3, r3, #4
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	d122      	bne.n	8006e74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f003 0304 	and.w	r3, r3, #4
 8006e38:	2b04      	cmp	r3, #4
 8006e3a:	d11b      	bne.n	8006e74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f06f 0204 	mvn.w	r2, #4
 8006e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2202      	movs	r2, #2
 8006e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f8db 	bl	8007016 <HAL_TIM_IC_CaptureCallback>
 8006e60:	e005      	b.n	8006e6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f8cd 	bl	8007002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f8de 	bl	800702a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	f003 0308 	and.w	r3, r3, #8
 8006e7e:	2b08      	cmp	r3, #8
 8006e80:	d122      	bne.n	8006ec8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	f003 0308 	and.w	r3, r3, #8
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d11b      	bne.n	8006ec8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f06f 0208 	mvn.w	r2, #8
 8006e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2204      	movs	r2, #4
 8006e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	f003 0303 	and.w	r3, r3, #3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f8b1 	bl	8007016 <HAL_TIM_IC_CaptureCallback>
 8006eb4:	e005      	b.n	8006ec2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f8a3 	bl	8007002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f8b4 	bl	800702a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	f003 0310 	and.w	r3, r3, #16
 8006ed2:	2b10      	cmp	r3, #16
 8006ed4:	d122      	bne.n	8006f1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f003 0310 	and.w	r3, r3, #16
 8006ee0:	2b10      	cmp	r3, #16
 8006ee2:	d11b      	bne.n	8006f1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f06f 0210 	mvn.w	r2, #16
 8006eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2208      	movs	r2, #8
 8006ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f887 	bl	8007016 <HAL_TIM_IC_CaptureCallback>
 8006f08:	e005      	b.n	8006f16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f879 	bl	8007002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f88a 	bl	800702a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d10e      	bne.n	8006f48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d107      	bne.n	8006f48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f06f 0201 	mvn.w	r2, #1
 8006f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7fa ff5e 	bl	8001e04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f52:	2b80      	cmp	r3, #128	; 0x80
 8006f54:	d10e      	bne.n	8006f74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f60:	2b80      	cmp	r3, #128	; 0x80
 8006f62:	d107      	bne.n	8006f74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f9c2 	bl	80072f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f82:	d10e      	bne.n	8006fa2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f8e:	2b80      	cmp	r3, #128	; 0x80
 8006f90:	d107      	bne.n	8006fa2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f9b5 	bl	800730c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fac:	2b40      	cmp	r3, #64	; 0x40
 8006fae:	d10e      	bne.n	8006fce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fba:	2b40      	cmp	r3, #64	; 0x40
 8006fbc:	d107      	bne.n	8006fce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f838 	bl	800703e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	f003 0320 	and.w	r3, r3, #32
 8006fd8:	2b20      	cmp	r3, #32
 8006fda:	d10e      	bne.n	8006ffa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	f003 0320 	and.w	r3, r3, #32
 8006fe6:	2b20      	cmp	r3, #32
 8006fe8:	d107      	bne.n	8006ffa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f06f 0220 	mvn.w	r2, #32
 8006ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f975 	bl	80072e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ffa:	bf00      	nop
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800700a:	bf00      	nop
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007016:	b480      	push	{r7}
 8007018:	b083      	sub	sp, #12
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800701e:	bf00      	nop
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007032:	bf00      	nop
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007046:	bf00      	nop
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
	...

08007054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a40      	ldr	r2, [pc, #256]	; (8007168 <TIM_Base_SetConfig+0x114>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d013      	beq.n	8007094 <TIM_Base_SetConfig+0x40>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007072:	d00f      	beq.n	8007094 <TIM_Base_SetConfig+0x40>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a3d      	ldr	r2, [pc, #244]	; (800716c <TIM_Base_SetConfig+0x118>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d00b      	beq.n	8007094 <TIM_Base_SetConfig+0x40>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a3c      	ldr	r2, [pc, #240]	; (8007170 <TIM_Base_SetConfig+0x11c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d007      	beq.n	8007094 <TIM_Base_SetConfig+0x40>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a3b      	ldr	r2, [pc, #236]	; (8007174 <TIM_Base_SetConfig+0x120>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d003      	beq.n	8007094 <TIM_Base_SetConfig+0x40>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a3a      	ldr	r2, [pc, #232]	; (8007178 <TIM_Base_SetConfig+0x124>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d108      	bne.n	80070a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a2f      	ldr	r2, [pc, #188]	; (8007168 <TIM_Base_SetConfig+0x114>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d01f      	beq.n	80070ee <TIM_Base_SetConfig+0x9a>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b4:	d01b      	beq.n	80070ee <TIM_Base_SetConfig+0x9a>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a2c      	ldr	r2, [pc, #176]	; (800716c <TIM_Base_SetConfig+0x118>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d017      	beq.n	80070ee <TIM_Base_SetConfig+0x9a>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a2b      	ldr	r2, [pc, #172]	; (8007170 <TIM_Base_SetConfig+0x11c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d013      	beq.n	80070ee <TIM_Base_SetConfig+0x9a>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a2a      	ldr	r2, [pc, #168]	; (8007174 <TIM_Base_SetConfig+0x120>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d00f      	beq.n	80070ee <TIM_Base_SetConfig+0x9a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a29      	ldr	r2, [pc, #164]	; (8007178 <TIM_Base_SetConfig+0x124>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d00b      	beq.n	80070ee <TIM_Base_SetConfig+0x9a>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a28      	ldr	r2, [pc, #160]	; (800717c <TIM_Base_SetConfig+0x128>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d007      	beq.n	80070ee <TIM_Base_SetConfig+0x9a>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a27      	ldr	r2, [pc, #156]	; (8007180 <TIM_Base_SetConfig+0x12c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d003      	beq.n	80070ee <TIM_Base_SetConfig+0x9a>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a26      	ldr	r2, [pc, #152]	; (8007184 <TIM_Base_SetConfig+0x130>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d108      	bne.n	8007100 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	4313      	orrs	r3, r2
 800710c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a10      	ldr	r2, [pc, #64]	; (8007168 <TIM_Base_SetConfig+0x114>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00f      	beq.n	800714c <TIM_Base_SetConfig+0xf8>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a12      	ldr	r2, [pc, #72]	; (8007178 <TIM_Base_SetConfig+0x124>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00b      	beq.n	800714c <TIM_Base_SetConfig+0xf8>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a11      	ldr	r2, [pc, #68]	; (800717c <TIM_Base_SetConfig+0x128>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d007      	beq.n	800714c <TIM_Base_SetConfig+0xf8>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a10      	ldr	r2, [pc, #64]	; (8007180 <TIM_Base_SetConfig+0x12c>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d003      	beq.n	800714c <TIM_Base_SetConfig+0xf8>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a0f      	ldr	r2, [pc, #60]	; (8007184 <TIM_Base_SetConfig+0x130>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d103      	bne.n	8007154 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	691a      	ldr	r2, [r3, #16]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	615a      	str	r2, [r3, #20]
}
 800715a:	bf00      	nop
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	40012c00 	.word	0x40012c00
 800716c:	40000400 	.word	0x40000400
 8007170:	40000800 	.word	0x40000800
 8007174:	40000c00 	.word	0x40000c00
 8007178:	40013400 	.word	0x40013400
 800717c:	40014000 	.word	0x40014000
 8007180:	40014400 	.word	0x40014400
 8007184:	40014800 	.word	0x40014800

08007188 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	f003 031f 	and.w	r3, r3, #31
 800719a:	2201      	movs	r2, #1
 800719c:	fa02 f303 	lsl.w	r3, r2, r3
 80071a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6a1a      	ldr	r2, [r3, #32]
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	43db      	mvns	r3, r3
 80071aa:	401a      	ands	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6a1a      	ldr	r2, [r3, #32]
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f003 031f 	and.w	r3, r3, #31
 80071ba:	6879      	ldr	r1, [r7, #4]
 80071bc:	fa01 f303 	lsl.w	r3, r1, r3
 80071c0:	431a      	orrs	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	621a      	str	r2, [r3, #32]
}
 80071c6:	bf00      	nop
 80071c8:	371c      	adds	r7, #28
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
	...

080071d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d101      	bne.n	80071ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071e8:	2302      	movs	r3, #2
 80071ea:	e068      	b.n	80072be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2202      	movs	r2, #2
 80071f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a2e      	ldr	r2, [pc, #184]	; (80072cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d004      	beq.n	8007220 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a2d      	ldr	r2, [pc, #180]	; (80072d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d108      	bne.n	8007232 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007226:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	4313      	orrs	r3, r2
 8007230:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007238:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	4313      	orrs	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a1e      	ldr	r2, [pc, #120]	; (80072cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d01d      	beq.n	8007292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800725e:	d018      	beq.n	8007292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a1b      	ldr	r2, [pc, #108]	; (80072d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d013      	beq.n	8007292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a1a      	ldr	r2, [pc, #104]	; (80072d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d00e      	beq.n	8007292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a18      	ldr	r2, [pc, #96]	; (80072dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d009      	beq.n	8007292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a13      	ldr	r2, [pc, #76]	; (80072d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d004      	beq.n	8007292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a14      	ldr	r2, [pc, #80]	; (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d10c      	bne.n	80072ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007298:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	40012c00 	.word	0x40012c00
 80072d0:	40013400 	.word	0x40013400
 80072d4:	40000400 	.word	0x40000400
 80072d8:	40000800 	.word	0x40000800
 80072dc:	40000c00 	.word	0x40000c00
 80072e0:	40014000 	.word	0x40014000

080072e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e040      	b.n	80073b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007336:	2b00      	cmp	r3, #0
 8007338:	d106      	bne.n	8007348 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7fb faca 	bl	80028dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2224      	movs	r2, #36	; 0x24
 800734c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f022 0201 	bic.w	r2, r2, #1
 800735c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f8c0 	bl	80074e4 <UART_SetConfig>
 8007364:	4603      	mov	r3, r0
 8007366:	2b01      	cmp	r3, #1
 8007368:	d101      	bne.n	800736e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e022      	b.n	80073b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007372:	2b00      	cmp	r3, #0
 8007374:	d002      	beq.n	800737c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fb6c 	bl	8007a54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800738a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689a      	ldr	r2, [r3, #8]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800739a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f042 0201 	orr.w	r2, r2, #1
 80073aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fbf3 	bl	8007b98 <UART_CheckIdleState>
 80073b2:	4603      	mov	r3, r0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08a      	sub	sp, #40	; 0x28
 80073c0:	af02      	add	r7, sp, #8
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	603b      	str	r3, [r7, #0]
 80073c8:	4613      	mov	r3, r2
 80073ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073d0:	2b20      	cmp	r3, #32
 80073d2:	f040 8082 	bne.w	80074da <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d002      	beq.n	80073e2 <HAL_UART_Transmit+0x26>
 80073dc:	88fb      	ldrh	r3, [r7, #6]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e07a      	b.n	80074dc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d101      	bne.n	80073f4 <HAL_UART_Transmit+0x38>
 80073f0:	2302      	movs	r3, #2
 80073f2:	e073      	b.n	80074dc <HAL_UART_Transmit+0x120>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2221      	movs	r2, #33	; 0x21
 8007408:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800740a:	f7fb fb55 	bl	8002ab8 <HAL_GetTick>
 800740e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	88fa      	ldrh	r2, [r7, #6]
 8007414:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	88fa      	ldrh	r2, [r7, #6]
 800741c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007428:	d108      	bne.n	800743c <HAL_UART_Transmit+0x80>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d104      	bne.n	800743c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007432:	2300      	movs	r3, #0
 8007434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	e003      	b.n	8007444 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007440:	2300      	movs	r3, #0
 8007442:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800744c:	e02d      	b.n	80074aa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2200      	movs	r2, #0
 8007456:	2180      	movs	r1, #128	; 0x80
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 fbe6 	bl	8007c2a <UART_WaitOnFlagUntilTimeout>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d001      	beq.n	8007468 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e039      	b.n	80074dc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10b      	bne.n	8007486 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	881a      	ldrh	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800747a:	b292      	uxth	r2, r2
 800747c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	3302      	adds	r3, #2
 8007482:	61bb      	str	r3, [r7, #24]
 8007484:	e008      	b.n	8007498 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	781a      	ldrb	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	b292      	uxth	r2, r2
 8007490:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	3301      	adds	r3, #1
 8007496:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800749e:	b29b      	uxth	r3, r3
 80074a0:	3b01      	subs	r3, #1
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1cb      	bne.n	800744e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2200      	movs	r2, #0
 80074be:	2140      	movs	r1, #64	; 0x40
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 fbb2 	bl	8007c2a <UART_WaitOnFlagUntilTimeout>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e005      	b.n	80074dc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2220      	movs	r2, #32
 80074d4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	e000      	b.n	80074dc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80074da:	2302      	movs	r3, #2
  }
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3720      	adds	r7, #32
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074e8:	b08a      	sub	sp, #40	; 0x28
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	689a      	ldr	r2, [r3, #8]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	431a      	orrs	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	431a      	orrs	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	69db      	ldr	r3, [r3, #28]
 8007508:	4313      	orrs	r3, r2
 800750a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	4ba4      	ldr	r3, [pc, #656]	; (80077a4 <UART_SetConfig+0x2c0>)
 8007514:	4013      	ands	r3, r2
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	6812      	ldr	r2, [r2, #0]
 800751a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800751c:	430b      	orrs	r3, r1
 800751e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	68da      	ldr	r2, [r3, #12]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	430a      	orrs	r2, r1
 8007534:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a99      	ldr	r2, [pc, #612]	; (80077a8 <UART_SetConfig+0x2c4>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d004      	beq.n	8007550 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800754c:	4313      	orrs	r3, r2
 800754e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007560:	430a      	orrs	r2, r1
 8007562:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a90      	ldr	r2, [pc, #576]	; (80077ac <UART_SetConfig+0x2c8>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d126      	bne.n	80075bc <UART_SetConfig+0xd8>
 800756e:	4b90      	ldr	r3, [pc, #576]	; (80077b0 <UART_SetConfig+0x2cc>)
 8007570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007574:	f003 0303 	and.w	r3, r3, #3
 8007578:	2b03      	cmp	r3, #3
 800757a:	d81b      	bhi.n	80075b4 <UART_SetConfig+0xd0>
 800757c:	a201      	add	r2, pc, #4	; (adr r2, 8007584 <UART_SetConfig+0xa0>)
 800757e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007582:	bf00      	nop
 8007584:	08007595 	.word	0x08007595
 8007588:	080075a5 	.word	0x080075a5
 800758c:	0800759d 	.word	0x0800759d
 8007590:	080075ad 	.word	0x080075ad
 8007594:	2301      	movs	r3, #1
 8007596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800759a:	e116      	b.n	80077ca <UART_SetConfig+0x2e6>
 800759c:	2302      	movs	r3, #2
 800759e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075a2:	e112      	b.n	80077ca <UART_SetConfig+0x2e6>
 80075a4:	2304      	movs	r3, #4
 80075a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075aa:	e10e      	b.n	80077ca <UART_SetConfig+0x2e6>
 80075ac:	2308      	movs	r3, #8
 80075ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075b2:	e10a      	b.n	80077ca <UART_SetConfig+0x2e6>
 80075b4:	2310      	movs	r3, #16
 80075b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ba:	e106      	b.n	80077ca <UART_SetConfig+0x2e6>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a7c      	ldr	r2, [pc, #496]	; (80077b4 <UART_SetConfig+0x2d0>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d138      	bne.n	8007638 <UART_SetConfig+0x154>
 80075c6:	4b7a      	ldr	r3, [pc, #488]	; (80077b0 <UART_SetConfig+0x2cc>)
 80075c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075cc:	f003 030c 	and.w	r3, r3, #12
 80075d0:	2b0c      	cmp	r3, #12
 80075d2:	d82d      	bhi.n	8007630 <UART_SetConfig+0x14c>
 80075d4:	a201      	add	r2, pc, #4	; (adr r2, 80075dc <UART_SetConfig+0xf8>)
 80075d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075da:	bf00      	nop
 80075dc:	08007611 	.word	0x08007611
 80075e0:	08007631 	.word	0x08007631
 80075e4:	08007631 	.word	0x08007631
 80075e8:	08007631 	.word	0x08007631
 80075ec:	08007621 	.word	0x08007621
 80075f0:	08007631 	.word	0x08007631
 80075f4:	08007631 	.word	0x08007631
 80075f8:	08007631 	.word	0x08007631
 80075fc:	08007619 	.word	0x08007619
 8007600:	08007631 	.word	0x08007631
 8007604:	08007631 	.word	0x08007631
 8007608:	08007631 	.word	0x08007631
 800760c:	08007629 	.word	0x08007629
 8007610:	2300      	movs	r3, #0
 8007612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007616:	e0d8      	b.n	80077ca <UART_SetConfig+0x2e6>
 8007618:	2302      	movs	r3, #2
 800761a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800761e:	e0d4      	b.n	80077ca <UART_SetConfig+0x2e6>
 8007620:	2304      	movs	r3, #4
 8007622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007626:	e0d0      	b.n	80077ca <UART_SetConfig+0x2e6>
 8007628:	2308      	movs	r3, #8
 800762a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800762e:	e0cc      	b.n	80077ca <UART_SetConfig+0x2e6>
 8007630:	2310      	movs	r3, #16
 8007632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007636:	e0c8      	b.n	80077ca <UART_SetConfig+0x2e6>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a5e      	ldr	r2, [pc, #376]	; (80077b8 <UART_SetConfig+0x2d4>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d125      	bne.n	800768e <UART_SetConfig+0x1aa>
 8007642:	4b5b      	ldr	r3, [pc, #364]	; (80077b0 <UART_SetConfig+0x2cc>)
 8007644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007648:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800764c:	2b30      	cmp	r3, #48	; 0x30
 800764e:	d016      	beq.n	800767e <UART_SetConfig+0x19a>
 8007650:	2b30      	cmp	r3, #48	; 0x30
 8007652:	d818      	bhi.n	8007686 <UART_SetConfig+0x1a2>
 8007654:	2b20      	cmp	r3, #32
 8007656:	d00a      	beq.n	800766e <UART_SetConfig+0x18a>
 8007658:	2b20      	cmp	r3, #32
 800765a:	d814      	bhi.n	8007686 <UART_SetConfig+0x1a2>
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <UART_SetConfig+0x182>
 8007660:	2b10      	cmp	r3, #16
 8007662:	d008      	beq.n	8007676 <UART_SetConfig+0x192>
 8007664:	e00f      	b.n	8007686 <UART_SetConfig+0x1a2>
 8007666:	2300      	movs	r3, #0
 8007668:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800766c:	e0ad      	b.n	80077ca <UART_SetConfig+0x2e6>
 800766e:	2302      	movs	r3, #2
 8007670:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007674:	e0a9      	b.n	80077ca <UART_SetConfig+0x2e6>
 8007676:	2304      	movs	r3, #4
 8007678:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800767c:	e0a5      	b.n	80077ca <UART_SetConfig+0x2e6>
 800767e:	2308      	movs	r3, #8
 8007680:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007684:	e0a1      	b.n	80077ca <UART_SetConfig+0x2e6>
 8007686:	2310      	movs	r3, #16
 8007688:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800768c:	e09d      	b.n	80077ca <UART_SetConfig+0x2e6>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a4a      	ldr	r2, [pc, #296]	; (80077bc <UART_SetConfig+0x2d8>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d125      	bne.n	80076e4 <UART_SetConfig+0x200>
 8007698:	4b45      	ldr	r3, [pc, #276]	; (80077b0 <UART_SetConfig+0x2cc>)
 800769a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800769e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80076a2:	2bc0      	cmp	r3, #192	; 0xc0
 80076a4:	d016      	beq.n	80076d4 <UART_SetConfig+0x1f0>
 80076a6:	2bc0      	cmp	r3, #192	; 0xc0
 80076a8:	d818      	bhi.n	80076dc <UART_SetConfig+0x1f8>
 80076aa:	2b80      	cmp	r3, #128	; 0x80
 80076ac:	d00a      	beq.n	80076c4 <UART_SetConfig+0x1e0>
 80076ae:	2b80      	cmp	r3, #128	; 0x80
 80076b0:	d814      	bhi.n	80076dc <UART_SetConfig+0x1f8>
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d002      	beq.n	80076bc <UART_SetConfig+0x1d8>
 80076b6:	2b40      	cmp	r3, #64	; 0x40
 80076b8:	d008      	beq.n	80076cc <UART_SetConfig+0x1e8>
 80076ba:	e00f      	b.n	80076dc <UART_SetConfig+0x1f8>
 80076bc:	2300      	movs	r3, #0
 80076be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076c2:	e082      	b.n	80077ca <UART_SetConfig+0x2e6>
 80076c4:	2302      	movs	r3, #2
 80076c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ca:	e07e      	b.n	80077ca <UART_SetConfig+0x2e6>
 80076cc:	2304      	movs	r3, #4
 80076ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076d2:	e07a      	b.n	80077ca <UART_SetConfig+0x2e6>
 80076d4:	2308      	movs	r3, #8
 80076d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076da:	e076      	b.n	80077ca <UART_SetConfig+0x2e6>
 80076dc:	2310      	movs	r3, #16
 80076de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076e2:	e072      	b.n	80077ca <UART_SetConfig+0x2e6>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a35      	ldr	r2, [pc, #212]	; (80077c0 <UART_SetConfig+0x2dc>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d12a      	bne.n	8007744 <UART_SetConfig+0x260>
 80076ee:	4b30      	ldr	r3, [pc, #192]	; (80077b0 <UART_SetConfig+0x2cc>)
 80076f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076fc:	d01a      	beq.n	8007734 <UART_SetConfig+0x250>
 80076fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007702:	d81b      	bhi.n	800773c <UART_SetConfig+0x258>
 8007704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007708:	d00c      	beq.n	8007724 <UART_SetConfig+0x240>
 800770a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800770e:	d815      	bhi.n	800773c <UART_SetConfig+0x258>
 8007710:	2b00      	cmp	r3, #0
 8007712:	d003      	beq.n	800771c <UART_SetConfig+0x238>
 8007714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007718:	d008      	beq.n	800772c <UART_SetConfig+0x248>
 800771a:	e00f      	b.n	800773c <UART_SetConfig+0x258>
 800771c:	2300      	movs	r3, #0
 800771e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007722:	e052      	b.n	80077ca <UART_SetConfig+0x2e6>
 8007724:	2302      	movs	r3, #2
 8007726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800772a:	e04e      	b.n	80077ca <UART_SetConfig+0x2e6>
 800772c:	2304      	movs	r3, #4
 800772e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007732:	e04a      	b.n	80077ca <UART_SetConfig+0x2e6>
 8007734:	2308      	movs	r3, #8
 8007736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800773a:	e046      	b.n	80077ca <UART_SetConfig+0x2e6>
 800773c:	2310      	movs	r3, #16
 800773e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007742:	e042      	b.n	80077ca <UART_SetConfig+0x2e6>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a17      	ldr	r2, [pc, #92]	; (80077a8 <UART_SetConfig+0x2c4>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d13a      	bne.n	80077c4 <UART_SetConfig+0x2e0>
 800774e:	4b18      	ldr	r3, [pc, #96]	; (80077b0 <UART_SetConfig+0x2cc>)
 8007750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007754:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007758:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800775c:	d01a      	beq.n	8007794 <UART_SetConfig+0x2b0>
 800775e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007762:	d81b      	bhi.n	800779c <UART_SetConfig+0x2b8>
 8007764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007768:	d00c      	beq.n	8007784 <UART_SetConfig+0x2a0>
 800776a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800776e:	d815      	bhi.n	800779c <UART_SetConfig+0x2b8>
 8007770:	2b00      	cmp	r3, #0
 8007772:	d003      	beq.n	800777c <UART_SetConfig+0x298>
 8007774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007778:	d008      	beq.n	800778c <UART_SetConfig+0x2a8>
 800777a:	e00f      	b.n	800779c <UART_SetConfig+0x2b8>
 800777c:	2300      	movs	r3, #0
 800777e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007782:	e022      	b.n	80077ca <UART_SetConfig+0x2e6>
 8007784:	2302      	movs	r3, #2
 8007786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800778a:	e01e      	b.n	80077ca <UART_SetConfig+0x2e6>
 800778c:	2304      	movs	r3, #4
 800778e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007792:	e01a      	b.n	80077ca <UART_SetConfig+0x2e6>
 8007794:	2308      	movs	r3, #8
 8007796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800779a:	e016      	b.n	80077ca <UART_SetConfig+0x2e6>
 800779c:	2310      	movs	r3, #16
 800779e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077a2:	e012      	b.n	80077ca <UART_SetConfig+0x2e6>
 80077a4:	efff69f3 	.word	0xefff69f3
 80077a8:	40008000 	.word	0x40008000
 80077ac:	40013800 	.word	0x40013800
 80077b0:	40021000 	.word	0x40021000
 80077b4:	40004400 	.word	0x40004400
 80077b8:	40004800 	.word	0x40004800
 80077bc:	40004c00 	.word	0x40004c00
 80077c0:	40005000 	.word	0x40005000
 80077c4:	2310      	movs	r3, #16
 80077c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a9f      	ldr	r2, [pc, #636]	; (8007a4c <UART_SetConfig+0x568>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d17a      	bne.n	80078ca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077d8:	2b08      	cmp	r3, #8
 80077da:	d824      	bhi.n	8007826 <UART_SetConfig+0x342>
 80077dc:	a201      	add	r2, pc, #4	; (adr r2, 80077e4 <UART_SetConfig+0x300>)
 80077de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e2:	bf00      	nop
 80077e4:	08007809 	.word	0x08007809
 80077e8:	08007827 	.word	0x08007827
 80077ec:	08007811 	.word	0x08007811
 80077f0:	08007827 	.word	0x08007827
 80077f4:	08007817 	.word	0x08007817
 80077f8:	08007827 	.word	0x08007827
 80077fc:	08007827 	.word	0x08007827
 8007800:	08007827 	.word	0x08007827
 8007804:	0800781f 	.word	0x0800781f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007808:	f7fd fa98 	bl	8004d3c <HAL_RCC_GetPCLK1Freq>
 800780c:	61f8      	str	r0, [r7, #28]
        break;
 800780e:	e010      	b.n	8007832 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007810:	4b8f      	ldr	r3, [pc, #572]	; (8007a50 <UART_SetConfig+0x56c>)
 8007812:	61fb      	str	r3, [r7, #28]
        break;
 8007814:	e00d      	b.n	8007832 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007816:	f7fd f9f9 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 800781a:	61f8      	str	r0, [r7, #28]
        break;
 800781c:	e009      	b.n	8007832 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800781e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007822:	61fb      	str	r3, [r7, #28]
        break;
 8007824:	e005      	b.n	8007832 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007826:	2300      	movs	r3, #0
 8007828:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007830:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 80fb 	beq.w	8007a30 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	4613      	mov	r3, r2
 8007840:	005b      	lsls	r3, r3, #1
 8007842:	4413      	add	r3, r2
 8007844:	69fa      	ldr	r2, [r7, #28]
 8007846:	429a      	cmp	r2, r3
 8007848:	d305      	bcc.n	8007856 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007850:	69fa      	ldr	r2, [r7, #28]
 8007852:	429a      	cmp	r2, r3
 8007854:	d903      	bls.n	800785e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800785c:	e0e8      	b.n	8007a30 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	2200      	movs	r2, #0
 8007862:	461c      	mov	r4, r3
 8007864:	4615      	mov	r5, r2
 8007866:	f04f 0200 	mov.w	r2, #0
 800786a:	f04f 0300 	mov.w	r3, #0
 800786e:	022b      	lsls	r3, r5, #8
 8007870:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007874:	0222      	lsls	r2, r4, #8
 8007876:	68f9      	ldr	r1, [r7, #12]
 8007878:	6849      	ldr	r1, [r1, #4]
 800787a:	0849      	lsrs	r1, r1, #1
 800787c:	2000      	movs	r0, #0
 800787e:	4688      	mov	r8, r1
 8007880:	4681      	mov	r9, r0
 8007882:	eb12 0a08 	adds.w	sl, r2, r8
 8007886:	eb43 0b09 	adc.w	fp, r3, r9
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	603b      	str	r3, [r7, #0]
 8007892:	607a      	str	r2, [r7, #4]
 8007894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007898:	4650      	mov	r0, sl
 800789a:	4659      	mov	r1, fp
 800789c:	f7f9 f984 	bl	8000ba8 <__aeabi_uldivmod>
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	4613      	mov	r3, r2
 80078a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078ae:	d308      	bcc.n	80078c2 <UART_SetConfig+0x3de>
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078b6:	d204      	bcs.n	80078c2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	69ba      	ldr	r2, [r7, #24]
 80078be:	60da      	str	r2, [r3, #12]
 80078c0:	e0b6      	b.n	8007a30 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80078c8:	e0b2      	b.n	8007a30 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078d2:	d15e      	bne.n	8007992 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80078d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078d8:	2b08      	cmp	r3, #8
 80078da:	d828      	bhi.n	800792e <UART_SetConfig+0x44a>
 80078dc:	a201      	add	r2, pc, #4	; (adr r2, 80078e4 <UART_SetConfig+0x400>)
 80078de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e2:	bf00      	nop
 80078e4:	08007909 	.word	0x08007909
 80078e8:	08007911 	.word	0x08007911
 80078ec:	08007919 	.word	0x08007919
 80078f0:	0800792f 	.word	0x0800792f
 80078f4:	0800791f 	.word	0x0800791f
 80078f8:	0800792f 	.word	0x0800792f
 80078fc:	0800792f 	.word	0x0800792f
 8007900:	0800792f 	.word	0x0800792f
 8007904:	08007927 	.word	0x08007927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007908:	f7fd fa18 	bl	8004d3c <HAL_RCC_GetPCLK1Freq>
 800790c:	61f8      	str	r0, [r7, #28]
        break;
 800790e:	e014      	b.n	800793a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007910:	f7fd fa2a 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 8007914:	61f8      	str	r0, [r7, #28]
        break;
 8007916:	e010      	b.n	800793a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007918:	4b4d      	ldr	r3, [pc, #308]	; (8007a50 <UART_SetConfig+0x56c>)
 800791a:	61fb      	str	r3, [r7, #28]
        break;
 800791c:	e00d      	b.n	800793a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800791e:	f7fd f975 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 8007922:	61f8      	str	r0, [r7, #28]
        break;
 8007924:	e009      	b.n	800793a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800792a:	61fb      	str	r3, [r7, #28]
        break;
 800792c:	e005      	b.n	800793a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007938:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d077      	beq.n	8007a30 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	005a      	lsls	r2, r3, #1
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	085b      	lsrs	r3, r3, #1
 800794a:	441a      	add	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	fbb2 f3f3 	udiv	r3, r2, r3
 8007954:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	2b0f      	cmp	r3, #15
 800795a:	d916      	bls.n	800798a <UART_SetConfig+0x4a6>
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007962:	d212      	bcs.n	800798a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	b29b      	uxth	r3, r3
 8007968:	f023 030f 	bic.w	r3, r3, #15
 800796c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	085b      	lsrs	r3, r3, #1
 8007972:	b29b      	uxth	r3, r3
 8007974:	f003 0307 	and.w	r3, r3, #7
 8007978:	b29a      	uxth	r2, r3
 800797a:	8afb      	ldrh	r3, [r7, #22]
 800797c:	4313      	orrs	r3, r2
 800797e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	8afa      	ldrh	r2, [r7, #22]
 8007986:	60da      	str	r2, [r3, #12]
 8007988:	e052      	b.n	8007a30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007990:	e04e      	b.n	8007a30 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007992:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007996:	2b08      	cmp	r3, #8
 8007998:	d827      	bhi.n	80079ea <UART_SetConfig+0x506>
 800799a:	a201      	add	r2, pc, #4	; (adr r2, 80079a0 <UART_SetConfig+0x4bc>)
 800799c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a0:	080079c5 	.word	0x080079c5
 80079a4:	080079cd 	.word	0x080079cd
 80079a8:	080079d5 	.word	0x080079d5
 80079ac:	080079eb 	.word	0x080079eb
 80079b0:	080079db 	.word	0x080079db
 80079b4:	080079eb 	.word	0x080079eb
 80079b8:	080079eb 	.word	0x080079eb
 80079bc:	080079eb 	.word	0x080079eb
 80079c0:	080079e3 	.word	0x080079e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079c4:	f7fd f9ba 	bl	8004d3c <HAL_RCC_GetPCLK1Freq>
 80079c8:	61f8      	str	r0, [r7, #28]
        break;
 80079ca:	e014      	b.n	80079f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079cc:	f7fd f9cc 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 80079d0:	61f8      	str	r0, [r7, #28]
        break;
 80079d2:	e010      	b.n	80079f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079d4:	4b1e      	ldr	r3, [pc, #120]	; (8007a50 <UART_SetConfig+0x56c>)
 80079d6:	61fb      	str	r3, [r7, #28]
        break;
 80079d8:	e00d      	b.n	80079f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079da:	f7fd f917 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 80079de:	61f8      	str	r0, [r7, #28]
        break;
 80079e0:	e009      	b.n	80079f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079e6:	61fb      	str	r3, [r7, #28]
        break;
 80079e8:	e005      	b.n	80079f6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80079f4:	bf00      	nop
    }

    if (pclk != 0U)
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d019      	beq.n	8007a30 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	085a      	lsrs	r2, r3, #1
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	441a      	add	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	2b0f      	cmp	r3, #15
 8007a14:	d909      	bls.n	8007a2a <UART_SetConfig+0x546>
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a1c:	d205      	bcs.n	8007a2a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	60da      	str	r2, [r3, #12]
 8007a28:	e002      	b.n	8007a30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007a3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3728      	adds	r7, #40	; 0x28
 8007a44:	46bd      	mov	sp, r7
 8007a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a4a:	bf00      	nop
 8007a4c:	40008000 	.word	0x40008000
 8007a50:	00f42400 	.word	0x00f42400

08007a54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00a      	beq.n	8007a7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a82:	f003 0302 	and.w	r3, r3, #2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa4:	f003 0304 	and.w	r3, r3, #4
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00a      	beq.n	8007ac2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	f003 0308 	and.w	r3, r3, #8
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	f003 0310 	and.w	r3, r3, #16
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0a:	f003 0320 	and.w	r3, r3, #32
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d01a      	beq.n	8007b6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b52:	d10a      	bne.n	8007b6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00a      	beq.n	8007b8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	605a      	str	r2, [r3, #4]
  }
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af02      	add	r7, sp, #8
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ba8:	f7fa ff86 	bl	8002ab8 <HAL_GetTick>
 8007bac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0308 	and.w	r3, r3, #8
 8007bb8:	2b08      	cmp	r3, #8
 8007bba:	d10e      	bne.n	8007bda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f82d 	bl	8007c2a <UART_WaitOnFlagUntilTimeout>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e023      	b.n	8007c22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0304 	and.w	r3, r3, #4
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	d10e      	bne.n	8007c06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007be8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f817 	bl	8007c2a <UART_WaitOnFlagUntilTimeout>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e00d      	b.n	8007c22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2220      	movs	r2, #32
 8007c0a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b09c      	sub	sp, #112	; 0x70
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	60f8      	str	r0, [r7, #12]
 8007c32:	60b9      	str	r1, [r7, #8]
 8007c34:	603b      	str	r3, [r7, #0]
 8007c36:	4613      	mov	r3, r2
 8007c38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c3a:	e0a5      	b.n	8007d88 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c42:	f000 80a1 	beq.w	8007d88 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c46:	f7fa ff37 	bl	8002ab8 <HAL_GetTick>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d302      	bcc.n	8007c5c <UART_WaitOnFlagUntilTimeout+0x32>
 8007c56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d13e      	bne.n	8007cda <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c64:	e853 3f00 	ldrex	r3, [r3]
 8007c68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c70:	667b      	str	r3, [r7, #100]	; 0x64
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	461a      	mov	r2, r3
 8007c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c7c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c82:	e841 2300 	strex	r3, r2, [r1]
 8007c86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1e6      	bne.n	8007c5c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	3308      	adds	r3, #8
 8007c94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	f023 0301 	bic.w	r3, r3, #1
 8007ca4:	663b      	str	r3, [r7, #96]	; 0x60
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3308      	adds	r3, #8
 8007cac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007cae:	64ba      	str	r2, [r7, #72]	; 0x48
 8007cb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007cb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e5      	bne.n	8007c8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	e067      	b.n	8007daa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0304 	and.w	r3, r3, #4
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d04f      	beq.n	8007d88 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cf6:	d147      	bne.n	8007d88 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d00:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0a:	e853 3f00 	ldrex	r3, [r3]
 8007d0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d20:	637b      	str	r3, [r7, #52]	; 0x34
 8007d22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d28:	e841 2300 	strex	r3, r2, [r1]
 8007d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1e6      	bne.n	8007d02 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3308      	adds	r3, #8
 8007d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	e853 3f00 	ldrex	r3, [r3]
 8007d42:	613b      	str	r3, [r7, #16]
   return(result);
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	f023 0301 	bic.w	r3, r3, #1
 8007d4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	3308      	adds	r3, #8
 8007d52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d54:	623a      	str	r2, [r7, #32]
 8007d56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d58:	69f9      	ldr	r1, [r7, #28]
 8007d5a:	6a3a      	ldr	r2, [r7, #32]
 8007d5c:	e841 2300 	strex	r3, r2, [r1]
 8007d60:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1e5      	bne.n	8007d34 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2220      	movs	r2, #32
 8007d6c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2220      	movs	r2, #32
 8007d72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2220      	movs	r2, #32
 8007d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e010      	b.n	8007daa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	69da      	ldr	r2, [r3, #28]
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	4013      	ands	r3, r2
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	bf0c      	ite	eq
 8007d98:	2301      	moveq	r3, #1
 8007d9a:	2300      	movne	r3, #0
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	461a      	mov	r2, r3
 8007da0:	79fb      	ldrb	r3, [r7, #7]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	f43f af4a 	beq.w	8007c3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3770      	adds	r7, #112	; 0x70
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	881a      	ldrh	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	799b      	ldrb	r3, [r3, #6]
 8007dc4:	08db      	lsrs	r3, r3, #3
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	fb12 f303 	smulbb	r3, r2, r3
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	889b      	ldrh	r3, [r3, #4]
 8007dd8:	461a      	mov	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	885b      	ldrh	r3, [r3, #2]
 8007dde:	fb02 f303 	mul.w	r3, r2, r3
 8007de2:	461a      	mov	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	683a      	ldr	r2, [r7, #0]
 8007dec:	60da      	str	r2, [r3, #12]
}
 8007dee:	bf00      	nop
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8007dfa:	b490      	push	{r4, r7}
 8007dfc:	b086      	sub	sp, #24
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	4604      	mov	r4, r0
 8007e02:	4608      	mov	r0, r1
 8007e04:	1d39      	adds	r1, r7, #4
 8007e06:	e881 000c 	stmia.w	r1, {r2, r3}
 8007e0a:	4623      	mov	r3, r4
 8007e0c:	81fb      	strh	r3, [r7, #14]
 8007e0e:	4603      	mov	r3, r0
 8007e10:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8007e12:	2300      	movs	r3, #0
 8007e14:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8007e16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007e1a:	88ba      	ldrh	r2, [r7, #4]
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	da04      	bge.n	8007e2a <code+0x30>
        code |= LEFT;
 8007e20:	2201      	movs	r2, #1
 8007e22:	7dfb      	ldrb	r3, [r7, #23]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	75fb      	strb	r3, [r7, #23]
 8007e28:	e008      	b.n	8007e3c <code+0x42>
    } else if (x0 > window.x1) {
 8007e2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007e2e:	893a      	ldrh	r2, [r7, #8]
 8007e30:	4293      	cmp	r3, r2
 8007e32:	dd03      	ble.n	8007e3c <code+0x42>
        code |= RIGHT;
 8007e34:	2202      	movs	r2, #2
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8007e3c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007e40:	88fa      	ldrh	r2, [r7, #6]
 8007e42:	4293      	cmp	r3, r2
 8007e44:	da04      	bge.n	8007e50 <code+0x56>
        code |= BOTTOM;
 8007e46:	2204      	movs	r2, #4
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	75fb      	strb	r3, [r7, #23]
 8007e4e:	e008      	b.n	8007e62 <code+0x68>
    } else if (y0 > window.y1) {
 8007e50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007e54:	897a      	ldrh	r2, [r7, #10]
 8007e56:	4293      	cmp	r3, r2
 8007e58:	dd03      	ble.n	8007e62 <code+0x68>
        code |= TOP;
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	7dfb      	ldrb	r3, [r7, #23]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8007e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3718      	adds	r7, #24
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bc90      	pop	{r4, r7}
 8007e6c:	4770      	bx	lr

08007e6e <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b088      	sub	sp, #32
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	60f8      	str	r0, [r7, #12]
 8007e76:	60b9      	str	r1, [r7, #8]
 8007e78:	607a      	str	r2, [r7, #4]
 8007e7a:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007e88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007e8c:	cb0c      	ldmia	r3, {r2, r3}
 8007e8e:	f7ff ffb4 	bl	8007dfa <code>
 8007e92:	4603      	mov	r3, r0
 8007e94:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f9b3 0000 	ldrsh.w	r0, [r3]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ea6:	cb0c      	ldmia	r3, {r2, r3}
 8007ea8:	f7ff ffa7 	bl	8007dfa <code>
 8007eac:	4603      	mov	r3, r0
 8007eae:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8007eb4:	7ffa      	ldrb	r2, [r7, #31]
 8007eb6:	7fbb      	ldrb	r3, [r7, #30]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d102      	bne.n	8007ec6 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	777b      	strb	r3, [r7, #29]
            break;
 8007ec4:	e0e9      	b.n	800809a <clip_line+0x22c>
        } else if (code0 & code1) {
 8007ec6:	7ffa      	ldrb	r2, [r7, #31]
 8007ec8:	7fbb      	ldrb	r3, [r7, #30]
 8007eca:	4013      	ands	r3, r2
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f040 80e2 	bne.w	8008098 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8007edc:	7ffb      	ldrb	r3, [r7, #31]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <clip_line+0x78>
 8007ee2:	7ffb      	ldrb	r3, [r7, #31]
 8007ee4:	e000      	b.n	8007ee8 <clip_line+0x7a>
 8007ee6:	7fbb      	ldrb	r3, [r7, #30]
 8007ee8:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8007eea:	2208      	movs	r2, #8
 8007eec:	7dfb      	ldrb	r3, [r7, #23]
 8007eee:	4013      	ands	r3, r2
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d024      	beq.n	8007f40 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f04:	4619      	mov	r1, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f0c:	1acb      	subs	r3, r1, r3
 8007f0e:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8007f10:	4608      	mov	r0, r1
 8007f12:	68b9      	ldr	r1, [r7, #8]
 8007f14:	f9b1 1000 	ldrsh.w	r1, [r1]
 8007f18:	1a41      	subs	r1, r0, r1
 8007f1a:	fb03 f101 	mul.w	r1, r3, r1
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f24:	4618      	mov	r0, r3
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f2c:	1ac3      	subs	r3, r0, r3
 8007f2e:	fb91 f3f3 	sdiv	r3, r1, r3
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	4413      	add	r3, r2
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8007f3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f3c:	833b      	strh	r3, [r7, #24]
 8007f3e:	e07f      	b.n	8008040 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8007f40:	2204      	movs	r2, #4
 8007f42:	7dfb      	ldrb	r3, [r7, #23]
 8007f44:	4013      	ands	r3, r2
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d024      	beq.n	8007f96 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f62:	1acb      	subs	r3, r1, r3
 8007f64:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8007f66:	4608      	mov	r0, r1
 8007f68:	68b9      	ldr	r1, [r7, #8]
 8007f6a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8007f6e:	1a41      	subs	r1, r0, r1
 8007f70:	fb03 f101 	mul.w	r1, r3, r1
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f82:	1ac3      	subs	r3, r0, r3
 8007f84:	fb91 f3f3 	sdiv	r3, r1, r3
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	4413      	add	r3, r2
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8007f90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f92:	833b      	strh	r3, [r7, #24]
 8007f94:	e054      	b.n	8008040 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8007f96:	2202      	movs	r2, #2
 8007f98:	7dfb      	ldrb	r3, [r7, #23]
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d024      	beq.n	8007fec <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fb8:	1acb      	subs	r3, r1, r3
 8007fba:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8007fbc:	4608      	mov	r0, r1
 8007fbe:	68f9      	ldr	r1, [r7, #12]
 8007fc0:	f9b1 1000 	ldrsh.w	r1, [r1]
 8007fc4:	1a41      	subs	r1, r0, r1
 8007fc6:	fb03 f101 	mul.w	r1, r3, r1
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fd8:	1ac3      	subs	r3, r0, r3
 8007fda:	fb91 f3f3 	sdiv	r3, r1, r3
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	4413      	add	r3, r2
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8007fe6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007fe8:	837b      	strh	r3, [r7, #26]
 8007fea:	e029      	b.n	8008040 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8007fec:	2201      	movs	r2, #1
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d023      	beq.n	8008040 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008006:	4619      	mov	r1, r3
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800800e:	1acb      	subs	r3, r1, r3
 8008010:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8008012:	4608      	mov	r0, r1
 8008014:	68f9      	ldr	r1, [r7, #12]
 8008016:	f9b1 1000 	ldrsh.w	r1, [r1]
 800801a:	1a41      	subs	r1, r0, r1
 800801c:	fb03 f101 	mul.w	r1, r3, r1
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008026:	4618      	mov	r0, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800802e:	1ac3      	subs	r3, r0, r3
 8008030:	fb91 f3f3 	sdiv	r3, r1, r3
 8008034:	b29b      	uxth	r3, r3
 8008036:	4413      	add	r3, r2
 8008038:	b29b      	uxth	r3, r3
 800803a:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 800803c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800803e:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8008040:	7dfa      	ldrb	r2, [r7, #23]
 8008042:	7ffb      	ldrb	r3, [r7, #31]
 8008044:	429a      	cmp	r2, r3
 8008046:	d113      	bne.n	8008070 <clip_line+0x202>
                *x0 = x;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	8b7a      	ldrh	r2, [r7, #26]
 800804c:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	8b3a      	ldrh	r2, [r7, #24]
 8008052:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f9b3 0000 	ldrsh.w	r0, [r3]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8008060:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008064:	cb0c      	ldmia	r3, {r2, r3}
 8008066:	f7ff fec8 	bl	8007dfa <code>
 800806a:	4603      	mov	r3, r0
 800806c:	77fb      	strb	r3, [r7, #31]
 800806e:	e721      	b.n	8007eb4 <clip_line+0x46>
            } else {
                *x1 = x;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	8b7a      	ldrh	r2, [r7, #26]
 8008074:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	8b3a      	ldrh	r2, [r7, #24]
 800807a:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	f9b3 1000 	ldrsh.w	r1, [r3]
 8008088:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800808c:	cb0c      	ldmia	r3, {r2, r3}
 800808e:	f7ff feb4 	bl	8007dfa <code>
 8008092:	4603      	mov	r3, r0
 8008094:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8008096:	e70d      	b.n	8007eb4 <clip_line+0x46>
            break;
 8008098:	bf00      	nop
            }
        }
    }

    return accept;
 800809a:	7f7b      	ldrb	r3, [r7, #29]
 800809c:	4618      	mov	r0, r3
 800809e:	3720      	adds	r7, #32
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	3306      	adds	r3, #6
 80080b4:	2208      	movs	r2, #8
 80080b6:	4619      	mov	r1, r3
 80080b8:	f000 ff74 	bl	8008fa4 <memcpy>
    meta->width = font[FONTX_WIDTH];
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	7b9a      	ldrb	r2, [r3, #14]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	7bda      	ldrb	r2, [r3, #15]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	7c1a      	ldrb	r2, [r3, #16]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	72da      	strb	r2, [r3, #11]

    return 0;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 80080de:	b580      	push	{r7, lr}
 80080e0:	b08e      	sub	sp, #56	; 0x38
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	60f8      	str	r0, [r7, #12]
 80080e6:	60b9      	str	r1, [r7, #8]
 80080e8:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 80080ea:	f107 0314 	add.w	r3, r7, #20
 80080ee:	6879      	ldr	r1, [r7, #4]
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff ffd7 	bl	80080a4 <fontx_meta>
 80080f6:	4603      	mov	r3, r0
 80080f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 80080fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008100:	2b00      	cmp	r3, #0
 8008102:	d002      	beq.n	800810a <fontx_glyph+0x2c>
        return status;
 8008104:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008108:	e077      	b.n	80081fa <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 800810a:	7f7a      	ldrb	r2, [r7, #29]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8008110:	7fba      	ldrb	r2, [r7, #30]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8008116:	7f7b      	ldrb	r3, [r7, #29]
 8008118:	3307      	adds	r3, #7
 800811a:	2b00      	cmp	r3, #0
 800811c:	da00      	bge.n	8008120 <fontx_glyph+0x42>
 800811e:	3307      	adds	r3, #7
 8008120:	10db      	asrs	r3, r3, #3
 8008122:	b2da      	uxtb	r2, r3
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	78da      	ldrb	r2, [r3, #3]
 800812c:	7fbb      	ldrb	r3, [r7, #30]
 800812e:	fb12 f303 	smulbb	r3, r2, r3
 8008132:	b2da      	uxtb	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8008138:	7ffb      	ldrb	r3, [r7, #31]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10f      	bne.n	800815e <fontx_glyph+0x80>
        if (code < 0x100) {
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	2bff      	cmp	r3, #255	; 0xff
 8008142:	d859      	bhi.n	80081f8 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	789b      	ldrb	r3, [r3, #2]
 8008148:	461a      	mov	r2, r3
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	fb02 f303 	mul.w	r3, r2, r3
 8008150:	3311      	adds	r3, #17
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	441a      	add	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	e04d      	b.n	80081fa <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	3312      	adds	r3, #18
 8008162:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 8008164:	2300      	movs	r3, #0
 8008166:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	3311      	adds	r3, #17
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 8008170:	e03d      	b.n	80081ee <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8008172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817a:	3301      	adds	r3, #1
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	021b      	lsls	r3, r3, #8
 8008180:	4413      	add	r3, r2
 8008182:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8008184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008186:	3302      	adds	r3, #2
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	461a      	mov	r2, r3
 800818c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818e:	3303      	adds	r3, #3
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	021b      	lsls	r3, r3, #8
 8008194:	4413      	add	r3, r2
 8008196:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819c:	429a      	cmp	r2, r3
 800819e:	d31c      	bcc.n	80081da <fontx_glyph+0xfc>
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	6a3b      	ldr	r3, [r7, #32]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d818      	bhi.n	80081da <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081b0:	4413      	add	r3, r2
 80081b2:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	3311      	adds	r3, #17
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	461a      	mov	r2, r3
                    nc * glyph->size
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	789b      	ldrb	r3, [r3, #2]
 80081c2:	4619      	mov	r1, r3
 80081c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c6:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 80081ca:	4413      	add	r3, r2
 80081cc:	3312      	adds	r3, #18
                glyph->buffer = &font[
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	441a      	add	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	e00f      	b.n	80081fa <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 80081da:	6a3a      	ldr	r2, [r7, #32]
 80081dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081de:	1ad2      	subs	r2, r2, r3
 80081e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e2:	4413      	add	r3, r2
 80081e4:	3301      	adds	r3, #1
 80081e6:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 80081e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ea:	3304      	adds	r3, #4
 80081ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	1e5a      	subs	r2, r3, #1
 80081f2:	633a      	str	r2, [r7, #48]	; 0x30
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1bc      	bne.n	8008172 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 80081f8:	2301      	movs	r3, #1
 80081fa:	4618      	mov	r0, r3
 80081fc:	3738      	adds	r7, #56	; 0x38
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8008202:	b480      	push	{r7}
 8008204:	b083      	sub	sp, #12
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	6039      	str	r1, [r7, #0]
    if (a > b) {
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	429a      	cmp	r2, r3
 8008212:	dd01      	ble.n	8008218 <min+0x16>
        return b;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	e000      	b.n	800821a <min+0x18>
    };
    return a;
 8008218:	687b      	ldr	r3, [r7, #4]
}
 800821a:	4618      	mov	r0, r3
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
	...

08008228 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	4603      	mov	r3, r0
 8008230:	80fb      	strh	r3, [r7, #6]
 8008232:	460b      	mov	r3, r1
 8008234:	80bb      	strh	r3, [r7, #4]
 8008236:	4613      	mov	r3, r2
 8008238:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 800823a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800823e:	4a12      	ldr	r2, [pc, #72]	; (8008288 <hagl_put_pixel+0x60>)
 8008240:	8812      	ldrh	r2, [r2, #0]
 8008242:	4293      	cmp	r3, r2
 8008244:	db1a      	blt.n	800827c <hagl_put_pixel+0x54>
 8008246:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800824a:	4a0f      	ldr	r2, [pc, #60]	; (8008288 <hagl_put_pixel+0x60>)
 800824c:	8852      	ldrh	r2, [r2, #2]
 800824e:	4293      	cmp	r3, r2
 8008250:	db14      	blt.n	800827c <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8008252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008256:	4a0c      	ldr	r2, [pc, #48]	; (8008288 <hagl_put_pixel+0x60>)
 8008258:	8892      	ldrh	r2, [r2, #4]
 800825a:	4293      	cmp	r3, r2
 800825c:	dc10      	bgt.n	8008280 <hagl_put_pixel+0x58>
 800825e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008262:	4a09      	ldr	r2, [pc, #36]	; (8008288 <hagl_put_pixel+0x60>)
 8008264:	88d2      	ldrh	r2, [r2, #6]
 8008266:	4293      	cmp	r3, r2
 8008268:	dc0a      	bgt.n	8008280 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 800826a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800826e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8008272:	887a      	ldrh	r2, [r7, #2]
 8008274:	4618      	mov	r0, r3
 8008276:	f7f9 f863 	bl	8001340 <lcd_put_pixel>
 800827a:	e002      	b.n	8008282 <hagl_put_pixel+0x5a>
        return;
 800827c:	bf00      	nop
 800827e:	e000      	b.n	8008282 <hagl_put_pixel+0x5a>
        return;
 8008280:	bf00      	nop
}
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	2000000c 	.word	0x2000000c

0800828c <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 800828c:	b590      	push	{r4, r7, lr}
 800828e:	b085      	sub	sp, #20
 8008290:	af02      	add	r7, sp, #8
 8008292:	4604      	mov	r4, r0
 8008294:	4608      	mov	r0, r1
 8008296:	4611      	mov	r1, r2
 8008298:	461a      	mov	r2, r3
 800829a:	4623      	mov	r3, r4
 800829c:	80fb      	strh	r3, [r7, #6]
 800829e:	4603      	mov	r3, r0
 80082a0:	80bb      	strh	r3, [r7, #4]
 80082a2:	460b      	mov	r3, r1
 80082a4:	807b      	strh	r3, [r7, #2]
 80082a6:	4613      	mov	r3, r2
 80082a8:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 80082aa:	88fa      	ldrh	r2, [r7, #6]
 80082ac:	887b      	ldrh	r3, [r7, #2]
 80082ae:	4413      	add	r3, r2
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	b21a      	sxth	r2, r3
 80082b4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80082b8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80082bc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80082c0:	883b      	ldrh	r3, [r7, #0]
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	4623      	mov	r3, r4
 80082c6:	f000 f827 	bl	8008318 <hagl_draw_line>
#endif
}
 80082ca:	bf00      	nop
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd90      	pop	{r4, r7, pc}

080082d2 <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 80082d2:	b590      	push	{r4, r7, lr}
 80082d4:	b085      	sub	sp, #20
 80082d6:	af02      	add	r7, sp, #8
 80082d8:	4604      	mov	r4, r0
 80082da:	4608      	mov	r0, r1
 80082dc:	4611      	mov	r1, r2
 80082de:	461a      	mov	r2, r3
 80082e0:	4623      	mov	r3, r4
 80082e2:	80fb      	strh	r3, [r7, #6]
 80082e4:	4603      	mov	r3, r0
 80082e6:	80bb      	strh	r3, [r7, #4]
 80082e8:	460b      	mov	r3, r1
 80082ea:	807b      	strh	r3, [r7, #2]
 80082ec:	4613      	mov	r3, r2
 80082ee:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 80082f0:	88ba      	ldrh	r2, [r7, #4]
 80082f2:	887b      	ldrh	r3, [r7, #2]
 80082f4:	4413      	add	r3, r2
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	b21c      	sxth	r4, r3
 80082fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80082fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8008302:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8008306:	883b      	ldrh	r3, [r7, #0]
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	4623      	mov	r3, r4
 800830c:	f000 f804 	bl	8008318 <hagl_draw_line>
#endif
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	bd90      	pop	{r4, r7, pc}

08008318 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8008318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800831a:	b089      	sub	sp, #36	; 0x24
 800831c:	af02      	add	r7, sp, #8
 800831e:	4604      	mov	r4, r0
 8008320:	4608      	mov	r0, r1
 8008322:	4611      	mov	r1, r2
 8008324:	461a      	mov	r2, r3
 8008326:	4623      	mov	r3, r4
 8008328:	80fb      	strh	r3, [r7, #6]
 800832a:	4603      	mov	r3, r0
 800832c:	80bb      	strh	r3, [r7, #4]
 800832e:	460b      	mov	r3, r1
 8008330:	807b      	strh	r3, [r7, #2]
 8008332:	4613      	mov	r3, r2
 8008334:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8008336:	463b      	mov	r3, r7
 8008338:	1cba      	adds	r2, r7, #2
 800833a:	1d3d      	adds	r5, r7, #4
 800833c:	1dbc      	adds	r4, r7, #6
 800833e:	494a      	ldr	r1, [pc, #296]	; (8008468 <hagl_draw_line+0x150>)
 8008340:	466e      	mov	r6, sp
 8008342:	c903      	ldmia	r1, {r0, r1}
 8008344:	e886 0003 	stmia.w	r6, {r0, r1}
 8008348:	4629      	mov	r1, r5
 800834a:	4620      	mov	r0, r4
 800834c:	f7ff fd8f 	bl	8007e6e <clip_line>
 8008350:	4603      	mov	r3, r0
 8008352:	f083 0301 	eor.w	r3, r3, #1
 8008356:	b2db      	uxtb	r3, r3
 8008358:	2b00      	cmp	r3, #0
 800835a:	d17e      	bne.n	800845a <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 800835c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008360:	461a      	mov	r2, r3
 8008362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	2b00      	cmp	r3, #0
 800836a:	bfb8      	it	lt
 800836c:	425b      	neglt	r3, r3
 800836e:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8008370:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008374:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008378:	429a      	cmp	r2, r3
 800837a:	da01      	bge.n	8008380 <hagl_draw_line+0x68>
 800837c:	2301      	movs	r3, #1
 800837e:	e001      	b.n	8008384 <hagl_draw_line+0x6c>
 8008380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008384:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8008386:	f9b7 3000 	ldrsh.w	r3, [r7]
 800838a:	461a      	mov	r2, r3
 800838c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	2b00      	cmp	r3, #0
 8008394:	bfb8      	it	lt
 8008396:	425b      	neglt	r3, r3
 8008398:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 800839a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800839e:	f9b7 3000 	ldrsh.w	r3, [r7]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	da01      	bge.n	80083aa <hagl_draw_line+0x92>
 80083a6:	2301      	movs	r3, #1
 80083a8:	e001      	b.n	80083ae <hagl_draw_line+0x96>
 80083aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083ae:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 80083b0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80083b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	dd06      	ble.n	80083ca <hagl_draw_line+0xb2>
 80083bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80083c0:	0fda      	lsrs	r2, r3, #31
 80083c2:	4413      	add	r3, r2
 80083c4:	105b      	asrs	r3, r3, #1
 80083c6:	b21b      	sxth	r3, r3
 80083c8:	e006      	b.n	80083d8 <hagl_draw_line+0xc0>
 80083ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80083ce:	0fda      	lsrs	r2, r3, #31
 80083d0:	4413      	add	r3, r2
 80083d2:	105b      	asrs	r3, r3, #1
 80083d4:	425b      	negs	r3, r3
 80083d6:	b21b      	sxth	r3, r3
 80083d8:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 80083da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80083de:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80083e2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7ff ff1f 	bl	8008228 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 80083ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80083ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d105      	bne.n	8008402 <hagl_draw_line+0xea>
 80083f6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80083fa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d02d      	beq.n	800845e <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8008402:	8afb      	ldrh	r3, [r7, #22]
 8008404:	005b      	lsls	r3, r3, #1
 8008406:	b29b      	uxth	r3, r3
 8008408:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 800840a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800840e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008412:	425b      	negs	r3, r3
 8008414:	429a      	cmp	r2, r3
 8008416:	dd0c      	ble.n	8008432 <hagl_draw_line+0x11a>
            err -= dy;
 8008418:	8afa      	ldrh	r2, [r7, #22]
 800841a:	8a3b      	ldrh	r3, [r7, #16]
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	b29b      	uxth	r3, r3
 8008420:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8008422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008426:	b29a      	uxth	r2, r3
 8008428:	8a7b      	ldrh	r3, [r7, #18]
 800842a:	4413      	add	r3, r2
 800842c:	b29b      	uxth	r3, r3
 800842e:	b21b      	sxth	r3, r3
 8008430:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8008432:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008436:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800843a:	429a      	cmp	r2, r3
 800843c:	dacd      	bge.n	80083da <hagl_draw_line+0xc2>
            err += dx;
 800843e:	8afa      	ldrh	r2, [r7, #22]
 8008440:	8abb      	ldrh	r3, [r7, #20]
 8008442:	4413      	add	r3, r2
 8008444:	b29b      	uxth	r3, r3
 8008446:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8008448:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800844c:	b29a      	uxth	r2, r3
 800844e:	89fb      	ldrh	r3, [r7, #14]
 8008450:	4413      	add	r3, r2
 8008452:	b29b      	uxth	r3, r3
 8008454:	b21b      	sxth	r3, r3
 8008456:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8008458:	e7bf      	b.n	80083da <hagl_draw_line+0xc2>
        return;
 800845a:	bf00      	nop
 800845c:	e000      	b.n	8008460 <hagl_draw_line+0x148>
            break;
 800845e:	bf00      	nop
        }
    }
}
 8008460:	371c      	adds	r7, #28
 8008462:	46bd      	mov	sp, r7
 8008464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008466:	bf00      	nop
 8008468:	2000000c 	.word	0x2000000c

0800846c <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 800846c:	b590      	push	{r4, r7, lr}
 800846e:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800847a:	f844 0c24 	str.w	r0, [r4, #-36]
 800847e:	460c      	mov	r4, r1
 8008480:	4610      	mov	r0, r2
 8008482:	4619      	mov	r1, r3
 8008484:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008488:	4622      	mov	r2, r4
 800848a:	f823 2c26 	strh.w	r2, [r3, #-38]
 800848e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008492:	4602      	mov	r2, r0
 8008494:	f823 2c28 	strh.w	r2, [r3, #-40]
 8008498:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800849c:	460a      	mov	r2, r1
 800849e:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 80084a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80084a6:	4619      	mov	r1, r3
 80084a8:	f107 0310 	add.w	r3, r7, #16
 80084ac:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80084b0:	6812      	ldr	r2, [r2, #0]
 80084b2:	f851 1c24 	ldr.w	r1, [r1, #-36]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7ff fe11 	bl	80080de <fontx_glyph>
 80084bc:	4603      	mov	r3, r0
 80084be:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80084c2:	f102 0209 	add.w	r2, r2, #9
 80084c6:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 80084c8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80084cc:	f103 0309 	add.w	r3, r3, #9
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d001      	beq.n	80084da <hagl_put_char+0x6e>
        return 0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	e0c0      	b.n	800865c <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 80084da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80084de:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80084e8:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 80084ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80084f0:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80084fa:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 80084fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008502:	2210      	movs	r2, #16
 8008504:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8008508:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800850c:	3a08      	subs	r2, #8
 800850e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008512:	3b18      	subs	r3, #24
 8008514:	4611      	mov	r1, r2
 8008516:	4618      	mov	r0, r3
 8008518:	f7ff fc4b 	bl	8007db2 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 800851c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008520:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8008524:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008528:	f102 020c 	add.w	r2, r2, #12
 800852c:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 800852e:	2300      	movs	r3, #0
 8008530:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008534:	f102 020b 	add.w	r2, r2, #11
 8008538:	7013      	strb	r3, [r2, #0]
 800853a:	e071      	b.n	8008620 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 800853c:	2300      	movs	r3, #0
 800853e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008542:	f102 020a 	add.w	r2, r2, #10
 8008546:	7013      	strb	r3, [r2, #0]
 8008548:	e047      	b.n	80085da <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 800854a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800854e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	b25a      	sxtb	r2, r3
 8008556:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800855a:	f103 030a 	add.w	r3, r3, #10
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	f003 0307 	and.w	r3, r3, #7
 8008564:	2180      	movs	r1, #128	; 0x80
 8008566:	fa41 f303 	asr.w	r3, r1, r3
 800856a:	b25b      	sxtb	r3, r3
 800856c:	4013      	ands	r3, r2
 800856e:	b25b      	sxtb	r3, r3
 8008570:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008574:	f102 0208 	add.w	r2, r2, #8
 8008578:	7013      	strb	r3, [r2, #0]
            if (set) {
 800857a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800857e:	f103 0308 	add.w	r3, r3, #8
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d010      	beq.n	80085aa <hagl_put_char+0x13e>
                *(ptr++) = color;
 8008588:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800858c:	f103 030c 	add.w	r3, r3, #12
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	1c9a      	adds	r2, r3, #2
 8008594:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8008598:	f101 010c 	add.w	r1, r1, #12
 800859c:	600a      	str	r2, [r1, #0]
 800859e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80085a2:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 80085a6:	801a      	strh	r2, [r3, #0]
 80085a8:	e00c      	b.n	80085c4 <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 80085aa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80085ae:	f103 030c 	add.w	r3, r3, #12
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	1c9a      	adds	r2, r3, #2
 80085b6:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80085ba:	f101 010c 	add.w	r1, r1, #12
 80085be:	600a      	str	r2, [r1, #0]
 80085c0:	2200      	movs	r2, #0
 80085c2:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 80085c4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80085c8:	f103 030a 	add.w	r3, r3, #10
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	3301      	adds	r3, #1
 80085d0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80085d4:	f102 020a 	add.w	r2, r2, #10
 80085d8:	7013      	strb	r3, [r2, #0]
 80085da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085de:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80085e2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80085e6:	f102 020a 	add.w	r2, r2, #10
 80085ea:	7812      	ldrb	r2, [r2, #0]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d3ac      	bcc.n	800854a <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 80085f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085f4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80085f8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80085fc:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8008600:	4413      	add	r3, r2
 8008602:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008606:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 800860a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800860e:	f103 030b 	add.w	r3, r3, #11
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	3301      	adds	r3, #1
 8008616:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800861a:	f102 020b 	add.w	r2, r2, #11
 800861e:	7013      	strb	r3, [r2, #0]
 8008620:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008624:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8008628:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800862c:	f102 020b 	add.w	r2, r2, #11
 8008630:	7812      	ldrb	r2, [r2, #0]
 8008632:	429a      	cmp	r2, r3
 8008634:	d382      	bcc.n	800853c <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 8008636:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800863a:	3b18      	subs	r3, #24
 800863c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008640:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8008644:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008648:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 800864c:	461a      	mov	r2, r3
 800864e:	f000 f85a 	bl	8008706 <hagl_blit>

    return bitmap.width;
 8008652:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008656:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800865a:	b2db      	uxtb	r3, r3
}
 800865c:	4618      	mov	r0, r3
 800865e:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8008662:	3714      	adds	r7, #20
 8008664:	46bd      	mov	sp, r7
 8008666:	bd90      	pop	{r4, r7, pc}

08008668 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b08c      	sub	sp, #48	; 0x30
 800866c:	af02      	add	r7, sp, #8
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	4608      	mov	r0, r1
 8008672:	4611      	mov	r1, r2
 8008674:	461a      	mov	r2, r3
 8008676:	4603      	mov	r3, r0
 8008678:	817b      	strh	r3, [r7, #10]
 800867a:	460b      	mov	r3, r1
 800867c:	813b      	strh	r3, [r7, #8]
 800867e:	4613      	mov	r3, r2
 8008680:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8008682:	897b      	ldrh	r3, [r7, #10]
 8008684:	84fb      	strh	r3, [r7, #38]	; 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8008686:	f107 0314 	add.w	r3, r7, #20
 800868a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800868c:	4618      	mov	r0, r3
 800868e:	f7ff fd09 	bl	80080a4 <fontx_meta>
 8008692:	4603      	mov	r3, r0
 8008694:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if (0 != status) {
 8008698:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <hagl_put_text+0x3c>
        return 0;
 80086a0:	2300      	movs	r3, #0
 80086a2:	e02c      	b.n	80086fe <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	1d1a      	adds	r2, r3, #4
 80086a8:	60fa      	str	r2, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 80086ae:	6a3b      	ldr	r3, [r7, #32]
 80086b0:	2b0d      	cmp	r3, #13
 80086b2:	d002      	beq.n	80086ba <hagl_put_text+0x52>
 80086b4:	6a3b      	ldr	r3, [r7, #32]
 80086b6:	2b0a      	cmp	r3, #10
 80086b8:	d108      	bne.n	80086cc <hagl_put_text+0x64>
            x0 = 0;
 80086ba:	2300      	movs	r3, #0
 80086bc:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 80086be:	7fbb      	ldrb	r3, [r7, #30]
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	893b      	ldrh	r3, [r7, #8]
 80086c4:	4413      	add	r3, r2
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	813b      	strh	r3, [r7, #8]
 80086ca:	e010      	b.n	80086ee <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 80086cc:	88f8      	ldrh	r0, [r7, #6]
 80086ce:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80086d2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80086d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	4603      	mov	r3, r0
 80086dc:	6a38      	ldr	r0, [r7, #32]
 80086de:	f7ff fec5 	bl	800846c <hagl_put_char>
 80086e2:	4603      	mov	r3, r0
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	897b      	ldrh	r3, [r7, #10]
 80086e8:	4413      	add	r3, r2
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1d6      	bne.n	80086a4 <hagl_put_text+0x3c>

    return x0 - original;
 80086f6:	897a      	ldrh	r2, [r7, #10]
 80086f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	b29b      	uxth	r3, r3
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3728      	adds	r7, #40	; 0x28
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8008706:	b580      	push	{r7, lr}
 8008708:	b086      	sub	sp, #24
 800870a:	af00      	add	r7, sp, #0
 800870c:	4603      	mov	r3, r0
 800870e:	603a      	str	r2, [r7, #0]
 8008710:	80fb      	strh	r3, [r7, #6]
 8008712:	460b      	mov	r3, r1
 8008714:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 800871c:	2300      	movs	r3, #0
 800871e:	827b      	strh	r3, [r7, #18]
 8008720:	e020      	b.n	8008764 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 8008722:	2300      	movs	r3, #0
 8008724:	823b      	strh	r3, [r7, #16]
 8008726:	e015      	b.n	8008754 <hagl_blit+0x4e>
            color = *(ptr++);
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	1c9a      	adds	r2, r3, #2
 800872c:	617a      	str	r2, [r7, #20]
 800872e:	881b      	ldrh	r3, [r3, #0]
 8008730:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8008732:	88fa      	ldrh	r2, [r7, #6]
 8008734:	8a3b      	ldrh	r3, [r7, #16]
 8008736:	4413      	add	r3, r2
 8008738:	b29b      	uxth	r3, r3
 800873a:	b218      	sxth	r0, r3
 800873c:	88ba      	ldrh	r2, [r7, #4]
 800873e:	8a7b      	ldrh	r3, [r7, #18]
 8008740:	4413      	add	r3, r2
 8008742:	b29b      	uxth	r3, r3
 8008744:	b21b      	sxth	r3, r3
 8008746:	89fa      	ldrh	r2, [r7, #14]
 8008748:	4619      	mov	r1, r3
 800874a:	f7ff fd6d 	bl	8008228 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 800874e:	8a3b      	ldrh	r3, [r7, #16]
 8008750:	3301      	adds	r3, #1
 8008752:	823b      	strh	r3, [r7, #16]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	881b      	ldrh	r3, [r3, #0]
 8008758:	8a3a      	ldrh	r2, [r7, #16]
 800875a:	429a      	cmp	r2, r3
 800875c:	d3e4      	bcc.n	8008728 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 800875e:	8a7b      	ldrh	r3, [r7, #18]
 8008760:	3301      	adds	r3, #1
 8008762:	827b      	strh	r3, [r7, #18]
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	885b      	ldrh	r3, [r3, #2]
 8008768:	8a7a      	ldrh	r2, [r7, #18]
 800876a:	429a      	cmp	r2, r3
 800876c:	d3d9      	bcc.n	8008722 <hagl_blit+0x1c>
        }
    }
#endif
};
 800876e:	bf00      	nop
 8008770:	bf00      	nop
 8008772:	3718      	adds	r7, #24
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <hagl_draw_rounded_rectangle>:
void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
    hagl_fill_polygon(3, vertices, color);
}

void hagl_draw_rounded_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t r, color_t color) {
 8008778:	b590      	push	{r4, r7, lr}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	4604      	mov	r4, r0
 8008780:	4608      	mov	r0, r1
 8008782:	4611      	mov	r1, r2
 8008784:	461a      	mov	r2, r3
 8008786:	4623      	mov	r3, r4
 8008788:	80fb      	strh	r3, [r7, #6]
 800878a:	4603      	mov	r3, r0
 800878c:	80bb      	strh	r3, [r7, #4]
 800878e:	460b      	mov	r3, r1
 8008790:	807b      	strh	r3, [r7, #2]
 8008792:	4613      	mov	r3, r2
 8008794:	803b      	strh	r3, [r7, #0]

    uint16_t width, height;
    int16_t x, y, d;

    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8008796:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800879a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800879e:	429a      	cmp	r2, r3
 80087a0:	dd0e      	ble.n	80087c0 <hagl_draw_rounded_rectangle+0x48>
        x0 = x0 + x1;
 80087a2:	88fa      	ldrh	r2, [r7, #6]
 80087a4:	887b      	ldrh	r3, [r7, #2]
 80087a6:	4413      	add	r3, r2
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 80087ac:	88fa      	ldrh	r2, [r7, #6]
 80087ae:	887b      	ldrh	r3, [r7, #2]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 80087b6:	88fa      	ldrh	r2, [r7, #6]
 80087b8:	887b      	ldrh	r3, [r7, #2]
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	b29b      	uxth	r3, r3
 80087be:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 80087c0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80087c4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	dd0e      	ble.n	80087ea <hagl_draw_rounded_rectangle+0x72>
        y0 = y0 + y1;
 80087cc:	88ba      	ldrh	r2, [r7, #4]
 80087ce:	883b      	ldrh	r3, [r7, #0]
 80087d0:	4413      	add	r3, r2
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 80087d6:	88ba      	ldrh	r2, [r7, #4]
 80087d8:	883b      	ldrh	r3, [r7, #0]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	b29b      	uxth	r3, r3
 80087de:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80087e0:	88ba      	ldrh	r2, [r7, #4]
 80087e2:	883b      	ldrh	r3, [r7, #0]
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80087ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80087ee:	4a52      	ldr	r2, [pc, #328]	; (8008938 <hagl_draw_rounded_rectangle+0x1c0>)
 80087f0:	8812      	ldrh	r2, [r2, #0]
 80087f2:	4293      	cmp	r3, r2
 80087f4:	f2c0 8153 	blt.w	8008a9e <hagl_draw_rounded_rectangle+0x326>
 80087f8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80087fc:	4a4e      	ldr	r2, [pc, #312]	; (8008938 <hagl_draw_rounded_rectangle+0x1c0>)
 80087fe:	8852      	ldrh	r2, [r2, #2]
 8008800:	4293      	cmp	r3, r2
 8008802:	f2c0 814c 	blt.w	8008a9e <hagl_draw_rounded_rectangle+0x326>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8008806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800880a:	4a4b      	ldr	r2, [pc, #300]	; (8008938 <hagl_draw_rounded_rectangle+0x1c0>)
 800880c:	8892      	ldrh	r2, [r2, #4]
 800880e:	4293      	cmp	r3, r2
 8008810:	f300 8147 	bgt.w	8008aa2 <hagl_draw_rounded_rectangle+0x32a>
 8008814:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008818:	4a47      	ldr	r2, [pc, #284]	; (8008938 <hagl_draw_rounded_rectangle+0x1c0>)
 800881a:	88d2      	ldrh	r2, [r2, #6]
 800881c:	4293      	cmp	r3, r2
 800881e:	f300 8140 	bgt.w	8008aa2 <hagl_draw_rounded_rectangle+0x32a>
        return;
    }

    /* Max radius is half of shortest edge. */
    width = x1 - x0 + 1;
 8008822:	887a      	ldrh	r2, [r7, #2]
 8008824:	88fb      	ldrh	r3, [r7, #6]
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	b29b      	uxth	r3, r3
 800882a:	3301      	adds	r3, #1
 800882c:	823b      	strh	r3, [r7, #16]
    height = y1 - y0 + 1;
 800882e:	883a      	ldrh	r2, [r7, #0]
 8008830:	88bb      	ldrh	r3, [r7, #4]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	b29b      	uxth	r3, r3
 8008836:	3301      	adds	r3, #1
 8008838:	81fb      	strh	r3, [r7, #14]
    r = min(r, min(width / 2, height / 2));
 800883a:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 800883e:	8a3b      	ldrh	r3, [r7, #16]
 8008840:	085b      	lsrs	r3, r3, #1
 8008842:	b29b      	uxth	r3, r3
 8008844:	461a      	mov	r2, r3
 8008846:	89fb      	ldrh	r3, [r7, #14]
 8008848:	085b      	lsrs	r3, r3, #1
 800884a:	b29b      	uxth	r3, r3
 800884c:	4619      	mov	r1, r3
 800884e:	4610      	mov	r0, r2
 8008850:	f7ff fcd7 	bl	8008202 <min>
 8008854:	4603      	mov	r3, r0
 8008856:	4619      	mov	r1, r3
 8008858:	4620      	mov	r0, r4
 800885a:	f7ff fcd2 	bl	8008202 <min>
 800885e:	4603      	mov	r3, r0
 8008860:	853b      	strh	r3, [r7, #40]	; 0x28

    hagl_draw_hline(x0 + r, y0, width - 2 * r, color);
 8008862:	88fa      	ldrh	r2, [r7, #6]
 8008864:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008866:	4413      	add	r3, r2
 8008868:	b29b      	uxth	r3, r3
 800886a:	b218      	sxth	r0, r3
 800886c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800886e:	005b      	lsls	r3, r3, #1
 8008870:	b29b      	uxth	r3, r3
 8008872:	8a3a      	ldrh	r2, [r7, #16]
 8008874:	1ad3      	subs	r3, r2, r3
 8008876:	b29a      	uxth	r2, r3
 8008878:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800887a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800887e:	f7ff fd05 	bl	800828c <hagl_draw_hline>
    hagl_draw_hline(x0 + r, y1, width - 2 * r, color);
 8008882:	88fa      	ldrh	r2, [r7, #6]
 8008884:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008886:	4413      	add	r3, r2
 8008888:	b29b      	uxth	r3, r3
 800888a:	b218      	sxth	r0, r3
 800888c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800888e:	005b      	lsls	r3, r3, #1
 8008890:	b29b      	uxth	r3, r3
 8008892:	8a3a      	ldrh	r2, [r7, #16]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	b29a      	uxth	r2, r3
 8008898:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800889a:	f9b7 1000 	ldrsh.w	r1, [r7]
 800889e:	f7ff fcf5 	bl	800828c <hagl_draw_hline>
    hagl_draw_vline(x0, y0 + r, height - 2 * r, color);
 80088a2:	88ba      	ldrh	r2, [r7, #4]
 80088a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088a6:	4413      	add	r3, r2
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	b219      	sxth	r1, r3
 80088ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	89fa      	ldrh	r2, [r7, #14]
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80088ba:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80088be:	f7ff fd08 	bl	80082d2 <hagl_draw_vline>
    hagl_draw_vline(x1, y0 + r, height - 2 * r, color);
 80088c2:	88ba      	ldrh	r2, [r7, #4]
 80088c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088c6:	4413      	add	r3, r2
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	b219      	sxth	r1, r3
 80088cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088ce:	005b      	lsls	r3, r3, #1
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	89fa      	ldrh	r2, [r7, #14]
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80088da:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80088de:	f7ff fcf8 	bl	80082d2 <hagl_draw_vline>

    x = 0;
 80088e2:	2300      	movs	r3, #0
 80088e4:	82fb      	strh	r3, [r7, #22]
    y = r;
 80088e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088e8:	82bb      	strh	r3, [r7, #20]
    d = 3 - 2 * r;
 80088ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088ec:	005b      	lsls	r3, r3, #1
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	f1c3 0303 	rsb	r3, r3, #3
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	827b      	strh	r3, [r7, #18]

    while (y >= x) {
 80088f8:	e0c9      	b.n	8008a8e <hagl_draw_rounded_rectangle+0x316>
        x++;
 80088fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80088fe:	b29b      	uxth	r3, r3
 8008900:	3301      	adds	r3, #1
 8008902:	b29b      	uxth	r3, r3
 8008904:	82fb      	strh	r3, [r7, #22]

        if (d > 0) {
 8008906:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800890a:	2b00      	cmp	r3, #0
 800890c:	dd16      	ble.n	800893c <hagl_draw_rounded_rectangle+0x1c4>
            y--;
 800890e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008912:	b29b      	uxth	r3, r3
 8008914:	3b01      	subs	r3, #1
 8008916:	b29b      	uxth	r3, r3
 8008918:	82bb      	strh	r3, [r7, #20]
            d = d + 4 * (x - y) + 10;
 800891a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800891e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	b29b      	uxth	r3, r3
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	b29a      	uxth	r2, r3
 800892a:	8a7b      	ldrh	r3, [r7, #18]
 800892c:	4413      	add	r3, r2
 800892e:	b29b      	uxth	r3, r3
 8008930:	330a      	adds	r3, #10
 8008932:	b29b      	uxth	r3, r3
 8008934:	827b      	strh	r3, [r7, #18]
 8008936:	e00a      	b.n	800894e <hagl_draw_rounded_rectangle+0x1d6>
 8008938:	2000000c 	.word	0x2000000c
        } else {
            d = d + 4 * x + 6;
 800893c:	8afb      	ldrh	r3, [r7, #22]
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	b29a      	uxth	r2, r3
 8008942:	8a7b      	ldrh	r3, [r7, #18]
 8008944:	4413      	add	r3, r2
 8008946:	b29b      	uxth	r3, r3
 8008948:	3306      	adds	r3, #6
 800894a:	b29b      	uxth	r3, r3
 800894c:	827b      	strh	r3, [r7, #18]
        }

        /* Top right */
        hagl_put_pixel(x1 - r + x, y0 + r - y, color);
 800894e:	887a      	ldrh	r2, [r7, #2]
 8008950:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	b29a      	uxth	r2, r3
 8008956:	8afb      	ldrh	r3, [r7, #22]
 8008958:	4413      	add	r3, r2
 800895a:	b29b      	uxth	r3, r3
 800895c:	b218      	sxth	r0, r3
 800895e:	88ba      	ldrh	r2, [r7, #4]
 8008960:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008962:	4413      	add	r3, r2
 8008964:	b29a      	uxth	r2, r3
 8008966:	8abb      	ldrh	r3, [r7, #20]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	b29b      	uxth	r3, r3
 800896c:	b21b      	sxth	r3, r3
 800896e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008970:	4619      	mov	r1, r3
 8008972:	f7ff fc59 	bl	8008228 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y0 + r - x, color);
 8008976:	887a      	ldrh	r2, [r7, #2]
 8008978:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	b29a      	uxth	r2, r3
 800897e:	8abb      	ldrh	r3, [r7, #20]
 8008980:	4413      	add	r3, r2
 8008982:	b29b      	uxth	r3, r3
 8008984:	b218      	sxth	r0, r3
 8008986:	88ba      	ldrh	r2, [r7, #4]
 8008988:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800898a:	4413      	add	r3, r2
 800898c:	b29a      	uxth	r2, r3
 800898e:	8afb      	ldrh	r3, [r7, #22]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	b29b      	uxth	r3, r3
 8008994:	b21b      	sxth	r3, r3
 8008996:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008998:	4619      	mov	r1, r3
 800899a:	f7ff fc45 	bl	8008228 <hagl_put_pixel>

        /* Top left */
        hagl_put_pixel(x0 + r - x, y0 + r - y, color);
 800899e:	88fa      	ldrh	r2, [r7, #6]
 80089a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089a2:	4413      	add	r3, r2
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	8afb      	ldrh	r3, [r7, #22]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	b218      	sxth	r0, r3
 80089ae:	88ba      	ldrh	r2, [r7, #4]
 80089b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089b2:	4413      	add	r3, r2
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	8abb      	ldrh	r3, [r7, #20]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	b21b      	sxth	r3, r3
 80089be:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80089c0:	4619      	mov	r1, r3
 80089c2:	f7ff fc31 	bl	8008228 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y0 + r - x, color);
 80089c6:	88fa      	ldrh	r2, [r7, #6]
 80089c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089ca:	4413      	add	r3, r2
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	8abb      	ldrh	r3, [r7, #20]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	b218      	sxth	r0, r3
 80089d6:	88ba      	ldrh	r2, [r7, #4]
 80089d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089da:	4413      	add	r3, r2
 80089dc:	b29a      	uxth	r2, r3
 80089de:	8afb      	ldrh	r3, [r7, #22]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	b21b      	sxth	r3, r3
 80089e6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80089e8:	4619      	mov	r1, r3
 80089ea:	f7ff fc1d 	bl	8008228 <hagl_put_pixel>

        /* Bottom right */
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 80089ee:	887a      	ldrh	r2, [r7, #2]
 80089f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	8afb      	ldrh	r3, [r7, #22]
 80089f8:	4413      	add	r3, r2
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	b218      	sxth	r0, r3
 80089fe:	883a      	ldrh	r2, [r7, #0]
 8008a00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	8abb      	ldrh	r3, [r7, #20]
 8008a08:	4413      	add	r3, r2
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	b21b      	sxth	r3, r3
 8008a0e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008a10:	4619      	mov	r1, r3
 8008a12:	f7ff fc09 	bl	8008228 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y1 - r + x, color);
 8008a16:	887a      	ldrh	r2, [r7, #2]
 8008a18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	8abb      	ldrh	r3, [r7, #20]
 8008a20:	4413      	add	r3, r2
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	b218      	sxth	r0, r3
 8008a26:	883a      	ldrh	r2, [r7, #0]
 8008a28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	8afb      	ldrh	r3, [r7, #22]
 8008a30:	4413      	add	r3, r2
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	b21b      	sxth	r3, r3
 8008a36:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008a38:	4619      	mov	r1, r3
 8008a3a:	f7ff fbf5 	bl	8008228 <hagl_put_pixel>

        /* Bottom left */
        hagl_put_pixel(x0 + r - x, y1 - r + y, color);
 8008a3e:	88fa      	ldrh	r2, [r7, #6]
 8008a40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a42:	4413      	add	r3, r2
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	8afb      	ldrh	r3, [r7, #22]
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	b218      	sxth	r0, r3
 8008a4e:	883a      	ldrh	r2, [r7, #0]
 8008a50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	8abb      	ldrh	r3, [r7, #20]
 8008a58:	4413      	add	r3, r2
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	b21b      	sxth	r3, r3
 8008a5e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008a60:	4619      	mov	r1, r3
 8008a62:	f7ff fbe1 	bl	8008228 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y1 - r + x, color);
 8008a66:	88fa      	ldrh	r2, [r7, #6]
 8008a68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a6a:	4413      	add	r3, r2
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	8abb      	ldrh	r3, [r7, #20]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	b218      	sxth	r0, r3
 8008a76:	883a      	ldrh	r2, [r7, #0]
 8008a78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	8afb      	ldrh	r3, [r7, #22]
 8008a80:	4413      	add	r3, r2
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	b21b      	sxth	r3, r3
 8008a86:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008a88:	4619      	mov	r1, r3
 8008a8a:	f7ff fbcd 	bl	8008228 <hagl_put_pixel>
    while (y >= x) {
 8008a8e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8008a92:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	f6bf af2f 	bge.w	80088fa <hagl_draw_rounded_rectangle+0x182>
 8008a9c:	e002      	b.n	8008aa4 <hagl_draw_rounded_rectangle+0x32c>
        return;
 8008a9e:	bf00      	nop
 8008aa0:	e000      	b.n	8008aa4 <hagl_draw_rounded_rectangle+0x32c>
        return;
 8008aa2:	bf00      	nop
    }
};
 8008aa4:	371c      	adds	r7, #28
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd90      	pop	{r4, r7, pc}
 8008aaa:	bf00      	nop

08008aac <rgb565>:
#include <stdint.h>

#include "rgb565.h"

uint16_t rgb565(uint8_t r, uint8_t g, uint8_t b)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	71fb      	strb	r3, [r7, #7]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	71bb      	strb	r3, [r7, #6]
 8008aba:	4613      	mov	r3, r2
 8008abc:	717b      	strb	r3, [r7, #5]
    uint16_t rgb;

    rgb = ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
 8008abe:	79fb      	ldrb	r3, [r7, #7]
 8008ac0:	021b      	lsls	r3, r3, #8
 8008ac2:	b21b      	sxth	r3, r3
 8008ac4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008ac8:	f023 0307 	bic.w	r3, r3, #7
 8008acc:	b21a      	sxth	r2, r3
 8008ace:	79bb      	ldrb	r3, [r7, #6]
 8008ad0:	00db      	lsls	r3, r3, #3
 8008ad2:	b21b      	sxth	r3, r3
 8008ad4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8008ad8:	b21b      	sxth	r3, r3
 8008ada:	4313      	orrs	r3, r2
 8008adc:	b21a      	sxth	r2, r3
 8008ade:	797b      	ldrb	r3, [r7, #5]
 8008ae0:	08db      	lsrs	r3, r3, #3
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	b21b      	sxth	r3, r3
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	b21b      	sxth	r3, r3
 8008aea:	81fb      	strh	r3, [r7, #14]
    rgb = (((rgb) << 8) & 0xFF00) | (((rgb) >> 8) & 0xFF);
 8008aec:	89fb      	ldrh	r3, [r7, #14]
 8008aee:	021b      	lsls	r3, r3, #8
 8008af0:	b21a      	sxth	r2, r3
 8008af2:	89fb      	ldrh	r3, [r7, #14]
 8008af4:	0a1b      	lsrs	r3, r3, #8
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	b21b      	sxth	r3, r3
 8008afa:	4313      	orrs	r3, r2
 8008afc:	b21b      	sxth	r3, r3
 8008afe:	81fb      	strh	r3, [r7, #14]

    return rgb;
 8008b00:	89fb      	ldrh	r3, [r7, #14]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3714      	adds	r7, #20
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
	...

08008b10 <__errno>:
 8008b10:	4b01      	ldr	r3, [pc, #4]	; (8008b18 <__errno+0x8>)
 8008b12:	6818      	ldr	r0, [r3, #0]
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	20000014 	.word	0x20000014

08008b1c <__sflush_r>:
 8008b1c:	898a      	ldrh	r2, [r1, #12]
 8008b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b22:	4605      	mov	r5, r0
 8008b24:	0710      	lsls	r0, r2, #28
 8008b26:	460c      	mov	r4, r1
 8008b28:	d458      	bmi.n	8008bdc <__sflush_r+0xc0>
 8008b2a:	684b      	ldr	r3, [r1, #4]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	dc05      	bgt.n	8008b3c <__sflush_r+0x20>
 8008b30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	dc02      	bgt.n	8008b3c <__sflush_r+0x20>
 8008b36:	2000      	movs	r0, #0
 8008b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b3e:	2e00      	cmp	r6, #0
 8008b40:	d0f9      	beq.n	8008b36 <__sflush_r+0x1a>
 8008b42:	2300      	movs	r3, #0
 8008b44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b48:	682f      	ldr	r7, [r5, #0]
 8008b4a:	602b      	str	r3, [r5, #0]
 8008b4c:	d032      	beq.n	8008bb4 <__sflush_r+0x98>
 8008b4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b50:	89a3      	ldrh	r3, [r4, #12]
 8008b52:	075a      	lsls	r2, r3, #29
 8008b54:	d505      	bpl.n	8008b62 <__sflush_r+0x46>
 8008b56:	6863      	ldr	r3, [r4, #4]
 8008b58:	1ac0      	subs	r0, r0, r3
 8008b5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b5c:	b10b      	cbz	r3, 8008b62 <__sflush_r+0x46>
 8008b5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b60:	1ac0      	subs	r0, r0, r3
 8008b62:	2300      	movs	r3, #0
 8008b64:	4602      	mov	r2, r0
 8008b66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b68:	6a21      	ldr	r1, [r4, #32]
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	47b0      	blx	r6
 8008b6e:	1c43      	adds	r3, r0, #1
 8008b70:	89a3      	ldrh	r3, [r4, #12]
 8008b72:	d106      	bne.n	8008b82 <__sflush_r+0x66>
 8008b74:	6829      	ldr	r1, [r5, #0]
 8008b76:	291d      	cmp	r1, #29
 8008b78:	d82c      	bhi.n	8008bd4 <__sflush_r+0xb8>
 8008b7a:	4a2a      	ldr	r2, [pc, #168]	; (8008c24 <__sflush_r+0x108>)
 8008b7c:	40ca      	lsrs	r2, r1
 8008b7e:	07d6      	lsls	r6, r2, #31
 8008b80:	d528      	bpl.n	8008bd4 <__sflush_r+0xb8>
 8008b82:	2200      	movs	r2, #0
 8008b84:	6062      	str	r2, [r4, #4]
 8008b86:	04d9      	lsls	r1, r3, #19
 8008b88:	6922      	ldr	r2, [r4, #16]
 8008b8a:	6022      	str	r2, [r4, #0]
 8008b8c:	d504      	bpl.n	8008b98 <__sflush_r+0x7c>
 8008b8e:	1c42      	adds	r2, r0, #1
 8008b90:	d101      	bne.n	8008b96 <__sflush_r+0x7a>
 8008b92:	682b      	ldr	r3, [r5, #0]
 8008b94:	b903      	cbnz	r3, 8008b98 <__sflush_r+0x7c>
 8008b96:	6560      	str	r0, [r4, #84]	; 0x54
 8008b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b9a:	602f      	str	r7, [r5, #0]
 8008b9c:	2900      	cmp	r1, #0
 8008b9e:	d0ca      	beq.n	8008b36 <__sflush_r+0x1a>
 8008ba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ba4:	4299      	cmp	r1, r3
 8008ba6:	d002      	beq.n	8008bae <__sflush_r+0x92>
 8008ba8:	4628      	mov	r0, r5
 8008baa:	f000 fa11 	bl	8008fd0 <_free_r>
 8008bae:	2000      	movs	r0, #0
 8008bb0:	6360      	str	r0, [r4, #52]	; 0x34
 8008bb2:	e7c1      	b.n	8008b38 <__sflush_r+0x1c>
 8008bb4:	6a21      	ldr	r1, [r4, #32]
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	4628      	mov	r0, r5
 8008bba:	47b0      	blx	r6
 8008bbc:	1c41      	adds	r1, r0, #1
 8008bbe:	d1c7      	bne.n	8008b50 <__sflush_r+0x34>
 8008bc0:	682b      	ldr	r3, [r5, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d0c4      	beq.n	8008b50 <__sflush_r+0x34>
 8008bc6:	2b1d      	cmp	r3, #29
 8008bc8:	d001      	beq.n	8008bce <__sflush_r+0xb2>
 8008bca:	2b16      	cmp	r3, #22
 8008bcc:	d101      	bne.n	8008bd2 <__sflush_r+0xb6>
 8008bce:	602f      	str	r7, [r5, #0]
 8008bd0:	e7b1      	b.n	8008b36 <__sflush_r+0x1a>
 8008bd2:	89a3      	ldrh	r3, [r4, #12]
 8008bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bd8:	81a3      	strh	r3, [r4, #12]
 8008bda:	e7ad      	b.n	8008b38 <__sflush_r+0x1c>
 8008bdc:	690f      	ldr	r7, [r1, #16]
 8008bde:	2f00      	cmp	r7, #0
 8008be0:	d0a9      	beq.n	8008b36 <__sflush_r+0x1a>
 8008be2:	0793      	lsls	r3, r2, #30
 8008be4:	680e      	ldr	r6, [r1, #0]
 8008be6:	bf08      	it	eq
 8008be8:	694b      	ldreq	r3, [r1, #20]
 8008bea:	600f      	str	r7, [r1, #0]
 8008bec:	bf18      	it	ne
 8008bee:	2300      	movne	r3, #0
 8008bf0:	eba6 0807 	sub.w	r8, r6, r7
 8008bf4:	608b      	str	r3, [r1, #8]
 8008bf6:	f1b8 0f00 	cmp.w	r8, #0
 8008bfa:	dd9c      	ble.n	8008b36 <__sflush_r+0x1a>
 8008bfc:	6a21      	ldr	r1, [r4, #32]
 8008bfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c00:	4643      	mov	r3, r8
 8008c02:	463a      	mov	r2, r7
 8008c04:	4628      	mov	r0, r5
 8008c06:	47b0      	blx	r6
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	dc06      	bgt.n	8008c1a <__sflush_r+0xfe>
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c12:	81a3      	strh	r3, [r4, #12]
 8008c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c18:	e78e      	b.n	8008b38 <__sflush_r+0x1c>
 8008c1a:	4407      	add	r7, r0
 8008c1c:	eba8 0800 	sub.w	r8, r8, r0
 8008c20:	e7e9      	b.n	8008bf6 <__sflush_r+0xda>
 8008c22:	bf00      	nop
 8008c24:	20400001 	.word	0x20400001

08008c28 <_fflush_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	690b      	ldr	r3, [r1, #16]
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	460c      	mov	r4, r1
 8008c30:	b913      	cbnz	r3, 8008c38 <_fflush_r+0x10>
 8008c32:	2500      	movs	r5, #0
 8008c34:	4628      	mov	r0, r5
 8008c36:	bd38      	pop	{r3, r4, r5, pc}
 8008c38:	b118      	cbz	r0, 8008c42 <_fflush_r+0x1a>
 8008c3a:	6983      	ldr	r3, [r0, #24]
 8008c3c:	b90b      	cbnz	r3, 8008c42 <_fflush_r+0x1a>
 8008c3e:	f000 f887 	bl	8008d50 <__sinit>
 8008c42:	4b14      	ldr	r3, [pc, #80]	; (8008c94 <_fflush_r+0x6c>)
 8008c44:	429c      	cmp	r4, r3
 8008c46:	d11b      	bne.n	8008c80 <_fflush_r+0x58>
 8008c48:	686c      	ldr	r4, [r5, #4]
 8008c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d0ef      	beq.n	8008c32 <_fflush_r+0xa>
 8008c52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c54:	07d0      	lsls	r0, r2, #31
 8008c56:	d404      	bmi.n	8008c62 <_fflush_r+0x3a>
 8008c58:	0599      	lsls	r1, r3, #22
 8008c5a:	d402      	bmi.n	8008c62 <_fflush_r+0x3a>
 8008c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c5e:	f000 f93a 	bl	8008ed6 <__retarget_lock_acquire_recursive>
 8008c62:	4628      	mov	r0, r5
 8008c64:	4621      	mov	r1, r4
 8008c66:	f7ff ff59 	bl	8008b1c <__sflush_r>
 8008c6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c6c:	07da      	lsls	r2, r3, #31
 8008c6e:	4605      	mov	r5, r0
 8008c70:	d4e0      	bmi.n	8008c34 <_fflush_r+0xc>
 8008c72:	89a3      	ldrh	r3, [r4, #12]
 8008c74:	059b      	lsls	r3, r3, #22
 8008c76:	d4dd      	bmi.n	8008c34 <_fflush_r+0xc>
 8008c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c7a:	f000 f92d 	bl	8008ed8 <__retarget_lock_release_recursive>
 8008c7e:	e7d9      	b.n	8008c34 <_fflush_r+0xc>
 8008c80:	4b05      	ldr	r3, [pc, #20]	; (8008c98 <_fflush_r+0x70>)
 8008c82:	429c      	cmp	r4, r3
 8008c84:	d101      	bne.n	8008c8a <_fflush_r+0x62>
 8008c86:	68ac      	ldr	r4, [r5, #8]
 8008c88:	e7df      	b.n	8008c4a <_fflush_r+0x22>
 8008c8a:	4b04      	ldr	r3, [pc, #16]	; (8008c9c <_fflush_r+0x74>)
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	bf08      	it	eq
 8008c90:	68ec      	ldreq	r4, [r5, #12]
 8008c92:	e7da      	b.n	8008c4a <_fflush_r+0x22>
 8008c94:	08039a0c 	.word	0x08039a0c
 8008c98:	08039a2c 	.word	0x08039a2c
 8008c9c:	080399ec 	.word	0x080399ec

08008ca0 <std>:
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	b510      	push	{r4, lr}
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8008caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cae:	6083      	str	r3, [r0, #8]
 8008cb0:	8181      	strh	r1, [r0, #12]
 8008cb2:	6643      	str	r3, [r0, #100]	; 0x64
 8008cb4:	81c2      	strh	r2, [r0, #14]
 8008cb6:	6183      	str	r3, [r0, #24]
 8008cb8:	4619      	mov	r1, r3
 8008cba:	2208      	movs	r2, #8
 8008cbc:	305c      	adds	r0, #92	; 0x5c
 8008cbe:	f000 f97f 	bl	8008fc0 <memset>
 8008cc2:	4b05      	ldr	r3, [pc, #20]	; (8008cd8 <std+0x38>)
 8008cc4:	6263      	str	r3, [r4, #36]	; 0x24
 8008cc6:	4b05      	ldr	r3, [pc, #20]	; (8008cdc <std+0x3c>)
 8008cc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cca:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <std+0x40>)
 8008ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cce:	4b05      	ldr	r3, [pc, #20]	; (8008ce4 <std+0x44>)
 8008cd0:	6224      	str	r4, [r4, #32]
 8008cd2:	6323      	str	r3, [r4, #48]	; 0x30
 8008cd4:	bd10      	pop	{r4, pc}
 8008cd6:	bf00      	nop
 8008cd8:	08009ba1 	.word	0x08009ba1
 8008cdc:	08009bc3 	.word	0x08009bc3
 8008ce0:	08009bfb 	.word	0x08009bfb
 8008ce4:	08009c1f 	.word	0x08009c1f

08008ce8 <_cleanup_r>:
 8008ce8:	4901      	ldr	r1, [pc, #4]	; (8008cf0 <_cleanup_r+0x8>)
 8008cea:	f000 b8af 	b.w	8008e4c <_fwalk_reent>
 8008cee:	bf00      	nop
 8008cf0:	08008c29 	.word	0x08008c29

08008cf4 <__sfmoreglue>:
 8008cf4:	b570      	push	{r4, r5, r6, lr}
 8008cf6:	2268      	movs	r2, #104	; 0x68
 8008cf8:	1e4d      	subs	r5, r1, #1
 8008cfa:	4355      	muls	r5, r2
 8008cfc:	460e      	mov	r6, r1
 8008cfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d02:	f000 f9d1 	bl	80090a8 <_malloc_r>
 8008d06:	4604      	mov	r4, r0
 8008d08:	b140      	cbz	r0, 8008d1c <__sfmoreglue+0x28>
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	e9c0 1600 	strd	r1, r6, [r0]
 8008d10:	300c      	adds	r0, #12
 8008d12:	60a0      	str	r0, [r4, #8]
 8008d14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d18:	f000 f952 	bl	8008fc0 <memset>
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	bd70      	pop	{r4, r5, r6, pc}

08008d20 <__sfp_lock_acquire>:
 8008d20:	4801      	ldr	r0, [pc, #4]	; (8008d28 <__sfp_lock_acquire+0x8>)
 8008d22:	f000 b8d8 	b.w	8008ed6 <__retarget_lock_acquire_recursive>
 8008d26:	bf00      	nop
 8008d28:	2000a4ad 	.word	0x2000a4ad

08008d2c <__sfp_lock_release>:
 8008d2c:	4801      	ldr	r0, [pc, #4]	; (8008d34 <__sfp_lock_release+0x8>)
 8008d2e:	f000 b8d3 	b.w	8008ed8 <__retarget_lock_release_recursive>
 8008d32:	bf00      	nop
 8008d34:	2000a4ad 	.word	0x2000a4ad

08008d38 <__sinit_lock_acquire>:
 8008d38:	4801      	ldr	r0, [pc, #4]	; (8008d40 <__sinit_lock_acquire+0x8>)
 8008d3a:	f000 b8cc 	b.w	8008ed6 <__retarget_lock_acquire_recursive>
 8008d3e:	bf00      	nop
 8008d40:	2000a4ae 	.word	0x2000a4ae

08008d44 <__sinit_lock_release>:
 8008d44:	4801      	ldr	r0, [pc, #4]	; (8008d4c <__sinit_lock_release+0x8>)
 8008d46:	f000 b8c7 	b.w	8008ed8 <__retarget_lock_release_recursive>
 8008d4a:	bf00      	nop
 8008d4c:	2000a4ae 	.word	0x2000a4ae

08008d50 <__sinit>:
 8008d50:	b510      	push	{r4, lr}
 8008d52:	4604      	mov	r4, r0
 8008d54:	f7ff fff0 	bl	8008d38 <__sinit_lock_acquire>
 8008d58:	69a3      	ldr	r3, [r4, #24]
 8008d5a:	b11b      	cbz	r3, 8008d64 <__sinit+0x14>
 8008d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d60:	f7ff bff0 	b.w	8008d44 <__sinit_lock_release>
 8008d64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d68:	6523      	str	r3, [r4, #80]	; 0x50
 8008d6a:	4b13      	ldr	r3, [pc, #76]	; (8008db8 <__sinit+0x68>)
 8008d6c:	4a13      	ldr	r2, [pc, #76]	; (8008dbc <__sinit+0x6c>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d72:	42a3      	cmp	r3, r4
 8008d74:	bf04      	itt	eq
 8008d76:	2301      	moveq	r3, #1
 8008d78:	61a3      	streq	r3, [r4, #24]
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f000 f820 	bl	8008dc0 <__sfp>
 8008d80:	6060      	str	r0, [r4, #4]
 8008d82:	4620      	mov	r0, r4
 8008d84:	f000 f81c 	bl	8008dc0 <__sfp>
 8008d88:	60a0      	str	r0, [r4, #8]
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f000 f818 	bl	8008dc0 <__sfp>
 8008d90:	2200      	movs	r2, #0
 8008d92:	60e0      	str	r0, [r4, #12]
 8008d94:	2104      	movs	r1, #4
 8008d96:	6860      	ldr	r0, [r4, #4]
 8008d98:	f7ff ff82 	bl	8008ca0 <std>
 8008d9c:	68a0      	ldr	r0, [r4, #8]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	2109      	movs	r1, #9
 8008da2:	f7ff ff7d 	bl	8008ca0 <std>
 8008da6:	68e0      	ldr	r0, [r4, #12]
 8008da8:	2202      	movs	r2, #2
 8008daa:	2112      	movs	r1, #18
 8008dac:	f7ff ff78 	bl	8008ca0 <std>
 8008db0:	2301      	movs	r3, #1
 8008db2:	61a3      	str	r3, [r4, #24]
 8008db4:	e7d2      	b.n	8008d5c <__sinit+0xc>
 8008db6:	bf00      	nop
 8008db8:	08039a4c 	.word	0x08039a4c
 8008dbc:	08008ce9 	.word	0x08008ce9

08008dc0 <__sfp>:
 8008dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc2:	4607      	mov	r7, r0
 8008dc4:	f7ff ffac 	bl	8008d20 <__sfp_lock_acquire>
 8008dc8:	4b1e      	ldr	r3, [pc, #120]	; (8008e44 <__sfp+0x84>)
 8008dca:	681e      	ldr	r6, [r3, #0]
 8008dcc:	69b3      	ldr	r3, [r6, #24]
 8008dce:	b913      	cbnz	r3, 8008dd6 <__sfp+0x16>
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f7ff ffbd 	bl	8008d50 <__sinit>
 8008dd6:	3648      	adds	r6, #72	; 0x48
 8008dd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	d503      	bpl.n	8008de8 <__sfp+0x28>
 8008de0:	6833      	ldr	r3, [r6, #0]
 8008de2:	b30b      	cbz	r3, 8008e28 <__sfp+0x68>
 8008de4:	6836      	ldr	r6, [r6, #0]
 8008de6:	e7f7      	b.n	8008dd8 <__sfp+0x18>
 8008de8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008dec:	b9d5      	cbnz	r5, 8008e24 <__sfp+0x64>
 8008dee:	4b16      	ldr	r3, [pc, #88]	; (8008e48 <__sfp+0x88>)
 8008df0:	60e3      	str	r3, [r4, #12]
 8008df2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008df6:	6665      	str	r5, [r4, #100]	; 0x64
 8008df8:	f000 f86c 	bl	8008ed4 <__retarget_lock_init_recursive>
 8008dfc:	f7ff ff96 	bl	8008d2c <__sfp_lock_release>
 8008e00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e08:	6025      	str	r5, [r4, #0]
 8008e0a:	61a5      	str	r5, [r4, #24]
 8008e0c:	2208      	movs	r2, #8
 8008e0e:	4629      	mov	r1, r5
 8008e10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e14:	f000 f8d4 	bl	8008fc0 <memset>
 8008e18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e20:	4620      	mov	r0, r4
 8008e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e24:	3468      	adds	r4, #104	; 0x68
 8008e26:	e7d9      	b.n	8008ddc <__sfp+0x1c>
 8008e28:	2104      	movs	r1, #4
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	f7ff ff62 	bl	8008cf4 <__sfmoreglue>
 8008e30:	4604      	mov	r4, r0
 8008e32:	6030      	str	r0, [r6, #0]
 8008e34:	2800      	cmp	r0, #0
 8008e36:	d1d5      	bne.n	8008de4 <__sfp+0x24>
 8008e38:	f7ff ff78 	bl	8008d2c <__sfp_lock_release>
 8008e3c:	230c      	movs	r3, #12
 8008e3e:	603b      	str	r3, [r7, #0]
 8008e40:	e7ee      	b.n	8008e20 <__sfp+0x60>
 8008e42:	bf00      	nop
 8008e44:	08039a4c 	.word	0x08039a4c
 8008e48:	ffff0001 	.word	0xffff0001

08008e4c <_fwalk_reent>:
 8008e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e50:	4606      	mov	r6, r0
 8008e52:	4688      	mov	r8, r1
 8008e54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e58:	2700      	movs	r7, #0
 8008e5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e5e:	f1b9 0901 	subs.w	r9, r9, #1
 8008e62:	d505      	bpl.n	8008e70 <_fwalk_reent+0x24>
 8008e64:	6824      	ldr	r4, [r4, #0]
 8008e66:	2c00      	cmp	r4, #0
 8008e68:	d1f7      	bne.n	8008e5a <_fwalk_reent+0xe>
 8008e6a:	4638      	mov	r0, r7
 8008e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e70:	89ab      	ldrh	r3, [r5, #12]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d907      	bls.n	8008e86 <_fwalk_reent+0x3a>
 8008e76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	d003      	beq.n	8008e86 <_fwalk_reent+0x3a>
 8008e7e:	4629      	mov	r1, r5
 8008e80:	4630      	mov	r0, r6
 8008e82:	47c0      	blx	r8
 8008e84:	4307      	orrs	r7, r0
 8008e86:	3568      	adds	r5, #104	; 0x68
 8008e88:	e7e9      	b.n	8008e5e <_fwalk_reent+0x12>
	...

08008e8c <__libc_init_array>:
 8008e8c:	b570      	push	{r4, r5, r6, lr}
 8008e8e:	4d0d      	ldr	r5, [pc, #52]	; (8008ec4 <__libc_init_array+0x38>)
 8008e90:	4c0d      	ldr	r4, [pc, #52]	; (8008ec8 <__libc_init_array+0x3c>)
 8008e92:	1b64      	subs	r4, r4, r5
 8008e94:	10a4      	asrs	r4, r4, #2
 8008e96:	2600      	movs	r6, #0
 8008e98:	42a6      	cmp	r6, r4
 8008e9a:	d109      	bne.n	8008eb0 <__libc_init_array+0x24>
 8008e9c:	4d0b      	ldr	r5, [pc, #44]	; (8008ecc <__libc_init_array+0x40>)
 8008e9e:	4c0c      	ldr	r4, [pc, #48]	; (8008ed0 <__libc_init_array+0x44>)
 8008ea0:	f003 fb38 	bl	800c514 <_init>
 8008ea4:	1b64      	subs	r4, r4, r5
 8008ea6:	10a4      	asrs	r4, r4, #2
 8008ea8:	2600      	movs	r6, #0
 8008eaa:	42a6      	cmp	r6, r4
 8008eac:	d105      	bne.n	8008eba <__libc_init_array+0x2e>
 8008eae:	bd70      	pop	{r4, r5, r6, pc}
 8008eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eb4:	4798      	blx	r3
 8008eb6:	3601      	adds	r6, #1
 8008eb8:	e7ee      	b.n	8008e98 <__libc_init_array+0xc>
 8008eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ebe:	4798      	blx	r3
 8008ec0:	3601      	adds	r6, #1
 8008ec2:	e7f2      	b.n	8008eaa <__libc_init_array+0x1e>
 8008ec4:	08039f7c 	.word	0x08039f7c
 8008ec8:	08039f7c 	.word	0x08039f7c
 8008ecc:	08039f7c 	.word	0x08039f7c
 8008ed0:	08039f80 	.word	0x08039f80

08008ed4 <__retarget_lock_init_recursive>:
 8008ed4:	4770      	bx	lr

08008ed6 <__retarget_lock_acquire_recursive>:
 8008ed6:	4770      	bx	lr

08008ed8 <__retarget_lock_release_recursive>:
 8008ed8:	4770      	bx	lr

08008eda <__swhatbuf_r>:
 8008eda:	b570      	push	{r4, r5, r6, lr}
 8008edc:	460e      	mov	r6, r1
 8008ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ee2:	2900      	cmp	r1, #0
 8008ee4:	b096      	sub	sp, #88	; 0x58
 8008ee6:	4614      	mov	r4, r2
 8008ee8:	461d      	mov	r5, r3
 8008eea:	da08      	bge.n	8008efe <__swhatbuf_r+0x24>
 8008eec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	602a      	str	r2, [r5, #0]
 8008ef4:	061a      	lsls	r2, r3, #24
 8008ef6:	d410      	bmi.n	8008f1a <__swhatbuf_r+0x40>
 8008ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008efc:	e00e      	b.n	8008f1c <__swhatbuf_r+0x42>
 8008efe:	466a      	mov	r2, sp
 8008f00:	f001 fe24 	bl	800ab4c <_fstat_r>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	dbf1      	blt.n	8008eec <__swhatbuf_r+0x12>
 8008f08:	9a01      	ldr	r2, [sp, #4]
 8008f0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f12:	425a      	negs	r2, r3
 8008f14:	415a      	adcs	r2, r3
 8008f16:	602a      	str	r2, [r5, #0]
 8008f18:	e7ee      	b.n	8008ef8 <__swhatbuf_r+0x1e>
 8008f1a:	2340      	movs	r3, #64	; 0x40
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	6023      	str	r3, [r4, #0]
 8008f20:	b016      	add	sp, #88	; 0x58
 8008f22:	bd70      	pop	{r4, r5, r6, pc}

08008f24 <__smakebuf_r>:
 8008f24:	898b      	ldrh	r3, [r1, #12]
 8008f26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f28:	079d      	lsls	r5, r3, #30
 8008f2a:	4606      	mov	r6, r0
 8008f2c:	460c      	mov	r4, r1
 8008f2e:	d507      	bpl.n	8008f40 <__smakebuf_r+0x1c>
 8008f30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	6123      	str	r3, [r4, #16]
 8008f38:	2301      	movs	r3, #1
 8008f3a:	6163      	str	r3, [r4, #20]
 8008f3c:	b002      	add	sp, #8
 8008f3e:	bd70      	pop	{r4, r5, r6, pc}
 8008f40:	ab01      	add	r3, sp, #4
 8008f42:	466a      	mov	r2, sp
 8008f44:	f7ff ffc9 	bl	8008eda <__swhatbuf_r>
 8008f48:	9900      	ldr	r1, [sp, #0]
 8008f4a:	4605      	mov	r5, r0
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f000 f8ab 	bl	80090a8 <_malloc_r>
 8008f52:	b948      	cbnz	r0, 8008f68 <__smakebuf_r+0x44>
 8008f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f58:	059a      	lsls	r2, r3, #22
 8008f5a:	d4ef      	bmi.n	8008f3c <__smakebuf_r+0x18>
 8008f5c:	f023 0303 	bic.w	r3, r3, #3
 8008f60:	f043 0302 	orr.w	r3, r3, #2
 8008f64:	81a3      	strh	r3, [r4, #12]
 8008f66:	e7e3      	b.n	8008f30 <__smakebuf_r+0xc>
 8008f68:	4b0d      	ldr	r3, [pc, #52]	; (8008fa0 <__smakebuf_r+0x7c>)
 8008f6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f6c:	89a3      	ldrh	r3, [r4, #12]
 8008f6e:	6020      	str	r0, [r4, #0]
 8008f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f74:	81a3      	strh	r3, [r4, #12]
 8008f76:	9b00      	ldr	r3, [sp, #0]
 8008f78:	6163      	str	r3, [r4, #20]
 8008f7a:	9b01      	ldr	r3, [sp, #4]
 8008f7c:	6120      	str	r0, [r4, #16]
 8008f7e:	b15b      	cbz	r3, 8008f98 <__smakebuf_r+0x74>
 8008f80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f84:	4630      	mov	r0, r6
 8008f86:	f001 fdf3 	bl	800ab70 <_isatty_r>
 8008f8a:	b128      	cbz	r0, 8008f98 <__smakebuf_r+0x74>
 8008f8c:	89a3      	ldrh	r3, [r4, #12]
 8008f8e:	f023 0303 	bic.w	r3, r3, #3
 8008f92:	f043 0301 	orr.w	r3, r3, #1
 8008f96:	81a3      	strh	r3, [r4, #12]
 8008f98:	89a0      	ldrh	r0, [r4, #12]
 8008f9a:	4305      	orrs	r5, r0
 8008f9c:	81a5      	strh	r5, [r4, #12]
 8008f9e:	e7cd      	b.n	8008f3c <__smakebuf_r+0x18>
 8008fa0:	08008ce9 	.word	0x08008ce9

08008fa4 <memcpy>:
 8008fa4:	440a      	add	r2, r1
 8008fa6:	4291      	cmp	r1, r2
 8008fa8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008fac:	d100      	bne.n	8008fb0 <memcpy+0xc>
 8008fae:	4770      	bx	lr
 8008fb0:	b510      	push	{r4, lr}
 8008fb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fba:	4291      	cmp	r1, r2
 8008fbc:	d1f9      	bne.n	8008fb2 <memcpy+0xe>
 8008fbe:	bd10      	pop	{r4, pc}

08008fc0 <memset>:
 8008fc0:	4402      	add	r2, r0
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d100      	bne.n	8008fca <memset+0xa>
 8008fc8:	4770      	bx	lr
 8008fca:	f803 1b01 	strb.w	r1, [r3], #1
 8008fce:	e7f9      	b.n	8008fc4 <memset+0x4>

08008fd0 <_free_r>:
 8008fd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fd2:	2900      	cmp	r1, #0
 8008fd4:	d044      	beq.n	8009060 <_free_r+0x90>
 8008fd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fda:	9001      	str	r0, [sp, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f1a1 0404 	sub.w	r4, r1, #4
 8008fe2:	bfb8      	it	lt
 8008fe4:	18e4      	addlt	r4, r4, r3
 8008fe6:	f001 fdf1 	bl	800abcc <__malloc_lock>
 8008fea:	4a1e      	ldr	r2, [pc, #120]	; (8009064 <_free_r+0x94>)
 8008fec:	9801      	ldr	r0, [sp, #4]
 8008fee:	6813      	ldr	r3, [r2, #0]
 8008ff0:	b933      	cbnz	r3, 8009000 <_free_r+0x30>
 8008ff2:	6063      	str	r3, [r4, #4]
 8008ff4:	6014      	str	r4, [r2, #0]
 8008ff6:	b003      	add	sp, #12
 8008ff8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ffc:	f001 bdec 	b.w	800abd8 <__malloc_unlock>
 8009000:	42a3      	cmp	r3, r4
 8009002:	d908      	bls.n	8009016 <_free_r+0x46>
 8009004:	6825      	ldr	r5, [r4, #0]
 8009006:	1961      	adds	r1, r4, r5
 8009008:	428b      	cmp	r3, r1
 800900a:	bf01      	itttt	eq
 800900c:	6819      	ldreq	r1, [r3, #0]
 800900e:	685b      	ldreq	r3, [r3, #4]
 8009010:	1949      	addeq	r1, r1, r5
 8009012:	6021      	streq	r1, [r4, #0]
 8009014:	e7ed      	b.n	8008ff2 <_free_r+0x22>
 8009016:	461a      	mov	r2, r3
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	b10b      	cbz	r3, 8009020 <_free_r+0x50>
 800901c:	42a3      	cmp	r3, r4
 800901e:	d9fa      	bls.n	8009016 <_free_r+0x46>
 8009020:	6811      	ldr	r1, [r2, #0]
 8009022:	1855      	adds	r5, r2, r1
 8009024:	42a5      	cmp	r5, r4
 8009026:	d10b      	bne.n	8009040 <_free_r+0x70>
 8009028:	6824      	ldr	r4, [r4, #0]
 800902a:	4421      	add	r1, r4
 800902c:	1854      	adds	r4, r2, r1
 800902e:	42a3      	cmp	r3, r4
 8009030:	6011      	str	r1, [r2, #0]
 8009032:	d1e0      	bne.n	8008ff6 <_free_r+0x26>
 8009034:	681c      	ldr	r4, [r3, #0]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	6053      	str	r3, [r2, #4]
 800903a:	4421      	add	r1, r4
 800903c:	6011      	str	r1, [r2, #0]
 800903e:	e7da      	b.n	8008ff6 <_free_r+0x26>
 8009040:	d902      	bls.n	8009048 <_free_r+0x78>
 8009042:	230c      	movs	r3, #12
 8009044:	6003      	str	r3, [r0, #0]
 8009046:	e7d6      	b.n	8008ff6 <_free_r+0x26>
 8009048:	6825      	ldr	r5, [r4, #0]
 800904a:	1961      	adds	r1, r4, r5
 800904c:	428b      	cmp	r3, r1
 800904e:	bf04      	itt	eq
 8009050:	6819      	ldreq	r1, [r3, #0]
 8009052:	685b      	ldreq	r3, [r3, #4]
 8009054:	6063      	str	r3, [r4, #4]
 8009056:	bf04      	itt	eq
 8009058:	1949      	addeq	r1, r1, r5
 800905a:	6021      	streq	r1, [r4, #0]
 800905c:	6054      	str	r4, [r2, #4]
 800905e:	e7ca      	b.n	8008ff6 <_free_r+0x26>
 8009060:	b003      	add	sp, #12
 8009062:	bd30      	pop	{r4, r5, pc}
 8009064:	2000a4b0 	.word	0x2000a4b0

08009068 <sbrk_aligned>:
 8009068:	b570      	push	{r4, r5, r6, lr}
 800906a:	4e0e      	ldr	r6, [pc, #56]	; (80090a4 <sbrk_aligned+0x3c>)
 800906c:	460c      	mov	r4, r1
 800906e:	6831      	ldr	r1, [r6, #0]
 8009070:	4605      	mov	r5, r0
 8009072:	b911      	cbnz	r1, 800907a <sbrk_aligned+0x12>
 8009074:	f000 fd84 	bl	8009b80 <_sbrk_r>
 8009078:	6030      	str	r0, [r6, #0]
 800907a:	4621      	mov	r1, r4
 800907c:	4628      	mov	r0, r5
 800907e:	f000 fd7f 	bl	8009b80 <_sbrk_r>
 8009082:	1c43      	adds	r3, r0, #1
 8009084:	d00a      	beq.n	800909c <sbrk_aligned+0x34>
 8009086:	1cc4      	adds	r4, r0, #3
 8009088:	f024 0403 	bic.w	r4, r4, #3
 800908c:	42a0      	cmp	r0, r4
 800908e:	d007      	beq.n	80090a0 <sbrk_aligned+0x38>
 8009090:	1a21      	subs	r1, r4, r0
 8009092:	4628      	mov	r0, r5
 8009094:	f000 fd74 	bl	8009b80 <_sbrk_r>
 8009098:	3001      	adds	r0, #1
 800909a:	d101      	bne.n	80090a0 <sbrk_aligned+0x38>
 800909c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80090a0:	4620      	mov	r0, r4
 80090a2:	bd70      	pop	{r4, r5, r6, pc}
 80090a4:	2000a4b4 	.word	0x2000a4b4

080090a8 <_malloc_r>:
 80090a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ac:	1ccd      	adds	r5, r1, #3
 80090ae:	f025 0503 	bic.w	r5, r5, #3
 80090b2:	3508      	adds	r5, #8
 80090b4:	2d0c      	cmp	r5, #12
 80090b6:	bf38      	it	cc
 80090b8:	250c      	movcc	r5, #12
 80090ba:	2d00      	cmp	r5, #0
 80090bc:	4607      	mov	r7, r0
 80090be:	db01      	blt.n	80090c4 <_malloc_r+0x1c>
 80090c0:	42a9      	cmp	r1, r5
 80090c2:	d905      	bls.n	80090d0 <_malloc_r+0x28>
 80090c4:	230c      	movs	r3, #12
 80090c6:	603b      	str	r3, [r7, #0]
 80090c8:	2600      	movs	r6, #0
 80090ca:	4630      	mov	r0, r6
 80090cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d0:	4e2e      	ldr	r6, [pc, #184]	; (800918c <_malloc_r+0xe4>)
 80090d2:	f001 fd7b 	bl	800abcc <__malloc_lock>
 80090d6:	6833      	ldr	r3, [r6, #0]
 80090d8:	461c      	mov	r4, r3
 80090da:	bb34      	cbnz	r4, 800912a <_malloc_r+0x82>
 80090dc:	4629      	mov	r1, r5
 80090de:	4638      	mov	r0, r7
 80090e0:	f7ff ffc2 	bl	8009068 <sbrk_aligned>
 80090e4:	1c43      	adds	r3, r0, #1
 80090e6:	4604      	mov	r4, r0
 80090e8:	d14d      	bne.n	8009186 <_malloc_r+0xde>
 80090ea:	6834      	ldr	r4, [r6, #0]
 80090ec:	4626      	mov	r6, r4
 80090ee:	2e00      	cmp	r6, #0
 80090f0:	d140      	bne.n	8009174 <_malloc_r+0xcc>
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	4631      	mov	r1, r6
 80090f6:	4638      	mov	r0, r7
 80090f8:	eb04 0803 	add.w	r8, r4, r3
 80090fc:	f000 fd40 	bl	8009b80 <_sbrk_r>
 8009100:	4580      	cmp	r8, r0
 8009102:	d13a      	bne.n	800917a <_malloc_r+0xd2>
 8009104:	6821      	ldr	r1, [r4, #0]
 8009106:	3503      	adds	r5, #3
 8009108:	1a6d      	subs	r5, r5, r1
 800910a:	f025 0503 	bic.w	r5, r5, #3
 800910e:	3508      	adds	r5, #8
 8009110:	2d0c      	cmp	r5, #12
 8009112:	bf38      	it	cc
 8009114:	250c      	movcc	r5, #12
 8009116:	4629      	mov	r1, r5
 8009118:	4638      	mov	r0, r7
 800911a:	f7ff ffa5 	bl	8009068 <sbrk_aligned>
 800911e:	3001      	adds	r0, #1
 8009120:	d02b      	beq.n	800917a <_malloc_r+0xd2>
 8009122:	6823      	ldr	r3, [r4, #0]
 8009124:	442b      	add	r3, r5
 8009126:	6023      	str	r3, [r4, #0]
 8009128:	e00e      	b.n	8009148 <_malloc_r+0xa0>
 800912a:	6822      	ldr	r2, [r4, #0]
 800912c:	1b52      	subs	r2, r2, r5
 800912e:	d41e      	bmi.n	800916e <_malloc_r+0xc6>
 8009130:	2a0b      	cmp	r2, #11
 8009132:	d916      	bls.n	8009162 <_malloc_r+0xba>
 8009134:	1961      	adds	r1, r4, r5
 8009136:	42a3      	cmp	r3, r4
 8009138:	6025      	str	r5, [r4, #0]
 800913a:	bf18      	it	ne
 800913c:	6059      	strne	r1, [r3, #4]
 800913e:	6863      	ldr	r3, [r4, #4]
 8009140:	bf08      	it	eq
 8009142:	6031      	streq	r1, [r6, #0]
 8009144:	5162      	str	r2, [r4, r5]
 8009146:	604b      	str	r3, [r1, #4]
 8009148:	4638      	mov	r0, r7
 800914a:	f104 060b 	add.w	r6, r4, #11
 800914e:	f001 fd43 	bl	800abd8 <__malloc_unlock>
 8009152:	f026 0607 	bic.w	r6, r6, #7
 8009156:	1d23      	adds	r3, r4, #4
 8009158:	1af2      	subs	r2, r6, r3
 800915a:	d0b6      	beq.n	80090ca <_malloc_r+0x22>
 800915c:	1b9b      	subs	r3, r3, r6
 800915e:	50a3      	str	r3, [r4, r2]
 8009160:	e7b3      	b.n	80090ca <_malloc_r+0x22>
 8009162:	6862      	ldr	r2, [r4, #4]
 8009164:	42a3      	cmp	r3, r4
 8009166:	bf0c      	ite	eq
 8009168:	6032      	streq	r2, [r6, #0]
 800916a:	605a      	strne	r2, [r3, #4]
 800916c:	e7ec      	b.n	8009148 <_malloc_r+0xa0>
 800916e:	4623      	mov	r3, r4
 8009170:	6864      	ldr	r4, [r4, #4]
 8009172:	e7b2      	b.n	80090da <_malloc_r+0x32>
 8009174:	4634      	mov	r4, r6
 8009176:	6876      	ldr	r6, [r6, #4]
 8009178:	e7b9      	b.n	80090ee <_malloc_r+0x46>
 800917a:	230c      	movs	r3, #12
 800917c:	603b      	str	r3, [r7, #0]
 800917e:	4638      	mov	r0, r7
 8009180:	f001 fd2a 	bl	800abd8 <__malloc_unlock>
 8009184:	e7a1      	b.n	80090ca <_malloc_r+0x22>
 8009186:	6025      	str	r5, [r4, #0]
 8009188:	e7de      	b.n	8009148 <_malloc_r+0xa0>
 800918a:	bf00      	nop
 800918c:	2000a4b0 	.word	0x2000a4b0

08009190 <__cvt>:
 8009190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009194:	ec55 4b10 	vmov	r4, r5, d0
 8009198:	2d00      	cmp	r5, #0
 800919a:	460e      	mov	r6, r1
 800919c:	4619      	mov	r1, r3
 800919e:	462b      	mov	r3, r5
 80091a0:	bfbb      	ittet	lt
 80091a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80091a6:	461d      	movlt	r5, r3
 80091a8:	2300      	movge	r3, #0
 80091aa:	232d      	movlt	r3, #45	; 0x2d
 80091ac:	700b      	strb	r3, [r1, #0]
 80091ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80091b4:	4691      	mov	r9, r2
 80091b6:	f023 0820 	bic.w	r8, r3, #32
 80091ba:	bfbc      	itt	lt
 80091bc:	4622      	movlt	r2, r4
 80091be:	4614      	movlt	r4, r2
 80091c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80091c4:	d005      	beq.n	80091d2 <__cvt+0x42>
 80091c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80091ca:	d100      	bne.n	80091ce <__cvt+0x3e>
 80091cc:	3601      	adds	r6, #1
 80091ce:	2102      	movs	r1, #2
 80091d0:	e000      	b.n	80091d4 <__cvt+0x44>
 80091d2:	2103      	movs	r1, #3
 80091d4:	ab03      	add	r3, sp, #12
 80091d6:	9301      	str	r3, [sp, #4]
 80091d8:	ab02      	add	r3, sp, #8
 80091da:	9300      	str	r3, [sp, #0]
 80091dc:	ec45 4b10 	vmov	d0, r4, r5
 80091e0:	4653      	mov	r3, sl
 80091e2:	4632      	mov	r2, r6
 80091e4:	f000 fec4 	bl	8009f70 <_dtoa_r>
 80091e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80091ec:	4607      	mov	r7, r0
 80091ee:	d102      	bne.n	80091f6 <__cvt+0x66>
 80091f0:	f019 0f01 	tst.w	r9, #1
 80091f4:	d022      	beq.n	800923c <__cvt+0xac>
 80091f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80091fa:	eb07 0906 	add.w	r9, r7, r6
 80091fe:	d110      	bne.n	8009222 <__cvt+0x92>
 8009200:	783b      	ldrb	r3, [r7, #0]
 8009202:	2b30      	cmp	r3, #48	; 0x30
 8009204:	d10a      	bne.n	800921c <__cvt+0x8c>
 8009206:	2200      	movs	r2, #0
 8009208:	2300      	movs	r3, #0
 800920a:	4620      	mov	r0, r4
 800920c:	4629      	mov	r1, r5
 800920e:	f7f7 fc5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009212:	b918      	cbnz	r0, 800921c <__cvt+0x8c>
 8009214:	f1c6 0601 	rsb	r6, r6, #1
 8009218:	f8ca 6000 	str.w	r6, [sl]
 800921c:	f8da 3000 	ldr.w	r3, [sl]
 8009220:	4499      	add	r9, r3
 8009222:	2200      	movs	r2, #0
 8009224:	2300      	movs	r3, #0
 8009226:	4620      	mov	r0, r4
 8009228:	4629      	mov	r1, r5
 800922a:	f7f7 fc4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800922e:	b108      	cbz	r0, 8009234 <__cvt+0xa4>
 8009230:	f8cd 900c 	str.w	r9, [sp, #12]
 8009234:	2230      	movs	r2, #48	; 0x30
 8009236:	9b03      	ldr	r3, [sp, #12]
 8009238:	454b      	cmp	r3, r9
 800923a:	d307      	bcc.n	800924c <__cvt+0xbc>
 800923c:	9b03      	ldr	r3, [sp, #12]
 800923e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009240:	1bdb      	subs	r3, r3, r7
 8009242:	4638      	mov	r0, r7
 8009244:	6013      	str	r3, [r2, #0]
 8009246:	b004      	add	sp, #16
 8009248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800924c:	1c59      	adds	r1, r3, #1
 800924e:	9103      	str	r1, [sp, #12]
 8009250:	701a      	strb	r2, [r3, #0]
 8009252:	e7f0      	b.n	8009236 <__cvt+0xa6>

08009254 <__exponent>:
 8009254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009256:	4603      	mov	r3, r0
 8009258:	2900      	cmp	r1, #0
 800925a:	bfb8      	it	lt
 800925c:	4249      	neglt	r1, r1
 800925e:	f803 2b02 	strb.w	r2, [r3], #2
 8009262:	bfb4      	ite	lt
 8009264:	222d      	movlt	r2, #45	; 0x2d
 8009266:	222b      	movge	r2, #43	; 0x2b
 8009268:	2909      	cmp	r1, #9
 800926a:	7042      	strb	r2, [r0, #1]
 800926c:	dd2a      	ble.n	80092c4 <__exponent+0x70>
 800926e:	f10d 0407 	add.w	r4, sp, #7
 8009272:	46a4      	mov	ip, r4
 8009274:	270a      	movs	r7, #10
 8009276:	46a6      	mov	lr, r4
 8009278:	460a      	mov	r2, r1
 800927a:	fb91 f6f7 	sdiv	r6, r1, r7
 800927e:	fb07 1516 	mls	r5, r7, r6, r1
 8009282:	3530      	adds	r5, #48	; 0x30
 8009284:	2a63      	cmp	r2, #99	; 0x63
 8009286:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800928a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800928e:	4631      	mov	r1, r6
 8009290:	dcf1      	bgt.n	8009276 <__exponent+0x22>
 8009292:	3130      	adds	r1, #48	; 0x30
 8009294:	f1ae 0502 	sub.w	r5, lr, #2
 8009298:	f804 1c01 	strb.w	r1, [r4, #-1]
 800929c:	1c44      	adds	r4, r0, #1
 800929e:	4629      	mov	r1, r5
 80092a0:	4561      	cmp	r1, ip
 80092a2:	d30a      	bcc.n	80092ba <__exponent+0x66>
 80092a4:	f10d 0209 	add.w	r2, sp, #9
 80092a8:	eba2 020e 	sub.w	r2, r2, lr
 80092ac:	4565      	cmp	r5, ip
 80092ae:	bf88      	it	hi
 80092b0:	2200      	movhi	r2, #0
 80092b2:	4413      	add	r3, r2
 80092b4:	1a18      	subs	r0, r3, r0
 80092b6:	b003      	add	sp, #12
 80092b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092be:	f804 2f01 	strb.w	r2, [r4, #1]!
 80092c2:	e7ed      	b.n	80092a0 <__exponent+0x4c>
 80092c4:	2330      	movs	r3, #48	; 0x30
 80092c6:	3130      	adds	r1, #48	; 0x30
 80092c8:	7083      	strb	r3, [r0, #2]
 80092ca:	70c1      	strb	r1, [r0, #3]
 80092cc:	1d03      	adds	r3, r0, #4
 80092ce:	e7f1      	b.n	80092b4 <__exponent+0x60>

080092d0 <_printf_float>:
 80092d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d4:	ed2d 8b02 	vpush	{d8}
 80092d8:	b08d      	sub	sp, #52	; 0x34
 80092da:	460c      	mov	r4, r1
 80092dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80092e0:	4616      	mov	r6, r2
 80092e2:	461f      	mov	r7, r3
 80092e4:	4605      	mov	r5, r0
 80092e6:	f001 fc53 	bl	800ab90 <_localeconv_r>
 80092ea:	f8d0 a000 	ldr.w	sl, [r0]
 80092ee:	4650      	mov	r0, sl
 80092f0:	f7f6 ff6e 	bl	80001d0 <strlen>
 80092f4:	2300      	movs	r3, #0
 80092f6:	930a      	str	r3, [sp, #40]	; 0x28
 80092f8:	6823      	ldr	r3, [r4, #0]
 80092fa:	9305      	str	r3, [sp, #20]
 80092fc:	f8d8 3000 	ldr.w	r3, [r8]
 8009300:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009304:	3307      	adds	r3, #7
 8009306:	f023 0307 	bic.w	r3, r3, #7
 800930a:	f103 0208 	add.w	r2, r3, #8
 800930e:	f8c8 2000 	str.w	r2, [r8]
 8009312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009316:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800931a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800931e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009322:	9307      	str	r3, [sp, #28]
 8009324:	f8cd 8018 	str.w	r8, [sp, #24]
 8009328:	ee08 0a10 	vmov	s16, r0
 800932c:	4b9f      	ldr	r3, [pc, #636]	; (80095ac <_printf_float+0x2dc>)
 800932e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009332:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009336:	f7f7 fbf9 	bl	8000b2c <__aeabi_dcmpun>
 800933a:	bb88      	cbnz	r0, 80093a0 <_printf_float+0xd0>
 800933c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009340:	4b9a      	ldr	r3, [pc, #616]	; (80095ac <_printf_float+0x2dc>)
 8009342:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009346:	f7f7 fbd3 	bl	8000af0 <__aeabi_dcmple>
 800934a:	bb48      	cbnz	r0, 80093a0 <_printf_float+0xd0>
 800934c:	2200      	movs	r2, #0
 800934e:	2300      	movs	r3, #0
 8009350:	4640      	mov	r0, r8
 8009352:	4649      	mov	r1, r9
 8009354:	f7f7 fbc2 	bl	8000adc <__aeabi_dcmplt>
 8009358:	b110      	cbz	r0, 8009360 <_printf_float+0x90>
 800935a:	232d      	movs	r3, #45	; 0x2d
 800935c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009360:	4b93      	ldr	r3, [pc, #588]	; (80095b0 <_printf_float+0x2e0>)
 8009362:	4894      	ldr	r0, [pc, #592]	; (80095b4 <_printf_float+0x2e4>)
 8009364:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009368:	bf94      	ite	ls
 800936a:	4698      	movls	r8, r3
 800936c:	4680      	movhi	r8, r0
 800936e:	2303      	movs	r3, #3
 8009370:	6123      	str	r3, [r4, #16]
 8009372:	9b05      	ldr	r3, [sp, #20]
 8009374:	f023 0204 	bic.w	r2, r3, #4
 8009378:	6022      	str	r2, [r4, #0]
 800937a:	f04f 0900 	mov.w	r9, #0
 800937e:	9700      	str	r7, [sp, #0]
 8009380:	4633      	mov	r3, r6
 8009382:	aa0b      	add	r2, sp, #44	; 0x2c
 8009384:	4621      	mov	r1, r4
 8009386:	4628      	mov	r0, r5
 8009388:	f000 f9d8 	bl	800973c <_printf_common>
 800938c:	3001      	adds	r0, #1
 800938e:	f040 8090 	bne.w	80094b2 <_printf_float+0x1e2>
 8009392:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009396:	b00d      	add	sp, #52	; 0x34
 8009398:	ecbd 8b02 	vpop	{d8}
 800939c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a0:	4642      	mov	r2, r8
 80093a2:	464b      	mov	r3, r9
 80093a4:	4640      	mov	r0, r8
 80093a6:	4649      	mov	r1, r9
 80093a8:	f7f7 fbc0 	bl	8000b2c <__aeabi_dcmpun>
 80093ac:	b140      	cbz	r0, 80093c0 <_printf_float+0xf0>
 80093ae:	464b      	mov	r3, r9
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	bfbc      	itt	lt
 80093b4:	232d      	movlt	r3, #45	; 0x2d
 80093b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80093ba:	487f      	ldr	r0, [pc, #508]	; (80095b8 <_printf_float+0x2e8>)
 80093bc:	4b7f      	ldr	r3, [pc, #508]	; (80095bc <_printf_float+0x2ec>)
 80093be:	e7d1      	b.n	8009364 <_printf_float+0x94>
 80093c0:	6863      	ldr	r3, [r4, #4]
 80093c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80093c6:	9206      	str	r2, [sp, #24]
 80093c8:	1c5a      	adds	r2, r3, #1
 80093ca:	d13f      	bne.n	800944c <_printf_float+0x17c>
 80093cc:	2306      	movs	r3, #6
 80093ce:	6063      	str	r3, [r4, #4]
 80093d0:	9b05      	ldr	r3, [sp, #20]
 80093d2:	6861      	ldr	r1, [r4, #4]
 80093d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80093d8:	2300      	movs	r3, #0
 80093da:	9303      	str	r3, [sp, #12]
 80093dc:	ab0a      	add	r3, sp, #40	; 0x28
 80093de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80093e2:	ab09      	add	r3, sp, #36	; 0x24
 80093e4:	ec49 8b10 	vmov	d0, r8, r9
 80093e8:	9300      	str	r3, [sp, #0]
 80093ea:	6022      	str	r2, [r4, #0]
 80093ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80093f0:	4628      	mov	r0, r5
 80093f2:	f7ff fecd 	bl	8009190 <__cvt>
 80093f6:	9b06      	ldr	r3, [sp, #24]
 80093f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093fa:	2b47      	cmp	r3, #71	; 0x47
 80093fc:	4680      	mov	r8, r0
 80093fe:	d108      	bne.n	8009412 <_printf_float+0x142>
 8009400:	1cc8      	adds	r0, r1, #3
 8009402:	db02      	blt.n	800940a <_printf_float+0x13a>
 8009404:	6863      	ldr	r3, [r4, #4]
 8009406:	4299      	cmp	r1, r3
 8009408:	dd41      	ble.n	800948e <_printf_float+0x1be>
 800940a:	f1ab 0b02 	sub.w	fp, fp, #2
 800940e:	fa5f fb8b 	uxtb.w	fp, fp
 8009412:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009416:	d820      	bhi.n	800945a <_printf_float+0x18a>
 8009418:	3901      	subs	r1, #1
 800941a:	465a      	mov	r2, fp
 800941c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009420:	9109      	str	r1, [sp, #36]	; 0x24
 8009422:	f7ff ff17 	bl	8009254 <__exponent>
 8009426:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009428:	1813      	adds	r3, r2, r0
 800942a:	2a01      	cmp	r2, #1
 800942c:	4681      	mov	r9, r0
 800942e:	6123      	str	r3, [r4, #16]
 8009430:	dc02      	bgt.n	8009438 <_printf_float+0x168>
 8009432:	6822      	ldr	r2, [r4, #0]
 8009434:	07d2      	lsls	r2, r2, #31
 8009436:	d501      	bpl.n	800943c <_printf_float+0x16c>
 8009438:	3301      	adds	r3, #1
 800943a:	6123      	str	r3, [r4, #16]
 800943c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009440:	2b00      	cmp	r3, #0
 8009442:	d09c      	beq.n	800937e <_printf_float+0xae>
 8009444:	232d      	movs	r3, #45	; 0x2d
 8009446:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800944a:	e798      	b.n	800937e <_printf_float+0xae>
 800944c:	9a06      	ldr	r2, [sp, #24]
 800944e:	2a47      	cmp	r2, #71	; 0x47
 8009450:	d1be      	bne.n	80093d0 <_printf_float+0x100>
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1bc      	bne.n	80093d0 <_printf_float+0x100>
 8009456:	2301      	movs	r3, #1
 8009458:	e7b9      	b.n	80093ce <_printf_float+0xfe>
 800945a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800945e:	d118      	bne.n	8009492 <_printf_float+0x1c2>
 8009460:	2900      	cmp	r1, #0
 8009462:	6863      	ldr	r3, [r4, #4]
 8009464:	dd0b      	ble.n	800947e <_printf_float+0x1ae>
 8009466:	6121      	str	r1, [r4, #16]
 8009468:	b913      	cbnz	r3, 8009470 <_printf_float+0x1a0>
 800946a:	6822      	ldr	r2, [r4, #0]
 800946c:	07d0      	lsls	r0, r2, #31
 800946e:	d502      	bpl.n	8009476 <_printf_float+0x1a6>
 8009470:	3301      	adds	r3, #1
 8009472:	440b      	add	r3, r1
 8009474:	6123      	str	r3, [r4, #16]
 8009476:	65a1      	str	r1, [r4, #88]	; 0x58
 8009478:	f04f 0900 	mov.w	r9, #0
 800947c:	e7de      	b.n	800943c <_printf_float+0x16c>
 800947e:	b913      	cbnz	r3, 8009486 <_printf_float+0x1b6>
 8009480:	6822      	ldr	r2, [r4, #0]
 8009482:	07d2      	lsls	r2, r2, #31
 8009484:	d501      	bpl.n	800948a <_printf_float+0x1ba>
 8009486:	3302      	adds	r3, #2
 8009488:	e7f4      	b.n	8009474 <_printf_float+0x1a4>
 800948a:	2301      	movs	r3, #1
 800948c:	e7f2      	b.n	8009474 <_printf_float+0x1a4>
 800948e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009494:	4299      	cmp	r1, r3
 8009496:	db05      	blt.n	80094a4 <_printf_float+0x1d4>
 8009498:	6823      	ldr	r3, [r4, #0]
 800949a:	6121      	str	r1, [r4, #16]
 800949c:	07d8      	lsls	r0, r3, #31
 800949e:	d5ea      	bpl.n	8009476 <_printf_float+0x1a6>
 80094a0:	1c4b      	adds	r3, r1, #1
 80094a2:	e7e7      	b.n	8009474 <_printf_float+0x1a4>
 80094a4:	2900      	cmp	r1, #0
 80094a6:	bfd4      	ite	le
 80094a8:	f1c1 0202 	rsble	r2, r1, #2
 80094ac:	2201      	movgt	r2, #1
 80094ae:	4413      	add	r3, r2
 80094b0:	e7e0      	b.n	8009474 <_printf_float+0x1a4>
 80094b2:	6823      	ldr	r3, [r4, #0]
 80094b4:	055a      	lsls	r2, r3, #21
 80094b6:	d407      	bmi.n	80094c8 <_printf_float+0x1f8>
 80094b8:	6923      	ldr	r3, [r4, #16]
 80094ba:	4642      	mov	r2, r8
 80094bc:	4631      	mov	r1, r6
 80094be:	4628      	mov	r0, r5
 80094c0:	47b8      	blx	r7
 80094c2:	3001      	adds	r0, #1
 80094c4:	d12c      	bne.n	8009520 <_printf_float+0x250>
 80094c6:	e764      	b.n	8009392 <_printf_float+0xc2>
 80094c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80094cc:	f240 80e0 	bls.w	8009690 <_printf_float+0x3c0>
 80094d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094d4:	2200      	movs	r2, #0
 80094d6:	2300      	movs	r3, #0
 80094d8:	f7f7 faf6 	bl	8000ac8 <__aeabi_dcmpeq>
 80094dc:	2800      	cmp	r0, #0
 80094de:	d034      	beq.n	800954a <_printf_float+0x27a>
 80094e0:	4a37      	ldr	r2, [pc, #220]	; (80095c0 <_printf_float+0x2f0>)
 80094e2:	2301      	movs	r3, #1
 80094e4:	4631      	mov	r1, r6
 80094e6:	4628      	mov	r0, r5
 80094e8:	47b8      	blx	r7
 80094ea:	3001      	adds	r0, #1
 80094ec:	f43f af51 	beq.w	8009392 <_printf_float+0xc2>
 80094f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094f4:	429a      	cmp	r2, r3
 80094f6:	db02      	blt.n	80094fe <_printf_float+0x22e>
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	07d8      	lsls	r0, r3, #31
 80094fc:	d510      	bpl.n	8009520 <_printf_float+0x250>
 80094fe:	ee18 3a10 	vmov	r3, s16
 8009502:	4652      	mov	r2, sl
 8009504:	4631      	mov	r1, r6
 8009506:	4628      	mov	r0, r5
 8009508:	47b8      	blx	r7
 800950a:	3001      	adds	r0, #1
 800950c:	f43f af41 	beq.w	8009392 <_printf_float+0xc2>
 8009510:	f04f 0800 	mov.w	r8, #0
 8009514:	f104 091a 	add.w	r9, r4, #26
 8009518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800951a:	3b01      	subs	r3, #1
 800951c:	4543      	cmp	r3, r8
 800951e:	dc09      	bgt.n	8009534 <_printf_float+0x264>
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	079b      	lsls	r3, r3, #30
 8009524:	f100 8105 	bmi.w	8009732 <_printf_float+0x462>
 8009528:	68e0      	ldr	r0, [r4, #12]
 800952a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800952c:	4298      	cmp	r0, r3
 800952e:	bfb8      	it	lt
 8009530:	4618      	movlt	r0, r3
 8009532:	e730      	b.n	8009396 <_printf_float+0xc6>
 8009534:	2301      	movs	r3, #1
 8009536:	464a      	mov	r2, r9
 8009538:	4631      	mov	r1, r6
 800953a:	4628      	mov	r0, r5
 800953c:	47b8      	blx	r7
 800953e:	3001      	adds	r0, #1
 8009540:	f43f af27 	beq.w	8009392 <_printf_float+0xc2>
 8009544:	f108 0801 	add.w	r8, r8, #1
 8009548:	e7e6      	b.n	8009518 <_printf_float+0x248>
 800954a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800954c:	2b00      	cmp	r3, #0
 800954e:	dc39      	bgt.n	80095c4 <_printf_float+0x2f4>
 8009550:	4a1b      	ldr	r2, [pc, #108]	; (80095c0 <_printf_float+0x2f0>)
 8009552:	2301      	movs	r3, #1
 8009554:	4631      	mov	r1, r6
 8009556:	4628      	mov	r0, r5
 8009558:	47b8      	blx	r7
 800955a:	3001      	adds	r0, #1
 800955c:	f43f af19 	beq.w	8009392 <_printf_float+0xc2>
 8009560:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009564:	4313      	orrs	r3, r2
 8009566:	d102      	bne.n	800956e <_printf_float+0x29e>
 8009568:	6823      	ldr	r3, [r4, #0]
 800956a:	07d9      	lsls	r1, r3, #31
 800956c:	d5d8      	bpl.n	8009520 <_printf_float+0x250>
 800956e:	ee18 3a10 	vmov	r3, s16
 8009572:	4652      	mov	r2, sl
 8009574:	4631      	mov	r1, r6
 8009576:	4628      	mov	r0, r5
 8009578:	47b8      	blx	r7
 800957a:	3001      	adds	r0, #1
 800957c:	f43f af09 	beq.w	8009392 <_printf_float+0xc2>
 8009580:	f04f 0900 	mov.w	r9, #0
 8009584:	f104 0a1a 	add.w	sl, r4, #26
 8009588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800958a:	425b      	negs	r3, r3
 800958c:	454b      	cmp	r3, r9
 800958e:	dc01      	bgt.n	8009594 <_printf_float+0x2c4>
 8009590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009592:	e792      	b.n	80094ba <_printf_float+0x1ea>
 8009594:	2301      	movs	r3, #1
 8009596:	4652      	mov	r2, sl
 8009598:	4631      	mov	r1, r6
 800959a:	4628      	mov	r0, r5
 800959c:	47b8      	blx	r7
 800959e:	3001      	adds	r0, #1
 80095a0:	f43f aef7 	beq.w	8009392 <_printf_float+0xc2>
 80095a4:	f109 0901 	add.w	r9, r9, #1
 80095a8:	e7ee      	b.n	8009588 <_printf_float+0x2b8>
 80095aa:	bf00      	nop
 80095ac:	7fefffff 	.word	0x7fefffff
 80095b0:	08039a50 	.word	0x08039a50
 80095b4:	08039a54 	.word	0x08039a54
 80095b8:	08039a5c 	.word	0x08039a5c
 80095bc:	08039a58 	.word	0x08039a58
 80095c0:	08039a60 	.word	0x08039a60
 80095c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80095c8:	429a      	cmp	r2, r3
 80095ca:	bfa8      	it	ge
 80095cc:	461a      	movge	r2, r3
 80095ce:	2a00      	cmp	r2, #0
 80095d0:	4691      	mov	r9, r2
 80095d2:	dc37      	bgt.n	8009644 <_printf_float+0x374>
 80095d4:	f04f 0b00 	mov.w	fp, #0
 80095d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095dc:	f104 021a 	add.w	r2, r4, #26
 80095e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80095e2:	9305      	str	r3, [sp, #20]
 80095e4:	eba3 0309 	sub.w	r3, r3, r9
 80095e8:	455b      	cmp	r3, fp
 80095ea:	dc33      	bgt.n	8009654 <_printf_float+0x384>
 80095ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095f0:	429a      	cmp	r2, r3
 80095f2:	db3b      	blt.n	800966c <_printf_float+0x39c>
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	07da      	lsls	r2, r3, #31
 80095f8:	d438      	bmi.n	800966c <_printf_float+0x39c>
 80095fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095fc:	9a05      	ldr	r2, [sp, #20]
 80095fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009600:	1a9a      	subs	r2, r3, r2
 8009602:	eba3 0901 	sub.w	r9, r3, r1
 8009606:	4591      	cmp	r9, r2
 8009608:	bfa8      	it	ge
 800960a:	4691      	movge	r9, r2
 800960c:	f1b9 0f00 	cmp.w	r9, #0
 8009610:	dc35      	bgt.n	800967e <_printf_float+0x3ae>
 8009612:	f04f 0800 	mov.w	r8, #0
 8009616:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800961a:	f104 0a1a 	add.w	sl, r4, #26
 800961e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009622:	1a9b      	subs	r3, r3, r2
 8009624:	eba3 0309 	sub.w	r3, r3, r9
 8009628:	4543      	cmp	r3, r8
 800962a:	f77f af79 	ble.w	8009520 <_printf_float+0x250>
 800962e:	2301      	movs	r3, #1
 8009630:	4652      	mov	r2, sl
 8009632:	4631      	mov	r1, r6
 8009634:	4628      	mov	r0, r5
 8009636:	47b8      	blx	r7
 8009638:	3001      	adds	r0, #1
 800963a:	f43f aeaa 	beq.w	8009392 <_printf_float+0xc2>
 800963e:	f108 0801 	add.w	r8, r8, #1
 8009642:	e7ec      	b.n	800961e <_printf_float+0x34e>
 8009644:	4613      	mov	r3, r2
 8009646:	4631      	mov	r1, r6
 8009648:	4642      	mov	r2, r8
 800964a:	4628      	mov	r0, r5
 800964c:	47b8      	blx	r7
 800964e:	3001      	adds	r0, #1
 8009650:	d1c0      	bne.n	80095d4 <_printf_float+0x304>
 8009652:	e69e      	b.n	8009392 <_printf_float+0xc2>
 8009654:	2301      	movs	r3, #1
 8009656:	4631      	mov	r1, r6
 8009658:	4628      	mov	r0, r5
 800965a:	9205      	str	r2, [sp, #20]
 800965c:	47b8      	blx	r7
 800965e:	3001      	adds	r0, #1
 8009660:	f43f ae97 	beq.w	8009392 <_printf_float+0xc2>
 8009664:	9a05      	ldr	r2, [sp, #20]
 8009666:	f10b 0b01 	add.w	fp, fp, #1
 800966a:	e7b9      	b.n	80095e0 <_printf_float+0x310>
 800966c:	ee18 3a10 	vmov	r3, s16
 8009670:	4652      	mov	r2, sl
 8009672:	4631      	mov	r1, r6
 8009674:	4628      	mov	r0, r5
 8009676:	47b8      	blx	r7
 8009678:	3001      	adds	r0, #1
 800967a:	d1be      	bne.n	80095fa <_printf_float+0x32a>
 800967c:	e689      	b.n	8009392 <_printf_float+0xc2>
 800967e:	9a05      	ldr	r2, [sp, #20]
 8009680:	464b      	mov	r3, r9
 8009682:	4442      	add	r2, r8
 8009684:	4631      	mov	r1, r6
 8009686:	4628      	mov	r0, r5
 8009688:	47b8      	blx	r7
 800968a:	3001      	adds	r0, #1
 800968c:	d1c1      	bne.n	8009612 <_printf_float+0x342>
 800968e:	e680      	b.n	8009392 <_printf_float+0xc2>
 8009690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009692:	2a01      	cmp	r2, #1
 8009694:	dc01      	bgt.n	800969a <_printf_float+0x3ca>
 8009696:	07db      	lsls	r3, r3, #31
 8009698:	d538      	bpl.n	800970c <_printf_float+0x43c>
 800969a:	2301      	movs	r3, #1
 800969c:	4642      	mov	r2, r8
 800969e:	4631      	mov	r1, r6
 80096a0:	4628      	mov	r0, r5
 80096a2:	47b8      	blx	r7
 80096a4:	3001      	adds	r0, #1
 80096a6:	f43f ae74 	beq.w	8009392 <_printf_float+0xc2>
 80096aa:	ee18 3a10 	vmov	r3, s16
 80096ae:	4652      	mov	r2, sl
 80096b0:	4631      	mov	r1, r6
 80096b2:	4628      	mov	r0, r5
 80096b4:	47b8      	blx	r7
 80096b6:	3001      	adds	r0, #1
 80096b8:	f43f ae6b 	beq.w	8009392 <_printf_float+0xc2>
 80096bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80096c0:	2200      	movs	r2, #0
 80096c2:	2300      	movs	r3, #0
 80096c4:	f7f7 fa00 	bl	8000ac8 <__aeabi_dcmpeq>
 80096c8:	b9d8      	cbnz	r0, 8009702 <_printf_float+0x432>
 80096ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096cc:	f108 0201 	add.w	r2, r8, #1
 80096d0:	3b01      	subs	r3, #1
 80096d2:	4631      	mov	r1, r6
 80096d4:	4628      	mov	r0, r5
 80096d6:	47b8      	blx	r7
 80096d8:	3001      	adds	r0, #1
 80096da:	d10e      	bne.n	80096fa <_printf_float+0x42a>
 80096dc:	e659      	b.n	8009392 <_printf_float+0xc2>
 80096de:	2301      	movs	r3, #1
 80096e0:	4652      	mov	r2, sl
 80096e2:	4631      	mov	r1, r6
 80096e4:	4628      	mov	r0, r5
 80096e6:	47b8      	blx	r7
 80096e8:	3001      	adds	r0, #1
 80096ea:	f43f ae52 	beq.w	8009392 <_printf_float+0xc2>
 80096ee:	f108 0801 	add.w	r8, r8, #1
 80096f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096f4:	3b01      	subs	r3, #1
 80096f6:	4543      	cmp	r3, r8
 80096f8:	dcf1      	bgt.n	80096de <_printf_float+0x40e>
 80096fa:	464b      	mov	r3, r9
 80096fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009700:	e6dc      	b.n	80094bc <_printf_float+0x1ec>
 8009702:	f04f 0800 	mov.w	r8, #0
 8009706:	f104 0a1a 	add.w	sl, r4, #26
 800970a:	e7f2      	b.n	80096f2 <_printf_float+0x422>
 800970c:	2301      	movs	r3, #1
 800970e:	4642      	mov	r2, r8
 8009710:	e7df      	b.n	80096d2 <_printf_float+0x402>
 8009712:	2301      	movs	r3, #1
 8009714:	464a      	mov	r2, r9
 8009716:	4631      	mov	r1, r6
 8009718:	4628      	mov	r0, r5
 800971a:	47b8      	blx	r7
 800971c:	3001      	adds	r0, #1
 800971e:	f43f ae38 	beq.w	8009392 <_printf_float+0xc2>
 8009722:	f108 0801 	add.w	r8, r8, #1
 8009726:	68e3      	ldr	r3, [r4, #12]
 8009728:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800972a:	1a5b      	subs	r3, r3, r1
 800972c:	4543      	cmp	r3, r8
 800972e:	dcf0      	bgt.n	8009712 <_printf_float+0x442>
 8009730:	e6fa      	b.n	8009528 <_printf_float+0x258>
 8009732:	f04f 0800 	mov.w	r8, #0
 8009736:	f104 0919 	add.w	r9, r4, #25
 800973a:	e7f4      	b.n	8009726 <_printf_float+0x456>

0800973c <_printf_common>:
 800973c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009740:	4616      	mov	r6, r2
 8009742:	4699      	mov	r9, r3
 8009744:	688a      	ldr	r2, [r1, #8]
 8009746:	690b      	ldr	r3, [r1, #16]
 8009748:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800974c:	4293      	cmp	r3, r2
 800974e:	bfb8      	it	lt
 8009750:	4613      	movlt	r3, r2
 8009752:	6033      	str	r3, [r6, #0]
 8009754:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009758:	4607      	mov	r7, r0
 800975a:	460c      	mov	r4, r1
 800975c:	b10a      	cbz	r2, 8009762 <_printf_common+0x26>
 800975e:	3301      	adds	r3, #1
 8009760:	6033      	str	r3, [r6, #0]
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	0699      	lsls	r1, r3, #26
 8009766:	bf42      	ittt	mi
 8009768:	6833      	ldrmi	r3, [r6, #0]
 800976a:	3302      	addmi	r3, #2
 800976c:	6033      	strmi	r3, [r6, #0]
 800976e:	6825      	ldr	r5, [r4, #0]
 8009770:	f015 0506 	ands.w	r5, r5, #6
 8009774:	d106      	bne.n	8009784 <_printf_common+0x48>
 8009776:	f104 0a19 	add.w	sl, r4, #25
 800977a:	68e3      	ldr	r3, [r4, #12]
 800977c:	6832      	ldr	r2, [r6, #0]
 800977e:	1a9b      	subs	r3, r3, r2
 8009780:	42ab      	cmp	r3, r5
 8009782:	dc26      	bgt.n	80097d2 <_printf_common+0x96>
 8009784:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009788:	1e13      	subs	r3, r2, #0
 800978a:	6822      	ldr	r2, [r4, #0]
 800978c:	bf18      	it	ne
 800978e:	2301      	movne	r3, #1
 8009790:	0692      	lsls	r2, r2, #26
 8009792:	d42b      	bmi.n	80097ec <_printf_common+0xb0>
 8009794:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009798:	4649      	mov	r1, r9
 800979a:	4638      	mov	r0, r7
 800979c:	47c0      	blx	r8
 800979e:	3001      	adds	r0, #1
 80097a0:	d01e      	beq.n	80097e0 <_printf_common+0xa4>
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	68e5      	ldr	r5, [r4, #12]
 80097a6:	6832      	ldr	r2, [r6, #0]
 80097a8:	f003 0306 	and.w	r3, r3, #6
 80097ac:	2b04      	cmp	r3, #4
 80097ae:	bf08      	it	eq
 80097b0:	1aad      	subeq	r5, r5, r2
 80097b2:	68a3      	ldr	r3, [r4, #8]
 80097b4:	6922      	ldr	r2, [r4, #16]
 80097b6:	bf0c      	ite	eq
 80097b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097bc:	2500      	movne	r5, #0
 80097be:	4293      	cmp	r3, r2
 80097c0:	bfc4      	itt	gt
 80097c2:	1a9b      	subgt	r3, r3, r2
 80097c4:	18ed      	addgt	r5, r5, r3
 80097c6:	2600      	movs	r6, #0
 80097c8:	341a      	adds	r4, #26
 80097ca:	42b5      	cmp	r5, r6
 80097cc:	d11a      	bne.n	8009804 <_printf_common+0xc8>
 80097ce:	2000      	movs	r0, #0
 80097d0:	e008      	b.n	80097e4 <_printf_common+0xa8>
 80097d2:	2301      	movs	r3, #1
 80097d4:	4652      	mov	r2, sl
 80097d6:	4649      	mov	r1, r9
 80097d8:	4638      	mov	r0, r7
 80097da:	47c0      	blx	r8
 80097dc:	3001      	adds	r0, #1
 80097de:	d103      	bne.n	80097e8 <_printf_common+0xac>
 80097e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097e8:	3501      	adds	r5, #1
 80097ea:	e7c6      	b.n	800977a <_printf_common+0x3e>
 80097ec:	18e1      	adds	r1, r4, r3
 80097ee:	1c5a      	adds	r2, r3, #1
 80097f0:	2030      	movs	r0, #48	; 0x30
 80097f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097f6:	4422      	add	r2, r4
 80097f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009800:	3302      	adds	r3, #2
 8009802:	e7c7      	b.n	8009794 <_printf_common+0x58>
 8009804:	2301      	movs	r3, #1
 8009806:	4622      	mov	r2, r4
 8009808:	4649      	mov	r1, r9
 800980a:	4638      	mov	r0, r7
 800980c:	47c0      	blx	r8
 800980e:	3001      	adds	r0, #1
 8009810:	d0e6      	beq.n	80097e0 <_printf_common+0xa4>
 8009812:	3601      	adds	r6, #1
 8009814:	e7d9      	b.n	80097ca <_printf_common+0x8e>
	...

08009818 <_printf_i>:
 8009818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800981c:	7e0f      	ldrb	r7, [r1, #24]
 800981e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009820:	2f78      	cmp	r7, #120	; 0x78
 8009822:	4691      	mov	r9, r2
 8009824:	4680      	mov	r8, r0
 8009826:	460c      	mov	r4, r1
 8009828:	469a      	mov	sl, r3
 800982a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800982e:	d807      	bhi.n	8009840 <_printf_i+0x28>
 8009830:	2f62      	cmp	r7, #98	; 0x62
 8009832:	d80a      	bhi.n	800984a <_printf_i+0x32>
 8009834:	2f00      	cmp	r7, #0
 8009836:	f000 80d8 	beq.w	80099ea <_printf_i+0x1d2>
 800983a:	2f58      	cmp	r7, #88	; 0x58
 800983c:	f000 80a3 	beq.w	8009986 <_printf_i+0x16e>
 8009840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009844:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009848:	e03a      	b.n	80098c0 <_printf_i+0xa8>
 800984a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800984e:	2b15      	cmp	r3, #21
 8009850:	d8f6      	bhi.n	8009840 <_printf_i+0x28>
 8009852:	a101      	add	r1, pc, #4	; (adr r1, 8009858 <_printf_i+0x40>)
 8009854:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009858:	080098b1 	.word	0x080098b1
 800985c:	080098c5 	.word	0x080098c5
 8009860:	08009841 	.word	0x08009841
 8009864:	08009841 	.word	0x08009841
 8009868:	08009841 	.word	0x08009841
 800986c:	08009841 	.word	0x08009841
 8009870:	080098c5 	.word	0x080098c5
 8009874:	08009841 	.word	0x08009841
 8009878:	08009841 	.word	0x08009841
 800987c:	08009841 	.word	0x08009841
 8009880:	08009841 	.word	0x08009841
 8009884:	080099d1 	.word	0x080099d1
 8009888:	080098f5 	.word	0x080098f5
 800988c:	080099b3 	.word	0x080099b3
 8009890:	08009841 	.word	0x08009841
 8009894:	08009841 	.word	0x08009841
 8009898:	080099f3 	.word	0x080099f3
 800989c:	08009841 	.word	0x08009841
 80098a0:	080098f5 	.word	0x080098f5
 80098a4:	08009841 	.word	0x08009841
 80098a8:	08009841 	.word	0x08009841
 80098ac:	080099bb 	.word	0x080099bb
 80098b0:	682b      	ldr	r3, [r5, #0]
 80098b2:	1d1a      	adds	r2, r3, #4
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	602a      	str	r2, [r5, #0]
 80098b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098c0:	2301      	movs	r3, #1
 80098c2:	e0a3      	b.n	8009a0c <_printf_i+0x1f4>
 80098c4:	6820      	ldr	r0, [r4, #0]
 80098c6:	6829      	ldr	r1, [r5, #0]
 80098c8:	0606      	lsls	r6, r0, #24
 80098ca:	f101 0304 	add.w	r3, r1, #4
 80098ce:	d50a      	bpl.n	80098e6 <_printf_i+0xce>
 80098d0:	680e      	ldr	r6, [r1, #0]
 80098d2:	602b      	str	r3, [r5, #0]
 80098d4:	2e00      	cmp	r6, #0
 80098d6:	da03      	bge.n	80098e0 <_printf_i+0xc8>
 80098d8:	232d      	movs	r3, #45	; 0x2d
 80098da:	4276      	negs	r6, r6
 80098dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098e0:	485e      	ldr	r0, [pc, #376]	; (8009a5c <_printf_i+0x244>)
 80098e2:	230a      	movs	r3, #10
 80098e4:	e019      	b.n	800991a <_printf_i+0x102>
 80098e6:	680e      	ldr	r6, [r1, #0]
 80098e8:	602b      	str	r3, [r5, #0]
 80098ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80098ee:	bf18      	it	ne
 80098f0:	b236      	sxthne	r6, r6
 80098f2:	e7ef      	b.n	80098d4 <_printf_i+0xbc>
 80098f4:	682b      	ldr	r3, [r5, #0]
 80098f6:	6820      	ldr	r0, [r4, #0]
 80098f8:	1d19      	adds	r1, r3, #4
 80098fa:	6029      	str	r1, [r5, #0]
 80098fc:	0601      	lsls	r1, r0, #24
 80098fe:	d501      	bpl.n	8009904 <_printf_i+0xec>
 8009900:	681e      	ldr	r6, [r3, #0]
 8009902:	e002      	b.n	800990a <_printf_i+0xf2>
 8009904:	0646      	lsls	r6, r0, #25
 8009906:	d5fb      	bpl.n	8009900 <_printf_i+0xe8>
 8009908:	881e      	ldrh	r6, [r3, #0]
 800990a:	4854      	ldr	r0, [pc, #336]	; (8009a5c <_printf_i+0x244>)
 800990c:	2f6f      	cmp	r7, #111	; 0x6f
 800990e:	bf0c      	ite	eq
 8009910:	2308      	moveq	r3, #8
 8009912:	230a      	movne	r3, #10
 8009914:	2100      	movs	r1, #0
 8009916:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800991a:	6865      	ldr	r5, [r4, #4]
 800991c:	60a5      	str	r5, [r4, #8]
 800991e:	2d00      	cmp	r5, #0
 8009920:	bfa2      	ittt	ge
 8009922:	6821      	ldrge	r1, [r4, #0]
 8009924:	f021 0104 	bicge.w	r1, r1, #4
 8009928:	6021      	strge	r1, [r4, #0]
 800992a:	b90e      	cbnz	r6, 8009930 <_printf_i+0x118>
 800992c:	2d00      	cmp	r5, #0
 800992e:	d04d      	beq.n	80099cc <_printf_i+0x1b4>
 8009930:	4615      	mov	r5, r2
 8009932:	fbb6 f1f3 	udiv	r1, r6, r3
 8009936:	fb03 6711 	mls	r7, r3, r1, r6
 800993a:	5dc7      	ldrb	r7, [r0, r7]
 800993c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009940:	4637      	mov	r7, r6
 8009942:	42bb      	cmp	r3, r7
 8009944:	460e      	mov	r6, r1
 8009946:	d9f4      	bls.n	8009932 <_printf_i+0x11a>
 8009948:	2b08      	cmp	r3, #8
 800994a:	d10b      	bne.n	8009964 <_printf_i+0x14c>
 800994c:	6823      	ldr	r3, [r4, #0]
 800994e:	07de      	lsls	r6, r3, #31
 8009950:	d508      	bpl.n	8009964 <_printf_i+0x14c>
 8009952:	6923      	ldr	r3, [r4, #16]
 8009954:	6861      	ldr	r1, [r4, #4]
 8009956:	4299      	cmp	r1, r3
 8009958:	bfde      	ittt	le
 800995a:	2330      	movle	r3, #48	; 0x30
 800995c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009960:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009964:	1b52      	subs	r2, r2, r5
 8009966:	6122      	str	r2, [r4, #16]
 8009968:	f8cd a000 	str.w	sl, [sp]
 800996c:	464b      	mov	r3, r9
 800996e:	aa03      	add	r2, sp, #12
 8009970:	4621      	mov	r1, r4
 8009972:	4640      	mov	r0, r8
 8009974:	f7ff fee2 	bl	800973c <_printf_common>
 8009978:	3001      	adds	r0, #1
 800997a:	d14c      	bne.n	8009a16 <_printf_i+0x1fe>
 800997c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009980:	b004      	add	sp, #16
 8009982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009986:	4835      	ldr	r0, [pc, #212]	; (8009a5c <_printf_i+0x244>)
 8009988:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800998c:	6829      	ldr	r1, [r5, #0]
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	f851 6b04 	ldr.w	r6, [r1], #4
 8009994:	6029      	str	r1, [r5, #0]
 8009996:	061d      	lsls	r5, r3, #24
 8009998:	d514      	bpl.n	80099c4 <_printf_i+0x1ac>
 800999a:	07df      	lsls	r7, r3, #31
 800999c:	bf44      	itt	mi
 800999e:	f043 0320 	orrmi.w	r3, r3, #32
 80099a2:	6023      	strmi	r3, [r4, #0]
 80099a4:	b91e      	cbnz	r6, 80099ae <_printf_i+0x196>
 80099a6:	6823      	ldr	r3, [r4, #0]
 80099a8:	f023 0320 	bic.w	r3, r3, #32
 80099ac:	6023      	str	r3, [r4, #0]
 80099ae:	2310      	movs	r3, #16
 80099b0:	e7b0      	b.n	8009914 <_printf_i+0xfc>
 80099b2:	6823      	ldr	r3, [r4, #0]
 80099b4:	f043 0320 	orr.w	r3, r3, #32
 80099b8:	6023      	str	r3, [r4, #0]
 80099ba:	2378      	movs	r3, #120	; 0x78
 80099bc:	4828      	ldr	r0, [pc, #160]	; (8009a60 <_printf_i+0x248>)
 80099be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099c2:	e7e3      	b.n	800998c <_printf_i+0x174>
 80099c4:	0659      	lsls	r1, r3, #25
 80099c6:	bf48      	it	mi
 80099c8:	b2b6      	uxthmi	r6, r6
 80099ca:	e7e6      	b.n	800999a <_printf_i+0x182>
 80099cc:	4615      	mov	r5, r2
 80099ce:	e7bb      	b.n	8009948 <_printf_i+0x130>
 80099d0:	682b      	ldr	r3, [r5, #0]
 80099d2:	6826      	ldr	r6, [r4, #0]
 80099d4:	6961      	ldr	r1, [r4, #20]
 80099d6:	1d18      	adds	r0, r3, #4
 80099d8:	6028      	str	r0, [r5, #0]
 80099da:	0635      	lsls	r5, r6, #24
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	d501      	bpl.n	80099e4 <_printf_i+0x1cc>
 80099e0:	6019      	str	r1, [r3, #0]
 80099e2:	e002      	b.n	80099ea <_printf_i+0x1d2>
 80099e4:	0670      	lsls	r0, r6, #25
 80099e6:	d5fb      	bpl.n	80099e0 <_printf_i+0x1c8>
 80099e8:	8019      	strh	r1, [r3, #0]
 80099ea:	2300      	movs	r3, #0
 80099ec:	6123      	str	r3, [r4, #16]
 80099ee:	4615      	mov	r5, r2
 80099f0:	e7ba      	b.n	8009968 <_printf_i+0x150>
 80099f2:	682b      	ldr	r3, [r5, #0]
 80099f4:	1d1a      	adds	r2, r3, #4
 80099f6:	602a      	str	r2, [r5, #0]
 80099f8:	681d      	ldr	r5, [r3, #0]
 80099fa:	6862      	ldr	r2, [r4, #4]
 80099fc:	2100      	movs	r1, #0
 80099fe:	4628      	mov	r0, r5
 8009a00:	f7f6 fbee 	bl	80001e0 <memchr>
 8009a04:	b108      	cbz	r0, 8009a0a <_printf_i+0x1f2>
 8009a06:	1b40      	subs	r0, r0, r5
 8009a08:	6060      	str	r0, [r4, #4]
 8009a0a:	6863      	ldr	r3, [r4, #4]
 8009a0c:	6123      	str	r3, [r4, #16]
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a14:	e7a8      	b.n	8009968 <_printf_i+0x150>
 8009a16:	6923      	ldr	r3, [r4, #16]
 8009a18:	462a      	mov	r2, r5
 8009a1a:	4649      	mov	r1, r9
 8009a1c:	4640      	mov	r0, r8
 8009a1e:	47d0      	blx	sl
 8009a20:	3001      	adds	r0, #1
 8009a22:	d0ab      	beq.n	800997c <_printf_i+0x164>
 8009a24:	6823      	ldr	r3, [r4, #0]
 8009a26:	079b      	lsls	r3, r3, #30
 8009a28:	d413      	bmi.n	8009a52 <_printf_i+0x23a>
 8009a2a:	68e0      	ldr	r0, [r4, #12]
 8009a2c:	9b03      	ldr	r3, [sp, #12]
 8009a2e:	4298      	cmp	r0, r3
 8009a30:	bfb8      	it	lt
 8009a32:	4618      	movlt	r0, r3
 8009a34:	e7a4      	b.n	8009980 <_printf_i+0x168>
 8009a36:	2301      	movs	r3, #1
 8009a38:	4632      	mov	r2, r6
 8009a3a:	4649      	mov	r1, r9
 8009a3c:	4640      	mov	r0, r8
 8009a3e:	47d0      	blx	sl
 8009a40:	3001      	adds	r0, #1
 8009a42:	d09b      	beq.n	800997c <_printf_i+0x164>
 8009a44:	3501      	adds	r5, #1
 8009a46:	68e3      	ldr	r3, [r4, #12]
 8009a48:	9903      	ldr	r1, [sp, #12]
 8009a4a:	1a5b      	subs	r3, r3, r1
 8009a4c:	42ab      	cmp	r3, r5
 8009a4e:	dcf2      	bgt.n	8009a36 <_printf_i+0x21e>
 8009a50:	e7eb      	b.n	8009a2a <_printf_i+0x212>
 8009a52:	2500      	movs	r5, #0
 8009a54:	f104 0619 	add.w	r6, r4, #25
 8009a58:	e7f5      	b.n	8009a46 <_printf_i+0x22e>
 8009a5a:	bf00      	nop
 8009a5c:	08039a62 	.word	0x08039a62
 8009a60:	08039a73 	.word	0x08039a73

08009a64 <iprintf>:
 8009a64:	b40f      	push	{r0, r1, r2, r3}
 8009a66:	4b0a      	ldr	r3, [pc, #40]	; (8009a90 <iprintf+0x2c>)
 8009a68:	b513      	push	{r0, r1, r4, lr}
 8009a6a:	681c      	ldr	r4, [r3, #0]
 8009a6c:	b124      	cbz	r4, 8009a78 <iprintf+0x14>
 8009a6e:	69a3      	ldr	r3, [r4, #24]
 8009a70:	b913      	cbnz	r3, 8009a78 <iprintf+0x14>
 8009a72:	4620      	mov	r0, r4
 8009a74:	f7ff f96c 	bl	8008d50 <__sinit>
 8009a78:	ab05      	add	r3, sp, #20
 8009a7a:	9a04      	ldr	r2, [sp, #16]
 8009a7c:	68a1      	ldr	r1, [r4, #8]
 8009a7e:	9301      	str	r3, [sp, #4]
 8009a80:	4620      	mov	r0, r4
 8009a82:	f001 fc73 	bl	800b36c <_vfiprintf_r>
 8009a86:	b002      	add	sp, #8
 8009a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a8c:	b004      	add	sp, #16
 8009a8e:	4770      	bx	lr
 8009a90:	20000014 	.word	0x20000014

08009a94 <_puts_r>:
 8009a94:	b570      	push	{r4, r5, r6, lr}
 8009a96:	460e      	mov	r6, r1
 8009a98:	4605      	mov	r5, r0
 8009a9a:	b118      	cbz	r0, 8009aa4 <_puts_r+0x10>
 8009a9c:	6983      	ldr	r3, [r0, #24]
 8009a9e:	b90b      	cbnz	r3, 8009aa4 <_puts_r+0x10>
 8009aa0:	f7ff f956 	bl	8008d50 <__sinit>
 8009aa4:	69ab      	ldr	r3, [r5, #24]
 8009aa6:	68ac      	ldr	r4, [r5, #8]
 8009aa8:	b913      	cbnz	r3, 8009ab0 <_puts_r+0x1c>
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f7ff f950 	bl	8008d50 <__sinit>
 8009ab0:	4b2c      	ldr	r3, [pc, #176]	; (8009b64 <_puts_r+0xd0>)
 8009ab2:	429c      	cmp	r4, r3
 8009ab4:	d120      	bne.n	8009af8 <_puts_r+0x64>
 8009ab6:	686c      	ldr	r4, [r5, #4]
 8009ab8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009aba:	07db      	lsls	r3, r3, #31
 8009abc:	d405      	bmi.n	8009aca <_puts_r+0x36>
 8009abe:	89a3      	ldrh	r3, [r4, #12]
 8009ac0:	0598      	lsls	r0, r3, #22
 8009ac2:	d402      	bmi.n	8009aca <_puts_r+0x36>
 8009ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ac6:	f7ff fa06 	bl	8008ed6 <__retarget_lock_acquire_recursive>
 8009aca:	89a3      	ldrh	r3, [r4, #12]
 8009acc:	0719      	lsls	r1, r3, #28
 8009ace:	d51d      	bpl.n	8009b0c <_puts_r+0x78>
 8009ad0:	6923      	ldr	r3, [r4, #16]
 8009ad2:	b1db      	cbz	r3, 8009b0c <_puts_r+0x78>
 8009ad4:	3e01      	subs	r6, #1
 8009ad6:	68a3      	ldr	r3, [r4, #8]
 8009ad8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009adc:	3b01      	subs	r3, #1
 8009ade:	60a3      	str	r3, [r4, #8]
 8009ae0:	bb39      	cbnz	r1, 8009b32 <_puts_r+0x9e>
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	da38      	bge.n	8009b58 <_puts_r+0xc4>
 8009ae6:	4622      	mov	r2, r4
 8009ae8:	210a      	movs	r1, #10
 8009aea:	4628      	mov	r0, r5
 8009aec:	f000 f8d0 	bl	8009c90 <__swbuf_r>
 8009af0:	3001      	adds	r0, #1
 8009af2:	d011      	beq.n	8009b18 <_puts_r+0x84>
 8009af4:	250a      	movs	r5, #10
 8009af6:	e011      	b.n	8009b1c <_puts_r+0x88>
 8009af8:	4b1b      	ldr	r3, [pc, #108]	; (8009b68 <_puts_r+0xd4>)
 8009afa:	429c      	cmp	r4, r3
 8009afc:	d101      	bne.n	8009b02 <_puts_r+0x6e>
 8009afe:	68ac      	ldr	r4, [r5, #8]
 8009b00:	e7da      	b.n	8009ab8 <_puts_r+0x24>
 8009b02:	4b1a      	ldr	r3, [pc, #104]	; (8009b6c <_puts_r+0xd8>)
 8009b04:	429c      	cmp	r4, r3
 8009b06:	bf08      	it	eq
 8009b08:	68ec      	ldreq	r4, [r5, #12]
 8009b0a:	e7d5      	b.n	8009ab8 <_puts_r+0x24>
 8009b0c:	4621      	mov	r1, r4
 8009b0e:	4628      	mov	r0, r5
 8009b10:	f000 f922 	bl	8009d58 <__swsetup_r>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	d0dd      	beq.n	8009ad4 <_puts_r+0x40>
 8009b18:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009b1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b1e:	07da      	lsls	r2, r3, #31
 8009b20:	d405      	bmi.n	8009b2e <_puts_r+0x9a>
 8009b22:	89a3      	ldrh	r3, [r4, #12]
 8009b24:	059b      	lsls	r3, r3, #22
 8009b26:	d402      	bmi.n	8009b2e <_puts_r+0x9a>
 8009b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b2a:	f7ff f9d5 	bl	8008ed8 <__retarget_lock_release_recursive>
 8009b2e:	4628      	mov	r0, r5
 8009b30:	bd70      	pop	{r4, r5, r6, pc}
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	da04      	bge.n	8009b40 <_puts_r+0xac>
 8009b36:	69a2      	ldr	r2, [r4, #24]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	dc06      	bgt.n	8009b4a <_puts_r+0xb6>
 8009b3c:	290a      	cmp	r1, #10
 8009b3e:	d004      	beq.n	8009b4a <_puts_r+0xb6>
 8009b40:	6823      	ldr	r3, [r4, #0]
 8009b42:	1c5a      	adds	r2, r3, #1
 8009b44:	6022      	str	r2, [r4, #0]
 8009b46:	7019      	strb	r1, [r3, #0]
 8009b48:	e7c5      	b.n	8009ad6 <_puts_r+0x42>
 8009b4a:	4622      	mov	r2, r4
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	f000 f89f 	bl	8009c90 <__swbuf_r>
 8009b52:	3001      	adds	r0, #1
 8009b54:	d1bf      	bne.n	8009ad6 <_puts_r+0x42>
 8009b56:	e7df      	b.n	8009b18 <_puts_r+0x84>
 8009b58:	6823      	ldr	r3, [r4, #0]
 8009b5a:	250a      	movs	r5, #10
 8009b5c:	1c5a      	adds	r2, r3, #1
 8009b5e:	6022      	str	r2, [r4, #0]
 8009b60:	701d      	strb	r5, [r3, #0]
 8009b62:	e7db      	b.n	8009b1c <_puts_r+0x88>
 8009b64:	08039a0c 	.word	0x08039a0c
 8009b68:	08039a2c 	.word	0x08039a2c
 8009b6c:	080399ec 	.word	0x080399ec

08009b70 <puts>:
 8009b70:	4b02      	ldr	r3, [pc, #8]	; (8009b7c <puts+0xc>)
 8009b72:	4601      	mov	r1, r0
 8009b74:	6818      	ldr	r0, [r3, #0]
 8009b76:	f7ff bf8d 	b.w	8009a94 <_puts_r>
 8009b7a:	bf00      	nop
 8009b7c:	20000014 	.word	0x20000014

08009b80 <_sbrk_r>:
 8009b80:	b538      	push	{r3, r4, r5, lr}
 8009b82:	4d06      	ldr	r5, [pc, #24]	; (8009b9c <_sbrk_r+0x1c>)
 8009b84:	2300      	movs	r3, #0
 8009b86:	4604      	mov	r4, r0
 8009b88:	4608      	mov	r0, r1
 8009b8a:	602b      	str	r3, [r5, #0]
 8009b8c:	f7f8 fcc6 	bl	800251c <_sbrk>
 8009b90:	1c43      	adds	r3, r0, #1
 8009b92:	d102      	bne.n	8009b9a <_sbrk_r+0x1a>
 8009b94:	682b      	ldr	r3, [r5, #0]
 8009b96:	b103      	cbz	r3, 8009b9a <_sbrk_r+0x1a>
 8009b98:	6023      	str	r3, [r4, #0]
 8009b9a:	bd38      	pop	{r3, r4, r5, pc}
 8009b9c:	2000a4b8 	.word	0x2000a4b8

08009ba0 <__sread>:
 8009ba0:	b510      	push	{r4, lr}
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ba8:	f001 fd10 	bl	800b5cc <_read_r>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	bfab      	itete	ge
 8009bb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009bb2:	89a3      	ldrhlt	r3, [r4, #12]
 8009bb4:	181b      	addge	r3, r3, r0
 8009bb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009bba:	bfac      	ite	ge
 8009bbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009bbe:	81a3      	strhlt	r3, [r4, #12]
 8009bc0:	bd10      	pop	{r4, pc}

08009bc2 <__swrite>:
 8009bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc6:	461f      	mov	r7, r3
 8009bc8:	898b      	ldrh	r3, [r1, #12]
 8009bca:	05db      	lsls	r3, r3, #23
 8009bcc:	4605      	mov	r5, r0
 8009bce:	460c      	mov	r4, r1
 8009bd0:	4616      	mov	r6, r2
 8009bd2:	d505      	bpl.n	8009be0 <__swrite+0x1e>
 8009bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bd8:	2302      	movs	r3, #2
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f000 ffdc 	bl	800ab98 <_lseek_r>
 8009be0:	89a3      	ldrh	r3, [r4, #12]
 8009be2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009be6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bea:	81a3      	strh	r3, [r4, #12]
 8009bec:	4632      	mov	r2, r6
 8009bee:	463b      	mov	r3, r7
 8009bf0:	4628      	mov	r0, r5
 8009bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bf6:	f000 b89d 	b.w	8009d34 <_write_r>

08009bfa <__sseek>:
 8009bfa:	b510      	push	{r4, lr}
 8009bfc:	460c      	mov	r4, r1
 8009bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c02:	f000 ffc9 	bl	800ab98 <_lseek_r>
 8009c06:	1c43      	adds	r3, r0, #1
 8009c08:	89a3      	ldrh	r3, [r4, #12]
 8009c0a:	bf15      	itete	ne
 8009c0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c16:	81a3      	strheq	r3, [r4, #12]
 8009c18:	bf18      	it	ne
 8009c1a:	81a3      	strhne	r3, [r4, #12]
 8009c1c:	bd10      	pop	{r4, pc}

08009c1e <__sclose>:
 8009c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c22:	f000 b907 	b.w	8009e34 <_close_r>
	...

08009c28 <swprintf>:
 8009c28:	b40c      	push	{r2, r3}
 8009c2a:	b530      	push	{r4, r5, lr}
 8009c2c:	4b17      	ldr	r3, [pc, #92]	; (8009c8c <swprintf+0x64>)
 8009c2e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8009c32:	681d      	ldr	r5, [r3, #0]
 8009c34:	b09d      	sub	sp, #116	; 0x74
 8009c36:	460c      	mov	r4, r1
 8009c38:	d308      	bcc.n	8009c4c <swprintf+0x24>
 8009c3a:	238b      	movs	r3, #139	; 0x8b
 8009c3c:	602b      	str	r3, [r5, #0]
 8009c3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c42:	b01d      	add	sp, #116	; 0x74
 8009c44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c48:	b002      	add	sp, #8
 8009c4a:	4770      	bx	lr
 8009c4c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009c50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009c54:	9002      	str	r0, [sp, #8]
 8009c56:	9006      	str	r0, [sp, #24]
 8009c58:	b1b1      	cbz	r1, 8009c88 <swprintf+0x60>
 8009c5a:	1e4b      	subs	r3, r1, #1
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	9304      	str	r3, [sp, #16]
 8009c60:	9307      	str	r3, [sp, #28]
 8009c62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c66:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009c6a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009c6c:	ab21      	add	r3, sp, #132	; 0x84
 8009c6e:	a902      	add	r1, sp, #8
 8009c70:	4628      	mov	r0, r5
 8009c72:	9301      	str	r3, [sp, #4]
 8009c74:	f001 fd2c 	bl	800b6d0 <_svfwprintf_r>
 8009c78:	2c00      	cmp	r4, #0
 8009c7a:	d0de      	beq.n	8009c3a <swprintf+0x12>
 8009c7c:	9b02      	ldr	r3, [sp, #8]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	42a0      	cmp	r0, r4
 8009c82:	601a      	str	r2, [r3, #0]
 8009c84:	d3dd      	bcc.n	8009c42 <swprintf+0x1a>
 8009c86:	e7d8      	b.n	8009c3a <swprintf+0x12>
 8009c88:	460b      	mov	r3, r1
 8009c8a:	e7e8      	b.n	8009c5e <swprintf+0x36>
 8009c8c:	20000014 	.word	0x20000014

08009c90 <__swbuf_r>:
 8009c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c92:	460e      	mov	r6, r1
 8009c94:	4614      	mov	r4, r2
 8009c96:	4605      	mov	r5, r0
 8009c98:	b118      	cbz	r0, 8009ca2 <__swbuf_r+0x12>
 8009c9a:	6983      	ldr	r3, [r0, #24]
 8009c9c:	b90b      	cbnz	r3, 8009ca2 <__swbuf_r+0x12>
 8009c9e:	f7ff f857 	bl	8008d50 <__sinit>
 8009ca2:	4b21      	ldr	r3, [pc, #132]	; (8009d28 <__swbuf_r+0x98>)
 8009ca4:	429c      	cmp	r4, r3
 8009ca6:	d12b      	bne.n	8009d00 <__swbuf_r+0x70>
 8009ca8:	686c      	ldr	r4, [r5, #4]
 8009caa:	69a3      	ldr	r3, [r4, #24]
 8009cac:	60a3      	str	r3, [r4, #8]
 8009cae:	89a3      	ldrh	r3, [r4, #12]
 8009cb0:	071a      	lsls	r2, r3, #28
 8009cb2:	d52f      	bpl.n	8009d14 <__swbuf_r+0x84>
 8009cb4:	6923      	ldr	r3, [r4, #16]
 8009cb6:	b36b      	cbz	r3, 8009d14 <__swbuf_r+0x84>
 8009cb8:	6923      	ldr	r3, [r4, #16]
 8009cba:	6820      	ldr	r0, [r4, #0]
 8009cbc:	1ac0      	subs	r0, r0, r3
 8009cbe:	6963      	ldr	r3, [r4, #20]
 8009cc0:	b2f6      	uxtb	r6, r6
 8009cc2:	4283      	cmp	r3, r0
 8009cc4:	4637      	mov	r7, r6
 8009cc6:	dc04      	bgt.n	8009cd2 <__swbuf_r+0x42>
 8009cc8:	4621      	mov	r1, r4
 8009cca:	4628      	mov	r0, r5
 8009ccc:	f7fe ffac 	bl	8008c28 <_fflush_r>
 8009cd0:	bb30      	cbnz	r0, 8009d20 <__swbuf_r+0x90>
 8009cd2:	68a3      	ldr	r3, [r4, #8]
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	60a3      	str	r3, [r4, #8]
 8009cd8:	6823      	ldr	r3, [r4, #0]
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	6022      	str	r2, [r4, #0]
 8009cde:	701e      	strb	r6, [r3, #0]
 8009ce0:	6963      	ldr	r3, [r4, #20]
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	4283      	cmp	r3, r0
 8009ce6:	d004      	beq.n	8009cf2 <__swbuf_r+0x62>
 8009ce8:	89a3      	ldrh	r3, [r4, #12]
 8009cea:	07db      	lsls	r3, r3, #31
 8009cec:	d506      	bpl.n	8009cfc <__swbuf_r+0x6c>
 8009cee:	2e0a      	cmp	r6, #10
 8009cf0:	d104      	bne.n	8009cfc <__swbuf_r+0x6c>
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	f7fe ff97 	bl	8008c28 <_fflush_r>
 8009cfa:	b988      	cbnz	r0, 8009d20 <__swbuf_r+0x90>
 8009cfc:	4638      	mov	r0, r7
 8009cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d00:	4b0a      	ldr	r3, [pc, #40]	; (8009d2c <__swbuf_r+0x9c>)
 8009d02:	429c      	cmp	r4, r3
 8009d04:	d101      	bne.n	8009d0a <__swbuf_r+0x7a>
 8009d06:	68ac      	ldr	r4, [r5, #8]
 8009d08:	e7cf      	b.n	8009caa <__swbuf_r+0x1a>
 8009d0a:	4b09      	ldr	r3, [pc, #36]	; (8009d30 <__swbuf_r+0xa0>)
 8009d0c:	429c      	cmp	r4, r3
 8009d0e:	bf08      	it	eq
 8009d10:	68ec      	ldreq	r4, [r5, #12]
 8009d12:	e7ca      	b.n	8009caa <__swbuf_r+0x1a>
 8009d14:	4621      	mov	r1, r4
 8009d16:	4628      	mov	r0, r5
 8009d18:	f000 f81e 	bl	8009d58 <__swsetup_r>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d0cb      	beq.n	8009cb8 <__swbuf_r+0x28>
 8009d20:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009d24:	e7ea      	b.n	8009cfc <__swbuf_r+0x6c>
 8009d26:	bf00      	nop
 8009d28:	08039a0c 	.word	0x08039a0c
 8009d2c:	08039a2c 	.word	0x08039a2c
 8009d30:	080399ec 	.word	0x080399ec

08009d34 <_write_r>:
 8009d34:	b538      	push	{r3, r4, r5, lr}
 8009d36:	4d07      	ldr	r5, [pc, #28]	; (8009d54 <_write_r+0x20>)
 8009d38:	4604      	mov	r4, r0
 8009d3a:	4608      	mov	r0, r1
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	2200      	movs	r2, #0
 8009d40:	602a      	str	r2, [r5, #0]
 8009d42:	461a      	mov	r2, r3
 8009d44:	f7f8 fb99 	bl	800247a <_write>
 8009d48:	1c43      	adds	r3, r0, #1
 8009d4a:	d102      	bne.n	8009d52 <_write_r+0x1e>
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	b103      	cbz	r3, 8009d52 <_write_r+0x1e>
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	bd38      	pop	{r3, r4, r5, pc}
 8009d54:	2000a4b8 	.word	0x2000a4b8

08009d58 <__swsetup_r>:
 8009d58:	4b32      	ldr	r3, [pc, #200]	; (8009e24 <__swsetup_r+0xcc>)
 8009d5a:	b570      	push	{r4, r5, r6, lr}
 8009d5c:	681d      	ldr	r5, [r3, #0]
 8009d5e:	4606      	mov	r6, r0
 8009d60:	460c      	mov	r4, r1
 8009d62:	b125      	cbz	r5, 8009d6e <__swsetup_r+0x16>
 8009d64:	69ab      	ldr	r3, [r5, #24]
 8009d66:	b913      	cbnz	r3, 8009d6e <__swsetup_r+0x16>
 8009d68:	4628      	mov	r0, r5
 8009d6a:	f7fe fff1 	bl	8008d50 <__sinit>
 8009d6e:	4b2e      	ldr	r3, [pc, #184]	; (8009e28 <__swsetup_r+0xd0>)
 8009d70:	429c      	cmp	r4, r3
 8009d72:	d10f      	bne.n	8009d94 <__swsetup_r+0x3c>
 8009d74:	686c      	ldr	r4, [r5, #4]
 8009d76:	89a3      	ldrh	r3, [r4, #12]
 8009d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d7c:	0719      	lsls	r1, r3, #28
 8009d7e:	d42c      	bmi.n	8009dda <__swsetup_r+0x82>
 8009d80:	06dd      	lsls	r5, r3, #27
 8009d82:	d411      	bmi.n	8009da8 <__swsetup_r+0x50>
 8009d84:	2309      	movs	r3, #9
 8009d86:	6033      	str	r3, [r6, #0]
 8009d88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d8c:	81a3      	strh	r3, [r4, #12]
 8009d8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d92:	e03e      	b.n	8009e12 <__swsetup_r+0xba>
 8009d94:	4b25      	ldr	r3, [pc, #148]	; (8009e2c <__swsetup_r+0xd4>)
 8009d96:	429c      	cmp	r4, r3
 8009d98:	d101      	bne.n	8009d9e <__swsetup_r+0x46>
 8009d9a:	68ac      	ldr	r4, [r5, #8]
 8009d9c:	e7eb      	b.n	8009d76 <__swsetup_r+0x1e>
 8009d9e:	4b24      	ldr	r3, [pc, #144]	; (8009e30 <__swsetup_r+0xd8>)
 8009da0:	429c      	cmp	r4, r3
 8009da2:	bf08      	it	eq
 8009da4:	68ec      	ldreq	r4, [r5, #12]
 8009da6:	e7e6      	b.n	8009d76 <__swsetup_r+0x1e>
 8009da8:	0758      	lsls	r0, r3, #29
 8009daa:	d512      	bpl.n	8009dd2 <__swsetup_r+0x7a>
 8009dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dae:	b141      	cbz	r1, 8009dc2 <__swsetup_r+0x6a>
 8009db0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009db4:	4299      	cmp	r1, r3
 8009db6:	d002      	beq.n	8009dbe <__swsetup_r+0x66>
 8009db8:	4630      	mov	r0, r6
 8009dba:	f7ff f909 	bl	8008fd0 <_free_r>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	6363      	str	r3, [r4, #52]	; 0x34
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dc8:	81a3      	strh	r3, [r4, #12]
 8009dca:	2300      	movs	r3, #0
 8009dcc:	6063      	str	r3, [r4, #4]
 8009dce:	6923      	ldr	r3, [r4, #16]
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	f043 0308 	orr.w	r3, r3, #8
 8009dd8:	81a3      	strh	r3, [r4, #12]
 8009dda:	6923      	ldr	r3, [r4, #16]
 8009ddc:	b94b      	cbnz	r3, 8009df2 <__swsetup_r+0x9a>
 8009dde:	89a3      	ldrh	r3, [r4, #12]
 8009de0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009de8:	d003      	beq.n	8009df2 <__swsetup_r+0x9a>
 8009dea:	4621      	mov	r1, r4
 8009dec:	4630      	mov	r0, r6
 8009dee:	f7ff f899 	bl	8008f24 <__smakebuf_r>
 8009df2:	89a0      	ldrh	r0, [r4, #12]
 8009df4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009df8:	f010 0301 	ands.w	r3, r0, #1
 8009dfc:	d00a      	beq.n	8009e14 <__swsetup_r+0xbc>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	60a3      	str	r3, [r4, #8]
 8009e02:	6963      	ldr	r3, [r4, #20]
 8009e04:	425b      	negs	r3, r3
 8009e06:	61a3      	str	r3, [r4, #24]
 8009e08:	6923      	ldr	r3, [r4, #16]
 8009e0a:	b943      	cbnz	r3, 8009e1e <__swsetup_r+0xc6>
 8009e0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e10:	d1ba      	bne.n	8009d88 <__swsetup_r+0x30>
 8009e12:	bd70      	pop	{r4, r5, r6, pc}
 8009e14:	0781      	lsls	r1, r0, #30
 8009e16:	bf58      	it	pl
 8009e18:	6963      	ldrpl	r3, [r4, #20]
 8009e1a:	60a3      	str	r3, [r4, #8]
 8009e1c:	e7f4      	b.n	8009e08 <__swsetup_r+0xb0>
 8009e1e:	2000      	movs	r0, #0
 8009e20:	e7f7      	b.n	8009e12 <__swsetup_r+0xba>
 8009e22:	bf00      	nop
 8009e24:	20000014 	.word	0x20000014
 8009e28:	08039a0c 	.word	0x08039a0c
 8009e2c:	08039a2c 	.word	0x08039a2c
 8009e30:	080399ec 	.word	0x080399ec

08009e34 <_close_r>:
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	4d06      	ldr	r5, [pc, #24]	; (8009e50 <_close_r+0x1c>)
 8009e38:	2300      	movs	r3, #0
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	4608      	mov	r0, r1
 8009e3e:	602b      	str	r3, [r5, #0]
 8009e40:	f7f8 fb37 	bl	80024b2 <_close>
 8009e44:	1c43      	adds	r3, r0, #1
 8009e46:	d102      	bne.n	8009e4e <_close_r+0x1a>
 8009e48:	682b      	ldr	r3, [r5, #0]
 8009e4a:	b103      	cbz	r3, 8009e4e <_close_r+0x1a>
 8009e4c:	6023      	str	r3, [r4, #0]
 8009e4e:	bd38      	pop	{r3, r4, r5, pc}
 8009e50:	2000a4b8 	.word	0x2000a4b8

08009e54 <quorem>:
 8009e54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e58:	6903      	ldr	r3, [r0, #16]
 8009e5a:	690c      	ldr	r4, [r1, #16]
 8009e5c:	42a3      	cmp	r3, r4
 8009e5e:	4607      	mov	r7, r0
 8009e60:	f2c0 8081 	blt.w	8009f66 <quorem+0x112>
 8009e64:	3c01      	subs	r4, #1
 8009e66:	f101 0814 	add.w	r8, r1, #20
 8009e6a:	f100 0514 	add.w	r5, r0, #20
 8009e6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e72:	9301      	str	r3, [sp, #4]
 8009e74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e88:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e8c:	d331      	bcc.n	8009ef2 <quorem+0x9e>
 8009e8e:	f04f 0e00 	mov.w	lr, #0
 8009e92:	4640      	mov	r0, r8
 8009e94:	46ac      	mov	ip, r5
 8009e96:	46f2      	mov	sl, lr
 8009e98:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e9c:	b293      	uxth	r3, r2
 8009e9e:	fb06 e303 	mla	r3, r6, r3, lr
 8009ea2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	ebaa 0303 	sub.w	r3, sl, r3
 8009eac:	f8dc a000 	ldr.w	sl, [ip]
 8009eb0:	0c12      	lsrs	r2, r2, #16
 8009eb2:	fa13 f38a 	uxtah	r3, r3, sl
 8009eb6:	fb06 e202 	mla	r2, r6, r2, lr
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	9b00      	ldr	r3, [sp, #0]
 8009ebe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009ec2:	b292      	uxth	r2, r2
 8009ec4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009ec8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ecc:	f8bd 3000 	ldrh.w	r3, [sp]
 8009ed0:	4581      	cmp	r9, r0
 8009ed2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ed6:	f84c 3b04 	str.w	r3, [ip], #4
 8009eda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009ede:	d2db      	bcs.n	8009e98 <quorem+0x44>
 8009ee0:	f855 300b 	ldr.w	r3, [r5, fp]
 8009ee4:	b92b      	cbnz	r3, 8009ef2 <quorem+0x9e>
 8009ee6:	9b01      	ldr	r3, [sp, #4]
 8009ee8:	3b04      	subs	r3, #4
 8009eea:	429d      	cmp	r5, r3
 8009eec:	461a      	mov	r2, r3
 8009eee:	d32e      	bcc.n	8009f4e <quorem+0xfa>
 8009ef0:	613c      	str	r4, [r7, #16]
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	f001 f8f8 	bl	800b0e8 <__mcmp>
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	db24      	blt.n	8009f46 <quorem+0xf2>
 8009efc:	3601      	adds	r6, #1
 8009efe:	4628      	mov	r0, r5
 8009f00:	f04f 0c00 	mov.w	ip, #0
 8009f04:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f08:	f8d0 e000 	ldr.w	lr, [r0]
 8009f0c:	b293      	uxth	r3, r2
 8009f0e:	ebac 0303 	sub.w	r3, ip, r3
 8009f12:	0c12      	lsrs	r2, r2, #16
 8009f14:	fa13 f38e 	uxtah	r3, r3, lr
 8009f18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f26:	45c1      	cmp	r9, r8
 8009f28:	f840 3b04 	str.w	r3, [r0], #4
 8009f2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f30:	d2e8      	bcs.n	8009f04 <quorem+0xb0>
 8009f32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f3a:	b922      	cbnz	r2, 8009f46 <quorem+0xf2>
 8009f3c:	3b04      	subs	r3, #4
 8009f3e:	429d      	cmp	r5, r3
 8009f40:	461a      	mov	r2, r3
 8009f42:	d30a      	bcc.n	8009f5a <quorem+0x106>
 8009f44:	613c      	str	r4, [r7, #16]
 8009f46:	4630      	mov	r0, r6
 8009f48:	b003      	add	sp, #12
 8009f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f4e:	6812      	ldr	r2, [r2, #0]
 8009f50:	3b04      	subs	r3, #4
 8009f52:	2a00      	cmp	r2, #0
 8009f54:	d1cc      	bne.n	8009ef0 <quorem+0x9c>
 8009f56:	3c01      	subs	r4, #1
 8009f58:	e7c7      	b.n	8009eea <quorem+0x96>
 8009f5a:	6812      	ldr	r2, [r2, #0]
 8009f5c:	3b04      	subs	r3, #4
 8009f5e:	2a00      	cmp	r2, #0
 8009f60:	d1f0      	bne.n	8009f44 <quorem+0xf0>
 8009f62:	3c01      	subs	r4, #1
 8009f64:	e7eb      	b.n	8009f3e <quorem+0xea>
 8009f66:	2000      	movs	r0, #0
 8009f68:	e7ee      	b.n	8009f48 <quorem+0xf4>
 8009f6a:	0000      	movs	r0, r0
 8009f6c:	0000      	movs	r0, r0
	...

08009f70 <_dtoa_r>:
 8009f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f74:	ed2d 8b04 	vpush	{d8-d9}
 8009f78:	ec57 6b10 	vmov	r6, r7, d0
 8009f7c:	b093      	sub	sp, #76	; 0x4c
 8009f7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f84:	9106      	str	r1, [sp, #24]
 8009f86:	ee10 aa10 	vmov	sl, s0
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f8e:	930c      	str	r3, [sp, #48]	; 0x30
 8009f90:	46bb      	mov	fp, r7
 8009f92:	b975      	cbnz	r5, 8009fb2 <_dtoa_r+0x42>
 8009f94:	2010      	movs	r0, #16
 8009f96:	f000 fe11 	bl	800abbc <malloc>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	6260      	str	r0, [r4, #36]	; 0x24
 8009f9e:	b920      	cbnz	r0, 8009faa <_dtoa_r+0x3a>
 8009fa0:	4ba7      	ldr	r3, [pc, #668]	; (800a240 <_dtoa_r+0x2d0>)
 8009fa2:	21ea      	movs	r1, #234	; 0xea
 8009fa4:	48a7      	ldr	r0, [pc, #668]	; (800a244 <_dtoa_r+0x2d4>)
 8009fa6:	f002 f925 	bl	800c1f4 <__assert_func>
 8009faa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009fae:	6005      	str	r5, [r0, #0]
 8009fb0:	60c5      	str	r5, [r0, #12]
 8009fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fb4:	6819      	ldr	r1, [r3, #0]
 8009fb6:	b151      	cbz	r1, 8009fce <_dtoa_r+0x5e>
 8009fb8:	685a      	ldr	r2, [r3, #4]
 8009fba:	604a      	str	r2, [r1, #4]
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	4093      	lsls	r3, r2
 8009fc0:	608b      	str	r3, [r1, #8]
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f000 fe4e 	bl	800ac64 <_Bfree>
 8009fc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fca:	2200      	movs	r2, #0
 8009fcc:	601a      	str	r2, [r3, #0]
 8009fce:	1e3b      	subs	r3, r7, #0
 8009fd0:	bfaa      	itet	ge
 8009fd2:	2300      	movge	r3, #0
 8009fd4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009fd8:	f8c8 3000 	strge.w	r3, [r8]
 8009fdc:	4b9a      	ldr	r3, [pc, #616]	; (800a248 <_dtoa_r+0x2d8>)
 8009fde:	bfbc      	itt	lt
 8009fe0:	2201      	movlt	r2, #1
 8009fe2:	f8c8 2000 	strlt.w	r2, [r8]
 8009fe6:	ea33 030b 	bics.w	r3, r3, fp
 8009fea:	d11b      	bne.n	800a024 <_dtoa_r+0xb4>
 8009fec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fee:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ff2:	6013      	str	r3, [r2, #0]
 8009ff4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ff8:	4333      	orrs	r3, r6
 8009ffa:	f000 8592 	beq.w	800ab22 <_dtoa_r+0xbb2>
 8009ffe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a000:	b963      	cbnz	r3, 800a01c <_dtoa_r+0xac>
 800a002:	4b92      	ldr	r3, [pc, #584]	; (800a24c <_dtoa_r+0x2dc>)
 800a004:	e022      	b.n	800a04c <_dtoa_r+0xdc>
 800a006:	4b92      	ldr	r3, [pc, #584]	; (800a250 <_dtoa_r+0x2e0>)
 800a008:	9301      	str	r3, [sp, #4]
 800a00a:	3308      	adds	r3, #8
 800a00c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a00e:	6013      	str	r3, [r2, #0]
 800a010:	9801      	ldr	r0, [sp, #4]
 800a012:	b013      	add	sp, #76	; 0x4c
 800a014:	ecbd 8b04 	vpop	{d8-d9}
 800a018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a01c:	4b8b      	ldr	r3, [pc, #556]	; (800a24c <_dtoa_r+0x2dc>)
 800a01e:	9301      	str	r3, [sp, #4]
 800a020:	3303      	adds	r3, #3
 800a022:	e7f3      	b.n	800a00c <_dtoa_r+0x9c>
 800a024:	2200      	movs	r2, #0
 800a026:	2300      	movs	r3, #0
 800a028:	4650      	mov	r0, sl
 800a02a:	4659      	mov	r1, fp
 800a02c:	f7f6 fd4c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a030:	ec4b ab19 	vmov	d9, sl, fp
 800a034:	4680      	mov	r8, r0
 800a036:	b158      	cbz	r0, 800a050 <_dtoa_r+0xe0>
 800a038:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a03a:	2301      	movs	r3, #1
 800a03c:	6013      	str	r3, [r2, #0]
 800a03e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 856b 	beq.w	800ab1c <_dtoa_r+0xbac>
 800a046:	4883      	ldr	r0, [pc, #524]	; (800a254 <_dtoa_r+0x2e4>)
 800a048:	6018      	str	r0, [r3, #0]
 800a04a:	1e43      	subs	r3, r0, #1
 800a04c:	9301      	str	r3, [sp, #4]
 800a04e:	e7df      	b.n	800a010 <_dtoa_r+0xa0>
 800a050:	ec4b ab10 	vmov	d0, sl, fp
 800a054:	aa10      	add	r2, sp, #64	; 0x40
 800a056:	a911      	add	r1, sp, #68	; 0x44
 800a058:	4620      	mov	r0, r4
 800a05a:	f001 f8eb 	bl	800b234 <__d2b>
 800a05e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a062:	ee08 0a10 	vmov	s16, r0
 800a066:	2d00      	cmp	r5, #0
 800a068:	f000 8084 	beq.w	800a174 <_dtoa_r+0x204>
 800a06c:	ee19 3a90 	vmov	r3, s19
 800a070:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a074:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a078:	4656      	mov	r6, sl
 800a07a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a07e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a082:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a086:	4b74      	ldr	r3, [pc, #464]	; (800a258 <_dtoa_r+0x2e8>)
 800a088:	2200      	movs	r2, #0
 800a08a:	4630      	mov	r0, r6
 800a08c:	4639      	mov	r1, r7
 800a08e:	f7f6 f8fb 	bl	8000288 <__aeabi_dsub>
 800a092:	a365      	add	r3, pc, #404	; (adr r3, 800a228 <_dtoa_r+0x2b8>)
 800a094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a098:	f7f6 faae 	bl	80005f8 <__aeabi_dmul>
 800a09c:	a364      	add	r3, pc, #400	; (adr r3, 800a230 <_dtoa_r+0x2c0>)
 800a09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a2:	f7f6 f8f3 	bl	800028c <__adddf3>
 800a0a6:	4606      	mov	r6, r0
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	460f      	mov	r7, r1
 800a0ac:	f7f6 fa3a 	bl	8000524 <__aeabi_i2d>
 800a0b0:	a361      	add	r3, pc, #388	; (adr r3, 800a238 <_dtoa_r+0x2c8>)
 800a0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b6:	f7f6 fa9f 	bl	80005f8 <__aeabi_dmul>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	460b      	mov	r3, r1
 800a0be:	4630      	mov	r0, r6
 800a0c0:	4639      	mov	r1, r7
 800a0c2:	f7f6 f8e3 	bl	800028c <__adddf3>
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	460f      	mov	r7, r1
 800a0ca:	f7f6 fd45 	bl	8000b58 <__aeabi_d2iz>
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	9000      	str	r0, [sp, #0]
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	4639      	mov	r1, r7
 800a0d8:	f7f6 fd00 	bl	8000adc <__aeabi_dcmplt>
 800a0dc:	b150      	cbz	r0, 800a0f4 <_dtoa_r+0x184>
 800a0de:	9800      	ldr	r0, [sp, #0]
 800a0e0:	f7f6 fa20 	bl	8000524 <__aeabi_i2d>
 800a0e4:	4632      	mov	r2, r6
 800a0e6:	463b      	mov	r3, r7
 800a0e8:	f7f6 fcee 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0ec:	b910      	cbnz	r0, 800a0f4 <_dtoa_r+0x184>
 800a0ee:	9b00      	ldr	r3, [sp, #0]
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	9300      	str	r3, [sp, #0]
 800a0f4:	9b00      	ldr	r3, [sp, #0]
 800a0f6:	2b16      	cmp	r3, #22
 800a0f8:	d85a      	bhi.n	800a1b0 <_dtoa_r+0x240>
 800a0fa:	9a00      	ldr	r2, [sp, #0]
 800a0fc:	4b57      	ldr	r3, [pc, #348]	; (800a25c <_dtoa_r+0x2ec>)
 800a0fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	ec51 0b19 	vmov	r0, r1, d9
 800a10a:	f7f6 fce7 	bl	8000adc <__aeabi_dcmplt>
 800a10e:	2800      	cmp	r0, #0
 800a110:	d050      	beq.n	800a1b4 <_dtoa_r+0x244>
 800a112:	9b00      	ldr	r3, [sp, #0]
 800a114:	3b01      	subs	r3, #1
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	2300      	movs	r3, #0
 800a11a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a11c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a11e:	1b5d      	subs	r5, r3, r5
 800a120:	1e6b      	subs	r3, r5, #1
 800a122:	9305      	str	r3, [sp, #20]
 800a124:	bf45      	ittet	mi
 800a126:	f1c5 0301 	rsbmi	r3, r5, #1
 800a12a:	9304      	strmi	r3, [sp, #16]
 800a12c:	2300      	movpl	r3, #0
 800a12e:	2300      	movmi	r3, #0
 800a130:	bf4c      	ite	mi
 800a132:	9305      	strmi	r3, [sp, #20]
 800a134:	9304      	strpl	r3, [sp, #16]
 800a136:	9b00      	ldr	r3, [sp, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	db3d      	blt.n	800a1b8 <_dtoa_r+0x248>
 800a13c:	9b05      	ldr	r3, [sp, #20]
 800a13e:	9a00      	ldr	r2, [sp, #0]
 800a140:	920a      	str	r2, [sp, #40]	; 0x28
 800a142:	4413      	add	r3, r2
 800a144:	9305      	str	r3, [sp, #20]
 800a146:	2300      	movs	r3, #0
 800a148:	9307      	str	r3, [sp, #28]
 800a14a:	9b06      	ldr	r3, [sp, #24]
 800a14c:	2b09      	cmp	r3, #9
 800a14e:	f200 8089 	bhi.w	800a264 <_dtoa_r+0x2f4>
 800a152:	2b05      	cmp	r3, #5
 800a154:	bfc4      	itt	gt
 800a156:	3b04      	subgt	r3, #4
 800a158:	9306      	strgt	r3, [sp, #24]
 800a15a:	9b06      	ldr	r3, [sp, #24]
 800a15c:	f1a3 0302 	sub.w	r3, r3, #2
 800a160:	bfcc      	ite	gt
 800a162:	2500      	movgt	r5, #0
 800a164:	2501      	movle	r5, #1
 800a166:	2b03      	cmp	r3, #3
 800a168:	f200 8087 	bhi.w	800a27a <_dtoa_r+0x30a>
 800a16c:	e8df f003 	tbb	[pc, r3]
 800a170:	59383a2d 	.word	0x59383a2d
 800a174:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a178:	441d      	add	r5, r3
 800a17a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a17e:	2b20      	cmp	r3, #32
 800a180:	bfc1      	itttt	gt
 800a182:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a186:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a18a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a18e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a192:	bfda      	itte	le
 800a194:	f1c3 0320 	rsble	r3, r3, #32
 800a198:	fa06 f003 	lslle.w	r0, r6, r3
 800a19c:	4318      	orrgt	r0, r3
 800a19e:	f7f6 f9b1 	bl	8000504 <__aeabi_ui2d>
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	4606      	mov	r6, r0
 800a1a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a1aa:	3d01      	subs	r5, #1
 800a1ac:	930e      	str	r3, [sp, #56]	; 0x38
 800a1ae:	e76a      	b.n	800a086 <_dtoa_r+0x116>
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e7b2      	b.n	800a11a <_dtoa_r+0x1aa>
 800a1b4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a1b6:	e7b1      	b.n	800a11c <_dtoa_r+0x1ac>
 800a1b8:	9b04      	ldr	r3, [sp, #16]
 800a1ba:	9a00      	ldr	r2, [sp, #0]
 800a1bc:	1a9b      	subs	r3, r3, r2
 800a1be:	9304      	str	r3, [sp, #16]
 800a1c0:	4253      	negs	r3, r2
 800a1c2:	9307      	str	r3, [sp, #28]
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	930a      	str	r3, [sp, #40]	; 0x28
 800a1c8:	e7bf      	b.n	800a14a <_dtoa_r+0x1da>
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	9308      	str	r3, [sp, #32]
 800a1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	dc55      	bgt.n	800a280 <_dtoa_r+0x310>
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	9209      	str	r2, [sp, #36]	; 0x24
 800a1de:	e00c      	b.n	800a1fa <_dtoa_r+0x28a>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e7f3      	b.n	800a1cc <_dtoa_r+0x25c>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1e8:	9308      	str	r3, [sp, #32]
 800a1ea:	9b00      	ldr	r3, [sp, #0]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	9302      	str	r3, [sp, #8]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	9303      	str	r3, [sp, #12]
 800a1f6:	bfb8      	it	lt
 800a1f8:	2301      	movlt	r3, #1
 800a1fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	6042      	str	r2, [r0, #4]
 800a200:	2204      	movs	r2, #4
 800a202:	f102 0614 	add.w	r6, r2, #20
 800a206:	429e      	cmp	r6, r3
 800a208:	6841      	ldr	r1, [r0, #4]
 800a20a:	d93d      	bls.n	800a288 <_dtoa_r+0x318>
 800a20c:	4620      	mov	r0, r4
 800a20e:	f000 fce9 	bl	800abe4 <_Balloc>
 800a212:	9001      	str	r0, [sp, #4]
 800a214:	2800      	cmp	r0, #0
 800a216:	d13b      	bne.n	800a290 <_dtoa_r+0x320>
 800a218:	4b11      	ldr	r3, [pc, #68]	; (800a260 <_dtoa_r+0x2f0>)
 800a21a:	4602      	mov	r2, r0
 800a21c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a220:	e6c0      	b.n	8009fa4 <_dtoa_r+0x34>
 800a222:	2301      	movs	r3, #1
 800a224:	e7df      	b.n	800a1e6 <_dtoa_r+0x276>
 800a226:	bf00      	nop
 800a228:	636f4361 	.word	0x636f4361
 800a22c:	3fd287a7 	.word	0x3fd287a7
 800a230:	8b60c8b3 	.word	0x8b60c8b3
 800a234:	3fc68a28 	.word	0x3fc68a28
 800a238:	509f79fb 	.word	0x509f79fb
 800a23c:	3fd34413 	.word	0x3fd34413
 800a240:	08039a91 	.word	0x08039a91
 800a244:	08039aa8 	.word	0x08039aa8
 800a248:	7ff00000 	.word	0x7ff00000
 800a24c:	08039a8d 	.word	0x08039a8d
 800a250:	08039a84 	.word	0x08039a84
 800a254:	08039a61 	.word	0x08039a61
 800a258:	3ff80000 	.word	0x3ff80000
 800a25c:	08039b98 	.word	0x08039b98
 800a260:	08039b03 	.word	0x08039b03
 800a264:	2501      	movs	r5, #1
 800a266:	2300      	movs	r3, #0
 800a268:	9306      	str	r3, [sp, #24]
 800a26a:	9508      	str	r5, [sp, #32]
 800a26c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a270:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a274:	2200      	movs	r2, #0
 800a276:	2312      	movs	r3, #18
 800a278:	e7b0      	b.n	800a1dc <_dtoa_r+0x26c>
 800a27a:	2301      	movs	r3, #1
 800a27c:	9308      	str	r3, [sp, #32]
 800a27e:	e7f5      	b.n	800a26c <_dtoa_r+0x2fc>
 800a280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a282:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a286:	e7b8      	b.n	800a1fa <_dtoa_r+0x28a>
 800a288:	3101      	adds	r1, #1
 800a28a:	6041      	str	r1, [r0, #4]
 800a28c:	0052      	lsls	r2, r2, #1
 800a28e:	e7b8      	b.n	800a202 <_dtoa_r+0x292>
 800a290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a292:	9a01      	ldr	r2, [sp, #4]
 800a294:	601a      	str	r2, [r3, #0]
 800a296:	9b03      	ldr	r3, [sp, #12]
 800a298:	2b0e      	cmp	r3, #14
 800a29a:	f200 809d 	bhi.w	800a3d8 <_dtoa_r+0x468>
 800a29e:	2d00      	cmp	r5, #0
 800a2a0:	f000 809a 	beq.w	800a3d8 <_dtoa_r+0x468>
 800a2a4:	9b00      	ldr	r3, [sp, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	dd32      	ble.n	800a310 <_dtoa_r+0x3a0>
 800a2aa:	4ab7      	ldr	r2, [pc, #732]	; (800a588 <_dtoa_r+0x618>)
 800a2ac:	f003 030f 	and.w	r3, r3, #15
 800a2b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a2b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2b8:	9b00      	ldr	r3, [sp, #0]
 800a2ba:	05d8      	lsls	r0, r3, #23
 800a2bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a2c0:	d516      	bpl.n	800a2f0 <_dtoa_r+0x380>
 800a2c2:	4bb2      	ldr	r3, [pc, #712]	; (800a58c <_dtoa_r+0x61c>)
 800a2c4:	ec51 0b19 	vmov	r0, r1, d9
 800a2c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2cc:	f7f6 fabe 	bl	800084c <__aeabi_ddiv>
 800a2d0:	f007 070f 	and.w	r7, r7, #15
 800a2d4:	4682      	mov	sl, r0
 800a2d6:	468b      	mov	fp, r1
 800a2d8:	2503      	movs	r5, #3
 800a2da:	4eac      	ldr	r6, [pc, #688]	; (800a58c <_dtoa_r+0x61c>)
 800a2dc:	b957      	cbnz	r7, 800a2f4 <_dtoa_r+0x384>
 800a2de:	4642      	mov	r2, r8
 800a2e0:	464b      	mov	r3, r9
 800a2e2:	4650      	mov	r0, sl
 800a2e4:	4659      	mov	r1, fp
 800a2e6:	f7f6 fab1 	bl	800084c <__aeabi_ddiv>
 800a2ea:	4682      	mov	sl, r0
 800a2ec:	468b      	mov	fp, r1
 800a2ee:	e028      	b.n	800a342 <_dtoa_r+0x3d2>
 800a2f0:	2502      	movs	r5, #2
 800a2f2:	e7f2      	b.n	800a2da <_dtoa_r+0x36a>
 800a2f4:	07f9      	lsls	r1, r7, #31
 800a2f6:	d508      	bpl.n	800a30a <_dtoa_r+0x39a>
 800a2f8:	4640      	mov	r0, r8
 800a2fa:	4649      	mov	r1, r9
 800a2fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a300:	f7f6 f97a 	bl	80005f8 <__aeabi_dmul>
 800a304:	3501      	adds	r5, #1
 800a306:	4680      	mov	r8, r0
 800a308:	4689      	mov	r9, r1
 800a30a:	107f      	asrs	r7, r7, #1
 800a30c:	3608      	adds	r6, #8
 800a30e:	e7e5      	b.n	800a2dc <_dtoa_r+0x36c>
 800a310:	f000 809b 	beq.w	800a44a <_dtoa_r+0x4da>
 800a314:	9b00      	ldr	r3, [sp, #0]
 800a316:	4f9d      	ldr	r7, [pc, #628]	; (800a58c <_dtoa_r+0x61c>)
 800a318:	425e      	negs	r6, r3
 800a31a:	4b9b      	ldr	r3, [pc, #620]	; (800a588 <_dtoa_r+0x618>)
 800a31c:	f006 020f 	and.w	r2, r6, #15
 800a320:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a328:	ec51 0b19 	vmov	r0, r1, d9
 800a32c:	f7f6 f964 	bl	80005f8 <__aeabi_dmul>
 800a330:	1136      	asrs	r6, r6, #4
 800a332:	4682      	mov	sl, r0
 800a334:	468b      	mov	fp, r1
 800a336:	2300      	movs	r3, #0
 800a338:	2502      	movs	r5, #2
 800a33a:	2e00      	cmp	r6, #0
 800a33c:	d17a      	bne.n	800a434 <_dtoa_r+0x4c4>
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1d3      	bne.n	800a2ea <_dtoa_r+0x37a>
 800a342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a344:	2b00      	cmp	r3, #0
 800a346:	f000 8082 	beq.w	800a44e <_dtoa_r+0x4de>
 800a34a:	4b91      	ldr	r3, [pc, #580]	; (800a590 <_dtoa_r+0x620>)
 800a34c:	2200      	movs	r2, #0
 800a34e:	4650      	mov	r0, sl
 800a350:	4659      	mov	r1, fp
 800a352:	f7f6 fbc3 	bl	8000adc <__aeabi_dcmplt>
 800a356:	2800      	cmp	r0, #0
 800a358:	d079      	beq.n	800a44e <_dtoa_r+0x4de>
 800a35a:	9b03      	ldr	r3, [sp, #12]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d076      	beq.n	800a44e <_dtoa_r+0x4de>
 800a360:	9b02      	ldr	r3, [sp, #8]
 800a362:	2b00      	cmp	r3, #0
 800a364:	dd36      	ble.n	800a3d4 <_dtoa_r+0x464>
 800a366:	9b00      	ldr	r3, [sp, #0]
 800a368:	4650      	mov	r0, sl
 800a36a:	4659      	mov	r1, fp
 800a36c:	1e5f      	subs	r7, r3, #1
 800a36e:	2200      	movs	r2, #0
 800a370:	4b88      	ldr	r3, [pc, #544]	; (800a594 <_dtoa_r+0x624>)
 800a372:	f7f6 f941 	bl	80005f8 <__aeabi_dmul>
 800a376:	9e02      	ldr	r6, [sp, #8]
 800a378:	4682      	mov	sl, r0
 800a37a:	468b      	mov	fp, r1
 800a37c:	3501      	adds	r5, #1
 800a37e:	4628      	mov	r0, r5
 800a380:	f7f6 f8d0 	bl	8000524 <__aeabi_i2d>
 800a384:	4652      	mov	r2, sl
 800a386:	465b      	mov	r3, fp
 800a388:	f7f6 f936 	bl	80005f8 <__aeabi_dmul>
 800a38c:	4b82      	ldr	r3, [pc, #520]	; (800a598 <_dtoa_r+0x628>)
 800a38e:	2200      	movs	r2, #0
 800a390:	f7f5 ff7c 	bl	800028c <__adddf3>
 800a394:	46d0      	mov	r8, sl
 800a396:	46d9      	mov	r9, fp
 800a398:	4682      	mov	sl, r0
 800a39a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a39e:	2e00      	cmp	r6, #0
 800a3a0:	d158      	bne.n	800a454 <_dtoa_r+0x4e4>
 800a3a2:	4b7e      	ldr	r3, [pc, #504]	; (800a59c <_dtoa_r+0x62c>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	4640      	mov	r0, r8
 800a3a8:	4649      	mov	r1, r9
 800a3aa:	f7f5 ff6d 	bl	8000288 <__aeabi_dsub>
 800a3ae:	4652      	mov	r2, sl
 800a3b0:	465b      	mov	r3, fp
 800a3b2:	4680      	mov	r8, r0
 800a3b4:	4689      	mov	r9, r1
 800a3b6:	f7f6 fbaf 	bl	8000b18 <__aeabi_dcmpgt>
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	f040 8295 	bne.w	800a8ea <_dtoa_r+0x97a>
 800a3c0:	4652      	mov	r2, sl
 800a3c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a3c6:	4640      	mov	r0, r8
 800a3c8:	4649      	mov	r1, r9
 800a3ca:	f7f6 fb87 	bl	8000adc <__aeabi_dcmplt>
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	f040 8289 	bne.w	800a8e6 <_dtoa_r+0x976>
 800a3d4:	ec5b ab19 	vmov	sl, fp, d9
 800a3d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f2c0 8148 	blt.w	800a670 <_dtoa_r+0x700>
 800a3e0:	9a00      	ldr	r2, [sp, #0]
 800a3e2:	2a0e      	cmp	r2, #14
 800a3e4:	f300 8144 	bgt.w	800a670 <_dtoa_r+0x700>
 800a3e8:	4b67      	ldr	r3, [pc, #412]	; (800a588 <_dtoa_r+0x618>)
 800a3ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	f280 80d5 	bge.w	800a5a4 <_dtoa_r+0x634>
 800a3fa:	9b03      	ldr	r3, [sp, #12]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	f300 80d1 	bgt.w	800a5a4 <_dtoa_r+0x634>
 800a402:	f040 826f 	bne.w	800a8e4 <_dtoa_r+0x974>
 800a406:	4b65      	ldr	r3, [pc, #404]	; (800a59c <_dtoa_r+0x62c>)
 800a408:	2200      	movs	r2, #0
 800a40a:	4640      	mov	r0, r8
 800a40c:	4649      	mov	r1, r9
 800a40e:	f7f6 f8f3 	bl	80005f8 <__aeabi_dmul>
 800a412:	4652      	mov	r2, sl
 800a414:	465b      	mov	r3, fp
 800a416:	f7f6 fb75 	bl	8000b04 <__aeabi_dcmpge>
 800a41a:	9e03      	ldr	r6, [sp, #12]
 800a41c:	4637      	mov	r7, r6
 800a41e:	2800      	cmp	r0, #0
 800a420:	f040 8245 	bne.w	800a8ae <_dtoa_r+0x93e>
 800a424:	9d01      	ldr	r5, [sp, #4]
 800a426:	2331      	movs	r3, #49	; 0x31
 800a428:	f805 3b01 	strb.w	r3, [r5], #1
 800a42c:	9b00      	ldr	r3, [sp, #0]
 800a42e:	3301      	adds	r3, #1
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	e240      	b.n	800a8b6 <_dtoa_r+0x946>
 800a434:	07f2      	lsls	r2, r6, #31
 800a436:	d505      	bpl.n	800a444 <_dtoa_r+0x4d4>
 800a438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a43c:	f7f6 f8dc 	bl	80005f8 <__aeabi_dmul>
 800a440:	3501      	adds	r5, #1
 800a442:	2301      	movs	r3, #1
 800a444:	1076      	asrs	r6, r6, #1
 800a446:	3708      	adds	r7, #8
 800a448:	e777      	b.n	800a33a <_dtoa_r+0x3ca>
 800a44a:	2502      	movs	r5, #2
 800a44c:	e779      	b.n	800a342 <_dtoa_r+0x3d2>
 800a44e:	9f00      	ldr	r7, [sp, #0]
 800a450:	9e03      	ldr	r6, [sp, #12]
 800a452:	e794      	b.n	800a37e <_dtoa_r+0x40e>
 800a454:	9901      	ldr	r1, [sp, #4]
 800a456:	4b4c      	ldr	r3, [pc, #304]	; (800a588 <_dtoa_r+0x618>)
 800a458:	4431      	add	r1, r6
 800a45a:	910d      	str	r1, [sp, #52]	; 0x34
 800a45c:	9908      	ldr	r1, [sp, #32]
 800a45e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a462:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a466:	2900      	cmp	r1, #0
 800a468:	d043      	beq.n	800a4f2 <_dtoa_r+0x582>
 800a46a:	494d      	ldr	r1, [pc, #308]	; (800a5a0 <_dtoa_r+0x630>)
 800a46c:	2000      	movs	r0, #0
 800a46e:	f7f6 f9ed 	bl	800084c <__aeabi_ddiv>
 800a472:	4652      	mov	r2, sl
 800a474:	465b      	mov	r3, fp
 800a476:	f7f5 ff07 	bl	8000288 <__aeabi_dsub>
 800a47a:	9d01      	ldr	r5, [sp, #4]
 800a47c:	4682      	mov	sl, r0
 800a47e:	468b      	mov	fp, r1
 800a480:	4649      	mov	r1, r9
 800a482:	4640      	mov	r0, r8
 800a484:	f7f6 fb68 	bl	8000b58 <__aeabi_d2iz>
 800a488:	4606      	mov	r6, r0
 800a48a:	f7f6 f84b 	bl	8000524 <__aeabi_i2d>
 800a48e:	4602      	mov	r2, r0
 800a490:	460b      	mov	r3, r1
 800a492:	4640      	mov	r0, r8
 800a494:	4649      	mov	r1, r9
 800a496:	f7f5 fef7 	bl	8000288 <__aeabi_dsub>
 800a49a:	3630      	adds	r6, #48	; 0x30
 800a49c:	f805 6b01 	strb.w	r6, [r5], #1
 800a4a0:	4652      	mov	r2, sl
 800a4a2:	465b      	mov	r3, fp
 800a4a4:	4680      	mov	r8, r0
 800a4a6:	4689      	mov	r9, r1
 800a4a8:	f7f6 fb18 	bl	8000adc <__aeabi_dcmplt>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d163      	bne.n	800a578 <_dtoa_r+0x608>
 800a4b0:	4642      	mov	r2, r8
 800a4b2:	464b      	mov	r3, r9
 800a4b4:	4936      	ldr	r1, [pc, #216]	; (800a590 <_dtoa_r+0x620>)
 800a4b6:	2000      	movs	r0, #0
 800a4b8:	f7f5 fee6 	bl	8000288 <__aeabi_dsub>
 800a4bc:	4652      	mov	r2, sl
 800a4be:	465b      	mov	r3, fp
 800a4c0:	f7f6 fb0c 	bl	8000adc <__aeabi_dcmplt>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	f040 80b5 	bne.w	800a634 <_dtoa_r+0x6c4>
 800a4ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4cc:	429d      	cmp	r5, r3
 800a4ce:	d081      	beq.n	800a3d4 <_dtoa_r+0x464>
 800a4d0:	4b30      	ldr	r3, [pc, #192]	; (800a594 <_dtoa_r+0x624>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	4650      	mov	r0, sl
 800a4d6:	4659      	mov	r1, fp
 800a4d8:	f7f6 f88e 	bl	80005f8 <__aeabi_dmul>
 800a4dc:	4b2d      	ldr	r3, [pc, #180]	; (800a594 <_dtoa_r+0x624>)
 800a4de:	4682      	mov	sl, r0
 800a4e0:	468b      	mov	fp, r1
 800a4e2:	4640      	mov	r0, r8
 800a4e4:	4649      	mov	r1, r9
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f7f6 f886 	bl	80005f8 <__aeabi_dmul>
 800a4ec:	4680      	mov	r8, r0
 800a4ee:	4689      	mov	r9, r1
 800a4f0:	e7c6      	b.n	800a480 <_dtoa_r+0x510>
 800a4f2:	4650      	mov	r0, sl
 800a4f4:	4659      	mov	r1, fp
 800a4f6:	f7f6 f87f 	bl	80005f8 <__aeabi_dmul>
 800a4fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4fc:	9d01      	ldr	r5, [sp, #4]
 800a4fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800a500:	4682      	mov	sl, r0
 800a502:	468b      	mov	fp, r1
 800a504:	4649      	mov	r1, r9
 800a506:	4640      	mov	r0, r8
 800a508:	f7f6 fb26 	bl	8000b58 <__aeabi_d2iz>
 800a50c:	4606      	mov	r6, r0
 800a50e:	f7f6 f809 	bl	8000524 <__aeabi_i2d>
 800a512:	3630      	adds	r6, #48	; 0x30
 800a514:	4602      	mov	r2, r0
 800a516:	460b      	mov	r3, r1
 800a518:	4640      	mov	r0, r8
 800a51a:	4649      	mov	r1, r9
 800a51c:	f7f5 feb4 	bl	8000288 <__aeabi_dsub>
 800a520:	f805 6b01 	strb.w	r6, [r5], #1
 800a524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a526:	429d      	cmp	r5, r3
 800a528:	4680      	mov	r8, r0
 800a52a:	4689      	mov	r9, r1
 800a52c:	f04f 0200 	mov.w	r2, #0
 800a530:	d124      	bne.n	800a57c <_dtoa_r+0x60c>
 800a532:	4b1b      	ldr	r3, [pc, #108]	; (800a5a0 <_dtoa_r+0x630>)
 800a534:	4650      	mov	r0, sl
 800a536:	4659      	mov	r1, fp
 800a538:	f7f5 fea8 	bl	800028c <__adddf3>
 800a53c:	4602      	mov	r2, r0
 800a53e:	460b      	mov	r3, r1
 800a540:	4640      	mov	r0, r8
 800a542:	4649      	mov	r1, r9
 800a544:	f7f6 fae8 	bl	8000b18 <__aeabi_dcmpgt>
 800a548:	2800      	cmp	r0, #0
 800a54a:	d173      	bne.n	800a634 <_dtoa_r+0x6c4>
 800a54c:	4652      	mov	r2, sl
 800a54e:	465b      	mov	r3, fp
 800a550:	4913      	ldr	r1, [pc, #76]	; (800a5a0 <_dtoa_r+0x630>)
 800a552:	2000      	movs	r0, #0
 800a554:	f7f5 fe98 	bl	8000288 <__aeabi_dsub>
 800a558:	4602      	mov	r2, r0
 800a55a:	460b      	mov	r3, r1
 800a55c:	4640      	mov	r0, r8
 800a55e:	4649      	mov	r1, r9
 800a560:	f7f6 fabc 	bl	8000adc <__aeabi_dcmplt>
 800a564:	2800      	cmp	r0, #0
 800a566:	f43f af35 	beq.w	800a3d4 <_dtoa_r+0x464>
 800a56a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a56c:	1e6b      	subs	r3, r5, #1
 800a56e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a570:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a574:	2b30      	cmp	r3, #48	; 0x30
 800a576:	d0f8      	beq.n	800a56a <_dtoa_r+0x5fa>
 800a578:	9700      	str	r7, [sp, #0]
 800a57a:	e049      	b.n	800a610 <_dtoa_r+0x6a0>
 800a57c:	4b05      	ldr	r3, [pc, #20]	; (800a594 <_dtoa_r+0x624>)
 800a57e:	f7f6 f83b 	bl	80005f8 <__aeabi_dmul>
 800a582:	4680      	mov	r8, r0
 800a584:	4689      	mov	r9, r1
 800a586:	e7bd      	b.n	800a504 <_dtoa_r+0x594>
 800a588:	08039b98 	.word	0x08039b98
 800a58c:	08039b70 	.word	0x08039b70
 800a590:	3ff00000 	.word	0x3ff00000
 800a594:	40240000 	.word	0x40240000
 800a598:	401c0000 	.word	0x401c0000
 800a59c:	40140000 	.word	0x40140000
 800a5a0:	3fe00000 	.word	0x3fe00000
 800a5a4:	9d01      	ldr	r5, [sp, #4]
 800a5a6:	4656      	mov	r6, sl
 800a5a8:	465f      	mov	r7, fp
 800a5aa:	4642      	mov	r2, r8
 800a5ac:	464b      	mov	r3, r9
 800a5ae:	4630      	mov	r0, r6
 800a5b0:	4639      	mov	r1, r7
 800a5b2:	f7f6 f94b 	bl	800084c <__aeabi_ddiv>
 800a5b6:	f7f6 facf 	bl	8000b58 <__aeabi_d2iz>
 800a5ba:	4682      	mov	sl, r0
 800a5bc:	f7f5 ffb2 	bl	8000524 <__aeabi_i2d>
 800a5c0:	4642      	mov	r2, r8
 800a5c2:	464b      	mov	r3, r9
 800a5c4:	f7f6 f818 	bl	80005f8 <__aeabi_dmul>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	4639      	mov	r1, r7
 800a5d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a5d4:	f7f5 fe58 	bl	8000288 <__aeabi_dsub>
 800a5d8:	f805 6b01 	strb.w	r6, [r5], #1
 800a5dc:	9e01      	ldr	r6, [sp, #4]
 800a5de:	9f03      	ldr	r7, [sp, #12]
 800a5e0:	1bae      	subs	r6, r5, r6
 800a5e2:	42b7      	cmp	r7, r6
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	d135      	bne.n	800a656 <_dtoa_r+0x6e6>
 800a5ea:	f7f5 fe4f 	bl	800028c <__adddf3>
 800a5ee:	4642      	mov	r2, r8
 800a5f0:	464b      	mov	r3, r9
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	460f      	mov	r7, r1
 800a5f6:	f7f6 fa8f 	bl	8000b18 <__aeabi_dcmpgt>
 800a5fa:	b9d0      	cbnz	r0, 800a632 <_dtoa_r+0x6c2>
 800a5fc:	4642      	mov	r2, r8
 800a5fe:	464b      	mov	r3, r9
 800a600:	4630      	mov	r0, r6
 800a602:	4639      	mov	r1, r7
 800a604:	f7f6 fa60 	bl	8000ac8 <__aeabi_dcmpeq>
 800a608:	b110      	cbz	r0, 800a610 <_dtoa_r+0x6a0>
 800a60a:	f01a 0f01 	tst.w	sl, #1
 800a60e:	d110      	bne.n	800a632 <_dtoa_r+0x6c2>
 800a610:	4620      	mov	r0, r4
 800a612:	ee18 1a10 	vmov	r1, s16
 800a616:	f000 fb25 	bl	800ac64 <_Bfree>
 800a61a:	2300      	movs	r3, #0
 800a61c:	9800      	ldr	r0, [sp, #0]
 800a61e:	702b      	strb	r3, [r5, #0]
 800a620:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a622:	3001      	adds	r0, #1
 800a624:	6018      	str	r0, [r3, #0]
 800a626:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f43f acf1 	beq.w	800a010 <_dtoa_r+0xa0>
 800a62e:	601d      	str	r5, [r3, #0]
 800a630:	e4ee      	b.n	800a010 <_dtoa_r+0xa0>
 800a632:	9f00      	ldr	r7, [sp, #0]
 800a634:	462b      	mov	r3, r5
 800a636:	461d      	mov	r5, r3
 800a638:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a63c:	2a39      	cmp	r2, #57	; 0x39
 800a63e:	d106      	bne.n	800a64e <_dtoa_r+0x6de>
 800a640:	9a01      	ldr	r2, [sp, #4]
 800a642:	429a      	cmp	r2, r3
 800a644:	d1f7      	bne.n	800a636 <_dtoa_r+0x6c6>
 800a646:	9901      	ldr	r1, [sp, #4]
 800a648:	2230      	movs	r2, #48	; 0x30
 800a64a:	3701      	adds	r7, #1
 800a64c:	700a      	strb	r2, [r1, #0]
 800a64e:	781a      	ldrb	r2, [r3, #0]
 800a650:	3201      	adds	r2, #1
 800a652:	701a      	strb	r2, [r3, #0]
 800a654:	e790      	b.n	800a578 <_dtoa_r+0x608>
 800a656:	4ba6      	ldr	r3, [pc, #664]	; (800a8f0 <_dtoa_r+0x980>)
 800a658:	2200      	movs	r2, #0
 800a65a:	f7f5 ffcd 	bl	80005f8 <__aeabi_dmul>
 800a65e:	2200      	movs	r2, #0
 800a660:	2300      	movs	r3, #0
 800a662:	4606      	mov	r6, r0
 800a664:	460f      	mov	r7, r1
 800a666:	f7f6 fa2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	d09d      	beq.n	800a5aa <_dtoa_r+0x63a>
 800a66e:	e7cf      	b.n	800a610 <_dtoa_r+0x6a0>
 800a670:	9a08      	ldr	r2, [sp, #32]
 800a672:	2a00      	cmp	r2, #0
 800a674:	f000 80d7 	beq.w	800a826 <_dtoa_r+0x8b6>
 800a678:	9a06      	ldr	r2, [sp, #24]
 800a67a:	2a01      	cmp	r2, #1
 800a67c:	f300 80ba 	bgt.w	800a7f4 <_dtoa_r+0x884>
 800a680:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a682:	2a00      	cmp	r2, #0
 800a684:	f000 80b2 	beq.w	800a7ec <_dtoa_r+0x87c>
 800a688:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a68c:	9e07      	ldr	r6, [sp, #28]
 800a68e:	9d04      	ldr	r5, [sp, #16]
 800a690:	9a04      	ldr	r2, [sp, #16]
 800a692:	441a      	add	r2, r3
 800a694:	9204      	str	r2, [sp, #16]
 800a696:	9a05      	ldr	r2, [sp, #20]
 800a698:	2101      	movs	r1, #1
 800a69a:	441a      	add	r2, r3
 800a69c:	4620      	mov	r0, r4
 800a69e:	9205      	str	r2, [sp, #20]
 800a6a0:	f000 fb98 	bl	800add4 <__i2b>
 800a6a4:	4607      	mov	r7, r0
 800a6a6:	2d00      	cmp	r5, #0
 800a6a8:	dd0c      	ble.n	800a6c4 <_dtoa_r+0x754>
 800a6aa:	9b05      	ldr	r3, [sp, #20]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	dd09      	ble.n	800a6c4 <_dtoa_r+0x754>
 800a6b0:	42ab      	cmp	r3, r5
 800a6b2:	9a04      	ldr	r2, [sp, #16]
 800a6b4:	bfa8      	it	ge
 800a6b6:	462b      	movge	r3, r5
 800a6b8:	1ad2      	subs	r2, r2, r3
 800a6ba:	9204      	str	r2, [sp, #16]
 800a6bc:	9a05      	ldr	r2, [sp, #20]
 800a6be:	1aed      	subs	r5, r5, r3
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	9305      	str	r3, [sp, #20]
 800a6c4:	9b07      	ldr	r3, [sp, #28]
 800a6c6:	b31b      	cbz	r3, 800a710 <_dtoa_r+0x7a0>
 800a6c8:	9b08      	ldr	r3, [sp, #32]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	f000 80af 	beq.w	800a82e <_dtoa_r+0x8be>
 800a6d0:	2e00      	cmp	r6, #0
 800a6d2:	dd13      	ble.n	800a6fc <_dtoa_r+0x78c>
 800a6d4:	4639      	mov	r1, r7
 800a6d6:	4632      	mov	r2, r6
 800a6d8:	4620      	mov	r0, r4
 800a6da:	f000 fc3b 	bl	800af54 <__pow5mult>
 800a6de:	ee18 2a10 	vmov	r2, s16
 800a6e2:	4601      	mov	r1, r0
 800a6e4:	4607      	mov	r7, r0
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f000 fb8a 	bl	800ae00 <__multiply>
 800a6ec:	ee18 1a10 	vmov	r1, s16
 800a6f0:	4680      	mov	r8, r0
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f000 fab6 	bl	800ac64 <_Bfree>
 800a6f8:	ee08 8a10 	vmov	s16, r8
 800a6fc:	9b07      	ldr	r3, [sp, #28]
 800a6fe:	1b9a      	subs	r2, r3, r6
 800a700:	d006      	beq.n	800a710 <_dtoa_r+0x7a0>
 800a702:	ee18 1a10 	vmov	r1, s16
 800a706:	4620      	mov	r0, r4
 800a708:	f000 fc24 	bl	800af54 <__pow5mult>
 800a70c:	ee08 0a10 	vmov	s16, r0
 800a710:	2101      	movs	r1, #1
 800a712:	4620      	mov	r0, r4
 800a714:	f000 fb5e 	bl	800add4 <__i2b>
 800a718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	4606      	mov	r6, r0
 800a71e:	f340 8088 	ble.w	800a832 <_dtoa_r+0x8c2>
 800a722:	461a      	mov	r2, r3
 800a724:	4601      	mov	r1, r0
 800a726:	4620      	mov	r0, r4
 800a728:	f000 fc14 	bl	800af54 <__pow5mult>
 800a72c:	9b06      	ldr	r3, [sp, #24]
 800a72e:	2b01      	cmp	r3, #1
 800a730:	4606      	mov	r6, r0
 800a732:	f340 8081 	ble.w	800a838 <_dtoa_r+0x8c8>
 800a736:	f04f 0800 	mov.w	r8, #0
 800a73a:	6933      	ldr	r3, [r6, #16]
 800a73c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a740:	6918      	ldr	r0, [r3, #16]
 800a742:	f000 faf7 	bl	800ad34 <__hi0bits>
 800a746:	f1c0 0020 	rsb	r0, r0, #32
 800a74a:	9b05      	ldr	r3, [sp, #20]
 800a74c:	4418      	add	r0, r3
 800a74e:	f010 001f 	ands.w	r0, r0, #31
 800a752:	f000 8092 	beq.w	800a87a <_dtoa_r+0x90a>
 800a756:	f1c0 0320 	rsb	r3, r0, #32
 800a75a:	2b04      	cmp	r3, #4
 800a75c:	f340 808a 	ble.w	800a874 <_dtoa_r+0x904>
 800a760:	f1c0 001c 	rsb	r0, r0, #28
 800a764:	9b04      	ldr	r3, [sp, #16]
 800a766:	4403      	add	r3, r0
 800a768:	9304      	str	r3, [sp, #16]
 800a76a:	9b05      	ldr	r3, [sp, #20]
 800a76c:	4403      	add	r3, r0
 800a76e:	4405      	add	r5, r0
 800a770:	9305      	str	r3, [sp, #20]
 800a772:	9b04      	ldr	r3, [sp, #16]
 800a774:	2b00      	cmp	r3, #0
 800a776:	dd07      	ble.n	800a788 <_dtoa_r+0x818>
 800a778:	ee18 1a10 	vmov	r1, s16
 800a77c:	461a      	mov	r2, r3
 800a77e:	4620      	mov	r0, r4
 800a780:	f000 fc42 	bl	800b008 <__lshift>
 800a784:	ee08 0a10 	vmov	s16, r0
 800a788:	9b05      	ldr	r3, [sp, #20]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	dd05      	ble.n	800a79a <_dtoa_r+0x82a>
 800a78e:	4631      	mov	r1, r6
 800a790:	461a      	mov	r2, r3
 800a792:	4620      	mov	r0, r4
 800a794:	f000 fc38 	bl	800b008 <__lshift>
 800a798:	4606      	mov	r6, r0
 800a79a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d06e      	beq.n	800a87e <_dtoa_r+0x90e>
 800a7a0:	ee18 0a10 	vmov	r0, s16
 800a7a4:	4631      	mov	r1, r6
 800a7a6:	f000 fc9f 	bl	800b0e8 <__mcmp>
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	da67      	bge.n	800a87e <_dtoa_r+0x90e>
 800a7ae:	9b00      	ldr	r3, [sp, #0]
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	ee18 1a10 	vmov	r1, s16
 800a7b6:	9300      	str	r3, [sp, #0]
 800a7b8:	220a      	movs	r2, #10
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f000 fa73 	bl	800aca8 <__multadd>
 800a7c2:	9b08      	ldr	r3, [sp, #32]
 800a7c4:	ee08 0a10 	vmov	s16, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f000 81b1 	beq.w	800ab30 <_dtoa_r+0xbc0>
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	4639      	mov	r1, r7
 800a7d2:	220a      	movs	r2, #10
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f000 fa67 	bl	800aca8 <__multadd>
 800a7da:	9b02      	ldr	r3, [sp, #8]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	4607      	mov	r7, r0
 800a7e0:	f300 808e 	bgt.w	800a900 <_dtoa_r+0x990>
 800a7e4:	9b06      	ldr	r3, [sp, #24]
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	dc51      	bgt.n	800a88e <_dtoa_r+0x91e>
 800a7ea:	e089      	b.n	800a900 <_dtoa_r+0x990>
 800a7ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a7f2:	e74b      	b.n	800a68c <_dtoa_r+0x71c>
 800a7f4:	9b03      	ldr	r3, [sp, #12]
 800a7f6:	1e5e      	subs	r6, r3, #1
 800a7f8:	9b07      	ldr	r3, [sp, #28]
 800a7fa:	42b3      	cmp	r3, r6
 800a7fc:	bfbf      	itttt	lt
 800a7fe:	9b07      	ldrlt	r3, [sp, #28]
 800a800:	9607      	strlt	r6, [sp, #28]
 800a802:	1af2      	sublt	r2, r6, r3
 800a804:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a806:	bfb6      	itet	lt
 800a808:	189b      	addlt	r3, r3, r2
 800a80a:	1b9e      	subge	r6, r3, r6
 800a80c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a80e:	9b03      	ldr	r3, [sp, #12]
 800a810:	bfb8      	it	lt
 800a812:	2600      	movlt	r6, #0
 800a814:	2b00      	cmp	r3, #0
 800a816:	bfb7      	itett	lt
 800a818:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a81c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a820:	1a9d      	sublt	r5, r3, r2
 800a822:	2300      	movlt	r3, #0
 800a824:	e734      	b.n	800a690 <_dtoa_r+0x720>
 800a826:	9e07      	ldr	r6, [sp, #28]
 800a828:	9d04      	ldr	r5, [sp, #16]
 800a82a:	9f08      	ldr	r7, [sp, #32]
 800a82c:	e73b      	b.n	800a6a6 <_dtoa_r+0x736>
 800a82e:	9a07      	ldr	r2, [sp, #28]
 800a830:	e767      	b.n	800a702 <_dtoa_r+0x792>
 800a832:	9b06      	ldr	r3, [sp, #24]
 800a834:	2b01      	cmp	r3, #1
 800a836:	dc18      	bgt.n	800a86a <_dtoa_r+0x8fa>
 800a838:	f1ba 0f00 	cmp.w	sl, #0
 800a83c:	d115      	bne.n	800a86a <_dtoa_r+0x8fa>
 800a83e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a842:	b993      	cbnz	r3, 800a86a <_dtoa_r+0x8fa>
 800a844:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a848:	0d1b      	lsrs	r3, r3, #20
 800a84a:	051b      	lsls	r3, r3, #20
 800a84c:	b183      	cbz	r3, 800a870 <_dtoa_r+0x900>
 800a84e:	9b04      	ldr	r3, [sp, #16]
 800a850:	3301      	adds	r3, #1
 800a852:	9304      	str	r3, [sp, #16]
 800a854:	9b05      	ldr	r3, [sp, #20]
 800a856:	3301      	adds	r3, #1
 800a858:	9305      	str	r3, [sp, #20]
 800a85a:	f04f 0801 	mov.w	r8, #1
 800a85e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a860:	2b00      	cmp	r3, #0
 800a862:	f47f af6a 	bne.w	800a73a <_dtoa_r+0x7ca>
 800a866:	2001      	movs	r0, #1
 800a868:	e76f      	b.n	800a74a <_dtoa_r+0x7da>
 800a86a:	f04f 0800 	mov.w	r8, #0
 800a86e:	e7f6      	b.n	800a85e <_dtoa_r+0x8ee>
 800a870:	4698      	mov	r8, r3
 800a872:	e7f4      	b.n	800a85e <_dtoa_r+0x8ee>
 800a874:	f43f af7d 	beq.w	800a772 <_dtoa_r+0x802>
 800a878:	4618      	mov	r0, r3
 800a87a:	301c      	adds	r0, #28
 800a87c:	e772      	b.n	800a764 <_dtoa_r+0x7f4>
 800a87e:	9b03      	ldr	r3, [sp, #12]
 800a880:	2b00      	cmp	r3, #0
 800a882:	dc37      	bgt.n	800a8f4 <_dtoa_r+0x984>
 800a884:	9b06      	ldr	r3, [sp, #24]
 800a886:	2b02      	cmp	r3, #2
 800a888:	dd34      	ble.n	800a8f4 <_dtoa_r+0x984>
 800a88a:	9b03      	ldr	r3, [sp, #12]
 800a88c:	9302      	str	r3, [sp, #8]
 800a88e:	9b02      	ldr	r3, [sp, #8]
 800a890:	b96b      	cbnz	r3, 800a8ae <_dtoa_r+0x93e>
 800a892:	4631      	mov	r1, r6
 800a894:	2205      	movs	r2, #5
 800a896:	4620      	mov	r0, r4
 800a898:	f000 fa06 	bl	800aca8 <__multadd>
 800a89c:	4601      	mov	r1, r0
 800a89e:	4606      	mov	r6, r0
 800a8a0:	ee18 0a10 	vmov	r0, s16
 800a8a4:	f000 fc20 	bl	800b0e8 <__mcmp>
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	f73f adbb 	bgt.w	800a424 <_dtoa_r+0x4b4>
 800a8ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8b0:	9d01      	ldr	r5, [sp, #4]
 800a8b2:	43db      	mvns	r3, r3
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	f04f 0800 	mov.w	r8, #0
 800a8ba:	4631      	mov	r1, r6
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f000 f9d1 	bl	800ac64 <_Bfree>
 800a8c2:	2f00      	cmp	r7, #0
 800a8c4:	f43f aea4 	beq.w	800a610 <_dtoa_r+0x6a0>
 800a8c8:	f1b8 0f00 	cmp.w	r8, #0
 800a8cc:	d005      	beq.n	800a8da <_dtoa_r+0x96a>
 800a8ce:	45b8      	cmp	r8, r7
 800a8d0:	d003      	beq.n	800a8da <_dtoa_r+0x96a>
 800a8d2:	4641      	mov	r1, r8
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f000 f9c5 	bl	800ac64 <_Bfree>
 800a8da:	4639      	mov	r1, r7
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f000 f9c1 	bl	800ac64 <_Bfree>
 800a8e2:	e695      	b.n	800a610 <_dtoa_r+0x6a0>
 800a8e4:	2600      	movs	r6, #0
 800a8e6:	4637      	mov	r7, r6
 800a8e8:	e7e1      	b.n	800a8ae <_dtoa_r+0x93e>
 800a8ea:	9700      	str	r7, [sp, #0]
 800a8ec:	4637      	mov	r7, r6
 800a8ee:	e599      	b.n	800a424 <_dtoa_r+0x4b4>
 800a8f0:	40240000 	.word	0x40240000
 800a8f4:	9b08      	ldr	r3, [sp, #32]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f000 80ca 	beq.w	800aa90 <_dtoa_r+0xb20>
 800a8fc:	9b03      	ldr	r3, [sp, #12]
 800a8fe:	9302      	str	r3, [sp, #8]
 800a900:	2d00      	cmp	r5, #0
 800a902:	dd05      	ble.n	800a910 <_dtoa_r+0x9a0>
 800a904:	4639      	mov	r1, r7
 800a906:	462a      	mov	r2, r5
 800a908:	4620      	mov	r0, r4
 800a90a:	f000 fb7d 	bl	800b008 <__lshift>
 800a90e:	4607      	mov	r7, r0
 800a910:	f1b8 0f00 	cmp.w	r8, #0
 800a914:	d05b      	beq.n	800a9ce <_dtoa_r+0xa5e>
 800a916:	6879      	ldr	r1, [r7, #4]
 800a918:	4620      	mov	r0, r4
 800a91a:	f000 f963 	bl	800abe4 <_Balloc>
 800a91e:	4605      	mov	r5, r0
 800a920:	b928      	cbnz	r0, 800a92e <_dtoa_r+0x9be>
 800a922:	4b87      	ldr	r3, [pc, #540]	; (800ab40 <_dtoa_r+0xbd0>)
 800a924:	4602      	mov	r2, r0
 800a926:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a92a:	f7ff bb3b 	b.w	8009fa4 <_dtoa_r+0x34>
 800a92e:	693a      	ldr	r2, [r7, #16]
 800a930:	3202      	adds	r2, #2
 800a932:	0092      	lsls	r2, r2, #2
 800a934:	f107 010c 	add.w	r1, r7, #12
 800a938:	300c      	adds	r0, #12
 800a93a:	f7fe fb33 	bl	8008fa4 <memcpy>
 800a93e:	2201      	movs	r2, #1
 800a940:	4629      	mov	r1, r5
 800a942:	4620      	mov	r0, r4
 800a944:	f000 fb60 	bl	800b008 <__lshift>
 800a948:	9b01      	ldr	r3, [sp, #4]
 800a94a:	f103 0901 	add.w	r9, r3, #1
 800a94e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a952:	4413      	add	r3, r2
 800a954:	9305      	str	r3, [sp, #20]
 800a956:	f00a 0301 	and.w	r3, sl, #1
 800a95a:	46b8      	mov	r8, r7
 800a95c:	9304      	str	r3, [sp, #16]
 800a95e:	4607      	mov	r7, r0
 800a960:	4631      	mov	r1, r6
 800a962:	ee18 0a10 	vmov	r0, s16
 800a966:	f7ff fa75 	bl	8009e54 <quorem>
 800a96a:	4641      	mov	r1, r8
 800a96c:	9002      	str	r0, [sp, #8]
 800a96e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a972:	ee18 0a10 	vmov	r0, s16
 800a976:	f000 fbb7 	bl	800b0e8 <__mcmp>
 800a97a:	463a      	mov	r2, r7
 800a97c:	9003      	str	r0, [sp, #12]
 800a97e:	4631      	mov	r1, r6
 800a980:	4620      	mov	r0, r4
 800a982:	f000 fbcd 	bl	800b120 <__mdiff>
 800a986:	68c2      	ldr	r2, [r0, #12]
 800a988:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800a98c:	4605      	mov	r5, r0
 800a98e:	bb02      	cbnz	r2, 800a9d2 <_dtoa_r+0xa62>
 800a990:	4601      	mov	r1, r0
 800a992:	ee18 0a10 	vmov	r0, s16
 800a996:	f000 fba7 	bl	800b0e8 <__mcmp>
 800a99a:	4602      	mov	r2, r0
 800a99c:	4629      	mov	r1, r5
 800a99e:	4620      	mov	r0, r4
 800a9a0:	9207      	str	r2, [sp, #28]
 800a9a2:	f000 f95f 	bl	800ac64 <_Bfree>
 800a9a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a9aa:	ea43 0102 	orr.w	r1, r3, r2
 800a9ae:	9b04      	ldr	r3, [sp, #16]
 800a9b0:	430b      	orrs	r3, r1
 800a9b2:	464d      	mov	r5, r9
 800a9b4:	d10f      	bne.n	800a9d6 <_dtoa_r+0xa66>
 800a9b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a9ba:	d02a      	beq.n	800aa12 <_dtoa_r+0xaa2>
 800a9bc:	9b03      	ldr	r3, [sp, #12]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	dd02      	ble.n	800a9c8 <_dtoa_r+0xa58>
 800a9c2:	9b02      	ldr	r3, [sp, #8]
 800a9c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a9c8:	f88b a000 	strb.w	sl, [fp]
 800a9cc:	e775      	b.n	800a8ba <_dtoa_r+0x94a>
 800a9ce:	4638      	mov	r0, r7
 800a9d0:	e7ba      	b.n	800a948 <_dtoa_r+0x9d8>
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	e7e2      	b.n	800a99c <_dtoa_r+0xa2c>
 800a9d6:	9b03      	ldr	r3, [sp, #12]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	db04      	blt.n	800a9e6 <_dtoa_r+0xa76>
 800a9dc:	9906      	ldr	r1, [sp, #24]
 800a9de:	430b      	orrs	r3, r1
 800a9e0:	9904      	ldr	r1, [sp, #16]
 800a9e2:	430b      	orrs	r3, r1
 800a9e4:	d122      	bne.n	800aa2c <_dtoa_r+0xabc>
 800a9e6:	2a00      	cmp	r2, #0
 800a9e8:	ddee      	ble.n	800a9c8 <_dtoa_r+0xa58>
 800a9ea:	ee18 1a10 	vmov	r1, s16
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f000 fb09 	bl	800b008 <__lshift>
 800a9f6:	4631      	mov	r1, r6
 800a9f8:	ee08 0a10 	vmov	s16, r0
 800a9fc:	f000 fb74 	bl	800b0e8 <__mcmp>
 800aa00:	2800      	cmp	r0, #0
 800aa02:	dc03      	bgt.n	800aa0c <_dtoa_r+0xa9c>
 800aa04:	d1e0      	bne.n	800a9c8 <_dtoa_r+0xa58>
 800aa06:	f01a 0f01 	tst.w	sl, #1
 800aa0a:	d0dd      	beq.n	800a9c8 <_dtoa_r+0xa58>
 800aa0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa10:	d1d7      	bne.n	800a9c2 <_dtoa_r+0xa52>
 800aa12:	2339      	movs	r3, #57	; 0x39
 800aa14:	f88b 3000 	strb.w	r3, [fp]
 800aa18:	462b      	mov	r3, r5
 800aa1a:	461d      	mov	r5, r3
 800aa1c:	3b01      	subs	r3, #1
 800aa1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa22:	2a39      	cmp	r2, #57	; 0x39
 800aa24:	d071      	beq.n	800ab0a <_dtoa_r+0xb9a>
 800aa26:	3201      	adds	r2, #1
 800aa28:	701a      	strb	r2, [r3, #0]
 800aa2a:	e746      	b.n	800a8ba <_dtoa_r+0x94a>
 800aa2c:	2a00      	cmp	r2, #0
 800aa2e:	dd07      	ble.n	800aa40 <_dtoa_r+0xad0>
 800aa30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa34:	d0ed      	beq.n	800aa12 <_dtoa_r+0xaa2>
 800aa36:	f10a 0301 	add.w	r3, sl, #1
 800aa3a:	f88b 3000 	strb.w	r3, [fp]
 800aa3e:	e73c      	b.n	800a8ba <_dtoa_r+0x94a>
 800aa40:	9b05      	ldr	r3, [sp, #20]
 800aa42:	f809 ac01 	strb.w	sl, [r9, #-1]
 800aa46:	4599      	cmp	r9, r3
 800aa48:	d047      	beq.n	800aada <_dtoa_r+0xb6a>
 800aa4a:	ee18 1a10 	vmov	r1, s16
 800aa4e:	2300      	movs	r3, #0
 800aa50:	220a      	movs	r2, #10
 800aa52:	4620      	mov	r0, r4
 800aa54:	f000 f928 	bl	800aca8 <__multadd>
 800aa58:	45b8      	cmp	r8, r7
 800aa5a:	ee08 0a10 	vmov	s16, r0
 800aa5e:	f04f 0300 	mov.w	r3, #0
 800aa62:	f04f 020a 	mov.w	r2, #10
 800aa66:	4641      	mov	r1, r8
 800aa68:	4620      	mov	r0, r4
 800aa6a:	d106      	bne.n	800aa7a <_dtoa_r+0xb0a>
 800aa6c:	f000 f91c 	bl	800aca8 <__multadd>
 800aa70:	4680      	mov	r8, r0
 800aa72:	4607      	mov	r7, r0
 800aa74:	f109 0901 	add.w	r9, r9, #1
 800aa78:	e772      	b.n	800a960 <_dtoa_r+0x9f0>
 800aa7a:	f000 f915 	bl	800aca8 <__multadd>
 800aa7e:	4639      	mov	r1, r7
 800aa80:	4680      	mov	r8, r0
 800aa82:	2300      	movs	r3, #0
 800aa84:	220a      	movs	r2, #10
 800aa86:	4620      	mov	r0, r4
 800aa88:	f000 f90e 	bl	800aca8 <__multadd>
 800aa8c:	4607      	mov	r7, r0
 800aa8e:	e7f1      	b.n	800aa74 <_dtoa_r+0xb04>
 800aa90:	9b03      	ldr	r3, [sp, #12]
 800aa92:	9302      	str	r3, [sp, #8]
 800aa94:	9d01      	ldr	r5, [sp, #4]
 800aa96:	ee18 0a10 	vmov	r0, s16
 800aa9a:	4631      	mov	r1, r6
 800aa9c:	f7ff f9da 	bl	8009e54 <quorem>
 800aaa0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aaa4:	9b01      	ldr	r3, [sp, #4]
 800aaa6:	f805 ab01 	strb.w	sl, [r5], #1
 800aaaa:	1aea      	subs	r2, r5, r3
 800aaac:	9b02      	ldr	r3, [sp, #8]
 800aaae:	4293      	cmp	r3, r2
 800aab0:	dd09      	ble.n	800aac6 <_dtoa_r+0xb56>
 800aab2:	ee18 1a10 	vmov	r1, s16
 800aab6:	2300      	movs	r3, #0
 800aab8:	220a      	movs	r2, #10
 800aaba:	4620      	mov	r0, r4
 800aabc:	f000 f8f4 	bl	800aca8 <__multadd>
 800aac0:	ee08 0a10 	vmov	s16, r0
 800aac4:	e7e7      	b.n	800aa96 <_dtoa_r+0xb26>
 800aac6:	9b02      	ldr	r3, [sp, #8]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	bfc8      	it	gt
 800aacc:	461d      	movgt	r5, r3
 800aace:	9b01      	ldr	r3, [sp, #4]
 800aad0:	bfd8      	it	le
 800aad2:	2501      	movle	r5, #1
 800aad4:	441d      	add	r5, r3
 800aad6:	f04f 0800 	mov.w	r8, #0
 800aada:	ee18 1a10 	vmov	r1, s16
 800aade:	2201      	movs	r2, #1
 800aae0:	4620      	mov	r0, r4
 800aae2:	f000 fa91 	bl	800b008 <__lshift>
 800aae6:	4631      	mov	r1, r6
 800aae8:	ee08 0a10 	vmov	s16, r0
 800aaec:	f000 fafc 	bl	800b0e8 <__mcmp>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	dc91      	bgt.n	800aa18 <_dtoa_r+0xaa8>
 800aaf4:	d102      	bne.n	800aafc <_dtoa_r+0xb8c>
 800aaf6:	f01a 0f01 	tst.w	sl, #1
 800aafa:	d18d      	bne.n	800aa18 <_dtoa_r+0xaa8>
 800aafc:	462b      	mov	r3, r5
 800aafe:	461d      	mov	r5, r3
 800ab00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab04:	2a30      	cmp	r2, #48	; 0x30
 800ab06:	d0fa      	beq.n	800aafe <_dtoa_r+0xb8e>
 800ab08:	e6d7      	b.n	800a8ba <_dtoa_r+0x94a>
 800ab0a:	9a01      	ldr	r2, [sp, #4]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d184      	bne.n	800aa1a <_dtoa_r+0xaaa>
 800ab10:	9b00      	ldr	r3, [sp, #0]
 800ab12:	3301      	adds	r3, #1
 800ab14:	9300      	str	r3, [sp, #0]
 800ab16:	2331      	movs	r3, #49	; 0x31
 800ab18:	7013      	strb	r3, [r2, #0]
 800ab1a:	e6ce      	b.n	800a8ba <_dtoa_r+0x94a>
 800ab1c:	4b09      	ldr	r3, [pc, #36]	; (800ab44 <_dtoa_r+0xbd4>)
 800ab1e:	f7ff ba95 	b.w	800a04c <_dtoa_r+0xdc>
 800ab22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f47f aa6e 	bne.w	800a006 <_dtoa_r+0x96>
 800ab2a:	4b07      	ldr	r3, [pc, #28]	; (800ab48 <_dtoa_r+0xbd8>)
 800ab2c:	f7ff ba8e 	b.w	800a04c <_dtoa_r+0xdc>
 800ab30:	9b02      	ldr	r3, [sp, #8]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	dcae      	bgt.n	800aa94 <_dtoa_r+0xb24>
 800ab36:	9b06      	ldr	r3, [sp, #24]
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	f73f aea8 	bgt.w	800a88e <_dtoa_r+0x91e>
 800ab3e:	e7a9      	b.n	800aa94 <_dtoa_r+0xb24>
 800ab40:	08039b03 	.word	0x08039b03
 800ab44:	08039a60 	.word	0x08039a60
 800ab48:	08039a84 	.word	0x08039a84

0800ab4c <_fstat_r>:
 800ab4c:	b538      	push	{r3, r4, r5, lr}
 800ab4e:	4d07      	ldr	r5, [pc, #28]	; (800ab6c <_fstat_r+0x20>)
 800ab50:	2300      	movs	r3, #0
 800ab52:	4604      	mov	r4, r0
 800ab54:	4608      	mov	r0, r1
 800ab56:	4611      	mov	r1, r2
 800ab58:	602b      	str	r3, [r5, #0]
 800ab5a:	f7f7 fcb6 	bl	80024ca <_fstat>
 800ab5e:	1c43      	adds	r3, r0, #1
 800ab60:	d102      	bne.n	800ab68 <_fstat_r+0x1c>
 800ab62:	682b      	ldr	r3, [r5, #0]
 800ab64:	b103      	cbz	r3, 800ab68 <_fstat_r+0x1c>
 800ab66:	6023      	str	r3, [r4, #0]
 800ab68:	bd38      	pop	{r3, r4, r5, pc}
 800ab6a:	bf00      	nop
 800ab6c:	2000a4b8 	.word	0x2000a4b8

0800ab70 <_isatty_r>:
 800ab70:	b538      	push	{r3, r4, r5, lr}
 800ab72:	4d06      	ldr	r5, [pc, #24]	; (800ab8c <_isatty_r+0x1c>)
 800ab74:	2300      	movs	r3, #0
 800ab76:	4604      	mov	r4, r0
 800ab78:	4608      	mov	r0, r1
 800ab7a:	602b      	str	r3, [r5, #0]
 800ab7c:	f7f7 fcb5 	bl	80024ea <_isatty>
 800ab80:	1c43      	adds	r3, r0, #1
 800ab82:	d102      	bne.n	800ab8a <_isatty_r+0x1a>
 800ab84:	682b      	ldr	r3, [r5, #0]
 800ab86:	b103      	cbz	r3, 800ab8a <_isatty_r+0x1a>
 800ab88:	6023      	str	r3, [r4, #0]
 800ab8a:	bd38      	pop	{r3, r4, r5, pc}
 800ab8c:	2000a4b8 	.word	0x2000a4b8

0800ab90 <_localeconv_r>:
 800ab90:	4800      	ldr	r0, [pc, #0]	; (800ab94 <_localeconv_r+0x4>)
 800ab92:	4770      	bx	lr
 800ab94:	20000168 	.word	0x20000168

0800ab98 <_lseek_r>:
 800ab98:	b538      	push	{r3, r4, r5, lr}
 800ab9a:	4d07      	ldr	r5, [pc, #28]	; (800abb8 <_lseek_r+0x20>)
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	4608      	mov	r0, r1
 800aba0:	4611      	mov	r1, r2
 800aba2:	2200      	movs	r2, #0
 800aba4:	602a      	str	r2, [r5, #0]
 800aba6:	461a      	mov	r2, r3
 800aba8:	f7f7 fcaa 	bl	8002500 <_lseek>
 800abac:	1c43      	adds	r3, r0, #1
 800abae:	d102      	bne.n	800abb6 <_lseek_r+0x1e>
 800abb0:	682b      	ldr	r3, [r5, #0]
 800abb2:	b103      	cbz	r3, 800abb6 <_lseek_r+0x1e>
 800abb4:	6023      	str	r3, [r4, #0]
 800abb6:	bd38      	pop	{r3, r4, r5, pc}
 800abb8:	2000a4b8 	.word	0x2000a4b8

0800abbc <malloc>:
 800abbc:	4b02      	ldr	r3, [pc, #8]	; (800abc8 <malloc+0xc>)
 800abbe:	4601      	mov	r1, r0
 800abc0:	6818      	ldr	r0, [r3, #0]
 800abc2:	f7fe ba71 	b.w	80090a8 <_malloc_r>
 800abc6:	bf00      	nop
 800abc8:	20000014 	.word	0x20000014

0800abcc <__malloc_lock>:
 800abcc:	4801      	ldr	r0, [pc, #4]	; (800abd4 <__malloc_lock+0x8>)
 800abce:	f7fe b982 	b.w	8008ed6 <__retarget_lock_acquire_recursive>
 800abd2:	bf00      	nop
 800abd4:	2000a4ac 	.word	0x2000a4ac

0800abd8 <__malloc_unlock>:
 800abd8:	4801      	ldr	r0, [pc, #4]	; (800abe0 <__malloc_unlock+0x8>)
 800abda:	f7fe b97d 	b.w	8008ed8 <__retarget_lock_release_recursive>
 800abde:	bf00      	nop
 800abe0:	2000a4ac 	.word	0x2000a4ac

0800abe4 <_Balloc>:
 800abe4:	b570      	push	{r4, r5, r6, lr}
 800abe6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800abe8:	4604      	mov	r4, r0
 800abea:	460d      	mov	r5, r1
 800abec:	b976      	cbnz	r6, 800ac0c <_Balloc+0x28>
 800abee:	2010      	movs	r0, #16
 800abf0:	f7ff ffe4 	bl	800abbc <malloc>
 800abf4:	4602      	mov	r2, r0
 800abf6:	6260      	str	r0, [r4, #36]	; 0x24
 800abf8:	b920      	cbnz	r0, 800ac04 <_Balloc+0x20>
 800abfa:	4b18      	ldr	r3, [pc, #96]	; (800ac5c <_Balloc+0x78>)
 800abfc:	4818      	ldr	r0, [pc, #96]	; (800ac60 <_Balloc+0x7c>)
 800abfe:	2166      	movs	r1, #102	; 0x66
 800ac00:	f001 faf8 	bl	800c1f4 <__assert_func>
 800ac04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac08:	6006      	str	r6, [r0, #0]
 800ac0a:	60c6      	str	r6, [r0, #12]
 800ac0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac0e:	68f3      	ldr	r3, [r6, #12]
 800ac10:	b183      	cbz	r3, 800ac34 <_Balloc+0x50>
 800ac12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac1a:	b9b8      	cbnz	r0, 800ac4c <_Balloc+0x68>
 800ac1c:	2101      	movs	r1, #1
 800ac1e:	fa01 f605 	lsl.w	r6, r1, r5
 800ac22:	1d72      	adds	r2, r6, #5
 800ac24:	0092      	lsls	r2, r2, #2
 800ac26:	4620      	mov	r0, r4
 800ac28:	f000 fb60 	bl	800b2ec <_calloc_r>
 800ac2c:	b160      	cbz	r0, 800ac48 <_Balloc+0x64>
 800ac2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac32:	e00e      	b.n	800ac52 <_Balloc+0x6e>
 800ac34:	2221      	movs	r2, #33	; 0x21
 800ac36:	2104      	movs	r1, #4
 800ac38:	4620      	mov	r0, r4
 800ac3a:	f000 fb57 	bl	800b2ec <_calloc_r>
 800ac3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac40:	60f0      	str	r0, [r6, #12]
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d1e4      	bne.n	800ac12 <_Balloc+0x2e>
 800ac48:	2000      	movs	r0, #0
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}
 800ac4c:	6802      	ldr	r2, [r0, #0]
 800ac4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac52:	2300      	movs	r3, #0
 800ac54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac58:	e7f7      	b.n	800ac4a <_Balloc+0x66>
 800ac5a:	bf00      	nop
 800ac5c:	08039a91 	.word	0x08039a91
 800ac60:	08039b14 	.word	0x08039b14

0800ac64 <_Bfree>:
 800ac64:	b570      	push	{r4, r5, r6, lr}
 800ac66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac68:	4605      	mov	r5, r0
 800ac6a:	460c      	mov	r4, r1
 800ac6c:	b976      	cbnz	r6, 800ac8c <_Bfree+0x28>
 800ac6e:	2010      	movs	r0, #16
 800ac70:	f7ff ffa4 	bl	800abbc <malloc>
 800ac74:	4602      	mov	r2, r0
 800ac76:	6268      	str	r0, [r5, #36]	; 0x24
 800ac78:	b920      	cbnz	r0, 800ac84 <_Bfree+0x20>
 800ac7a:	4b09      	ldr	r3, [pc, #36]	; (800aca0 <_Bfree+0x3c>)
 800ac7c:	4809      	ldr	r0, [pc, #36]	; (800aca4 <_Bfree+0x40>)
 800ac7e:	218a      	movs	r1, #138	; 0x8a
 800ac80:	f001 fab8 	bl	800c1f4 <__assert_func>
 800ac84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac88:	6006      	str	r6, [r0, #0]
 800ac8a:	60c6      	str	r6, [r0, #12]
 800ac8c:	b13c      	cbz	r4, 800ac9e <_Bfree+0x3a>
 800ac8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac90:	6862      	ldr	r2, [r4, #4]
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac98:	6021      	str	r1, [r4, #0]
 800ac9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac9e:	bd70      	pop	{r4, r5, r6, pc}
 800aca0:	08039a91 	.word	0x08039a91
 800aca4:	08039b14 	.word	0x08039b14

0800aca8 <__multadd>:
 800aca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acac:	690d      	ldr	r5, [r1, #16]
 800acae:	4607      	mov	r7, r0
 800acb0:	460c      	mov	r4, r1
 800acb2:	461e      	mov	r6, r3
 800acb4:	f101 0c14 	add.w	ip, r1, #20
 800acb8:	2000      	movs	r0, #0
 800acba:	f8dc 3000 	ldr.w	r3, [ip]
 800acbe:	b299      	uxth	r1, r3
 800acc0:	fb02 6101 	mla	r1, r2, r1, r6
 800acc4:	0c1e      	lsrs	r6, r3, #16
 800acc6:	0c0b      	lsrs	r3, r1, #16
 800acc8:	fb02 3306 	mla	r3, r2, r6, r3
 800accc:	b289      	uxth	r1, r1
 800acce:	3001      	adds	r0, #1
 800acd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800acd4:	4285      	cmp	r5, r0
 800acd6:	f84c 1b04 	str.w	r1, [ip], #4
 800acda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800acde:	dcec      	bgt.n	800acba <__multadd+0x12>
 800ace0:	b30e      	cbz	r6, 800ad26 <__multadd+0x7e>
 800ace2:	68a3      	ldr	r3, [r4, #8]
 800ace4:	42ab      	cmp	r3, r5
 800ace6:	dc19      	bgt.n	800ad1c <__multadd+0x74>
 800ace8:	6861      	ldr	r1, [r4, #4]
 800acea:	4638      	mov	r0, r7
 800acec:	3101      	adds	r1, #1
 800acee:	f7ff ff79 	bl	800abe4 <_Balloc>
 800acf2:	4680      	mov	r8, r0
 800acf4:	b928      	cbnz	r0, 800ad02 <__multadd+0x5a>
 800acf6:	4602      	mov	r2, r0
 800acf8:	4b0c      	ldr	r3, [pc, #48]	; (800ad2c <__multadd+0x84>)
 800acfa:	480d      	ldr	r0, [pc, #52]	; (800ad30 <__multadd+0x88>)
 800acfc:	21b5      	movs	r1, #181	; 0xb5
 800acfe:	f001 fa79 	bl	800c1f4 <__assert_func>
 800ad02:	6922      	ldr	r2, [r4, #16]
 800ad04:	3202      	adds	r2, #2
 800ad06:	f104 010c 	add.w	r1, r4, #12
 800ad0a:	0092      	lsls	r2, r2, #2
 800ad0c:	300c      	adds	r0, #12
 800ad0e:	f7fe f949 	bl	8008fa4 <memcpy>
 800ad12:	4621      	mov	r1, r4
 800ad14:	4638      	mov	r0, r7
 800ad16:	f7ff ffa5 	bl	800ac64 <_Bfree>
 800ad1a:	4644      	mov	r4, r8
 800ad1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad20:	3501      	adds	r5, #1
 800ad22:	615e      	str	r6, [r3, #20]
 800ad24:	6125      	str	r5, [r4, #16]
 800ad26:	4620      	mov	r0, r4
 800ad28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad2c:	08039b03 	.word	0x08039b03
 800ad30:	08039b14 	.word	0x08039b14

0800ad34 <__hi0bits>:
 800ad34:	0c03      	lsrs	r3, r0, #16
 800ad36:	041b      	lsls	r3, r3, #16
 800ad38:	b9d3      	cbnz	r3, 800ad70 <__hi0bits+0x3c>
 800ad3a:	0400      	lsls	r0, r0, #16
 800ad3c:	2310      	movs	r3, #16
 800ad3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ad42:	bf04      	itt	eq
 800ad44:	0200      	lsleq	r0, r0, #8
 800ad46:	3308      	addeq	r3, #8
 800ad48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad4c:	bf04      	itt	eq
 800ad4e:	0100      	lsleq	r0, r0, #4
 800ad50:	3304      	addeq	r3, #4
 800ad52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad56:	bf04      	itt	eq
 800ad58:	0080      	lsleq	r0, r0, #2
 800ad5a:	3302      	addeq	r3, #2
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	db05      	blt.n	800ad6c <__hi0bits+0x38>
 800ad60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad64:	f103 0301 	add.w	r3, r3, #1
 800ad68:	bf08      	it	eq
 800ad6a:	2320      	moveq	r3, #32
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	4770      	bx	lr
 800ad70:	2300      	movs	r3, #0
 800ad72:	e7e4      	b.n	800ad3e <__hi0bits+0xa>

0800ad74 <__lo0bits>:
 800ad74:	6803      	ldr	r3, [r0, #0]
 800ad76:	f013 0207 	ands.w	r2, r3, #7
 800ad7a:	4601      	mov	r1, r0
 800ad7c:	d00b      	beq.n	800ad96 <__lo0bits+0x22>
 800ad7e:	07da      	lsls	r2, r3, #31
 800ad80:	d423      	bmi.n	800adca <__lo0bits+0x56>
 800ad82:	0798      	lsls	r0, r3, #30
 800ad84:	bf49      	itett	mi
 800ad86:	085b      	lsrmi	r3, r3, #1
 800ad88:	089b      	lsrpl	r3, r3, #2
 800ad8a:	2001      	movmi	r0, #1
 800ad8c:	600b      	strmi	r3, [r1, #0]
 800ad8e:	bf5c      	itt	pl
 800ad90:	600b      	strpl	r3, [r1, #0]
 800ad92:	2002      	movpl	r0, #2
 800ad94:	4770      	bx	lr
 800ad96:	b298      	uxth	r0, r3
 800ad98:	b9a8      	cbnz	r0, 800adc6 <__lo0bits+0x52>
 800ad9a:	0c1b      	lsrs	r3, r3, #16
 800ad9c:	2010      	movs	r0, #16
 800ad9e:	b2da      	uxtb	r2, r3
 800ada0:	b90a      	cbnz	r2, 800ada6 <__lo0bits+0x32>
 800ada2:	3008      	adds	r0, #8
 800ada4:	0a1b      	lsrs	r3, r3, #8
 800ada6:	071a      	lsls	r2, r3, #28
 800ada8:	bf04      	itt	eq
 800adaa:	091b      	lsreq	r3, r3, #4
 800adac:	3004      	addeq	r0, #4
 800adae:	079a      	lsls	r2, r3, #30
 800adb0:	bf04      	itt	eq
 800adb2:	089b      	lsreq	r3, r3, #2
 800adb4:	3002      	addeq	r0, #2
 800adb6:	07da      	lsls	r2, r3, #31
 800adb8:	d403      	bmi.n	800adc2 <__lo0bits+0x4e>
 800adba:	085b      	lsrs	r3, r3, #1
 800adbc:	f100 0001 	add.w	r0, r0, #1
 800adc0:	d005      	beq.n	800adce <__lo0bits+0x5a>
 800adc2:	600b      	str	r3, [r1, #0]
 800adc4:	4770      	bx	lr
 800adc6:	4610      	mov	r0, r2
 800adc8:	e7e9      	b.n	800ad9e <__lo0bits+0x2a>
 800adca:	2000      	movs	r0, #0
 800adcc:	4770      	bx	lr
 800adce:	2020      	movs	r0, #32
 800add0:	4770      	bx	lr
	...

0800add4 <__i2b>:
 800add4:	b510      	push	{r4, lr}
 800add6:	460c      	mov	r4, r1
 800add8:	2101      	movs	r1, #1
 800adda:	f7ff ff03 	bl	800abe4 <_Balloc>
 800adde:	4602      	mov	r2, r0
 800ade0:	b928      	cbnz	r0, 800adee <__i2b+0x1a>
 800ade2:	4b05      	ldr	r3, [pc, #20]	; (800adf8 <__i2b+0x24>)
 800ade4:	4805      	ldr	r0, [pc, #20]	; (800adfc <__i2b+0x28>)
 800ade6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800adea:	f001 fa03 	bl	800c1f4 <__assert_func>
 800adee:	2301      	movs	r3, #1
 800adf0:	6144      	str	r4, [r0, #20]
 800adf2:	6103      	str	r3, [r0, #16]
 800adf4:	bd10      	pop	{r4, pc}
 800adf6:	bf00      	nop
 800adf8:	08039b03 	.word	0x08039b03
 800adfc:	08039b14 	.word	0x08039b14

0800ae00 <__multiply>:
 800ae00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae04:	4691      	mov	r9, r2
 800ae06:	690a      	ldr	r2, [r1, #16]
 800ae08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	bfb8      	it	lt
 800ae10:	460b      	movlt	r3, r1
 800ae12:	460c      	mov	r4, r1
 800ae14:	bfbc      	itt	lt
 800ae16:	464c      	movlt	r4, r9
 800ae18:	4699      	movlt	r9, r3
 800ae1a:	6927      	ldr	r7, [r4, #16]
 800ae1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ae20:	68a3      	ldr	r3, [r4, #8]
 800ae22:	6861      	ldr	r1, [r4, #4]
 800ae24:	eb07 060a 	add.w	r6, r7, sl
 800ae28:	42b3      	cmp	r3, r6
 800ae2a:	b085      	sub	sp, #20
 800ae2c:	bfb8      	it	lt
 800ae2e:	3101      	addlt	r1, #1
 800ae30:	f7ff fed8 	bl	800abe4 <_Balloc>
 800ae34:	b930      	cbnz	r0, 800ae44 <__multiply+0x44>
 800ae36:	4602      	mov	r2, r0
 800ae38:	4b44      	ldr	r3, [pc, #272]	; (800af4c <__multiply+0x14c>)
 800ae3a:	4845      	ldr	r0, [pc, #276]	; (800af50 <__multiply+0x150>)
 800ae3c:	f240 115d 	movw	r1, #349	; 0x15d
 800ae40:	f001 f9d8 	bl	800c1f4 <__assert_func>
 800ae44:	f100 0514 	add.w	r5, r0, #20
 800ae48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae4c:	462b      	mov	r3, r5
 800ae4e:	2200      	movs	r2, #0
 800ae50:	4543      	cmp	r3, r8
 800ae52:	d321      	bcc.n	800ae98 <__multiply+0x98>
 800ae54:	f104 0314 	add.w	r3, r4, #20
 800ae58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae5c:	f109 0314 	add.w	r3, r9, #20
 800ae60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae64:	9202      	str	r2, [sp, #8]
 800ae66:	1b3a      	subs	r2, r7, r4
 800ae68:	3a15      	subs	r2, #21
 800ae6a:	f022 0203 	bic.w	r2, r2, #3
 800ae6e:	3204      	adds	r2, #4
 800ae70:	f104 0115 	add.w	r1, r4, #21
 800ae74:	428f      	cmp	r7, r1
 800ae76:	bf38      	it	cc
 800ae78:	2204      	movcc	r2, #4
 800ae7a:	9201      	str	r2, [sp, #4]
 800ae7c:	9a02      	ldr	r2, [sp, #8]
 800ae7e:	9303      	str	r3, [sp, #12]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d80c      	bhi.n	800ae9e <__multiply+0x9e>
 800ae84:	2e00      	cmp	r6, #0
 800ae86:	dd03      	ble.n	800ae90 <__multiply+0x90>
 800ae88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d05a      	beq.n	800af46 <__multiply+0x146>
 800ae90:	6106      	str	r6, [r0, #16]
 800ae92:	b005      	add	sp, #20
 800ae94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae98:	f843 2b04 	str.w	r2, [r3], #4
 800ae9c:	e7d8      	b.n	800ae50 <__multiply+0x50>
 800ae9e:	f8b3 a000 	ldrh.w	sl, [r3]
 800aea2:	f1ba 0f00 	cmp.w	sl, #0
 800aea6:	d024      	beq.n	800aef2 <__multiply+0xf2>
 800aea8:	f104 0e14 	add.w	lr, r4, #20
 800aeac:	46a9      	mov	r9, r5
 800aeae:	f04f 0c00 	mov.w	ip, #0
 800aeb2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aeb6:	f8d9 1000 	ldr.w	r1, [r9]
 800aeba:	fa1f fb82 	uxth.w	fp, r2
 800aebe:	b289      	uxth	r1, r1
 800aec0:	fb0a 110b 	mla	r1, sl, fp, r1
 800aec4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aec8:	f8d9 2000 	ldr.w	r2, [r9]
 800aecc:	4461      	add	r1, ip
 800aece:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aed2:	fb0a c20b 	mla	r2, sl, fp, ip
 800aed6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aeda:	b289      	uxth	r1, r1
 800aedc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aee0:	4577      	cmp	r7, lr
 800aee2:	f849 1b04 	str.w	r1, [r9], #4
 800aee6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aeea:	d8e2      	bhi.n	800aeb2 <__multiply+0xb2>
 800aeec:	9a01      	ldr	r2, [sp, #4]
 800aeee:	f845 c002 	str.w	ip, [r5, r2]
 800aef2:	9a03      	ldr	r2, [sp, #12]
 800aef4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aef8:	3304      	adds	r3, #4
 800aefa:	f1b9 0f00 	cmp.w	r9, #0
 800aefe:	d020      	beq.n	800af42 <__multiply+0x142>
 800af00:	6829      	ldr	r1, [r5, #0]
 800af02:	f104 0c14 	add.w	ip, r4, #20
 800af06:	46ae      	mov	lr, r5
 800af08:	f04f 0a00 	mov.w	sl, #0
 800af0c:	f8bc b000 	ldrh.w	fp, [ip]
 800af10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800af14:	fb09 220b 	mla	r2, r9, fp, r2
 800af18:	4492      	add	sl, r2
 800af1a:	b289      	uxth	r1, r1
 800af1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800af20:	f84e 1b04 	str.w	r1, [lr], #4
 800af24:	f85c 2b04 	ldr.w	r2, [ip], #4
 800af28:	f8be 1000 	ldrh.w	r1, [lr]
 800af2c:	0c12      	lsrs	r2, r2, #16
 800af2e:	fb09 1102 	mla	r1, r9, r2, r1
 800af32:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800af36:	4567      	cmp	r7, ip
 800af38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af3c:	d8e6      	bhi.n	800af0c <__multiply+0x10c>
 800af3e:	9a01      	ldr	r2, [sp, #4]
 800af40:	50a9      	str	r1, [r5, r2]
 800af42:	3504      	adds	r5, #4
 800af44:	e79a      	b.n	800ae7c <__multiply+0x7c>
 800af46:	3e01      	subs	r6, #1
 800af48:	e79c      	b.n	800ae84 <__multiply+0x84>
 800af4a:	bf00      	nop
 800af4c:	08039b03 	.word	0x08039b03
 800af50:	08039b14 	.word	0x08039b14

0800af54 <__pow5mult>:
 800af54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af58:	4615      	mov	r5, r2
 800af5a:	f012 0203 	ands.w	r2, r2, #3
 800af5e:	4606      	mov	r6, r0
 800af60:	460f      	mov	r7, r1
 800af62:	d007      	beq.n	800af74 <__pow5mult+0x20>
 800af64:	4c25      	ldr	r4, [pc, #148]	; (800affc <__pow5mult+0xa8>)
 800af66:	3a01      	subs	r2, #1
 800af68:	2300      	movs	r3, #0
 800af6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af6e:	f7ff fe9b 	bl	800aca8 <__multadd>
 800af72:	4607      	mov	r7, r0
 800af74:	10ad      	asrs	r5, r5, #2
 800af76:	d03d      	beq.n	800aff4 <__pow5mult+0xa0>
 800af78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af7a:	b97c      	cbnz	r4, 800af9c <__pow5mult+0x48>
 800af7c:	2010      	movs	r0, #16
 800af7e:	f7ff fe1d 	bl	800abbc <malloc>
 800af82:	4602      	mov	r2, r0
 800af84:	6270      	str	r0, [r6, #36]	; 0x24
 800af86:	b928      	cbnz	r0, 800af94 <__pow5mult+0x40>
 800af88:	4b1d      	ldr	r3, [pc, #116]	; (800b000 <__pow5mult+0xac>)
 800af8a:	481e      	ldr	r0, [pc, #120]	; (800b004 <__pow5mult+0xb0>)
 800af8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af90:	f001 f930 	bl	800c1f4 <__assert_func>
 800af94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af98:	6004      	str	r4, [r0, #0]
 800af9a:	60c4      	str	r4, [r0, #12]
 800af9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800afa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800afa4:	b94c      	cbnz	r4, 800afba <__pow5mult+0x66>
 800afa6:	f240 2171 	movw	r1, #625	; 0x271
 800afaa:	4630      	mov	r0, r6
 800afac:	f7ff ff12 	bl	800add4 <__i2b>
 800afb0:	2300      	movs	r3, #0
 800afb2:	f8c8 0008 	str.w	r0, [r8, #8]
 800afb6:	4604      	mov	r4, r0
 800afb8:	6003      	str	r3, [r0, #0]
 800afba:	f04f 0900 	mov.w	r9, #0
 800afbe:	07eb      	lsls	r3, r5, #31
 800afc0:	d50a      	bpl.n	800afd8 <__pow5mult+0x84>
 800afc2:	4639      	mov	r1, r7
 800afc4:	4622      	mov	r2, r4
 800afc6:	4630      	mov	r0, r6
 800afc8:	f7ff ff1a 	bl	800ae00 <__multiply>
 800afcc:	4639      	mov	r1, r7
 800afce:	4680      	mov	r8, r0
 800afd0:	4630      	mov	r0, r6
 800afd2:	f7ff fe47 	bl	800ac64 <_Bfree>
 800afd6:	4647      	mov	r7, r8
 800afd8:	106d      	asrs	r5, r5, #1
 800afda:	d00b      	beq.n	800aff4 <__pow5mult+0xa0>
 800afdc:	6820      	ldr	r0, [r4, #0]
 800afde:	b938      	cbnz	r0, 800aff0 <__pow5mult+0x9c>
 800afe0:	4622      	mov	r2, r4
 800afe2:	4621      	mov	r1, r4
 800afe4:	4630      	mov	r0, r6
 800afe6:	f7ff ff0b 	bl	800ae00 <__multiply>
 800afea:	6020      	str	r0, [r4, #0]
 800afec:	f8c0 9000 	str.w	r9, [r0]
 800aff0:	4604      	mov	r4, r0
 800aff2:	e7e4      	b.n	800afbe <__pow5mult+0x6a>
 800aff4:	4638      	mov	r0, r7
 800aff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800affa:	bf00      	nop
 800affc:	08039c60 	.word	0x08039c60
 800b000:	08039a91 	.word	0x08039a91
 800b004:	08039b14 	.word	0x08039b14

0800b008 <__lshift>:
 800b008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b00c:	460c      	mov	r4, r1
 800b00e:	6849      	ldr	r1, [r1, #4]
 800b010:	6923      	ldr	r3, [r4, #16]
 800b012:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b016:	68a3      	ldr	r3, [r4, #8]
 800b018:	4607      	mov	r7, r0
 800b01a:	4691      	mov	r9, r2
 800b01c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b020:	f108 0601 	add.w	r6, r8, #1
 800b024:	42b3      	cmp	r3, r6
 800b026:	db0b      	blt.n	800b040 <__lshift+0x38>
 800b028:	4638      	mov	r0, r7
 800b02a:	f7ff fddb 	bl	800abe4 <_Balloc>
 800b02e:	4605      	mov	r5, r0
 800b030:	b948      	cbnz	r0, 800b046 <__lshift+0x3e>
 800b032:	4602      	mov	r2, r0
 800b034:	4b2a      	ldr	r3, [pc, #168]	; (800b0e0 <__lshift+0xd8>)
 800b036:	482b      	ldr	r0, [pc, #172]	; (800b0e4 <__lshift+0xdc>)
 800b038:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b03c:	f001 f8da 	bl	800c1f4 <__assert_func>
 800b040:	3101      	adds	r1, #1
 800b042:	005b      	lsls	r3, r3, #1
 800b044:	e7ee      	b.n	800b024 <__lshift+0x1c>
 800b046:	2300      	movs	r3, #0
 800b048:	f100 0114 	add.w	r1, r0, #20
 800b04c:	f100 0210 	add.w	r2, r0, #16
 800b050:	4618      	mov	r0, r3
 800b052:	4553      	cmp	r3, sl
 800b054:	db37      	blt.n	800b0c6 <__lshift+0xbe>
 800b056:	6920      	ldr	r0, [r4, #16]
 800b058:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b05c:	f104 0314 	add.w	r3, r4, #20
 800b060:	f019 091f 	ands.w	r9, r9, #31
 800b064:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b068:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b06c:	d02f      	beq.n	800b0ce <__lshift+0xc6>
 800b06e:	f1c9 0e20 	rsb	lr, r9, #32
 800b072:	468a      	mov	sl, r1
 800b074:	f04f 0c00 	mov.w	ip, #0
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	fa02 f209 	lsl.w	r2, r2, r9
 800b07e:	ea42 020c 	orr.w	r2, r2, ip
 800b082:	f84a 2b04 	str.w	r2, [sl], #4
 800b086:	f853 2b04 	ldr.w	r2, [r3], #4
 800b08a:	4298      	cmp	r0, r3
 800b08c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b090:	d8f2      	bhi.n	800b078 <__lshift+0x70>
 800b092:	1b03      	subs	r3, r0, r4
 800b094:	3b15      	subs	r3, #21
 800b096:	f023 0303 	bic.w	r3, r3, #3
 800b09a:	3304      	adds	r3, #4
 800b09c:	f104 0215 	add.w	r2, r4, #21
 800b0a0:	4290      	cmp	r0, r2
 800b0a2:	bf38      	it	cc
 800b0a4:	2304      	movcc	r3, #4
 800b0a6:	f841 c003 	str.w	ip, [r1, r3]
 800b0aa:	f1bc 0f00 	cmp.w	ip, #0
 800b0ae:	d001      	beq.n	800b0b4 <__lshift+0xac>
 800b0b0:	f108 0602 	add.w	r6, r8, #2
 800b0b4:	3e01      	subs	r6, #1
 800b0b6:	4638      	mov	r0, r7
 800b0b8:	612e      	str	r6, [r5, #16]
 800b0ba:	4621      	mov	r1, r4
 800b0bc:	f7ff fdd2 	bl	800ac64 <_Bfree>
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	e7c1      	b.n	800b052 <__lshift+0x4a>
 800b0ce:	3904      	subs	r1, #4
 800b0d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0d8:	4298      	cmp	r0, r3
 800b0da:	d8f9      	bhi.n	800b0d0 <__lshift+0xc8>
 800b0dc:	e7ea      	b.n	800b0b4 <__lshift+0xac>
 800b0de:	bf00      	nop
 800b0e0:	08039b03 	.word	0x08039b03
 800b0e4:	08039b14 	.word	0x08039b14

0800b0e8 <__mcmp>:
 800b0e8:	b530      	push	{r4, r5, lr}
 800b0ea:	6902      	ldr	r2, [r0, #16]
 800b0ec:	690c      	ldr	r4, [r1, #16]
 800b0ee:	1b12      	subs	r2, r2, r4
 800b0f0:	d10e      	bne.n	800b110 <__mcmp+0x28>
 800b0f2:	f100 0314 	add.w	r3, r0, #20
 800b0f6:	3114      	adds	r1, #20
 800b0f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b0fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b100:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b104:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b108:	42a5      	cmp	r5, r4
 800b10a:	d003      	beq.n	800b114 <__mcmp+0x2c>
 800b10c:	d305      	bcc.n	800b11a <__mcmp+0x32>
 800b10e:	2201      	movs	r2, #1
 800b110:	4610      	mov	r0, r2
 800b112:	bd30      	pop	{r4, r5, pc}
 800b114:	4283      	cmp	r3, r0
 800b116:	d3f3      	bcc.n	800b100 <__mcmp+0x18>
 800b118:	e7fa      	b.n	800b110 <__mcmp+0x28>
 800b11a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b11e:	e7f7      	b.n	800b110 <__mcmp+0x28>

0800b120 <__mdiff>:
 800b120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b124:	460c      	mov	r4, r1
 800b126:	4606      	mov	r6, r0
 800b128:	4611      	mov	r1, r2
 800b12a:	4620      	mov	r0, r4
 800b12c:	4690      	mov	r8, r2
 800b12e:	f7ff ffdb 	bl	800b0e8 <__mcmp>
 800b132:	1e05      	subs	r5, r0, #0
 800b134:	d110      	bne.n	800b158 <__mdiff+0x38>
 800b136:	4629      	mov	r1, r5
 800b138:	4630      	mov	r0, r6
 800b13a:	f7ff fd53 	bl	800abe4 <_Balloc>
 800b13e:	b930      	cbnz	r0, 800b14e <__mdiff+0x2e>
 800b140:	4b3a      	ldr	r3, [pc, #232]	; (800b22c <__mdiff+0x10c>)
 800b142:	4602      	mov	r2, r0
 800b144:	f240 2132 	movw	r1, #562	; 0x232
 800b148:	4839      	ldr	r0, [pc, #228]	; (800b230 <__mdiff+0x110>)
 800b14a:	f001 f853 	bl	800c1f4 <__assert_func>
 800b14e:	2301      	movs	r3, #1
 800b150:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b154:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b158:	bfa4      	itt	ge
 800b15a:	4643      	movge	r3, r8
 800b15c:	46a0      	movge	r8, r4
 800b15e:	4630      	mov	r0, r6
 800b160:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b164:	bfa6      	itte	ge
 800b166:	461c      	movge	r4, r3
 800b168:	2500      	movge	r5, #0
 800b16a:	2501      	movlt	r5, #1
 800b16c:	f7ff fd3a 	bl	800abe4 <_Balloc>
 800b170:	b920      	cbnz	r0, 800b17c <__mdiff+0x5c>
 800b172:	4b2e      	ldr	r3, [pc, #184]	; (800b22c <__mdiff+0x10c>)
 800b174:	4602      	mov	r2, r0
 800b176:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b17a:	e7e5      	b.n	800b148 <__mdiff+0x28>
 800b17c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b180:	6926      	ldr	r6, [r4, #16]
 800b182:	60c5      	str	r5, [r0, #12]
 800b184:	f104 0914 	add.w	r9, r4, #20
 800b188:	f108 0514 	add.w	r5, r8, #20
 800b18c:	f100 0e14 	add.w	lr, r0, #20
 800b190:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b194:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b198:	f108 0210 	add.w	r2, r8, #16
 800b19c:	46f2      	mov	sl, lr
 800b19e:	2100      	movs	r1, #0
 800b1a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b1a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b1a8:	fa1f f883 	uxth.w	r8, r3
 800b1ac:	fa11 f18b 	uxtah	r1, r1, fp
 800b1b0:	0c1b      	lsrs	r3, r3, #16
 800b1b2:	eba1 0808 	sub.w	r8, r1, r8
 800b1b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b1ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b1be:	fa1f f888 	uxth.w	r8, r8
 800b1c2:	1419      	asrs	r1, r3, #16
 800b1c4:	454e      	cmp	r6, r9
 800b1c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b1ca:	f84a 3b04 	str.w	r3, [sl], #4
 800b1ce:	d8e7      	bhi.n	800b1a0 <__mdiff+0x80>
 800b1d0:	1b33      	subs	r3, r6, r4
 800b1d2:	3b15      	subs	r3, #21
 800b1d4:	f023 0303 	bic.w	r3, r3, #3
 800b1d8:	3304      	adds	r3, #4
 800b1da:	3415      	adds	r4, #21
 800b1dc:	42a6      	cmp	r6, r4
 800b1de:	bf38      	it	cc
 800b1e0:	2304      	movcc	r3, #4
 800b1e2:	441d      	add	r5, r3
 800b1e4:	4473      	add	r3, lr
 800b1e6:	469e      	mov	lr, r3
 800b1e8:	462e      	mov	r6, r5
 800b1ea:	4566      	cmp	r6, ip
 800b1ec:	d30e      	bcc.n	800b20c <__mdiff+0xec>
 800b1ee:	f10c 0203 	add.w	r2, ip, #3
 800b1f2:	1b52      	subs	r2, r2, r5
 800b1f4:	f022 0203 	bic.w	r2, r2, #3
 800b1f8:	3d03      	subs	r5, #3
 800b1fa:	45ac      	cmp	ip, r5
 800b1fc:	bf38      	it	cc
 800b1fe:	2200      	movcc	r2, #0
 800b200:	441a      	add	r2, r3
 800b202:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b206:	b17b      	cbz	r3, 800b228 <__mdiff+0x108>
 800b208:	6107      	str	r7, [r0, #16]
 800b20a:	e7a3      	b.n	800b154 <__mdiff+0x34>
 800b20c:	f856 8b04 	ldr.w	r8, [r6], #4
 800b210:	fa11 f288 	uxtah	r2, r1, r8
 800b214:	1414      	asrs	r4, r2, #16
 800b216:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b21a:	b292      	uxth	r2, r2
 800b21c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b220:	f84e 2b04 	str.w	r2, [lr], #4
 800b224:	1421      	asrs	r1, r4, #16
 800b226:	e7e0      	b.n	800b1ea <__mdiff+0xca>
 800b228:	3f01      	subs	r7, #1
 800b22a:	e7ea      	b.n	800b202 <__mdiff+0xe2>
 800b22c:	08039b03 	.word	0x08039b03
 800b230:	08039b14 	.word	0x08039b14

0800b234 <__d2b>:
 800b234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b238:	4689      	mov	r9, r1
 800b23a:	2101      	movs	r1, #1
 800b23c:	ec57 6b10 	vmov	r6, r7, d0
 800b240:	4690      	mov	r8, r2
 800b242:	f7ff fccf 	bl	800abe4 <_Balloc>
 800b246:	4604      	mov	r4, r0
 800b248:	b930      	cbnz	r0, 800b258 <__d2b+0x24>
 800b24a:	4602      	mov	r2, r0
 800b24c:	4b25      	ldr	r3, [pc, #148]	; (800b2e4 <__d2b+0xb0>)
 800b24e:	4826      	ldr	r0, [pc, #152]	; (800b2e8 <__d2b+0xb4>)
 800b250:	f240 310a 	movw	r1, #778	; 0x30a
 800b254:	f000 ffce 	bl	800c1f4 <__assert_func>
 800b258:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b25c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b260:	bb35      	cbnz	r5, 800b2b0 <__d2b+0x7c>
 800b262:	2e00      	cmp	r6, #0
 800b264:	9301      	str	r3, [sp, #4]
 800b266:	d028      	beq.n	800b2ba <__d2b+0x86>
 800b268:	4668      	mov	r0, sp
 800b26a:	9600      	str	r6, [sp, #0]
 800b26c:	f7ff fd82 	bl	800ad74 <__lo0bits>
 800b270:	9900      	ldr	r1, [sp, #0]
 800b272:	b300      	cbz	r0, 800b2b6 <__d2b+0x82>
 800b274:	9a01      	ldr	r2, [sp, #4]
 800b276:	f1c0 0320 	rsb	r3, r0, #32
 800b27a:	fa02 f303 	lsl.w	r3, r2, r3
 800b27e:	430b      	orrs	r3, r1
 800b280:	40c2      	lsrs	r2, r0
 800b282:	6163      	str	r3, [r4, #20]
 800b284:	9201      	str	r2, [sp, #4]
 800b286:	9b01      	ldr	r3, [sp, #4]
 800b288:	61a3      	str	r3, [r4, #24]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	bf14      	ite	ne
 800b28e:	2202      	movne	r2, #2
 800b290:	2201      	moveq	r2, #1
 800b292:	6122      	str	r2, [r4, #16]
 800b294:	b1d5      	cbz	r5, 800b2cc <__d2b+0x98>
 800b296:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b29a:	4405      	add	r5, r0
 800b29c:	f8c9 5000 	str.w	r5, [r9]
 800b2a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b2a4:	f8c8 0000 	str.w	r0, [r8]
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	b003      	add	sp, #12
 800b2ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2b4:	e7d5      	b.n	800b262 <__d2b+0x2e>
 800b2b6:	6161      	str	r1, [r4, #20]
 800b2b8:	e7e5      	b.n	800b286 <__d2b+0x52>
 800b2ba:	a801      	add	r0, sp, #4
 800b2bc:	f7ff fd5a 	bl	800ad74 <__lo0bits>
 800b2c0:	9b01      	ldr	r3, [sp, #4]
 800b2c2:	6163      	str	r3, [r4, #20]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	6122      	str	r2, [r4, #16]
 800b2c8:	3020      	adds	r0, #32
 800b2ca:	e7e3      	b.n	800b294 <__d2b+0x60>
 800b2cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b2d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b2d4:	f8c9 0000 	str.w	r0, [r9]
 800b2d8:	6918      	ldr	r0, [r3, #16]
 800b2da:	f7ff fd2b 	bl	800ad34 <__hi0bits>
 800b2de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b2e2:	e7df      	b.n	800b2a4 <__d2b+0x70>
 800b2e4:	08039b03 	.word	0x08039b03
 800b2e8:	08039b14 	.word	0x08039b14

0800b2ec <_calloc_r>:
 800b2ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2ee:	fba1 2402 	umull	r2, r4, r1, r2
 800b2f2:	b94c      	cbnz	r4, 800b308 <_calloc_r+0x1c>
 800b2f4:	4611      	mov	r1, r2
 800b2f6:	9201      	str	r2, [sp, #4]
 800b2f8:	f7fd fed6 	bl	80090a8 <_malloc_r>
 800b2fc:	9a01      	ldr	r2, [sp, #4]
 800b2fe:	4605      	mov	r5, r0
 800b300:	b930      	cbnz	r0, 800b310 <_calloc_r+0x24>
 800b302:	4628      	mov	r0, r5
 800b304:	b003      	add	sp, #12
 800b306:	bd30      	pop	{r4, r5, pc}
 800b308:	220c      	movs	r2, #12
 800b30a:	6002      	str	r2, [r0, #0]
 800b30c:	2500      	movs	r5, #0
 800b30e:	e7f8      	b.n	800b302 <_calloc_r+0x16>
 800b310:	4621      	mov	r1, r4
 800b312:	f7fd fe55 	bl	8008fc0 <memset>
 800b316:	e7f4      	b.n	800b302 <_calloc_r+0x16>

0800b318 <__sfputc_r>:
 800b318:	6893      	ldr	r3, [r2, #8]
 800b31a:	3b01      	subs	r3, #1
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	b410      	push	{r4}
 800b320:	6093      	str	r3, [r2, #8]
 800b322:	da08      	bge.n	800b336 <__sfputc_r+0x1e>
 800b324:	6994      	ldr	r4, [r2, #24]
 800b326:	42a3      	cmp	r3, r4
 800b328:	db01      	blt.n	800b32e <__sfputc_r+0x16>
 800b32a:	290a      	cmp	r1, #10
 800b32c:	d103      	bne.n	800b336 <__sfputc_r+0x1e>
 800b32e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b332:	f7fe bcad 	b.w	8009c90 <__swbuf_r>
 800b336:	6813      	ldr	r3, [r2, #0]
 800b338:	1c58      	adds	r0, r3, #1
 800b33a:	6010      	str	r0, [r2, #0]
 800b33c:	7019      	strb	r1, [r3, #0]
 800b33e:	4608      	mov	r0, r1
 800b340:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <__sfputs_r>:
 800b346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b348:	4606      	mov	r6, r0
 800b34a:	460f      	mov	r7, r1
 800b34c:	4614      	mov	r4, r2
 800b34e:	18d5      	adds	r5, r2, r3
 800b350:	42ac      	cmp	r4, r5
 800b352:	d101      	bne.n	800b358 <__sfputs_r+0x12>
 800b354:	2000      	movs	r0, #0
 800b356:	e007      	b.n	800b368 <__sfputs_r+0x22>
 800b358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b35c:	463a      	mov	r2, r7
 800b35e:	4630      	mov	r0, r6
 800b360:	f7ff ffda 	bl	800b318 <__sfputc_r>
 800b364:	1c43      	adds	r3, r0, #1
 800b366:	d1f3      	bne.n	800b350 <__sfputs_r+0xa>
 800b368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b36c <_vfiprintf_r>:
 800b36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b370:	460d      	mov	r5, r1
 800b372:	b09d      	sub	sp, #116	; 0x74
 800b374:	4614      	mov	r4, r2
 800b376:	4698      	mov	r8, r3
 800b378:	4606      	mov	r6, r0
 800b37a:	b118      	cbz	r0, 800b384 <_vfiprintf_r+0x18>
 800b37c:	6983      	ldr	r3, [r0, #24]
 800b37e:	b90b      	cbnz	r3, 800b384 <_vfiprintf_r+0x18>
 800b380:	f7fd fce6 	bl	8008d50 <__sinit>
 800b384:	4b89      	ldr	r3, [pc, #548]	; (800b5ac <_vfiprintf_r+0x240>)
 800b386:	429d      	cmp	r5, r3
 800b388:	d11b      	bne.n	800b3c2 <_vfiprintf_r+0x56>
 800b38a:	6875      	ldr	r5, [r6, #4]
 800b38c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b38e:	07d9      	lsls	r1, r3, #31
 800b390:	d405      	bmi.n	800b39e <_vfiprintf_r+0x32>
 800b392:	89ab      	ldrh	r3, [r5, #12]
 800b394:	059a      	lsls	r2, r3, #22
 800b396:	d402      	bmi.n	800b39e <_vfiprintf_r+0x32>
 800b398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b39a:	f7fd fd9c 	bl	8008ed6 <__retarget_lock_acquire_recursive>
 800b39e:	89ab      	ldrh	r3, [r5, #12]
 800b3a0:	071b      	lsls	r3, r3, #28
 800b3a2:	d501      	bpl.n	800b3a8 <_vfiprintf_r+0x3c>
 800b3a4:	692b      	ldr	r3, [r5, #16]
 800b3a6:	b9eb      	cbnz	r3, 800b3e4 <_vfiprintf_r+0x78>
 800b3a8:	4629      	mov	r1, r5
 800b3aa:	4630      	mov	r0, r6
 800b3ac:	f7fe fcd4 	bl	8009d58 <__swsetup_r>
 800b3b0:	b1c0      	cbz	r0, 800b3e4 <_vfiprintf_r+0x78>
 800b3b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3b4:	07dc      	lsls	r4, r3, #31
 800b3b6:	d50e      	bpl.n	800b3d6 <_vfiprintf_r+0x6a>
 800b3b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3bc:	b01d      	add	sp, #116	; 0x74
 800b3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c2:	4b7b      	ldr	r3, [pc, #492]	; (800b5b0 <_vfiprintf_r+0x244>)
 800b3c4:	429d      	cmp	r5, r3
 800b3c6:	d101      	bne.n	800b3cc <_vfiprintf_r+0x60>
 800b3c8:	68b5      	ldr	r5, [r6, #8]
 800b3ca:	e7df      	b.n	800b38c <_vfiprintf_r+0x20>
 800b3cc:	4b79      	ldr	r3, [pc, #484]	; (800b5b4 <_vfiprintf_r+0x248>)
 800b3ce:	429d      	cmp	r5, r3
 800b3d0:	bf08      	it	eq
 800b3d2:	68f5      	ldreq	r5, [r6, #12]
 800b3d4:	e7da      	b.n	800b38c <_vfiprintf_r+0x20>
 800b3d6:	89ab      	ldrh	r3, [r5, #12]
 800b3d8:	0598      	lsls	r0, r3, #22
 800b3da:	d4ed      	bmi.n	800b3b8 <_vfiprintf_r+0x4c>
 800b3dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3de:	f7fd fd7b 	bl	8008ed8 <__retarget_lock_release_recursive>
 800b3e2:	e7e9      	b.n	800b3b8 <_vfiprintf_r+0x4c>
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b3e8:	2320      	movs	r3, #32
 800b3ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3f2:	2330      	movs	r3, #48	; 0x30
 800b3f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b5b8 <_vfiprintf_r+0x24c>
 800b3f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3fc:	f04f 0901 	mov.w	r9, #1
 800b400:	4623      	mov	r3, r4
 800b402:	469a      	mov	sl, r3
 800b404:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b408:	b10a      	cbz	r2, 800b40e <_vfiprintf_r+0xa2>
 800b40a:	2a25      	cmp	r2, #37	; 0x25
 800b40c:	d1f9      	bne.n	800b402 <_vfiprintf_r+0x96>
 800b40e:	ebba 0b04 	subs.w	fp, sl, r4
 800b412:	d00b      	beq.n	800b42c <_vfiprintf_r+0xc0>
 800b414:	465b      	mov	r3, fp
 800b416:	4622      	mov	r2, r4
 800b418:	4629      	mov	r1, r5
 800b41a:	4630      	mov	r0, r6
 800b41c:	f7ff ff93 	bl	800b346 <__sfputs_r>
 800b420:	3001      	adds	r0, #1
 800b422:	f000 80aa 	beq.w	800b57a <_vfiprintf_r+0x20e>
 800b426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b428:	445a      	add	r2, fp
 800b42a:	9209      	str	r2, [sp, #36]	; 0x24
 800b42c:	f89a 3000 	ldrb.w	r3, [sl]
 800b430:	2b00      	cmp	r3, #0
 800b432:	f000 80a2 	beq.w	800b57a <_vfiprintf_r+0x20e>
 800b436:	2300      	movs	r3, #0
 800b438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b43c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b440:	f10a 0a01 	add.w	sl, sl, #1
 800b444:	9304      	str	r3, [sp, #16]
 800b446:	9307      	str	r3, [sp, #28]
 800b448:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b44c:	931a      	str	r3, [sp, #104]	; 0x68
 800b44e:	4654      	mov	r4, sl
 800b450:	2205      	movs	r2, #5
 800b452:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b456:	4858      	ldr	r0, [pc, #352]	; (800b5b8 <_vfiprintf_r+0x24c>)
 800b458:	f7f4 fec2 	bl	80001e0 <memchr>
 800b45c:	9a04      	ldr	r2, [sp, #16]
 800b45e:	b9d8      	cbnz	r0, 800b498 <_vfiprintf_r+0x12c>
 800b460:	06d1      	lsls	r1, r2, #27
 800b462:	bf44      	itt	mi
 800b464:	2320      	movmi	r3, #32
 800b466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b46a:	0713      	lsls	r3, r2, #28
 800b46c:	bf44      	itt	mi
 800b46e:	232b      	movmi	r3, #43	; 0x2b
 800b470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b474:	f89a 3000 	ldrb.w	r3, [sl]
 800b478:	2b2a      	cmp	r3, #42	; 0x2a
 800b47a:	d015      	beq.n	800b4a8 <_vfiprintf_r+0x13c>
 800b47c:	9a07      	ldr	r2, [sp, #28]
 800b47e:	4654      	mov	r4, sl
 800b480:	2000      	movs	r0, #0
 800b482:	f04f 0c0a 	mov.w	ip, #10
 800b486:	4621      	mov	r1, r4
 800b488:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b48c:	3b30      	subs	r3, #48	; 0x30
 800b48e:	2b09      	cmp	r3, #9
 800b490:	d94e      	bls.n	800b530 <_vfiprintf_r+0x1c4>
 800b492:	b1b0      	cbz	r0, 800b4c2 <_vfiprintf_r+0x156>
 800b494:	9207      	str	r2, [sp, #28]
 800b496:	e014      	b.n	800b4c2 <_vfiprintf_r+0x156>
 800b498:	eba0 0308 	sub.w	r3, r0, r8
 800b49c:	fa09 f303 	lsl.w	r3, r9, r3
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	9304      	str	r3, [sp, #16]
 800b4a4:	46a2      	mov	sl, r4
 800b4a6:	e7d2      	b.n	800b44e <_vfiprintf_r+0xe2>
 800b4a8:	9b03      	ldr	r3, [sp, #12]
 800b4aa:	1d19      	adds	r1, r3, #4
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	9103      	str	r1, [sp, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	bfbb      	ittet	lt
 800b4b4:	425b      	neglt	r3, r3
 800b4b6:	f042 0202 	orrlt.w	r2, r2, #2
 800b4ba:	9307      	strge	r3, [sp, #28]
 800b4bc:	9307      	strlt	r3, [sp, #28]
 800b4be:	bfb8      	it	lt
 800b4c0:	9204      	strlt	r2, [sp, #16]
 800b4c2:	7823      	ldrb	r3, [r4, #0]
 800b4c4:	2b2e      	cmp	r3, #46	; 0x2e
 800b4c6:	d10c      	bne.n	800b4e2 <_vfiprintf_r+0x176>
 800b4c8:	7863      	ldrb	r3, [r4, #1]
 800b4ca:	2b2a      	cmp	r3, #42	; 0x2a
 800b4cc:	d135      	bne.n	800b53a <_vfiprintf_r+0x1ce>
 800b4ce:	9b03      	ldr	r3, [sp, #12]
 800b4d0:	1d1a      	adds	r2, r3, #4
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	9203      	str	r2, [sp, #12]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	bfb8      	it	lt
 800b4da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b4de:	3402      	adds	r4, #2
 800b4e0:	9305      	str	r3, [sp, #20]
 800b4e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b5c8 <_vfiprintf_r+0x25c>
 800b4e6:	7821      	ldrb	r1, [r4, #0]
 800b4e8:	2203      	movs	r2, #3
 800b4ea:	4650      	mov	r0, sl
 800b4ec:	f7f4 fe78 	bl	80001e0 <memchr>
 800b4f0:	b140      	cbz	r0, 800b504 <_vfiprintf_r+0x198>
 800b4f2:	2340      	movs	r3, #64	; 0x40
 800b4f4:	eba0 000a 	sub.w	r0, r0, sl
 800b4f8:	fa03 f000 	lsl.w	r0, r3, r0
 800b4fc:	9b04      	ldr	r3, [sp, #16]
 800b4fe:	4303      	orrs	r3, r0
 800b500:	3401      	adds	r4, #1
 800b502:	9304      	str	r3, [sp, #16]
 800b504:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b508:	482c      	ldr	r0, [pc, #176]	; (800b5bc <_vfiprintf_r+0x250>)
 800b50a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b50e:	2206      	movs	r2, #6
 800b510:	f7f4 fe66 	bl	80001e0 <memchr>
 800b514:	2800      	cmp	r0, #0
 800b516:	d03f      	beq.n	800b598 <_vfiprintf_r+0x22c>
 800b518:	4b29      	ldr	r3, [pc, #164]	; (800b5c0 <_vfiprintf_r+0x254>)
 800b51a:	bb1b      	cbnz	r3, 800b564 <_vfiprintf_r+0x1f8>
 800b51c:	9b03      	ldr	r3, [sp, #12]
 800b51e:	3307      	adds	r3, #7
 800b520:	f023 0307 	bic.w	r3, r3, #7
 800b524:	3308      	adds	r3, #8
 800b526:	9303      	str	r3, [sp, #12]
 800b528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b52a:	443b      	add	r3, r7
 800b52c:	9309      	str	r3, [sp, #36]	; 0x24
 800b52e:	e767      	b.n	800b400 <_vfiprintf_r+0x94>
 800b530:	fb0c 3202 	mla	r2, ip, r2, r3
 800b534:	460c      	mov	r4, r1
 800b536:	2001      	movs	r0, #1
 800b538:	e7a5      	b.n	800b486 <_vfiprintf_r+0x11a>
 800b53a:	2300      	movs	r3, #0
 800b53c:	3401      	adds	r4, #1
 800b53e:	9305      	str	r3, [sp, #20]
 800b540:	4619      	mov	r1, r3
 800b542:	f04f 0c0a 	mov.w	ip, #10
 800b546:	4620      	mov	r0, r4
 800b548:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b54c:	3a30      	subs	r2, #48	; 0x30
 800b54e:	2a09      	cmp	r2, #9
 800b550:	d903      	bls.n	800b55a <_vfiprintf_r+0x1ee>
 800b552:	2b00      	cmp	r3, #0
 800b554:	d0c5      	beq.n	800b4e2 <_vfiprintf_r+0x176>
 800b556:	9105      	str	r1, [sp, #20]
 800b558:	e7c3      	b.n	800b4e2 <_vfiprintf_r+0x176>
 800b55a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b55e:	4604      	mov	r4, r0
 800b560:	2301      	movs	r3, #1
 800b562:	e7f0      	b.n	800b546 <_vfiprintf_r+0x1da>
 800b564:	ab03      	add	r3, sp, #12
 800b566:	9300      	str	r3, [sp, #0]
 800b568:	462a      	mov	r2, r5
 800b56a:	4b16      	ldr	r3, [pc, #88]	; (800b5c4 <_vfiprintf_r+0x258>)
 800b56c:	a904      	add	r1, sp, #16
 800b56e:	4630      	mov	r0, r6
 800b570:	f7fd feae 	bl	80092d0 <_printf_float>
 800b574:	4607      	mov	r7, r0
 800b576:	1c78      	adds	r0, r7, #1
 800b578:	d1d6      	bne.n	800b528 <_vfiprintf_r+0x1bc>
 800b57a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b57c:	07d9      	lsls	r1, r3, #31
 800b57e:	d405      	bmi.n	800b58c <_vfiprintf_r+0x220>
 800b580:	89ab      	ldrh	r3, [r5, #12]
 800b582:	059a      	lsls	r2, r3, #22
 800b584:	d402      	bmi.n	800b58c <_vfiprintf_r+0x220>
 800b586:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b588:	f7fd fca6 	bl	8008ed8 <__retarget_lock_release_recursive>
 800b58c:	89ab      	ldrh	r3, [r5, #12]
 800b58e:	065b      	lsls	r3, r3, #25
 800b590:	f53f af12 	bmi.w	800b3b8 <_vfiprintf_r+0x4c>
 800b594:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b596:	e711      	b.n	800b3bc <_vfiprintf_r+0x50>
 800b598:	ab03      	add	r3, sp, #12
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	462a      	mov	r2, r5
 800b59e:	4b09      	ldr	r3, [pc, #36]	; (800b5c4 <_vfiprintf_r+0x258>)
 800b5a0:	a904      	add	r1, sp, #16
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	f7fe f938 	bl	8009818 <_printf_i>
 800b5a8:	e7e4      	b.n	800b574 <_vfiprintf_r+0x208>
 800b5aa:	bf00      	nop
 800b5ac:	08039a0c 	.word	0x08039a0c
 800b5b0:	08039a2c 	.word	0x08039a2c
 800b5b4:	080399ec 	.word	0x080399ec
 800b5b8:	08039c6c 	.word	0x08039c6c
 800b5bc:	08039c76 	.word	0x08039c76
 800b5c0:	080092d1 	.word	0x080092d1
 800b5c4:	0800b347 	.word	0x0800b347
 800b5c8:	08039c72 	.word	0x08039c72

0800b5cc <_read_r>:
 800b5cc:	b538      	push	{r3, r4, r5, lr}
 800b5ce:	4d07      	ldr	r5, [pc, #28]	; (800b5ec <_read_r+0x20>)
 800b5d0:	4604      	mov	r4, r0
 800b5d2:	4608      	mov	r0, r1
 800b5d4:	4611      	mov	r1, r2
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	602a      	str	r2, [r5, #0]
 800b5da:	461a      	mov	r2, r3
 800b5dc:	f7f6 ff30 	bl	8002440 <_read>
 800b5e0:	1c43      	adds	r3, r0, #1
 800b5e2:	d102      	bne.n	800b5ea <_read_r+0x1e>
 800b5e4:	682b      	ldr	r3, [r5, #0]
 800b5e6:	b103      	cbz	r3, 800b5ea <_read_r+0x1e>
 800b5e8:	6023      	str	r3, [r4, #0]
 800b5ea:	bd38      	pop	{r3, r4, r5, pc}
 800b5ec:	2000a4b8 	.word	0x2000a4b8

0800b5f0 <wcvt>:
 800b5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f4:	b085      	sub	sp, #20
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	461d      	mov	r5, r3
 800b5fa:	4614      	mov	r4, r2
 800b5fc:	bfbc      	itt	lt
 800b5fe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b602:	4614      	movlt	r4, r2
 800b604:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b606:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b608:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800b60c:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800b610:	bfb6      	itet	lt
 800b612:	461d      	movlt	r5, r3
 800b614:	2300      	movge	r3, #0
 800b616:	232d      	movlt	r3, #45	; 0x2d
 800b618:	6013      	str	r3, [r2, #0]
 800b61a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b61c:	f023 0820 	bic.w	r8, r3, #32
 800b620:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b624:	d005      	beq.n	800b632 <wcvt+0x42>
 800b626:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b62a:	d100      	bne.n	800b62e <wcvt+0x3e>
 800b62c:	3601      	adds	r6, #1
 800b62e:	2102      	movs	r1, #2
 800b630:	e000      	b.n	800b634 <wcvt+0x44>
 800b632:	2103      	movs	r1, #3
 800b634:	ab03      	add	r3, sp, #12
 800b636:	9301      	str	r3, [sp, #4]
 800b638:	ab02      	add	r3, sp, #8
 800b63a:	9300      	str	r3, [sp, #0]
 800b63c:	ec45 4b10 	vmov	d0, r4, r5
 800b640:	4653      	mov	r3, sl
 800b642:	4632      	mov	r2, r6
 800b644:	f7fe fc94 	bl	8009f70 <_dtoa_r>
 800b648:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b64c:	4607      	mov	r7, r0
 800b64e:	d112      	bne.n	800b676 <wcvt+0x86>
 800b650:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b652:	07db      	lsls	r3, r3, #31
 800b654:	d40f      	bmi.n	800b676 <wcvt+0x86>
 800b656:	9b03      	ldr	r3, [sp, #12]
 800b658:	1bdb      	subs	r3, r3, r7
 800b65a:	f8cb 3000 	str.w	r3, [fp]
 800b65e:	2300      	movs	r3, #0
 800b660:	f8db 2000 	ldr.w	r2, [fp]
 800b664:	429a      	cmp	r2, r3
 800b666:	dd02      	ble.n	800b66e <wcvt+0x7e>
 800b668:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b66a:	4293      	cmp	r3, r2
 800b66c:	db2a      	blt.n	800b6c4 <wcvt+0xd4>
 800b66e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b670:	b005      	add	sp, #20
 800b672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b676:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b67a:	eb07 0906 	add.w	r9, r7, r6
 800b67e:	d110      	bne.n	800b6a2 <wcvt+0xb2>
 800b680:	783b      	ldrb	r3, [r7, #0]
 800b682:	2b30      	cmp	r3, #48	; 0x30
 800b684:	d10a      	bne.n	800b69c <wcvt+0xac>
 800b686:	2200      	movs	r2, #0
 800b688:	2300      	movs	r3, #0
 800b68a:	4620      	mov	r0, r4
 800b68c:	4629      	mov	r1, r5
 800b68e:	f7f5 fa1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b692:	b918      	cbnz	r0, 800b69c <wcvt+0xac>
 800b694:	f1c6 0601 	rsb	r6, r6, #1
 800b698:	f8ca 6000 	str.w	r6, [sl]
 800b69c:	f8da 3000 	ldr.w	r3, [sl]
 800b6a0:	4499      	add	r9, r3
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	4629      	mov	r1, r5
 800b6aa:	f7f5 fa0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6ae:	b108      	cbz	r0, 800b6b4 <wcvt+0xc4>
 800b6b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b6b4:	2230      	movs	r2, #48	; 0x30
 800b6b6:	9b03      	ldr	r3, [sp, #12]
 800b6b8:	454b      	cmp	r3, r9
 800b6ba:	d2cc      	bcs.n	800b656 <wcvt+0x66>
 800b6bc:	1c59      	adds	r1, r3, #1
 800b6be:	9103      	str	r1, [sp, #12]
 800b6c0:	701a      	strb	r2, [r3, #0]
 800b6c2:	e7f8      	b.n	800b6b6 <wcvt+0xc6>
 800b6c4:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b6c6:	5cfa      	ldrb	r2, [r7, r3]
 800b6c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	e7c7      	b.n	800b660 <wcvt+0x70>

0800b6d0 <_svfwprintf_r>:
 800b6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d4:	ed2d 8b04 	vpush	{d8-d9}
 800b6d8:	b0d3      	sub	sp, #332	; 0x14c
 800b6da:	461d      	mov	r5, r3
 800b6dc:	2300      	movs	r3, #0
 800b6de:	4689      	mov	r9, r1
 800b6e0:	9319      	str	r3, [sp, #100]	; 0x64
 800b6e2:	4683      	mov	fp, r0
 800b6e4:	920b      	str	r2, [sp, #44]	; 0x2c
 800b6e6:	f7ff fa53 	bl	800ab90 <_localeconv_r>
 800b6ea:	6803      	ldr	r3, [r0, #0]
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	9316      	str	r3, [sp, #88]	; 0x58
 800b6f0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800b6f4:	061e      	lsls	r6, r3, #24
 800b6f6:	d51a      	bpl.n	800b72e <_svfwprintf_r+0x5e>
 800b6f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b6fc:	b9bb      	cbnz	r3, 800b72e <_svfwprintf_r+0x5e>
 800b6fe:	2140      	movs	r1, #64	; 0x40
 800b700:	4658      	mov	r0, fp
 800b702:	f7fd fcd1 	bl	80090a8 <_malloc_r>
 800b706:	f8c9 0000 	str.w	r0, [r9]
 800b70a:	f8c9 0010 	str.w	r0, [r9, #16]
 800b70e:	b958      	cbnz	r0, 800b728 <_svfwprintf_r+0x58>
 800b710:	230c      	movs	r3, #12
 800b712:	f8cb 3000 	str.w	r3, [fp]
 800b716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b71a:	930d      	str	r3, [sp, #52]	; 0x34
 800b71c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b71e:	b053      	add	sp, #332	; 0x14c
 800b720:	ecbd 8b04 	vpop	{d8-d9}
 800b724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b728:	2340      	movs	r3, #64	; 0x40
 800b72a:	f8c9 3014 	str.w	r3, [r9, #20]
 800b72e:	ed9f 7b8e 	vldr	d7, [pc, #568]	; 800b968 <_svfwprintf_r+0x298>
 800b732:	2300      	movs	r3, #0
 800b734:	930f      	str	r3, [sp, #60]	; 0x3c
 800b736:	9311      	str	r3, [sp, #68]	; 0x44
 800b738:	930d      	str	r3, [sp, #52]	; 0x34
 800b73a:	eeb0 8a47 	vmov.f32	s16, s14
 800b73e:	eef0 8a67 	vmov.f32	s17, s15
 800b742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b744:	461c      	mov	r4, r3
 800b746:	f853 2b04 	ldr.w	r2, [r3], #4
 800b74a:	b10a      	cbz	r2, 800b750 <_svfwprintf_r+0x80>
 800b74c:	2a25      	cmp	r2, #37	; 0x25
 800b74e:	d1f9      	bne.n	800b744 <_svfwprintf_r+0x74>
 800b750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b752:	42a3      	cmp	r3, r4
 800b754:	d00d      	beq.n	800b772 <_svfwprintf_r+0xa2>
 800b756:	1ae6      	subs	r6, r4, r3
 800b758:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b75a:	4633      	mov	r3, r6
 800b75c:	4649      	mov	r1, r9
 800b75e:	4658      	mov	r0, fp
 800b760:	f000 fe1d 	bl	800c39e <__ssputs_r>
 800b764:	3001      	adds	r0, #1
 800b766:	f000 80e9 	beq.w	800b93c <_svfwprintf_r+0x26c>
 800b76a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b76c:	eb03 03a6 	add.w	r3, r3, r6, asr #2
 800b770:	930d      	str	r3, [sp, #52]	; 0x34
 800b772:	6823      	ldr	r3, [r4, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	f000 80e1 	beq.w	800b93c <_svfwprintf_r+0x26c>
 800b77a:	2100      	movs	r1, #0
 800b77c:	1d22      	adds	r2, r4, #4
 800b77e:	9115      	str	r1, [sp, #84]	; 0x54
 800b780:	460e      	mov	r6, r1
 800b782:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b786:	910c      	str	r1, [sp, #48]	; 0x30
 800b788:	460f      	mov	r7, r1
 800b78a:	200a      	movs	r0, #10
 800b78c:	4613      	mov	r3, r2
 800b78e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b792:	9209      	str	r2, [sp, #36]	; 0x24
 800b794:	930b      	str	r3, [sp, #44]	; 0x2c
 800b796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b798:	2b39      	cmp	r3, #57	; 0x39
 800b79a:	d84c      	bhi.n	800b836 <_svfwprintf_r+0x166>
 800b79c:	2b1f      	cmp	r3, #31
 800b79e:	d94f      	bls.n	800b840 <_svfwprintf_r+0x170>
 800b7a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7a2:	3b20      	subs	r3, #32
 800b7a4:	2b19      	cmp	r3, #25
 800b7a6:	d84a      	bhi.n	800b83e <_svfwprintf_r+0x16e>
 800b7a8:	e8df f003 	tbb	[pc, r3]
 800b7ac:	7049496b 	.word	0x7049496b
 800b7b0:	49494949 	.word	0x49494949
 800b7b4:	6c734949 	.word	0x6c734949
 800b7b8:	497d7a49 	.word	0x497d7a49
 800b7bc:	9b9b9b98 	.word	0x9b9b9b98
 800b7c0:	9b9b9b9b 	.word	0x9b9b9b9b
 800b7c4:	9b9b      	.short	0x9b9b
 800b7c6:	2b33      	cmp	r3, #51	; 0x33
 800b7c8:	d839      	bhi.n	800b83e <_svfwprintf_r+0x16e>
 800b7ca:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b7ce:	00e5      	.short	0x00e5
 800b7d0:	00e50038 	.word	0x00e50038
 800b7d4:	00380038 	.word	0x00380038
 800b7d8:	00380038 	.word	0x00380038
 800b7dc:	0038009c 	.word	0x0038009c
 800b7e0:	00380038 	.word	0x00380038
 800b7e4:	00380038 	.word	0x00380038
 800b7e8:	00380038 	.word	0x00380038
 800b7ec:	00380038 	.word	0x00380038
 800b7f0:	00380038 	.word	0x00380038
 800b7f4:	0038031e 	.word	0x0038031e
 800b7f8:	00380038 	.word	0x00380038
 800b7fc:	00380038 	.word	0x00380038
 800b800:	00380038 	.word	0x00380038
 800b804:	00380038 	.word	0x00380038
 800b808:	00a50038 	.word	0x00a50038
 800b80c:	00e500d3 	.word	0x00e500d3
 800b810:	00e500e5 	.word	0x00e500e5
 800b814:	00d3009f 	.word	0x00d3009f
 800b818:	00380038 	.word	0x00380038
 800b81c:	003800a2 	.word	0x003800a2
 800b820:	02950284 	.word	0x02950284
 800b824:	00a202b3 	.word	0x00a202b3
 800b828:	02c20038 	.word	0x02c20038
 800b82c:	03120038 	.word	0x03120038
 800b830:	00380038 	.word	0x00380038
 800b834:	0042      	.short	0x0042
 800b836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b838:	3b45      	subs	r3, #69	; 0x45
 800b83a:	2b33      	cmp	r3, #51	; 0x33
 800b83c:	d9c3      	bls.n	800b7c6 <_svfwprintf_r+0xf6>
 800b83e:	b111      	cbz	r1, 800b846 <_svfwprintf_r+0x176>
 800b840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b842:	2b00      	cmp	r3, #0
 800b844:	d07a      	beq.n	800b93c <_svfwprintf_r+0x26c>
 800b846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b848:	932a      	str	r3, [sp, #168]	; 0xa8
 800b84a:	2000      	movs	r0, #0
 800b84c:	9015      	str	r0, [sp, #84]	; 0x54
 800b84e:	950a      	str	r5, [sp, #40]	; 0x28
 800b850:	e081      	b.n	800b956 <_svfwprintf_r+0x286>
 800b852:	b101      	cbz	r1, 800b856 <_svfwprintf_r+0x186>
 800b854:	9615      	str	r6, [sp, #84]	; 0x54
 800b856:	4b46      	ldr	r3, [pc, #280]	; (800b970 <_svfwprintf_r+0x2a0>)
 800b858:	930f      	str	r3, [sp, #60]	; 0x3c
 800b85a:	462a      	mov	r2, r5
 800b85c:	06f8      	lsls	r0, r7, #27
 800b85e:	f852 3b04 	ldr.w	r3, [r2], #4
 800b862:	920a      	str	r2, [sp, #40]	; 0x28
 800b864:	d402      	bmi.n	800b86c <_svfwprintf_r+0x19c>
 800b866:	0679      	lsls	r1, r7, #25
 800b868:	bf48      	it	mi
 800b86a:	b29b      	uxthmi	r3, r3
 800b86c:	07fa      	lsls	r2, r7, #31
 800b86e:	d506      	bpl.n	800b87e <_svfwprintf_r+0x1ae>
 800b870:	b12b      	cbz	r3, 800b87e <_svfwprintf_r+0x1ae>
 800b872:	2230      	movs	r2, #48	; 0x30
 800b874:	921a      	str	r2, [sp, #104]	; 0x68
 800b876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b878:	921b      	str	r2, [sp, #108]	; 0x6c
 800b87a:	f047 0702 	orr.w	r7, r7, #2
 800b87e:	2202      	movs	r2, #2
 800b880:	e242      	b.n	800bd08 <_svfwprintf_r+0x638>
 800b882:	b90e      	cbnz	r6, 800b888 <_svfwprintf_r+0x1b8>
 800b884:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b886:	2101      	movs	r1, #1
 800b888:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b88a:	e77f      	b.n	800b78c <_svfwprintf_r+0xbc>
 800b88c:	f047 0701 	orr.w	r7, r7, #1
 800b890:	e7fa      	b.n	800b888 <_svfwprintf_r+0x1b8>
 800b892:	f855 3b04 	ldr.w	r3, [r5], #4
 800b896:	930c      	str	r3, [sp, #48]	; 0x30
 800b898:	2b00      	cmp	r3, #0
 800b89a:	daf5      	bge.n	800b888 <_svfwprintf_r+0x1b8>
 800b89c:	425b      	negs	r3, r3
 800b89e:	930c      	str	r3, [sp, #48]	; 0x30
 800b8a0:	f047 0704 	orr.w	r7, r7, #4
 800b8a4:	e7f0      	b.n	800b888 <_svfwprintf_r+0x1b8>
 800b8a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b8a8:	f852 3b04 	ldr.w	r3, [r2], #4
 800b8ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b8ae:	2b2a      	cmp	r3, #42	; 0x2a
 800b8b0:	d112      	bne.n	800b8d8 <_svfwprintf_r+0x208>
 800b8b2:	f855 4b04 	ldr.w	r4, [r5], #4
 800b8b6:	920b      	str	r2, [sp, #44]	; 0x2c
 800b8b8:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800b8bc:	e7e4      	b.n	800b888 <_svfwprintf_r+0x1b8>
 800b8be:	fb00 3404 	mla	r4, r0, r4, r3
 800b8c2:	f852 3b04 	ldr.w	r3, [r2], #4
 800b8c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b8c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ca:	3b30      	subs	r3, #48	; 0x30
 800b8cc:	2b09      	cmp	r3, #9
 800b8ce:	d9f6      	bls.n	800b8be <_svfwprintf_r+0x1ee>
 800b8d0:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800b8d4:	920b      	str	r2, [sp, #44]	; 0x2c
 800b8d6:	e75e      	b.n	800b796 <_svfwprintf_r+0xc6>
 800b8d8:	2400      	movs	r4, #0
 800b8da:	e7f5      	b.n	800b8c8 <_svfwprintf_r+0x1f8>
 800b8dc:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 800b8e0:	e7d2      	b.n	800b888 <_svfwprintf_r+0x1b8>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	930c      	str	r3, [sp, #48]	; 0x30
 800b8e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ea:	fb00 3302 	mla	r3, r0, r2, r3
 800b8ee:	3b30      	subs	r3, #48	; 0x30
 800b8f0:	930c      	str	r3, [sp, #48]	; 0x30
 800b8f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8fa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b8fe:	2b09      	cmp	r3, #9
 800b900:	9209      	str	r2, [sp, #36]	; 0x24
 800b902:	d9f0      	bls.n	800b8e6 <_svfwprintf_r+0x216>
 800b904:	e747      	b.n	800b796 <_svfwprintf_r+0xc6>
 800b906:	f047 0708 	orr.w	r7, r7, #8
 800b90a:	e7bd      	b.n	800b888 <_svfwprintf_r+0x1b8>
 800b90c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 800b910:	e7ba      	b.n	800b888 <_svfwprintf_r+0x1b8>
 800b912:	f047 0710 	orr.w	r7, r7, #16
 800b916:	e7b7      	b.n	800b888 <_svfwprintf_r+0x1b8>
 800b918:	b101      	cbz	r1, 800b91c <_svfwprintf_r+0x24c>
 800b91a:	9615      	str	r6, [sp, #84]	; 0x54
 800b91c:	462b      	mov	r3, r5
 800b91e:	06fd      	lsls	r5, r7, #27
 800b920:	f853 0b04 	ldr.w	r0, [r3], #4
 800b924:	930a      	str	r3, [sp, #40]	; 0x28
 800b926:	d412      	bmi.n	800b94e <_svfwprintf_r+0x27e>
 800b928:	f000 fc82 	bl	800c230 <btowc>
 800b92c:	1c44      	adds	r4, r0, #1
 800b92e:	d10e      	bne.n	800b94e <_svfwprintf_r+0x27e>
 800b930:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800b934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b938:	f8a9 300c 	strh.w	r3, [r9, #12]
 800b93c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800b940:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b946:	bf18      	it	ne
 800b948:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800b94c:	e6e5      	b.n	800b71a <_svfwprintf_r+0x4a>
 800b94e:	902a      	str	r0, [sp, #168]	; 0xa8
 800b950:	2000      	movs	r0, #0
 800b952:	902b      	str	r0, [sp, #172]	; 0xac
 800b954:	9015      	str	r0, [sp, #84]	; 0x54
 800b956:	4680      	mov	r8, r0
 800b958:	2401      	movs	r4, #1
 800b95a:	4606      	mov	r6, r0
 800b95c:	4605      	mov	r5, r0
 800b95e:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800b962:	e104      	b.n	800bb6e <_svfwprintf_r+0x49e>
 800b964:	f3af 8000 	nop.w
	...
 800b970:	08039d04 	.word	0x08039d04
 800b974:	b101      	cbz	r1, 800b978 <_svfwprintf_r+0x2a8>
 800b976:	9615      	str	r6, [sp, #84]	; 0x54
 800b978:	462a      	mov	r2, r5
 800b97a:	06f9      	lsls	r1, r7, #27
 800b97c:	f852 3b04 	ldr.w	r3, [r2], #4
 800b980:	920a      	str	r2, [sp, #40]	; 0x28
 800b982:	d402      	bmi.n	800b98a <_svfwprintf_r+0x2ba>
 800b984:	067a      	lsls	r2, r7, #25
 800b986:	bf48      	it	mi
 800b988:	b21b      	sxthmi	r3, r3
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	da02      	bge.n	800b994 <_svfwprintf_r+0x2c4>
 800b98e:	222d      	movs	r2, #45	; 0x2d
 800b990:	425b      	negs	r3, r3
 800b992:	9215      	str	r2, [sp, #84]	; 0x54
 800b994:	2201      	movs	r2, #1
 800b996:	e1b9      	b.n	800bd0c <_svfwprintf_r+0x63c>
 800b998:	b101      	cbz	r1, 800b99c <_svfwprintf_r+0x2cc>
 800b99a:	9615      	str	r6, [sp, #84]	; 0x54
 800b99c:	3507      	adds	r5, #7
 800b99e:	f025 0307 	bic.w	r3, r5, #7
 800b9a2:	ecb3 7b02 	vldmia	r3!, {d7}
 800b9a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b9a8:	eeb0 8a47 	vmov.f32	s16, s14
 800b9ac:	eef0 8a67 	vmov.f32	s17, s15
 800b9b0:	ee18 3a90 	vmov	r3, s17
 800b9b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b9b8:	ee09 3a90 	vmov	s19, r3
 800b9bc:	eeb0 9a47 	vmov.f32	s18, s14
 800b9c0:	4ba6      	ldr	r3, [pc, #664]	; (800bc5c <_svfwprintf_r+0x58c>)
 800b9c2:	ec51 0b19 	vmov	r0, r1, d9
 800b9c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b9ca:	f7f5 f8af 	bl	8000b2c <__aeabi_dcmpun>
 800b9ce:	b9f0      	cbnz	r0, 800ba0e <_svfwprintf_r+0x33e>
 800b9d0:	4ba2      	ldr	r3, [pc, #648]	; (800bc5c <_svfwprintf_r+0x58c>)
 800b9d2:	ec51 0b19 	vmov	r0, r1, d9
 800b9d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b9da:	f7f5 f889 	bl	8000af0 <__aeabi_dcmple>
 800b9de:	b9b0      	cbnz	r0, 800ba0e <_svfwprintf_r+0x33e>
 800b9e0:	ec51 0b18 	vmov	r0, r1, d8
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	f7f5 f878 	bl	8000adc <__aeabi_dcmplt>
 800b9ec:	b108      	cbz	r0, 800b9f2 <_svfwprintf_r+0x322>
 800b9ee:	232d      	movs	r3, #45	; 0x2d
 800b9f0:	9315      	str	r3, [sp, #84]	; 0x54
 800b9f2:	4b9b      	ldr	r3, [pc, #620]	; (800bc60 <_svfwprintf_r+0x590>)
 800b9f4:	489b      	ldr	r0, [pc, #620]	; (800bc64 <_svfwprintf_r+0x594>)
 800b9f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9f8:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 800b9fc:	2a47      	cmp	r2, #71	; 0x47
 800b9fe:	bf94      	ite	ls
 800ba00:	469a      	movls	sl, r3
 800ba02:	4682      	movhi	sl, r0
 800ba04:	f04f 0800 	mov.w	r8, #0
 800ba08:	2403      	movs	r4, #3
 800ba0a:	4646      	mov	r6, r8
 800ba0c:	e3d4      	b.n	800c1b8 <_svfwprintf_r+0xae8>
 800ba0e:	ec53 2b18 	vmov	r2, r3, d8
 800ba12:	ec51 0b18 	vmov	r0, r1, d8
 800ba16:	f7f5 f889 	bl	8000b2c <__aeabi_dcmpun>
 800ba1a:	b140      	cbz	r0, 800ba2e <_svfwprintf_r+0x35e>
 800ba1c:	ee18 3a90 	vmov	r3, s17
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	bfbc      	itt	lt
 800ba24:	232d      	movlt	r3, #45	; 0x2d
 800ba26:	9315      	strlt	r3, [sp, #84]	; 0x54
 800ba28:	488f      	ldr	r0, [pc, #572]	; (800bc68 <_svfwprintf_r+0x598>)
 800ba2a:	4b90      	ldr	r3, [pc, #576]	; (800bc6c <_svfwprintf_r+0x59c>)
 800ba2c:	e7e3      	b.n	800b9f6 <_svfwprintf_r+0x326>
 800ba2e:	1c63      	adds	r3, r4, #1
 800ba30:	f000 810f 	beq.w	800bc52 <_svfwprintf_r+0x582>
 800ba34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba36:	f023 0320 	bic.w	r3, r3, #32
 800ba3a:	2b47      	cmp	r3, #71	; 0x47
 800ba3c:	d102      	bne.n	800ba44 <_svfwprintf_r+0x374>
 800ba3e:	2c00      	cmp	r4, #0
 800ba40:	bf08      	it	eq
 800ba42:	2401      	moveq	r4, #1
 800ba44:	f447 7380 	orr.w	r3, r7, #256	; 0x100
 800ba48:	930e      	str	r3, [sp, #56]	; 0x38
 800ba4a:	2328      	movs	r3, #40	; 0x28
 800ba4c:	9307      	str	r3, [sp, #28]
 800ba4e:	ab19      	add	r3, sp, #100	; 0x64
 800ba50:	9305      	str	r3, [sp, #20]
 800ba52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba54:	9304      	str	r3, [sp, #16]
 800ba56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba58:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800ba5c:	ae18      	add	r6, sp, #96	; 0x60
 800ba5e:	ad17      	add	r5, sp, #92	; 0x5c
 800ba60:	e9cd 4300 	strd	r4, r3, [sp]
 800ba64:	f8cd 8018 	str.w	r8, [sp, #24]
 800ba68:	ec53 2b18 	vmov	r2, r3, d8
 800ba6c:	9603      	str	r6, [sp, #12]
 800ba6e:	9502      	str	r5, [sp, #8]
 800ba70:	4658      	mov	r0, fp
 800ba72:	f7ff fdbd 	bl	800b5f0 <wcvt>
 800ba76:	4540      	cmp	r0, r8
 800ba78:	4682      	mov	sl, r0
 800ba7a:	f040 80ec 	bne.w	800bc56 <_svfwprintf_r+0x586>
 800ba7e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800ba80:	2928      	cmp	r1, #40	; 0x28
 800ba82:	f340 80e8 	ble.w	800bc56 <_svfwprintf_r+0x586>
 800ba86:	0089      	lsls	r1, r1, #2
 800ba88:	4658      	mov	r0, fp
 800ba8a:	f7fd fb0d 	bl	80090a8 <_malloc_r>
 800ba8e:	4680      	mov	r8, r0
 800ba90:	2800      	cmp	r0, #0
 800ba92:	f43f af4d 	beq.w	800b930 <_svfwprintf_r+0x260>
 800ba96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba98:	9502      	str	r5, [sp, #8]
 800ba9a:	e9cd 0306 	strd	r0, r3, [sp, #24]
 800ba9e:	ab19      	add	r3, sp, #100	; 0x64
 800baa0:	9305      	str	r3, [sp, #20]
 800baa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baa4:	e9cd 6303 	strd	r6, r3, [sp, #12]
 800baa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800baaa:	4658      	mov	r0, fp
 800baac:	e9cd 4300 	strd	r4, r3, [sp]
 800bab0:	ec53 2b18 	vmov	r2, r3, d8
 800bab4:	f7ff fd9c 	bl	800b5f0 <wcvt>
 800bab8:	4682      	mov	sl, r0
 800baba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800babc:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800babe:	f023 0320 	bic.w	r3, r3, #32
 800bac2:	2b47      	cmp	r3, #71	; 0x47
 800bac4:	f040 80d6 	bne.w	800bc74 <_svfwprintf_r+0x5a4>
 800bac8:	1cee      	adds	r6, r5, #3
 800baca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bacc:	db02      	blt.n	800bad4 <_svfwprintf_r+0x404>
 800bace:	42ac      	cmp	r4, r5
 800bad0:	f280 80ec 	bge.w	800bcac <_svfwprintf_r+0x5dc>
 800bad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bad6:	3b02      	subs	r3, #2
 800bad8:	9309      	str	r3, [sp, #36]	; 0x24
 800bada:	1e6b      	subs	r3, r5, #1
 800badc:	2b00      	cmp	r3, #0
 800bade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bae0:	9318      	str	r3, [sp, #96]	; 0x60
 800bae2:	bfb8      	it	lt
 800bae4:	f1c5 0301 	rsblt	r3, r5, #1
 800bae8:	921c      	str	r2, [sp, #112]	; 0x70
 800baea:	bfb4      	ite	lt
 800baec:	222d      	movlt	r2, #45	; 0x2d
 800baee:	222b      	movge	r2, #43	; 0x2b
 800baf0:	2b09      	cmp	r3, #9
 800baf2:	921d      	str	r2, [sp, #116]	; 0x74
 800baf4:	f340 80d1 	ble.w	800bc9a <_svfwprintf_r+0x5ca>
 800baf8:	a82a      	add	r0, sp, #168	; 0xa8
 800bafa:	250a      	movs	r5, #10
 800bafc:	4602      	mov	r2, r0
 800bafe:	fb93 f4f5 	sdiv	r4, r3, r5
 800bb02:	fb05 3114 	mls	r1, r5, r4, r3
 800bb06:	3130      	adds	r1, #48	; 0x30
 800bb08:	f842 1c04 	str.w	r1, [r2, #-4]
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	2963      	cmp	r1, #99	; 0x63
 800bb10:	f1a0 0004 	sub.w	r0, r0, #4
 800bb14:	4623      	mov	r3, r4
 800bb16:	dcf1      	bgt.n	800bafc <_svfwprintf_r+0x42c>
 800bb18:	3330      	adds	r3, #48	; 0x30
 800bb1a:	f840 3c04 	str.w	r3, [r0, #-4]
 800bb1e:	f1a2 0108 	sub.w	r1, r2, #8
 800bb22:	a81e      	add	r0, sp, #120	; 0x78
 800bb24:	ab2a      	add	r3, sp, #168	; 0xa8
 800bb26:	4299      	cmp	r1, r3
 800bb28:	f0c0 80b2 	bcc.w	800bc90 <_svfwprintf_r+0x5c0>
 800bb2c:	f10d 04b3 	add.w	r4, sp, #179	; 0xb3
 800bb30:	1aa4      	subs	r4, r4, r2
 800bb32:	f024 0403 	bic.w	r4, r4, #3
 800bb36:	3a0b      	subs	r2, #11
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	bf38      	it	cc
 800bb3c:	2400      	movcc	r4, #0
 800bb3e:	ab1e      	add	r3, sp, #120	; 0x78
 800bb40:	441c      	add	r4, r3
 800bb42:	a81c      	add	r0, sp, #112	; 0x70
 800bb44:	1a24      	subs	r4, r4, r0
 800bb46:	10a3      	asrs	r3, r4, #2
 800bb48:	9311      	str	r3, [sp, #68]	; 0x44
 800bb4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	eb03 04a4 	add.w	r4, r3, r4, asr #2
 800bb52:	dc02      	bgt.n	800bb5a <_svfwprintf_r+0x48a>
 800bb54:	f017 0501 	ands.w	r5, r7, #1
 800bb58:	d001      	beq.n	800bb5e <_svfwprintf_r+0x48e>
 800bb5a:	3401      	adds	r4, #1
 800bb5c:	2500      	movs	r5, #0
 800bb5e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bb60:	2e00      	cmp	r6, #0
 800bb62:	f000 817e 	beq.w	800be62 <_svfwprintf_r+0x792>
 800bb66:	232d      	movs	r3, #45	; 0x2d
 800bb68:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800bb6a:	9315      	str	r3, [sp, #84]	; 0x54
 800bb6c:	2600      	movs	r6, #0
 800bb6e:	42a6      	cmp	r6, r4
 800bb70:	4633      	mov	r3, r6
 800bb72:	bfb8      	it	lt
 800bb74:	4623      	movlt	r3, r4
 800bb76:	930e      	str	r3, [sp, #56]	; 0x38
 800bb78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb7a:	b113      	cbz	r3, 800bb82 <_svfwprintf_r+0x4b2>
 800bb7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb7e:	3301      	adds	r3, #1
 800bb80:	930e      	str	r3, [sp, #56]	; 0x38
 800bb82:	f017 0302 	ands.w	r3, r7, #2
 800bb86:	9312      	str	r3, [sp, #72]	; 0x48
 800bb88:	bf1e      	ittt	ne
 800bb8a:	9b0e      	ldrne	r3, [sp, #56]	; 0x38
 800bb8c:	3302      	addne	r3, #2
 800bb8e:	930e      	strne	r3, [sp, #56]	; 0x38
 800bb90:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 800bb94:	9313      	str	r3, [sp, #76]	; 0x4c
 800bb96:	f000 8166 	beq.w	800be66 <_svfwprintf_r+0x796>
 800bb9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb9c:	b143      	cbz	r3, 800bbb0 <_svfwprintf_r+0x4e0>
 800bb9e:	2304      	movs	r3, #4
 800bba0:	aa15      	add	r2, sp, #84	; 0x54
 800bba2:	4649      	mov	r1, r9
 800bba4:	4658      	mov	r0, fp
 800bba6:	f000 fbfa 	bl	800c39e <__ssputs_r>
 800bbaa:	3001      	adds	r0, #1
 800bbac:	f000 816e 	beq.w	800be8c <_svfwprintf_r+0x7bc>
 800bbb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bbb2:	b143      	cbz	r3, 800bbc6 <_svfwprintf_r+0x4f6>
 800bbb4:	2308      	movs	r3, #8
 800bbb6:	aa1a      	add	r2, sp, #104	; 0x68
 800bbb8:	4649      	mov	r1, r9
 800bbba:	4658      	mov	r0, fp
 800bbbc:	f000 fbef 	bl	800c39e <__ssputs_r>
 800bbc0:	3001      	adds	r0, #1
 800bbc2:	f000 8163 	beq.w	800be8c <_svfwprintf_r+0x7bc>
 800bbc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bbc8:	2b80      	cmp	r3, #128	; 0x80
 800bbca:	d113      	bne.n	800bbf4 <_svfwprintf_r+0x524>
 800bbcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbd0:	1a9b      	subs	r3, r3, r2
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	9310      	str	r3, [sp, #64]	; 0x40
 800bbd6:	dd0d      	ble.n	800bbf4 <_svfwprintf_r+0x524>
 800bbd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bbda:	4a25      	ldr	r2, [pc, #148]	; (800bc70 <_svfwprintf_r+0x5a0>)
 800bbdc:	2b10      	cmp	r3, #16
 800bbde:	f300 816a 	bgt.w	800beb6 <_svfwprintf_r+0x7e6>
 800bbe2:	4a23      	ldr	r2, [pc, #140]	; (800bc70 <_svfwprintf_r+0x5a0>)
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	4649      	mov	r1, r9
 800bbe8:	4658      	mov	r0, fp
 800bbea:	f000 fbd8 	bl	800c39e <__ssputs_r>
 800bbee:	3001      	adds	r0, #1
 800bbf0:	f000 814c 	beq.w	800be8c <_svfwprintf_r+0x7bc>
 800bbf4:	1b36      	subs	r6, r6, r4
 800bbf6:	2e00      	cmp	r6, #0
 800bbf8:	dd0c      	ble.n	800bc14 <_svfwprintf_r+0x544>
 800bbfa:	2e10      	cmp	r6, #16
 800bbfc:	4a1c      	ldr	r2, [pc, #112]	; (800bc70 <_svfwprintf_r+0x5a0>)
 800bbfe:	f300 8165 	bgt.w	800becc <_svfwprintf_r+0x7fc>
 800bc02:	4a1b      	ldr	r2, [pc, #108]	; (800bc70 <_svfwprintf_r+0x5a0>)
 800bc04:	00b3      	lsls	r3, r6, #2
 800bc06:	4649      	mov	r1, r9
 800bc08:	4658      	mov	r0, fp
 800bc0a:	f000 fbc8 	bl	800c39e <__ssputs_r>
 800bc0e:	3001      	adds	r0, #1
 800bc10:	f000 813c 	beq.w	800be8c <_svfwprintf_r+0x7bc>
 800bc14:	05f9      	lsls	r1, r7, #23
 800bc16:	f100 8162 	bmi.w	800bede <_svfwprintf_r+0x80e>
 800bc1a:	00a3      	lsls	r3, r4, #2
 800bc1c:	4652      	mov	r2, sl
 800bc1e:	4649      	mov	r1, r9
 800bc20:	4658      	mov	r0, fp
 800bc22:	f000 fbbc 	bl	800c39e <__ssputs_r>
 800bc26:	3001      	adds	r0, #1
 800bc28:	f000 8130 	beq.w	800be8c <_svfwprintf_r+0x7bc>
 800bc2c:	077a      	lsls	r2, r7, #29
 800bc2e:	f100 8281 	bmi.w	800c134 <_svfwprintf_r+0xa64>
 800bc32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bc36:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bc38:	428a      	cmp	r2, r1
 800bc3a:	bfac      	ite	ge
 800bc3c:	189b      	addge	r3, r3, r2
 800bc3e:	185b      	addlt	r3, r3, r1
 800bc40:	930d      	str	r3, [sp, #52]	; 0x34
 800bc42:	f1b8 0f00 	cmp.w	r8, #0
 800bc46:	d055      	beq.n	800bcf4 <_svfwprintf_r+0x624>
 800bc48:	4641      	mov	r1, r8
 800bc4a:	4658      	mov	r0, fp
 800bc4c:	f7fd f9c0 	bl	8008fd0 <_free_r>
 800bc50:	e050      	b.n	800bcf4 <_svfwprintf_r+0x624>
 800bc52:	2406      	movs	r4, #6
 800bc54:	e6f6      	b.n	800ba44 <_svfwprintf_r+0x374>
 800bc56:	f04f 0800 	mov.w	r8, #0
 800bc5a:	e72e      	b.n	800baba <_svfwprintf_r+0x3ea>
 800bc5c:	7fefffff 	.word	0x7fefffff
 800bc60:	08039c80 	.word	0x08039c80
 800bc64:	08039c90 	.word	0x08039c90
 800bc68:	08039cb0 	.word	0x08039cb0
 800bc6c:	08039ca0 	.word	0x08039ca0
 800bc70:	08039d90 	.word	0x08039d90
 800bc74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc76:	2b66      	cmp	r3, #102	; 0x66
 800bc78:	f47f af2f 	bne.w	800bada <_svfwprintf_r+0x40a>
 800bc7c:	f007 0301 	and.w	r3, r7, #1
 800bc80:	2d00      	cmp	r5, #0
 800bc82:	ea43 0304 	orr.w	r3, r3, r4
 800bc86:	dd0e      	ble.n	800bca6 <_svfwprintf_r+0x5d6>
 800bc88:	b1fb      	cbz	r3, 800bcca <_svfwprintf_r+0x5fa>
 800bc8a:	3401      	adds	r4, #1
 800bc8c:	442c      	add	r4, r5
 800bc8e:	e766      	b.n	800bb5e <_svfwprintf_r+0x48e>
 800bc90:	f851 4b04 	ldr.w	r4, [r1], #4
 800bc94:	f840 4b04 	str.w	r4, [r0], #4
 800bc98:	e745      	b.n	800bb26 <_svfwprintf_r+0x456>
 800bc9a:	2230      	movs	r2, #48	; 0x30
 800bc9c:	4413      	add	r3, r2
 800bc9e:	921e      	str	r2, [sp, #120]	; 0x78
 800bca0:	931f      	str	r3, [sp, #124]	; 0x7c
 800bca2:	ac20      	add	r4, sp, #128	; 0x80
 800bca4:	e74d      	b.n	800bb42 <_svfwprintf_r+0x472>
 800bca6:	b193      	cbz	r3, 800bcce <_svfwprintf_r+0x5fe>
 800bca8:	3402      	adds	r4, #2
 800bcaa:	e758      	b.n	800bb5e <_svfwprintf_r+0x48e>
 800bcac:	42ab      	cmp	r3, r5
 800bcae:	dc05      	bgt.n	800bcbc <_svfwprintf_r+0x5ec>
 800bcb0:	07fc      	lsls	r4, r7, #31
 800bcb2:	d50e      	bpl.n	800bcd2 <_svfwprintf_r+0x602>
 800bcb4:	1c6c      	adds	r4, r5, #1
 800bcb6:	2367      	movs	r3, #103	; 0x67
 800bcb8:	9309      	str	r3, [sp, #36]	; 0x24
 800bcba:	e750      	b.n	800bb5e <_svfwprintf_r+0x48e>
 800bcbc:	2d00      	cmp	r5, #0
 800bcbe:	bfd4      	ite	le
 800bcc0:	f1c5 0402 	rsble	r4, r5, #2
 800bcc4:	2401      	movgt	r4, #1
 800bcc6:	441c      	add	r4, r3
 800bcc8:	e7f5      	b.n	800bcb6 <_svfwprintf_r+0x5e6>
 800bcca:	462c      	mov	r4, r5
 800bccc:	e747      	b.n	800bb5e <_svfwprintf_r+0x48e>
 800bcce:	2401      	movs	r4, #1
 800bcd0:	e745      	b.n	800bb5e <_svfwprintf_r+0x48e>
 800bcd2:	462c      	mov	r4, r5
 800bcd4:	e7ef      	b.n	800bcb6 <_svfwprintf_r+0x5e6>
 800bcd6:	b101      	cbz	r1, 800bcda <_svfwprintf_r+0x60a>
 800bcd8:	9615      	str	r6, [sp, #84]	; 0x54
 800bcda:	1d2b      	adds	r3, r5, #4
 800bcdc:	06f8      	lsls	r0, r7, #27
 800bcde:	930a      	str	r3, [sp, #40]	; 0x28
 800bce0:	d503      	bpl.n	800bcea <_svfwprintf_r+0x61a>
 800bce2:	682b      	ldr	r3, [r5, #0]
 800bce4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bce6:	601a      	str	r2, [r3, #0]
 800bce8:	e004      	b.n	800bcf4 <_svfwprintf_r+0x624>
 800bcea:	0679      	lsls	r1, r7, #25
 800bcec:	d5f9      	bpl.n	800bce2 <_svfwprintf_r+0x612>
 800bcee:	682b      	ldr	r3, [r5, #0]
 800bcf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bcf2:	801a      	strh	r2, [r3, #0]
 800bcf4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bcf6:	e524      	b.n	800b742 <_svfwprintf_r+0x72>
 800bcf8:	462a      	mov	r2, r5
 800bcfa:	f017 0110 	ands.w	r1, r7, #16
 800bcfe:	f852 3b04 	ldr.w	r3, [r2], #4
 800bd02:	920a      	str	r2, [sp, #40]	; 0x28
 800bd04:	d011      	beq.n	800bd2a <_svfwprintf_r+0x65a>
 800bd06:	2200      	movs	r2, #0
 800bd08:	2100      	movs	r1, #0
 800bd0a:	9115      	str	r1, [sp, #84]	; 0x54
 800bd0c:	1c66      	adds	r6, r4, #1
 800bd0e:	f000 822e 	beq.w	800c16e <_svfwprintf_r+0xa9e>
 800bd12:	f027 0180 	bic.w	r1, r7, #128	; 0x80
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	f040 822d 	bne.w	800c176 <_svfwprintf_r+0xaa6>
 800bd1c:	2c00      	cmp	r4, #0
 800bd1e:	f000 8098 	beq.w	800be52 <_svfwprintf_r+0x782>
 800bd22:	2a01      	cmp	r2, #1
 800bd24:	f040 822a 	bne.w	800c17c <_svfwprintf_r+0xaac>
 800bd28:	e075      	b.n	800be16 <_svfwprintf_r+0x746>
 800bd2a:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 800bd2e:	d0eb      	beq.n	800bd08 <_svfwprintf_r+0x638>
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	e7e8      	b.n	800bd06 <_svfwprintf_r+0x636>
 800bd34:	462a      	mov	r2, r5
 800bd36:	2178      	movs	r1, #120	; 0x78
 800bd38:	f852 3b04 	ldr.w	r3, [r2], #4
 800bd3c:	920a      	str	r2, [sp, #40]	; 0x28
 800bd3e:	2230      	movs	r2, #48	; 0x30
 800bd40:	e9cd 211a 	strd	r2, r1, [sp, #104]	; 0x68
 800bd44:	4a9e      	ldr	r2, [pc, #632]	; (800bfc0 <_svfwprintf_r+0x8f0>)
 800bd46:	920f      	str	r2, [sp, #60]	; 0x3c
 800bd48:	f047 0702 	orr.w	r7, r7, #2
 800bd4c:	2202      	movs	r2, #2
 800bd4e:	9109      	str	r1, [sp, #36]	; 0x24
 800bd50:	e7da      	b.n	800bd08 <_svfwprintf_r+0x638>
 800bd52:	462b      	mov	r3, r5
 800bd54:	2600      	movs	r6, #0
 800bd56:	f853 ab04 	ldr.w	sl, [r3], #4
 800bd5a:	930a      	str	r3, [sp, #40]	; 0x28
 800bd5c:	f017 0510 	ands.w	r5, r7, #16
 800bd60:	9615      	str	r6, [sp, #84]	; 0x54
 800bd62:	d12d      	bne.n	800bdc0 <_svfwprintf_r+0x6f0>
 800bd64:	1c62      	adds	r2, r4, #1
 800bd66:	d014      	beq.n	800bd92 <_svfwprintf_r+0x6c2>
 800bd68:	4622      	mov	r2, r4
 800bd6a:	4629      	mov	r1, r5
 800bd6c:	4650      	mov	r0, sl
 800bd6e:	4626      	mov	r6, r4
 800bd70:	f7f4 fa36 	bl	80001e0 <memchr>
 800bd74:	b108      	cbz	r0, 800bd7a <_svfwprintf_r+0x6aa>
 800bd76:	eba0 060a 	sub.w	r6, r0, sl
 800bd7a:	2e27      	cmp	r6, #39	; 0x27
 800bd7c:	d90e      	bls.n	800bd9c <_svfwprintf_r+0x6cc>
 800bd7e:	1c71      	adds	r1, r6, #1
 800bd80:	0089      	lsls	r1, r1, #2
 800bd82:	4658      	mov	r0, fp
 800bd84:	f7fd f990 	bl	80090a8 <_malloc_r>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	f43f add1 	beq.w	800b930 <_svfwprintf_r+0x260>
 800bd8e:	4680      	mov	r8, r0
 800bd90:	e007      	b.n	800bda2 <_svfwprintf_r+0x6d2>
 800bd92:	4650      	mov	r0, sl
 800bd94:	f7f4 fa1c 	bl	80001d0 <strlen>
 800bd98:	4606      	mov	r6, r0
 800bd9a:	e7ee      	b.n	800bd7a <_svfwprintf_r+0x6aa>
 800bd9c:	f04f 0800 	mov.w	r8, #0
 800bda0:	a82a      	add	r0, sp, #168	; 0xa8
 800bda2:	4634      	mov	r4, r6
 800bda4:	2300      	movs	r3, #0
 800bda6:	42b3      	cmp	r3, r6
 800bda8:	d104      	bne.n	800bdb4 <_svfwprintf_r+0x6e4>
 800bdaa:	2600      	movs	r6, #0
 800bdac:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800bdb0:	4682      	mov	sl, r0
 800bdb2:	e6dc      	b.n	800bb6e <_svfwprintf_r+0x49e>
 800bdb4:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800bdb8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	e7f2      	b.n	800bda6 <_svfwprintf_r+0x6d6>
 800bdc0:	1c63      	adds	r3, r4, #1
 800bdc2:	d011      	beq.n	800bde8 <_svfwprintf_r+0x718>
 800bdc4:	4622      	mov	r2, r4
 800bdc6:	4631      	mov	r1, r6
 800bdc8:	4650      	mov	r0, sl
 800bdca:	f000 fa04 	bl	800c1d6 <wmemchr>
 800bdce:	4680      	mov	r8, r0
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	f43f ae1a 	beq.w	800ba0a <_svfwprintf_r+0x33a>
 800bdd6:	eba0 080a 	sub.w	r8, r0, sl
 800bdda:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800bdde:	4544      	cmp	r4, r8
 800bde0:	bfa8      	it	ge
 800bde2:	4644      	movge	r4, r8
 800bde4:	46b0      	mov	r8, r6
 800bde6:	e610      	b.n	800ba0a <_svfwprintf_r+0x33a>
 800bde8:	4650      	mov	r0, sl
 800bdea:	f000 f9eb 	bl	800c1c4 <wcslen>
 800bdee:	4604      	mov	r4, r0
 800bdf0:	e7f8      	b.n	800bde4 <_svfwprintf_r+0x714>
 800bdf2:	462a      	mov	r2, r5
 800bdf4:	06fe      	lsls	r6, r7, #27
 800bdf6:	f852 3b04 	ldr.w	r3, [r2], #4
 800bdfa:	920a      	str	r2, [sp, #40]	; 0x28
 800bdfc:	d501      	bpl.n	800be02 <_svfwprintf_r+0x732>
 800bdfe:	2201      	movs	r2, #1
 800be00:	e782      	b.n	800bd08 <_svfwprintf_r+0x638>
 800be02:	067d      	lsls	r5, r7, #25
 800be04:	bf48      	it	mi
 800be06:	b29b      	uxthmi	r3, r3
 800be08:	e7f9      	b.n	800bdfe <_svfwprintf_r+0x72e>
 800be0a:	b101      	cbz	r1, 800be0e <_svfwprintf_r+0x73e>
 800be0c:	9615      	str	r6, [sp, #84]	; 0x54
 800be0e:	4b6d      	ldr	r3, [pc, #436]	; (800bfc4 <_svfwprintf_r+0x8f4>)
 800be10:	e522      	b.n	800b858 <_svfwprintf_r+0x188>
 800be12:	2b09      	cmp	r3, #9
 800be14:	d804      	bhi.n	800be20 <_svfwprintf_r+0x750>
 800be16:	3330      	adds	r3, #48	; 0x30
 800be18:	9351      	str	r3, [sp, #324]	; 0x144
 800be1a:	f50d 7aa2 	add.w	sl, sp, #324	; 0x144
 800be1e:	e1c3      	b.n	800c1a8 <_svfwprintf_r+0xad8>
 800be20:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800be24:	250a      	movs	r5, #10
 800be26:	fbb3 f0f5 	udiv	r0, r3, r5
 800be2a:	fb05 3210 	mls	r2, r5, r0, r3
 800be2e:	3230      	adds	r2, #48	; 0x30
 800be30:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800be34:	461a      	mov	r2, r3
 800be36:	2a09      	cmp	r2, #9
 800be38:	4603      	mov	r3, r0
 800be3a:	d8f4      	bhi.n	800be26 <_svfwprintf_r+0x756>
 800be3c:	e1b4      	b.n	800c1a8 <_svfwprintf_r+0xad8>
 800be3e:	f003 020f 	and.w	r2, r3, #15
 800be42:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800be44:	091b      	lsrs	r3, r3, #4
 800be46:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800be4a:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800be4e:	d1f6      	bne.n	800be3e <_svfwprintf_r+0x76e>
 800be50:	e1aa      	b.n	800c1a8 <_svfwprintf_r+0xad8>
 800be52:	b91a      	cbnz	r2, 800be5c <_svfwprintf_r+0x78c>
 800be54:	07f8      	lsls	r0, r7, #31
 800be56:	d501      	bpl.n	800be5c <_svfwprintf_r+0x78c>
 800be58:	2330      	movs	r3, #48	; 0x30
 800be5a:	e7dd      	b.n	800be18 <_svfwprintf_r+0x748>
 800be5c:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800be60:	e1a2      	b.n	800c1a8 <_svfwprintf_r+0xad8>
 800be62:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800be64:	e683      	b.n	800bb6e <_svfwprintf_r+0x49e>
 800be66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be6a:	1a9b      	subs	r3, r3, r2
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	9310      	str	r3, [sp, #64]	; 0x40
 800be70:	f77f ae93 	ble.w	800bb9a <_svfwprintf_r+0x4ca>
 800be74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be76:	2b10      	cmp	r3, #16
 800be78:	dc11      	bgt.n	800be9e <_svfwprintf_r+0x7ce>
 800be7a:	4a53      	ldr	r2, [pc, #332]	; (800bfc8 <_svfwprintf_r+0x8f8>)
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	4649      	mov	r1, r9
 800be80:	4658      	mov	r0, fp
 800be82:	f000 fa8c 	bl	800c39e <__ssputs_r>
 800be86:	3001      	adds	r0, #1
 800be88:	f47f ae87 	bne.w	800bb9a <_svfwprintf_r+0x4ca>
 800be8c:	f1b8 0f00 	cmp.w	r8, #0
 800be90:	f43f ad54 	beq.w	800b93c <_svfwprintf_r+0x26c>
 800be94:	4641      	mov	r1, r8
 800be96:	4658      	mov	r0, fp
 800be98:	f7fd f89a 	bl	8008fd0 <_free_r>
 800be9c:	e54e      	b.n	800b93c <_svfwprintf_r+0x26c>
 800be9e:	4a4a      	ldr	r2, [pc, #296]	; (800bfc8 <_svfwprintf_r+0x8f8>)
 800bea0:	2340      	movs	r3, #64	; 0x40
 800bea2:	4649      	mov	r1, r9
 800bea4:	4658      	mov	r0, fp
 800bea6:	f000 fa7a 	bl	800c39e <__ssputs_r>
 800beaa:	3001      	adds	r0, #1
 800beac:	d0ee      	beq.n	800be8c <_svfwprintf_r+0x7bc>
 800beae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800beb0:	3b10      	subs	r3, #16
 800beb2:	9310      	str	r3, [sp, #64]	; 0x40
 800beb4:	e7de      	b.n	800be74 <_svfwprintf_r+0x7a4>
 800beb6:	2340      	movs	r3, #64	; 0x40
 800beb8:	4649      	mov	r1, r9
 800beba:	4658      	mov	r0, fp
 800bebc:	f000 fa6f 	bl	800c39e <__ssputs_r>
 800bec0:	3001      	adds	r0, #1
 800bec2:	d0e3      	beq.n	800be8c <_svfwprintf_r+0x7bc>
 800bec4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bec6:	3b10      	subs	r3, #16
 800bec8:	9310      	str	r3, [sp, #64]	; 0x40
 800beca:	e685      	b.n	800bbd8 <_svfwprintf_r+0x508>
 800becc:	2340      	movs	r3, #64	; 0x40
 800bece:	4649      	mov	r1, r9
 800bed0:	4658      	mov	r0, fp
 800bed2:	f000 fa64 	bl	800c39e <__ssputs_r>
 800bed6:	3001      	adds	r0, #1
 800bed8:	d0d8      	beq.n	800be8c <_svfwprintf_r+0x7bc>
 800beda:	3e10      	subs	r6, #16
 800bedc:	e68d      	b.n	800bbfa <_svfwprintf_r+0x52a>
 800bede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bee0:	2b65      	cmp	r3, #101	; 0x65
 800bee2:	f240 80e5 	bls.w	800c0b0 <_svfwprintf_r+0x9e0>
 800bee6:	ec51 0b18 	vmov	r0, r1, d8
 800beea:	2200      	movs	r2, #0
 800beec:	2300      	movs	r3, #0
 800beee:	f7f4 fdeb 	bl	8000ac8 <__aeabi_dcmpeq>
 800bef2:	b358      	cbz	r0, 800bf4c <_svfwprintf_r+0x87c>
 800bef4:	4a35      	ldr	r2, [pc, #212]	; (800bfcc <_svfwprintf_r+0x8fc>)
 800bef6:	2304      	movs	r3, #4
 800bef8:	4649      	mov	r1, r9
 800befa:	4658      	mov	r0, fp
 800befc:	f000 fa4f 	bl	800c39e <__ssputs_r>
 800bf00:	3001      	adds	r0, #1
 800bf02:	d0c3      	beq.n	800be8c <_svfwprintf_r+0x7bc>
 800bf04:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	db02      	blt.n	800bf12 <_svfwprintf_r+0x842>
 800bf0c:	07fb      	lsls	r3, r7, #31
 800bf0e:	f57f ae8d 	bpl.w	800bc2c <_svfwprintf_r+0x55c>
 800bf12:	2304      	movs	r3, #4
 800bf14:	aa16      	add	r2, sp, #88	; 0x58
 800bf16:	4649      	mov	r1, r9
 800bf18:	4658      	mov	r0, fp
 800bf1a:	f000 fa40 	bl	800c39e <__ssputs_r>
 800bf1e:	3001      	adds	r0, #1
 800bf20:	d0b4      	beq.n	800be8c <_svfwprintf_r+0x7bc>
 800bf22:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800bf24:	3c01      	subs	r4, #1
 800bf26:	2c00      	cmp	r4, #0
 800bf28:	f77f ae80 	ble.w	800bc2c <_svfwprintf_r+0x55c>
 800bf2c:	4d28      	ldr	r5, [pc, #160]	; (800bfd0 <_svfwprintf_r+0x900>)
 800bf2e:	2c10      	cmp	r4, #16
 800bf30:	dc02      	bgt.n	800bf38 <_svfwprintf_r+0x868>
 800bf32:	00a3      	lsls	r3, r4, #2
 800bf34:	4a26      	ldr	r2, [pc, #152]	; (800bfd0 <_svfwprintf_r+0x900>)
 800bf36:	e672      	b.n	800bc1e <_svfwprintf_r+0x54e>
 800bf38:	2340      	movs	r3, #64	; 0x40
 800bf3a:	462a      	mov	r2, r5
 800bf3c:	4649      	mov	r1, r9
 800bf3e:	4658      	mov	r0, fp
 800bf40:	f000 fa2d 	bl	800c39e <__ssputs_r>
 800bf44:	3001      	adds	r0, #1
 800bf46:	d0a1      	beq.n	800be8c <_svfwprintf_r+0x7bc>
 800bf48:	3c10      	subs	r4, #16
 800bf4a:	e7f0      	b.n	800bf2e <_svfwprintf_r+0x85e>
 800bf4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	dc40      	bgt.n	800bfd4 <_svfwprintf_r+0x904>
 800bf52:	4a1e      	ldr	r2, [pc, #120]	; (800bfcc <_svfwprintf_r+0x8fc>)
 800bf54:	2304      	movs	r3, #4
 800bf56:	4649      	mov	r1, r9
 800bf58:	4658      	mov	r0, fp
 800bf5a:	f000 fa20 	bl	800c39e <__ssputs_r>
 800bf5e:	3001      	adds	r0, #1
 800bf60:	d094      	beq.n	800be8c <_svfwprintf_r+0x7bc>
 800bf62:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
 800bf66:	4313      	orrs	r3, r2
 800bf68:	f007 0201 	and.w	r2, r7, #1
 800bf6c:	4313      	orrs	r3, r2
 800bf6e:	f43f ae5d 	beq.w	800bc2c <_svfwprintf_r+0x55c>
 800bf72:	2304      	movs	r3, #4
 800bf74:	aa16      	add	r2, sp, #88	; 0x58
 800bf76:	4649      	mov	r1, r9
 800bf78:	4658      	mov	r0, fp
 800bf7a:	f000 fa10 	bl	800c39e <__ssputs_r>
 800bf7e:	3001      	adds	r0, #1
 800bf80:	d084      	beq.n	800be8c <_svfwprintf_r+0x7bc>
 800bf82:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800bf84:	2c00      	cmp	r4, #0
 800bf86:	da0c      	bge.n	800bfa2 <_svfwprintf_r+0x8d2>
 800bf88:	4d11      	ldr	r5, [pc, #68]	; (800bfd0 <_svfwprintf_r+0x900>)
 800bf8a:	4264      	negs	r4, r4
 800bf8c:	2c10      	cmp	r4, #16
 800bf8e:	dc0b      	bgt.n	800bfa8 <_svfwprintf_r+0x8d8>
 800bf90:	4a0f      	ldr	r2, [pc, #60]	; (800bfd0 <_svfwprintf_r+0x900>)
 800bf92:	00a3      	lsls	r3, r4, #2
 800bf94:	4649      	mov	r1, r9
 800bf96:	4658      	mov	r0, fp
 800bf98:	f000 fa01 	bl	800c39e <__ssputs_r>
 800bf9c:	3001      	adds	r0, #1
 800bf9e:	f43f af75 	beq.w	800be8c <_svfwprintf_r+0x7bc>
 800bfa2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	e639      	b.n	800bc1c <_svfwprintf_r+0x54c>
 800bfa8:	2340      	movs	r3, #64	; 0x40
 800bfaa:	462a      	mov	r2, r5
 800bfac:	4649      	mov	r1, r9
 800bfae:	4658      	mov	r0, fp
 800bfb0:	f000 f9f5 	bl	800c39e <__ssputs_r>
 800bfb4:	3001      	adds	r0, #1
 800bfb6:	f43f af69 	beq.w	800be8c <_svfwprintf_r+0x7bc>
 800bfba:	3c10      	subs	r4, #16
 800bfbc:	e7e6      	b.n	800bf8c <_svfwprintf_r+0x8bc>
 800bfbe:	bf00      	nop
 800bfc0:	08039d04 	.word	0x08039d04
 800bfc4:	08039cc0 	.word	0x08039cc0
 800bfc8:	08039d50 	.word	0x08039d50
 800bfcc:	08039d48 	.word	0x08039d48
 800bfd0:	08039d90 	.word	0x08039d90
 800bfd4:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800bfd6:	f344 041d 	sbfx	r4, r4, #0, #30
 800bfda:	42ac      	cmp	r4, r5
 800bfdc:	bfa8      	it	ge
 800bfde:	462c      	movge	r4, r5
 800bfe0:	2c00      	cmp	r4, #0
 800bfe2:	dc20      	bgt.n	800c026 <_svfwprintf_r+0x956>
 800bfe4:	2c00      	cmp	r4, #0
 800bfe6:	bfac      	ite	ge
 800bfe8:	1b2e      	subge	r6, r5, r4
 800bfea:	462e      	movlt	r6, r5
 800bfec:	2e00      	cmp	r6, #0
 800bfee:	dd0b      	ble.n	800c008 <_svfwprintf_r+0x938>
 800bff0:	4c72      	ldr	r4, [pc, #456]	; (800c1bc <_svfwprintf_r+0xaec>)
 800bff2:	2e10      	cmp	r6, #16
 800bff4:	dc20      	bgt.n	800c038 <_svfwprintf_r+0x968>
 800bff6:	4a71      	ldr	r2, [pc, #452]	; (800c1bc <_svfwprintf_r+0xaec>)
 800bff8:	00b3      	lsls	r3, r6, #2
 800bffa:	4649      	mov	r1, r9
 800bffc:	4658      	mov	r0, fp
 800bffe:	f000 f9ce 	bl	800c39e <__ssputs_r>
 800c002:	3001      	adds	r0, #1
 800c004:	f43f af42 	beq.w	800be8c <_svfwprintf_r+0x7bc>
 800c008:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c00c:	429a      	cmp	r2, r3
 800c00e:	ea4f 0585 	mov.w	r5, r5, lsl #2
 800c012:	da1c      	bge.n	800c04e <_svfwprintf_r+0x97e>
 800c014:	2304      	movs	r3, #4
 800c016:	aa16      	add	r2, sp, #88	; 0x58
 800c018:	4649      	mov	r1, r9
 800c01a:	4658      	mov	r0, fp
 800c01c:	f000 f9bf 	bl	800c39e <__ssputs_r>
 800c020:	3001      	adds	r0, #1
 800c022:	d116      	bne.n	800c052 <_svfwprintf_r+0x982>
 800c024:	e732      	b.n	800be8c <_svfwprintf_r+0x7bc>
 800c026:	00a3      	lsls	r3, r4, #2
 800c028:	4652      	mov	r2, sl
 800c02a:	4649      	mov	r1, r9
 800c02c:	4658      	mov	r0, fp
 800c02e:	f000 f9b6 	bl	800c39e <__ssputs_r>
 800c032:	3001      	adds	r0, #1
 800c034:	d1d6      	bne.n	800bfe4 <_svfwprintf_r+0x914>
 800c036:	e729      	b.n	800be8c <_svfwprintf_r+0x7bc>
 800c038:	2340      	movs	r3, #64	; 0x40
 800c03a:	4622      	mov	r2, r4
 800c03c:	4649      	mov	r1, r9
 800c03e:	4658      	mov	r0, fp
 800c040:	f000 f9ad 	bl	800c39e <__ssputs_r>
 800c044:	3001      	adds	r0, #1
 800c046:	f43f af21 	beq.w	800be8c <_svfwprintf_r+0x7bc>
 800c04a:	3e10      	subs	r6, #16
 800c04c:	e7d1      	b.n	800bff2 <_svfwprintf_r+0x922>
 800c04e:	07fe      	lsls	r6, r7, #31
 800c050:	d4e0      	bmi.n	800c014 <_svfwprintf_r+0x944>
 800c052:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c054:	ebc5 0483 	rsb	r4, r5, r3, lsl #2
 800c058:	10a2      	asrs	r2, r4, #2
 800c05a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800c05c:	1b1c      	subs	r4, r3, r4
 800c05e:	4294      	cmp	r4, r2
 800c060:	bfa8      	it	ge
 800c062:	4614      	movge	r4, r2
 800c064:	2c00      	cmp	r4, #0
 800c066:	dd09      	ble.n	800c07c <_svfwprintf_r+0x9ac>
 800c068:	00a3      	lsls	r3, r4, #2
 800c06a:	eb0a 0205 	add.w	r2, sl, r5
 800c06e:	4649      	mov	r1, r9
 800c070:	4658      	mov	r0, fp
 800c072:	f000 f994 	bl	800c39e <__ssputs_r>
 800c076:	3001      	adds	r0, #1
 800c078:	f43f af08 	beq.w	800be8c <_svfwprintf_r+0x7bc>
 800c07c:	e9dd 3518 	ldrd	r3, r5, [sp, #96]	; 0x60
 800c080:	2c00      	cmp	r4, #0
 800c082:	eba5 0503 	sub.w	r5, r5, r3
 800c086:	bfa8      	it	ge
 800c088:	1b2d      	subge	r5, r5, r4
 800c08a:	2d00      	cmp	r5, #0
 800c08c:	f77f adce 	ble.w	800bc2c <_svfwprintf_r+0x55c>
 800c090:	4c4a      	ldr	r4, [pc, #296]	; (800c1bc <_svfwprintf_r+0xaec>)
 800c092:	2d10      	cmp	r5, #16
 800c094:	dc01      	bgt.n	800c09a <_svfwprintf_r+0x9ca>
 800c096:	00ab      	lsls	r3, r5, #2
 800c098:	e74c      	b.n	800bf34 <_svfwprintf_r+0x864>
 800c09a:	2340      	movs	r3, #64	; 0x40
 800c09c:	4622      	mov	r2, r4
 800c09e:	4649      	mov	r1, r9
 800c0a0:	4658      	mov	r0, fp
 800c0a2:	f000 f97c 	bl	800c39e <__ssputs_r>
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	f43f aef0 	beq.w	800be8c <_svfwprintf_r+0x7bc>
 800c0ac:	3d10      	subs	r5, #16
 800c0ae:	e7f0      	b.n	800c092 <_svfwprintf_r+0x9c2>
 800c0b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	4652      	mov	r2, sl
 800c0b6:	f04f 0304 	mov.w	r3, #4
 800c0ba:	4649      	mov	r1, r9
 800c0bc:	4658      	mov	r0, fp
 800c0be:	dc01      	bgt.n	800c0c4 <_svfwprintf_r+0x9f4>
 800c0c0:	07fc      	lsls	r4, r7, #31
 800c0c2:	d51b      	bpl.n	800c0fc <_svfwprintf_r+0xa2c>
 800c0c4:	f000 f96b 	bl	800c39e <__ssputs_r>
 800c0c8:	3001      	adds	r0, #1
 800c0ca:	f43f aedf 	beq.w	800be8c <_svfwprintf_r+0x7bc>
 800c0ce:	2304      	movs	r3, #4
 800c0d0:	aa16      	add	r2, sp, #88	; 0x58
 800c0d2:	4649      	mov	r1, r9
 800c0d4:	4658      	mov	r0, fp
 800c0d6:	f000 f962 	bl	800c39e <__ssputs_r>
 800c0da:	3001      	adds	r0, #1
 800c0dc:	f43f aed6 	beq.w	800be8c <_svfwprintf_r+0x7bc>
 800c0e0:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800c0e2:	ec51 0b18 	vmov	r0, r1, d8
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	3c01      	subs	r4, #1
 800c0ec:	f7f4 fcec 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0f0:	b968      	cbnz	r0, 800c10e <_svfwprintf_r+0xa3e>
 800c0f2:	00a3      	lsls	r3, r4, #2
 800c0f4:	f10a 0204 	add.w	r2, sl, #4
 800c0f8:	4649      	mov	r1, r9
 800c0fa:	4658      	mov	r0, fp
 800c0fc:	f000 f94f 	bl	800c39e <__ssputs_r>
 800c100:	3001      	adds	r0, #1
 800c102:	f43f aec3 	beq.w	800be8c <_svfwprintf_r+0x7bc>
 800c106:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c108:	aa1c      	add	r2, sp, #112	; 0x70
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	e587      	b.n	800bc1e <_svfwprintf_r+0x54e>
 800c10e:	2c00      	cmp	r4, #0
 800c110:	ddf9      	ble.n	800c106 <_svfwprintf_r+0xa36>
 800c112:	4d2a      	ldr	r5, [pc, #168]	; (800c1bc <_svfwprintf_r+0xaec>)
 800c114:	2c10      	cmp	r4, #16
 800c116:	dc02      	bgt.n	800c11e <_svfwprintf_r+0xa4e>
 800c118:	4a28      	ldr	r2, [pc, #160]	; (800c1bc <_svfwprintf_r+0xaec>)
 800c11a:	00a3      	lsls	r3, r4, #2
 800c11c:	e7ec      	b.n	800c0f8 <_svfwprintf_r+0xa28>
 800c11e:	2340      	movs	r3, #64	; 0x40
 800c120:	462a      	mov	r2, r5
 800c122:	4649      	mov	r1, r9
 800c124:	4658      	mov	r0, fp
 800c126:	f000 f93a 	bl	800c39e <__ssputs_r>
 800c12a:	3001      	adds	r0, #1
 800c12c:	f43f aeae 	beq.w	800be8c <_svfwprintf_r+0x7bc>
 800c130:	3c10      	subs	r4, #16
 800c132:	e7ef      	b.n	800c114 <_svfwprintf_r+0xa44>
 800c134:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c136:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c138:	1a9c      	subs	r4, r3, r2
 800c13a:	2c00      	cmp	r4, #0
 800c13c:	f77f ad79 	ble.w	800bc32 <_svfwprintf_r+0x562>
 800c140:	2c10      	cmp	r4, #16
 800c142:	dc09      	bgt.n	800c158 <_svfwprintf_r+0xa88>
 800c144:	4a1e      	ldr	r2, [pc, #120]	; (800c1c0 <_svfwprintf_r+0xaf0>)
 800c146:	00a3      	lsls	r3, r4, #2
 800c148:	4649      	mov	r1, r9
 800c14a:	4658      	mov	r0, fp
 800c14c:	f000 f927 	bl	800c39e <__ssputs_r>
 800c150:	3001      	adds	r0, #1
 800c152:	f47f ad6e 	bne.w	800bc32 <_svfwprintf_r+0x562>
 800c156:	e699      	b.n	800be8c <_svfwprintf_r+0x7bc>
 800c158:	4a19      	ldr	r2, [pc, #100]	; (800c1c0 <_svfwprintf_r+0xaf0>)
 800c15a:	2340      	movs	r3, #64	; 0x40
 800c15c:	4649      	mov	r1, r9
 800c15e:	4658      	mov	r0, fp
 800c160:	f000 f91d 	bl	800c39e <__ssputs_r>
 800c164:	3001      	adds	r0, #1
 800c166:	f43f ae91 	beq.w	800be8c <_svfwprintf_r+0x7bc>
 800c16a:	3c10      	subs	r4, #16
 800c16c:	e7e8      	b.n	800c140 <_svfwprintf_r+0xa70>
 800c16e:	4639      	mov	r1, r7
 800c170:	2b00      	cmp	r3, #0
 800c172:	f43f add6 	beq.w	800bd22 <_svfwprintf_r+0x652>
 800c176:	2a01      	cmp	r2, #1
 800c178:	f43f ae4b 	beq.w	800be12 <_svfwprintf_r+0x742>
 800c17c:	2a02      	cmp	r2, #2
 800c17e:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800c182:	f43f ae5c 	beq.w	800be3e <_svfwprintf_r+0x76e>
 800c186:	f003 0207 	and.w	r2, r3, #7
 800c18a:	3230      	adds	r2, #48	; 0x30
 800c18c:	08db      	lsrs	r3, r3, #3
 800c18e:	4650      	mov	r0, sl
 800c190:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800c194:	d1f7      	bne.n	800c186 <_svfwprintf_r+0xab6>
 800c196:	07cd      	lsls	r5, r1, #31
 800c198:	d506      	bpl.n	800c1a8 <_svfwprintf_r+0xad8>
 800c19a:	2a30      	cmp	r2, #48	; 0x30
 800c19c:	d004      	beq.n	800c1a8 <_svfwprintf_r+0xad8>
 800c19e:	2330      	movs	r3, #48	; 0x30
 800c1a0:	f84a 3c04 	str.w	r3, [sl, #-4]
 800c1a4:	f1a0 0a08 	sub.w	sl, r0, #8
 800c1a8:	ab52      	add	r3, sp, #328	; 0x148
 800c1aa:	4626      	mov	r6, r4
 800c1ac:	eba3 040a 	sub.w	r4, r3, sl
 800c1b0:	10a4      	asrs	r4, r4, #2
 800c1b2:	460f      	mov	r7, r1
 800c1b4:	f04f 0800 	mov.w	r8, #0
 800c1b8:	4645      	mov	r5, r8
 800c1ba:	e4d8      	b.n	800bb6e <_svfwprintf_r+0x49e>
 800c1bc:	08039d90 	.word	0x08039d90
 800c1c0:	08039d50 	.word	0x08039d50

0800c1c4 <wcslen>:
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	4613      	mov	r3, r2
 800c1c8:	3204      	adds	r2, #4
 800c1ca:	6819      	ldr	r1, [r3, #0]
 800c1cc:	2900      	cmp	r1, #0
 800c1ce:	d1fa      	bne.n	800c1c6 <wcslen+0x2>
 800c1d0:	1a18      	subs	r0, r3, r0
 800c1d2:	1080      	asrs	r0, r0, #2
 800c1d4:	4770      	bx	lr

0800c1d6 <wmemchr>:
 800c1d6:	b530      	push	{r4, r5, lr}
 800c1d8:	2400      	movs	r4, #0
 800c1da:	4294      	cmp	r4, r2
 800c1dc:	4603      	mov	r3, r0
 800c1de:	d102      	bne.n	800c1e6 <wmemchr+0x10>
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	bd30      	pop	{r4, r5, pc}
 800c1e6:	681d      	ldr	r5, [r3, #0]
 800c1e8:	428d      	cmp	r5, r1
 800c1ea:	f100 0004 	add.w	r0, r0, #4
 800c1ee:	d0f8      	beq.n	800c1e2 <wmemchr+0xc>
 800c1f0:	3401      	adds	r4, #1
 800c1f2:	e7f2      	b.n	800c1da <wmemchr+0x4>

0800c1f4 <__assert_func>:
 800c1f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1f6:	4614      	mov	r4, r2
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	4b09      	ldr	r3, [pc, #36]	; (800c220 <__assert_func+0x2c>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4605      	mov	r5, r0
 800c200:	68d8      	ldr	r0, [r3, #12]
 800c202:	b14c      	cbz	r4, 800c218 <__assert_func+0x24>
 800c204:	4b07      	ldr	r3, [pc, #28]	; (800c224 <__assert_func+0x30>)
 800c206:	9100      	str	r1, [sp, #0]
 800c208:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c20c:	4906      	ldr	r1, [pc, #24]	; (800c228 <__assert_func+0x34>)
 800c20e:	462b      	mov	r3, r5
 800c210:	f000 f858 	bl	800c2c4 <fiprintf>
 800c214:	f000 f92b 	bl	800c46e <abort>
 800c218:	4b04      	ldr	r3, [pc, #16]	; (800c22c <__assert_func+0x38>)
 800c21a:	461c      	mov	r4, r3
 800c21c:	e7f3      	b.n	800c206 <__assert_func+0x12>
 800c21e:	bf00      	nop
 800c220:	20000014 	.word	0x20000014
 800c224:	08039dd0 	.word	0x08039dd0
 800c228:	08039ddd 	.word	0x08039ddd
 800c22c:	08039e0b 	.word	0x08039e0b

0800c230 <btowc>:
 800c230:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c232:	1c43      	adds	r3, r0, #1
 800c234:	b087      	sub	sp, #28
 800c236:	d103      	bne.n	800c240 <btowc+0x10>
 800c238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c23c:	b007      	add	sp, #28
 800c23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c240:	4d1c      	ldr	r5, [pc, #112]	; (800c2b4 <btowc+0x84>)
 800c242:	f88d 000b 	strb.w	r0, [sp, #11]
 800c246:	ae04      	add	r6, sp, #16
 800c248:	2208      	movs	r2, #8
 800c24a:	2100      	movs	r1, #0
 800c24c:	4630      	mov	r0, r6
 800c24e:	f7fc feb7 	bl	8008fc0 <memset>
 800c252:	682f      	ldr	r7, [r5, #0]
 800c254:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800c256:	b9fc      	cbnz	r4, 800c298 <btowc+0x68>
 800c258:	2050      	movs	r0, #80	; 0x50
 800c25a:	f7fe fcaf 	bl	800abbc <malloc>
 800c25e:	4602      	mov	r2, r0
 800c260:	65b8      	str	r0, [r7, #88]	; 0x58
 800c262:	b920      	cbnz	r0, 800c26e <btowc+0x3e>
 800c264:	4b14      	ldr	r3, [pc, #80]	; (800c2b8 <btowc+0x88>)
 800c266:	4815      	ldr	r0, [pc, #84]	; (800c2bc <btowc+0x8c>)
 800c268:	2118      	movs	r1, #24
 800c26a:	f7ff ffc3 	bl	800c1f4 <__assert_func>
 800c26e:	682b      	ldr	r3, [r5, #0]
 800c270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c272:	e9c3 4400 	strd	r4, r4, [r3]
 800c276:	e9c3 4402 	strd	r4, r4, [r3, #8]
 800c27a:	e9c3 4404 	strd	r4, r4, [r3, #16]
 800c27e:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
 800c282:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
 800c286:	e9c3 440e 	strd	r4, r4, [r3, #56]	; 0x38
 800c28a:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
 800c28e:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
 800c292:	619c      	str	r4, [r3, #24]
 800c294:	771c      	strb	r4, [r3, #28]
 800c296:	625c      	str	r4, [r3, #36]	; 0x24
 800c298:	4b09      	ldr	r3, [pc, #36]	; (800c2c0 <btowc+0x90>)
 800c29a:	9600      	str	r6, [sp, #0]
 800c29c:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 800c2a0:	6828      	ldr	r0, [r5, #0]
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	f10d 020b 	add.w	r2, sp, #11
 800c2a8:	a903      	add	r1, sp, #12
 800c2aa:	47a0      	blx	r4
 800c2ac:	2801      	cmp	r0, #1
 800c2ae:	d8c3      	bhi.n	800c238 <btowc+0x8>
 800c2b0:	9803      	ldr	r0, [sp, #12]
 800c2b2:	e7c3      	b.n	800c23c <btowc+0xc>
 800c2b4:	20000014 	.word	0x20000014
 800c2b8:	08039a91 	.word	0x08039a91
 800c2bc:	08039e0c 	.word	0x08039e0c
 800c2c0:	20000078 	.word	0x20000078

0800c2c4 <fiprintf>:
 800c2c4:	b40e      	push	{r1, r2, r3}
 800c2c6:	b503      	push	{r0, r1, lr}
 800c2c8:	4601      	mov	r1, r0
 800c2ca:	ab03      	add	r3, sp, #12
 800c2cc:	4805      	ldr	r0, [pc, #20]	; (800c2e4 <fiprintf+0x20>)
 800c2ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2d2:	6800      	ldr	r0, [r0, #0]
 800c2d4:	9301      	str	r3, [sp, #4]
 800c2d6:	f7ff f849 	bl	800b36c <_vfiprintf_r>
 800c2da:	b002      	add	sp, #8
 800c2dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2e0:	b003      	add	sp, #12
 800c2e2:	4770      	bx	lr
 800c2e4:	20000014 	.word	0x20000014

0800c2e8 <__ascii_mbtowc>:
 800c2e8:	b082      	sub	sp, #8
 800c2ea:	b901      	cbnz	r1, 800c2ee <__ascii_mbtowc+0x6>
 800c2ec:	a901      	add	r1, sp, #4
 800c2ee:	b142      	cbz	r2, 800c302 <__ascii_mbtowc+0x1a>
 800c2f0:	b14b      	cbz	r3, 800c306 <__ascii_mbtowc+0x1e>
 800c2f2:	7813      	ldrb	r3, [r2, #0]
 800c2f4:	600b      	str	r3, [r1, #0]
 800c2f6:	7812      	ldrb	r2, [r2, #0]
 800c2f8:	1e10      	subs	r0, r2, #0
 800c2fa:	bf18      	it	ne
 800c2fc:	2001      	movne	r0, #1
 800c2fe:	b002      	add	sp, #8
 800c300:	4770      	bx	lr
 800c302:	4610      	mov	r0, r2
 800c304:	e7fb      	b.n	800c2fe <__ascii_mbtowc+0x16>
 800c306:	f06f 0001 	mvn.w	r0, #1
 800c30a:	e7f8      	b.n	800c2fe <__ascii_mbtowc+0x16>

0800c30c <memmove>:
 800c30c:	4288      	cmp	r0, r1
 800c30e:	b510      	push	{r4, lr}
 800c310:	eb01 0402 	add.w	r4, r1, r2
 800c314:	d902      	bls.n	800c31c <memmove+0x10>
 800c316:	4284      	cmp	r4, r0
 800c318:	4623      	mov	r3, r4
 800c31a:	d807      	bhi.n	800c32c <memmove+0x20>
 800c31c:	1e43      	subs	r3, r0, #1
 800c31e:	42a1      	cmp	r1, r4
 800c320:	d008      	beq.n	800c334 <memmove+0x28>
 800c322:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c326:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c32a:	e7f8      	b.n	800c31e <memmove+0x12>
 800c32c:	4402      	add	r2, r0
 800c32e:	4601      	mov	r1, r0
 800c330:	428a      	cmp	r2, r1
 800c332:	d100      	bne.n	800c336 <memmove+0x2a>
 800c334:	bd10      	pop	{r4, pc}
 800c336:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c33a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c33e:	e7f7      	b.n	800c330 <memmove+0x24>

0800c340 <_realloc_r>:
 800c340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c344:	4680      	mov	r8, r0
 800c346:	4614      	mov	r4, r2
 800c348:	460e      	mov	r6, r1
 800c34a:	b921      	cbnz	r1, 800c356 <_realloc_r+0x16>
 800c34c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c350:	4611      	mov	r1, r2
 800c352:	f7fc bea9 	b.w	80090a8 <_malloc_r>
 800c356:	b92a      	cbnz	r2, 800c364 <_realloc_r+0x24>
 800c358:	f7fc fe3a 	bl	8008fd0 <_free_r>
 800c35c:	4625      	mov	r5, r4
 800c35e:	4628      	mov	r0, r5
 800c360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c364:	f000 f88a 	bl	800c47c <_malloc_usable_size_r>
 800c368:	4284      	cmp	r4, r0
 800c36a:	4607      	mov	r7, r0
 800c36c:	d802      	bhi.n	800c374 <_realloc_r+0x34>
 800c36e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c372:	d812      	bhi.n	800c39a <_realloc_r+0x5a>
 800c374:	4621      	mov	r1, r4
 800c376:	4640      	mov	r0, r8
 800c378:	f7fc fe96 	bl	80090a8 <_malloc_r>
 800c37c:	4605      	mov	r5, r0
 800c37e:	2800      	cmp	r0, #0
 800c380:	d0ed      	beq.n	800c35e <_realloc_r+0x1e>
 800c382:	42bc      	cmp	r4, r7
 800c384:	4622      	mov	r2, r4
 800c386:	4631      	mov	r1, r6
 800c388:	bf28      	it	cs
 800c38a:	463a      	movcs	r2, r7
 800c38c:	f7fc fe0a 	bl	8008fa4 <memcpy>
 800c390:	4631      	mov	r1, r6
 800c392:	4640      	mov	r0, r8
 800c394:	f7fc fe1c 	bl	8008fd0 <_free_r>
 800c398:	e7e1      	b.n	800c35e <_realloc_r+0x1e>
 800c39a:	4635      	mov	r5, r6
 800c39c:	e7df      	b.n	800c35e <_realloc_r+0x1e>

0800c39e <__ssputs_r>:
 800c39e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3a2:	688e      	ldr	r6, [r1, #8]
 800c3a4:	429e      	cmp	r6, r3
 800c3a6:	4682      	mov	sl, r0
 800c3a8:	460c      	mov	r4, r1
 800c3aa:	4690      	mov	r8, r2
 800c3ac:	461f      	mov	r7, r3
 800c3ae:	d838      	bhi.n	800c422 <__ssputs_r+0x84>
 800c3b0:	898a      	ldrh	r2, [r1, #12]
 800c3b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3b6:	d032      	beq.n	800c41e <__ssputs_r+0x80>
 800c3b8:	6825      	ldr	r5, [r4, #0]
 800c3ba:	6909      	ldr	r1, [r1, #16]
 800c3bc:	eba5 0901 	sub.w	r9, r5, r1
 800c3c0:	6965      	ldr	r5, [r4, #20]
 800c3c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	444b      	add	r3, r9
 800c3ce:	106d      	asrs	r5, r5, #1
 800c3d0:	429d      	cmp	r5, r3
 800c3d2:	bf38      	it	cc
 800c3d4:	461d      	movcc	r5, r3
 800c3d6:	0553      	lsls	r3, r2, #21
 800c3d8:	d531      	bpl.n	800c43e <__ssputs_r+0xa0>
 800c3da:	4629      	mov	r1, r5
 800c3dc:	f7fc fe64 	bl	80090a8 <_malloc_r>
 800c3e0:	4606      	mov	r6, r0
 800c3e2:	b950      	cbnz	r0, 800c3fa <__ssputs_r+0x5c>
 800c3e4:	230c      	movs	r3, #12
 800c3e6:	f8ca 3000 	str.w	r3, [sl]
 800c3ea:	89a3      	ldrh	r3, [r4, #12]
 800c3ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3f0:	81a3      	strh	r3, [r4, #12]
 800c3f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3fa:	6921      	ldr	r1, [r4, #16]
 800c3fc:	464a      	mov	r2, r9
 800c3fe:	f7fc fdd1 	bl	8008fa4 <memcpy>
 800c402:	89a3      	ldrh	r3, [r4, #12]
 800c404:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c40c:	81a3      	strh	r3, [r4, #12]
 800c40e:	6126      	str	r6, [r4, #16]
 800c410:	6165      	str	r5, [r4, #20]
 800c412:	444e      	add	r6, r9
 800c414:	eba5 0509 	sub.w	r5, r5, r9
 800c418:	6026      	str	r6, [r4, #0]
 800c41a:	60a5      	str	r5, [r4, #8]
 800c41c:	463e      	mov	r6, r7
 800c41e:	42be      	cmp	r6, r7
 800c420:	d900      	bls.n	800c424 <__ssputs_r+0x86>
 800c422:	463e      	mov	r6, r7
 800c424:	6820      	ldr	r0, [r4, #0]
 800c426:	4632      	mov	r2, r6
 800c428:	4641      	mov	r1, r8
 800c42a:	f7ff ff6f 	bl	800c30c <memmove>
 800c42e:	68a3      	ldr	r3, [r4, #8]
 800c430:	1b9b      	subs	r3, r3, r6
 800c432:	60a3      	str	r3, [r4, #8]
 800c434:	6823      	ldr	r3, [r4, #0]
 800c436:	4433      	add	r3, r6
 800c438:	6023      	str	r3, [r4, #0]
 800c43a:	2000      	movs	r0, #0
 800c43c:	e7db      	b.n	800c3f6 <__ssputs_r+0x58>
 800c43e:	462a      	mov	r2, r5
 800c440:	f7ff ff7e 	bl	800c340 <_realloc_r>
 800c444:	4606      	mov	r6, r0
 800c446:	2800      	cmp	r0, #0
 800c448:	d1e1      	bne.n	800c40e <__ssputs_r+0x70>
 800c44a:	6921      	ldr	r1, [r4, #16]
 800c44c:	4650      	mov	r0, sl
 800c44e:	f7fc fdbf 	bl	8008fd0 <_free_r>
 800c452:	e7c7      	b.n	800c3e4 <__ssputs_r+0x46>

0800c454 <__ascii_wctomb>:
 800c454:	b149      	cbz	r1, 800c46a <__ascii_wctomb+0x16>
 800c456:	2aff      	cmp	r2, #255	; 0xff
 800c458:	bf85      	ittet	hi
 800c45a:	238a      	movhi	r3, #138	; 0x8a
 800c45c:	6003      	strhi	r3, [r0, #0]
 800c45e:	700a      	strbls	r2, [r1, #0]
 800c460:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c464:	bf98      	it	ls
 800c466:	2001      	movls	r0, #1
 800c468:	4770      	bx	lr
 800c46a:	4608      	mov	r0, r1
 800c46c:	4770      	bx	lr

0800c46e <abort>:
 800c46e:	b508      	push	{r3, lr}
 800c470:	2006      	movs	r0, #6
 800c472:	f000 f833 	bl	800c4dc <raise>
 800c476:	2001      	movs	r0, #1
 800c478:	f7f5 ffd8 	bl	800242c <_exit>

0800c47c <_malloc_usable_size_r>:
 800c47c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c480:	1f18      	subs	r0, r3, #4
 800c482:	2b00      	cmp	r3, #0
 800c484:	bfbc      	itt	lt
 800c486:	580b      	ldrlt	r3, [r1, r0]
 800c488:	18c0      	addlt	r0, r0, r3
 800c48a:	4770      	bx	lr

0800c48c <_raise_r>:
 800c48c:	291f      	cmp	r1, #31
 800c48e:	b538      	push	{r3, r4, r5, lr}
 800c490:	4604      	mov	r4, r0
 800c492:	460d      	mov	r5, r1
 800c494:	d904      	bls.n	800c4a0 <_raise_r+0x14>
 800c496:	2316      	movs	r3, #22
 800c498:	6003      	str	r3, [r0, #0]
 800c49a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c49e:	bd38      	pop	{r3, r4, r5, pc}
 800c4a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c4a2:	b112      	cbz	r2, 800c4aa <_raise_r+0x1e>
 800c4a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4a8:	b94b      	cbnz	r3, 800c4be <_raise_r+0x32>
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	f000 f830 	bl	800c510 <_getpid_r>
 800c4b0:	462a      	mov	r2, r5
 800c4b2:	4601      	mov	r1, r0
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4ba:	f000 b817 	b.w	800c4ec <_kill_r>
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d00a      	beq.n	800c4d8 <_raise_r+0x4c>
 800c4c2:	1c59      	adds	r1, r3, #1
 800c4c4:	d103      	bne.n	800c4ce <_raise_r+0x42>
 800c4c6:	2316      	movs	r3, #22
 800c4c8:	6003      	str	r3, [r0, #0]
 800c4ca:	2001      	movs	r0, #1
 800c4cc:	e7e7      	b.n	800c49e <_raise_r+0x12>
 800c4ce:	2400      	movs	r4, #0
 800c4d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c4d4:	4628      	mov	r0, r5
 800c4d6:	4798      	blx	r3
 800c4d8:	2000      	movs	r0, #0
 800c4da:	e7e0      	b.n	800c49e <_raise_r+0x12>

0800c4dc <raise>:
 800c4dc:	4b02      	ldr	r3, [pc, #8]	; (800c4e8 <raise+0xc>)
 800c4de:	4601      	mov	r1, r0
 800c4e0:	6818      	ldr	r0, [r3, #0]
 800c4e2:	f7ff bfd3 	b.w	800c48c <_raise_r>
 800c4e6:	bf00      	nop
 800c4e8:	20000014 	.word	0x20000014

0800c4ec <_kill_r>:
 800c4ec:	b538      	push	{r3, r4, r5, lr}
 800c4ee:	4d07      	ldr	r5, [pc, #28]	; (800c50c <_kill_r+0x20>)
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	4604      	mov	r4, r0
 800c4f4:	4608      	mov	r0, r1
 800c4f6:	4611      	mov	r1, r2
 800c4f8:	602b      	str	r3, [r5, #0]
 800c4fa:	f7f5 ff87 	bl	800240c <_kill>
 800c4fe:	1c43      	adds	r3, r0, #1
 800c500:	d102      	bne.n	800c508 <_kill_r+0x1c>
 800c502:	682b      	ldr	r3, [r5, #0]
 800c504:	b103      	cbz	r3, 800c508 <_kill_r+0x1c>
 800c506:	6023      	str	r3, [r4, #0]
 800c508:	bd38      	pop	{r3, r4, r5, pc}
 800c50a:	bf00      	nop
 800c50c:	2000a4b8 	.word	0x2000a4b8

0800c510 <_getpid_r>:
 800c510:	f7f5 bf74 	b.w	80023fc <_getpid>

0800c514 <_init>:
 800c514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c516:	bf00      	nop
 800c518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c51a:	bc08      	pop	{r3}
 800c51c:	469e      	mov	lr, r3
 800c51e:	4770      	bx	lr

0800c520 <_fini>:
 800c520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c522:	bf00      	nop
 800c524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c526:	bc08      	pop	{r3}
 800c528:	469e      	mov	lr, r3
 800c52a:	4770      	bx	lr
