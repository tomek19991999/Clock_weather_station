
Clock_weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  08008858  08008858  00018858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d6c  08008d6c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008d6c  08008d6c  00018d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d74  08008d74  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d74  08008d74  00018d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d78  08008d78  00018d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200001dc  08008f58  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08008f58  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1f9  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036c9  00000000  00000000  0003b405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  0003ead0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001618  00000000  00000000  00040280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a5ac  00000000  00000000  00041898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d502  00000000  00000000  0006be44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff754  00000000  00000000  00089346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00188a9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073fc  00000000  00000000  00188aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800883c 	.word	0x0800883c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800883c 	.word	0x0800883c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	4a2f      	ldr	r2, [pc, #188]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ece:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	4a29      	ldr	r2, [pc, #164]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee6:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	4b24      	ldr	r3, [pc, #144]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a23      	ldr	r2, [pc, #140]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2120      	movs	r1, #32
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f12:	f001 f9fd 	bl	8002310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000f16:	2301      	movs	r3, #1
 8000f18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2e:	f001 f845 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f32:	2320      	movs	r3, #32
 8000f34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	4619      	mov	r1, r3
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4c:	f001 f836 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTONA6_Pin;
 8000f50:	2340      	movs	r3, #64	; 0x40
 8000f52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f54:	2300      	movs	r3, #0
 8000f56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTONA6_GPIO_Port, &GPIO_InitStruct);
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	4619      	mov	r1, r3
 8000f62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f66:	f001 f829 	bl	8001fbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2103      	movs	r1, #3
 8000f6e:	2006      	movs	r0, #6
 8000f70:	f000 ffed 	bl	8001f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f74:	2006      	movs	r0, #6
 8000f76:	f001 f806 	bl	8001f86 <HAL_NVIC_EnableIRQ>

}
 8000f7a:	bf00      	nop
 8000f7c:	3720      	adds	r7, #32
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000

08000f88 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000f8e:	4a1c      	ldr	r2, [pc, #112]	; (8001000 <MX_I2C1_Init+0x78>)
 8000f90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000f92:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000f94:	4a1b      	ldr	r2, [pc, #108]	; (8001004 <MX_I2C1_Init+0x7c>)
 8000f96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fc2:	480e      	ldr	r0, [pc, #56]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fc4:	f001 f9d4 	bl	8002370 <HAL_I2C_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fce:	f000 fabb 	bl	8001548 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4809      	ldr	r0, [pc, #36]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fd6:	f001 ff2f 	bl	8002e38 <HAL_I2CEx_ConfigAnalogFilter>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fe0:	f000 fab2 	bl	8001548 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_I2C1_Init+0x74>)
 8000fe8:	f001 ff71 	bl	8002ece <HAL_I2CEx_ConfigDigitalFilter>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ff2:	f000 faa9 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200001f8 	.word	0x200001f8
 8001000:	40005400 	.word	0x40005400
 8001004:	2000090e 	.word	0x2000090e

08001008 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b0ac      	sub	sp, #176	; 0xb0
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2288      	movs	r2, #136	; 0x88
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f004 fe5b 	bl	8005ce4 <memset>
  if(i2cHandle->Instance==I2C1)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <HAL_I2C_MspInit+0xb0>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d13a      	bne.n	80010ae <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001038:	2340      	movs	r3, #64	; 0x40
 800103a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800103c:	2300      	movs	r3, #0
 800103e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4618      	mov	r0, r3
 8001046:	f002 fe53 	bl	8003cf0 <HAL_RCCEx_PeriphCLKConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001050:	f000 fa7a 	bl	8001548 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <HAL_I2C_MspInit+0xb4>)
 8001056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001058:	4a18      	ldr	r2, [pc, #96]	; (80010bc <HAL_I2C_MspInit+0xb4>)
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <HAL_I2C_MspInit+0xb4>)
 8001062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800106c:	23c0      	movs	r3, #192	; 0xc0
 800106e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001072:	2312      	movs	r3, #18
 8001074:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001084:	2304      	movs	r3, #4
 8001086:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800108e:	4619      	mov	r1, r3
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <HAL_I2C_MspInit+0xb8>)
 8001092:	f000 ff93 	bl	8001fbc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_I2C_MspInit+0xb4>)
 8001098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109a:	4a08      	ldr	r2, [pc, #32]	; (80010bc <HAL_I2C_MspInit+0xb4>)
 800109c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010a0:	6593      	str	r3, [r2, #88]	; 0x58
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_I2C_MspInit+0xb4>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010ae:	bf00      	nop
 80010b0:	37b0      	adds	r7, #176	; 0xb0
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40005400 	.word	0x40005400
 80010bc:	40021000 	.word	0x40021000
 80010c0:	48000400 	.word	0x48000400

080010c4 <lps_read_reg>:
#define LPS25HB_TEMP_OUT_H 		0x2C

#define TIMEOUT                 100

static uint8_t lps_read_reg(uint8_t reg)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af04      	add	r7, sp, #16
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	2364      	movs	r3, #100	; 0x64
 80010d8:	9302      	str	r3, [sp, #8]
 80010da:	2301      	movs	r3, #1
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	f107 030f 	add.w	r3, r7, #15
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	21ba      	movs	r1, #186	; 0xba
 80010e8:	4803      	ldr	r0, [pc, #12]	; (80010f8 <lps_read_reg+0x34>)
 80010ea:	f001 fae5 	bl	80026b8 <HAL_I2C_Mem_Read>

    return value;
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200001f8 	.word	0x200001f8

080010fc <lps_write_reg>:

static void lps_write_reg(uint8_t reg, uint8_t value)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af04      	add	r7, sp, #16
 8001102:	4603      	mov	r3, r0
 8001104:	460a      	mov	r2, r1
 8001106:	71fb      	strb	r3, [r7, #7]
 8001108:	4613      	mov	r3, r2
 800110a:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	b29a      	uxth	r2, r3
 8001110:	2364      	movs	r3, #100	; 0x64
 8001112:	9302      	str	r3, [sp, #8]
 8001114:	2301      	movs	r3, #1
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	1dbb      	adds	r3, r7, #6
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2301      	movs	r3, #1
 800111e:	21ba      	movs	r1, #186	; 0xba
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <lps_write_reg+0x34>)
 8001122:	f001 f9b5 	bl	8002490 <HAL_I2C_Mem_Write>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200001f8 	.word	0x200001f8

08001134 <lps25hb_init>:

HAL_StatusTypeDef lps25hb_init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
    if (lps_read_reg(LPS25HB_WHO_AM_I) != 0xBD)
 8001138:	200f      	movs	r0, #15
 800113a:	f7ff ffc3 	bl	80010c4 <lps_read_reg>
 800113e:	4603      	mov	r3, r0
 8001140:	2bbd      	cmp	r3, #189	; 0xbd
 8001142:	d001      	beq.n	8001148 <lps25hb_init+0x14>
         return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e004      	b.n	8001152 <lps25hb_init+0x1e>

    lps_write_reg(LPS25HB_CTRL_REG1,  0x80); //wake up sensor
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	2020      	movs	r0, #32
 800114c:	f7ff ffd6 	bl	80010fc <lps_write_reg>
    return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	bd80      	pop	{r7, pc}

08001156 <lps25hb_one_shot>:
    lps_write_reg(LPS25HB_CTRL_REG1,  0xC0);
        return HAL_OK;
}

HAL_StatusTypeDef lps25hb_one_shot(void)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0
    lps_write_reg(LPS25HB_CTRL_REG2, 0x01);
 800115a:	2101      	movs	r1, #1
 800115c:	2021      	movs	r0, #33	; 0x21
 800115e:	f7ff ffcd 	bl	80010fc <lps_write_reg>
    return HAL_OK;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	bd80      	pop	{r7, pc}

08001168 <lps25hb_read_temp>:
	  lps_write_reg(LPS25HB_CTRL_REG1, 0);
    return HAL_OK;
}

float lps25hb_read_temp(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af04      	add	r7, sp, #16
     int16_t temp;

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_TEMP_OUT_L | 0x80, 1, (uint8_t*)&temp, sizeof(temp), TIMEOUT) != HAL_OK)
 800116e:	2364      	movs	r3, #100	; 0x64
 8001170:	9302      	str	r3, [sp, #8]
 8001172:	2302      	movs	r3, #2
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	1dbb      	adds	r3, r7, #6
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2301      	movs	r3, #1
 800117c:	22ab      	movs	r2, #171	; 0xab
 800117e:	21ba      	movs	r1, #186	; 0xba
 8001180:	480d      	ldr	r0, [pc, #52]	; (80011b8 <lps25hb_read_temp+0x50>)
 8001182:	f001 fa99 	bl	80026b8 <HAL_I2C_Mem_Read>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <lps25hb_read_temp+0x28>
         Error_Handler();
 800118c:	f000 f9dc 	bl	8001548 <Error_Handler>

     return 42.5f + temp / 480.0f;
 8001190:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800119c:	eddf 6a07 	vldr	s13, [pc, #28]	; 80011bc <lps25hb_read_temp+0x54>
 80011a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80011c0 <lps25hb_read_temp+0x58>
 80011a8:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80011ac:	eeb0 0a67 	vmov.f32	s0, s15
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200001f8 	.word	0x200001f8
 80011bc:	43f00000 	.word	0x43f00000
 80011c0:	422a0000 	.word	0x422a0000

080011c4 <lps25hb_read_pressure>:

float lps25hb_read_pressure(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af04      	add	r7, sp, #16
     int32_t pressure = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_PRESS_OUT_XL | 0x80, 1, (uint8_t*)&pressure, 3, TIMEOUT) != HAL_OK)
 80011ce:	2364      	movs	r3, #100	; 0x64
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	2303      	movs	r3, #3
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	22a8      	movs	r2, #168	; 0xa8
 80011de:	21ba      	movs	r1, #186	; 0xba
 80011e0:	480b      	ldr	r0, [pc, #44]	; (8001210 <lps25hb_read_pressure+0x4c>)
 80011e2:	f001 fa69 	bl	80026b8 <HAL_I2C_Mem_Read>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <lps25hb_read_pressure+0x2c>
         Error_Handler();
 80011ec:	f000 f9ac 	bl	8001548 <Error_Handler>

     return pressure / 4096.0f;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	ee07 3a90 	vmov	s15, r3
 80011f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011fa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001214 <lps25hb_read_pressure+0x50>
 80011fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001202:	eef0 7a66 	vmov.f32	s15, s13
}
 8001206:	eeb0 0a67 	vmov.f32	s0, s15
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200001f8 	.word	0x200001f8
 8001214:	45800000 	.word	0x45800000

08001218 <HAL_Delay>:
/* USER CODE BEGIN 0 */


//Add __WFI() -> sleep (wait for interrupt)
void HAL_Delay(uint32_t Delay)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001220:	f000 fdae 	bl	8001d80 <HAL_GetTick>
 8001224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001230:	d007      	beq.n	8001242 <HAL_Delay+0x2a>
  {
    wait += (uint32_t)uwTickFreq;
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_Delay+0x44>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4413      	add	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800123e:	e000      	b.n	8001242 <HAL_Delay+0x2a>
  {
	  __WFI();
 8001240:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001242:	f000 fd9d 	bl	8001d80 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	429a      	cmp	r2, r3
 8001250:	d8f6      	bhi.n	8001240 <HAL_Delay+0x28>
  }
}
 8001252:	bf00      	nop
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000008 	.word	0x20000008

08001260 <__io_putchar>:

int __io_putchar(int ch)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b0a      	cmp	r3, #10
 800126c:	d102      	bne.n	8001274 <__io_putchar+0x14>
    __io_putchar('\r');
 800126e:	200d      	movs	r0, #13
 8001270:	f7ff fff6 	bl	8001260 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001274:	1d39      	adds	r1, r7, #4
 8001276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800127a:	2201      	movs	r2, #1
 800127c:	4803      	ldr	r0, [pc, #12]	; (800128c <__io_putchar+0x2c>)
 800127e:	f004 f80b 	bl	8005298 <HAL_UART_Transmit>

  return 1;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000328 	.word	0x20000328

08001290 <HAL_GPIO_EXTI_Callback>:

volatile uint8_t flag = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]

  if (GPIO_Pin == USER_BUTTON_Pin) {
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d122      	bne.n	80012e6 <HAL_GPIO_EXTI_Callback+0x56>
	  printf("Enter interrupt!\n");
 80012a0:	4813      	ldr	r0, [pc, #76]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x60>)
 80012a2:	f005 fa17 	bl	80066d4 <puts>
	  HAL_Delay(100);
 80012a6:	2064      	movs	r0, #100	; 0x64
 80012a8:	f7ff ffb6 	bl	8001218 <HAL_Delay>
	  if(flag==0) {
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_GPIO_EXTI_Callback+0x64>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d109      	bne.n	80012ca <HAL_GPIO_EXTI_Callback+0x3a>
		  flag=1;
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <HAL_GPIO_EXTI_Callback+0x64>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	701a      	strb	r2, [r3, #0]
		  printf("Set flag 1\n");
 80012bc:	480e      	ldr	r0, [pc, #56]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x68>)
 80012be:	f005 fa09 	bl	80066d4 <puts>
		  HAL_Delay(100);
 80012c2:	2064      	movs	r0, #100	; 0x64
 80012c4:	f7ff ffa8 	bl	8001218 <HAL_Delay>
		  flag=2;
		  printf("Set flag 2\n");
		  HAL_Delay(100);
	  }
  }
}
 80012c8:	e00d      	b.n	80012e6 <HAL_GPIO_EXTI_Callback+0x56>
	  else if(flag==1) {
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_GPIO_EXTI_Callback+0x64>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d108      	bne.n	80012e6 <HAL_GPIO_EXTI_Callback+0x56>
		  flag=2;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <HAL_GPIO_EXTI_Callback+0x64>)
 80012d6:	2202      	movs	r2, #2
 80012d8:	701a      	strb	r2, [r3, #0]
		  printf("Set flag 2\n");
 80012da:	4808      	ldr	r0, [pc, #32]	; (80012fc <HAL_GPIO_EXTI_Callback+0x6c>)
 80012dc:	f005 f9fa 	bl	80066d4 <puts>
		  HAL_Delay(100);
 80012e0:	2064      	movs	r0, #100	; 0x64
 80012e2:	f7ff ff99 	bl	8001218 <HAL_Delay>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	08008858 	.word	0x08008858
 80012f4:	2000024c 	.word	0x2000024c
 80012f8:	0800886c 	.word	0x0800886c
 80012fc:	08008878 	.word	0x08008878

08001300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001306:	f000 fcd2 	bl	8001cae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130a:	f000 f8c7 	bl	800149c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800130e:	f7ff fdcd 	bl	8000eac <MX_GPIO_Init>
  MX_RTC_Init();
 8001312:	f000 f91f 	bl	8001554 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001316:	f000 fc15 	bl	8001b44 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800131a:	f7ff fe35 	bl	8000f88 <MX_I2C1_Init>
  MX_SPI2_Init();
 800131e:	f000 f985 	bl	800162c <MX_SPI2_Init>
  MX_TIM3_Init();
 8001322:	f000 fb59 	bl	80019d8 <MX_TIM3_Init>


  /*** check if the SB flag i set ***/


  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8001326:	4b4f      	ldr	r3, [pc, #316]	; (8001464 <main+0x164>)
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132e:	2b00      	cmp	r3, #0
 8001330:	d05a      	beq.n	80013e8 <main+0xe8>
  {
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB); //clear the flag (flag of low power mode)
 8001332:	4b4c      	ldr	r3, [pc, #304]	; (8001464 <main+0x164>)
 8001334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001338:	619a      	str	r2, [r3, #24]
	  printf("Searching...\n");
 800133a:	484b      	ldr	r0, [pc, #300]	; (8001468 <main+0x168>)
 800133c:	f005 f9ca 	bl	80066d4 <puts>
	  if (lps25hb_init() == HAL_OK) {
 8001340:	f7ff fef8 	bl	8001134 <lps25hb_init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d149      	bne.n	80013de <main+0xde>
	    printf("OK: LPS25HB\n");
 800134a:	4848      	ldr	r0, [pc, #288]	; (800146c <main+0x16c>)
 800134c:	f005 f9c2 	bl	80066d4 <puts>
	    lps25hb_one_shot();
 8001350:	f7ff ff01 	bl	8001156 <lps25hb_one_shot>
	    HAL_Delay(100);
 8001354:	2064      	movs	r0, #100	; 0x64
 8001356:	f7ff ff5f 	bl	8001218 <HAL_Delay>
	    printf("T = %.1f*C\n", lps25hb_read_temp());
 800135a:	f7ff ff05 	bl	8001168 <lps25hb_read_temp>
 800135e:	ee10 3a10 	vmov	r3, s0
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f8f0 	bl	8000548 <__aeabi_f2d>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4840      	ldr	r0, [pc, #256]	; (8001470 <main+0x170>)
 800136e:	f005 f92b 	bl	80065c8 <iprintf>
	    printf("p = %.1f hPa\n", lps25hb_read_pressure()+14);
 8001372:	f7ff ff27 	bl	80011c4 <lps25hb_read_pressure>
 8001376:	eef0 7a40 	vmov.f32	s15, s0
 800137a:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 800137e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001382:	ee17 0a90 	vmov	r0, s15
 8001386:	f7ff f8df 	bl	8000548 <__aeabi_f2d>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4839      	ldr	r0, [pc, #228]	; (8001474 <main+0x174>)
 8001390:	f005 f91a 	bl	80065c8 <iprintf>

	    RTC_TimeTypeDef time;
	    RTC_DateTypeDef date;
	    for(int i=0;i<5;i++){
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	e01a      	b.n	80013d0 <main+0xd0>
	  	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	4619      	mov	r1, r3
 80013a0:	4835      	ldr	r0, [pc, #212]	; (8001478 <main+0x178>)
 80013a2:	f003 f9ec 	bl	800477e <HAL_RTC_GetTime>
	  	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80013a6:	463b      	mov	r3, r7
 80013a8:	2200      	movs	r2, #0
 80013aa:	4619      	mov	r1, r3
 80013ac:	4832      	ldr	r0, [pc, #200]	; (8001478 <main+0x178>)
 80013ae:	f003 fa42 	bl	8004836 <HAL_RTC_GetDate>
	  	  printf("Aktualny czas: %02d:%02d:%02d\n", time.Hours, time.Minutes, time.Seconds);
 80013b2:	793b      	ldrb	r3, [r7, #4]
 80013b4:	4619      	mov	r1, r3
 80013b6:	797b      	ldrb	r3, [r7, #5]
 80013b8:	461a      	mov	r2, r3
 80013ba:	79bb      	ldrb	r3, [r7, #6]
 80013bc:	482f      	ldr	r0, [pc, #188]	; (800147c <main+0x17c>)
 80013be:	f005 f903 	bl	80065c8 <iprintf>
	  	  HAL_Delay(1000);
 80013c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013c6:	f7ff ff27 	bl	8001218 <HAL_Delay>
	    for(int i=0;i<5;i++){
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3301      	adds	r3, #1
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	dde1      	ble.n	800139a <main+0x9a>
	    }

	    HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);   //disable PA0
 80013d6:	2001      	movs	r0, #1
 80013d8:	f001 fdf6 	bl	8002fc8 <HAL_PWR_DisableWakeUpPin>
 80013dc:	e004      	b.n	80013e8 <main+0xe8>
	  } else {
	    printf("Error: LPS25HB not found\n");
 80013de:	4828      	ldr	r0, [pc, #160]	; (8001480 <main+0x180>)
 80013e0:	f005 f978 	bl	80066d4 <puts>
	    Error_Handler();
 80013e4:	f000 f8b0 	bl	8001548 <Error_Handler>
	  }
  }

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80013e8:	213c      	movs	r1, #60	; 0x3c
 80013ea:	4826      	ldr	r0, [pc, #152]	; (8001484 <main+0x184>)
 80013ec:	f003 fd2f 	bl	8004e4e <HAL_TIM_Encoder_Start>
  if(flag==1){
 80013f0:	4b25      	ldr	r3, [pc, #148]	; (8001488 <main+0x188>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d11f      	bne.n	800143a <main+0x13a>
	  printf("Entering first procedure!\n");
 80013fa:	4824      	ldr	r0, [pc, #144]	; (800148c <main+0x18c>)
 80013fc:	f005 f96a 	bl	80066d4 <puts>
	  HAL_Delay(100);
 8001400:	2064      	movs	r0, #100	; 0x64
 8001402:	f7ff ff09 	bl	8001218 <HAL_Delay>
	  int16_t prev_value = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	837b      	strh	r3, [r7, #26]
	  while(flag==1){
 800140a:	e011      	b.n	8001430 <main+0x130>
		  int16_t value = __HAL_TIM_GET_COUNTER(&htim3);
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <main+0x184>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001412:	833b      	strh	r3, [r7, #24]
		  if (value != prev_value) {
 8001414:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001418:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800141c:	429a      	cmp	r2, r3
 800141e:	d007      	beq.n	8001430 <main+0x130>
			  printf("value = %d\n", value);
 8001420:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001424:	4619      	mov	r1, r3
 8001426:	481a      	ldr	r0, [pc, #104]	; (8001490 <main+0x190>)
 8001428:	f005 f8ce 	bl	80065c8 <iprintf>
			  prev_value = value;
 800142c:	8b3b      	ldrh	r3, [r7, #24]
 800142e:	837b      	strh	r3, [r7, #26]
	  while(flag==1){
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <main+0x188>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b01      	cmp	r3, #1
 8001438:	d0e8      	beq.n	800140c <main+0x10c>
		  }
	  }
  }

  if(flag==2){
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <main+0x188>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d102      	bne.n	800144a <main+0x14a>
	  printf("Entering second procedure!\n");
 8001444:	4813      	ldr	r0, [pc, #76]	; (8001494 <main+0x194>)
 8001446:	f005 f945 	bl	80066d4 <puts>
  }


  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU); //clear wake-up flag before entry standby mode
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <main+0x164>)
 800144c:	221f      	movs	r2, #31
 800144e:	619a      	str	r2, [r3, #24]
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1_LOW);
 8001450:	2021      	movs	r0, #33	; 0x21
 8001452:	f001 fd99 	bl	8002f88 <HAL_PWR_EnableWakeUpPin>

  printf("Going sleep...\n");
 8001456:	4810      	ldr	r0, [pc, #64]	; (8001498 <main+0x198>)
 8001458:	f005 f93c 	bl	80066d4 <puts>
  HAL_PWR_EnterSTANDBYMode();
 800145c:	f001 fdca 	bl	8002ff4 <HAL_PWR_EnterSTANDBYMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001460:	e7fe      	b.n	8001460 <main+0x160>
 8001462:	bf00      	nop
 8001464:	40007000 	.word	0x40007000
 8001468:	08008884 	.word	0x08008884
 800146c:	08008894 	.word	0x08008894
 8001470:	080088a0 	.word	0x080088a0
 8001474:	080088ac 	.word	0x080088ac
 8001478:	20000250 	.word	0x20000250
 800147c:	080088bc 	.word	0x080088bc
 8001480:	080088dc 	.word	0x080088dc
 8001484:	200002dc 	.word	0x200002dc
 8001488:	2000024c 	.word	0x2000024c
 800148c:	080088f8 	.word	0x080088f8
 8001490:	08008914 	.word	0x08008914
 8001494:	08008920 	.word	0x08008920
 8001498:	0800893c 	.word	0x0800893c

0800149c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b096      	sub	sp, #88	; 0x58
 80014a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	2244      	movs	r2, #68	; 0x44
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f004 fc1a 	bl	8005ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b0:	463b      	mov	r3, r7
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014c2:	f001 fdbf 	bl	8003044 <HAL_PWREx_ControlVoltageScaling>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014cc:	f000 f83c 	bl	8001548 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014d0:	f001 fd4a 	bl	8002f68 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <SystemClock_Config+0xa8>)
 80014d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014da:	4a1a      	ldr	r2, [pc, #104]	; (8001544 <SystemClock_Config+0xa8>)
 80014dc:	f023 0318 	bic.w	r3, r3, #24
 80014e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80014e4:	2314      	movs	r3, #20
 80014e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014e8:	2301      	movs	r3, #1
 80014ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014ec:	2301      	movs	r3, #1
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 80014f4:	2370      	movs	r3, #112	; 0x70
 80014f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4618      	mov	r0, r3
 8001502:	f001 fdf5 	bl	80030f0 <HAL_RCC_OscConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800150c:	f000 f81c 	bl	8001548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001510:	230f      	movs	r3, #15
 8001512:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001514:	2300      	movs	r3, #0
 8001516:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001524:	463b      	mov	r3, r7
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f002 f9bd 	bl	80038a8 <HAL_RCC_ClockConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001534:	f000 f808 	bl	8001548 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001538:	f002 fec4 	bl	80042c4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800153c:	bf00      	nop
 800153e:	3758      	adds	r7, #88	; 0x58
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000

08001548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800154c:	b672      	cpsid	i
}
 800154e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001550:	e7fe      	b.n	8001550 <Error_Handler+0x8>
	...

08001554 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <MX_RTC_Init+0x5c>)
 800155a:	4a16      	ldr	r2, [pc, #88]	; (80015b4 <MX_RTC_Init+0x60>)
 800155c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <MX_RTC_Init+0x5c>)
 8001560:	2200      	movs	r2, #0
 8001562:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <MX_RTC_Init+0x5c>)
 8001566:	227f      	movs	r2, #127	; 0x7f
 8001568:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_RTC_Init+0x5c>)
 800156c:	22ff      	movs	r2, #255	; 0xff
 800156e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <MX_RTC_Init+0x5c>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <MX_RTC_Init+0x5c>)
 8001578:	2200      	movs	r2, #0
 800157a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <MX_RTC_Init+0x5c>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <MX_RTC_Init+0x5c>)
 8001584:	2200      	movs	r2, #0
 8001586:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001588:	4809      	ldr	r0, [pc, #36]	; (80015b0 <MX_RTC_Init+0x5c>)
 800158a:	f003 f87d 	bl	8004688 <HAL_RTC_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001594:	f7ff ffd8 	bl	8001548 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 4, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8001598:	2204      	movs	r2, #4
 800159a:	2104      	movs	r1, #4
 800159c:	4804      	ldr	r0, [pc, #16]	; (80015b0 <MX_RTC_Init+0x5c>)
 800159e:	f003 fa49 	bl	8004a34 <HAL_RTCEx_SetWakeUpTimer_IT>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80015a8:	f7ff ffce 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000250 	.word	0x20000250
 80015b4:	40002800 	.word	0x40002800

080015b8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b0a4      	sub	sp, #144	; 0x90
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	2288      	movs	r2, #136	; 0x88
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f004 fb8b 	bl	8005ce4 <memset>
  if(rtcHandle->Instance==RTC)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a14      	ldr	r2, [pc, #80]	; (8001624 <HAL_RTC_MspInit+0x6c>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d120      	bne.n	800161a <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80015d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015dc:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80015de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e6:	f107 0308 	add.w	r3, r7, #8
 80015ea:	4618      	mov	r0, r3
 80015ec:	f002 fb80 	bl	8003cf0 <HAL_RCCEx_PeriphCLKConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80015f6:	f7ff ffa7 	bl	8001548 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_RTC_MspInit+0x70>)
 80015fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001600:	4a09      	ldr	r2, [pc, #36]	; (8001628 <HAL_RTC_MspInit+0x70>)
 8001602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	2003      	movs	r0, #3
 8001610:	f000 fc9d 	bl	8001f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001614:	2003      	movs	r0, #3
 8001616:	f000 fcb6 	bl	8001f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800161a:	bf00      	nop
 800161c:	3790      	adds	r7, #144	; 0x90
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40002800 	.word	0x40002800
 8001628:	40021000 	.word	0x40021000

0800162c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <MX_SPI2_Init+0x74>)
 8001632:	4a1c      	ldr	r2, [pc, #112]	; (80016a4 <MX_SPI2_Init+0x78>)
 8001634:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <MX_SPI2_Init+0x74>)
 8001638:	f44f 7282 	mov.w	r2, #260	; 0x104
 800163c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <MX_SPI2_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <MX_SPI2_Init+0x74>)
 8001646:	f44f 7240 	mov.w	r2, #768	; 0x300
 800164a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <MX_SPI2_Init+0x74>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <MX_SPI2_Init+0x74>)
 8001654:	2200      	movs	r2, #0
 8001656:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MX_SPI2_Init+0x74>)
 800165a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800165e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <MX_SPI2_Init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <MX_SPI2_Init+0x74>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <MX_SPI2_Init+0x74>)
 800166e:	2200      	movs	r2, #0
 8001670:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <MX_SPI2_Init+0x74>)
 8001674:	2200      	movs	r2, #0
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <MX_SPI2_Init+0x74>)
 800167a:	2207      	movs	r2, #7
 800167c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <MX_SPI2_Init+0x74>)
 8001680:	2200      	movs	r2, #0
 8001682:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <MX_SPI2_Init+0x74>)
 8001686:	2208      	movs	r2, #8
 8001688:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_SPI2_Init+0x74>)
 800168c:	f003 fa96 	bl	8004bbc <HAL_SPI_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001696:	f7ff ff57 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000274 	.word	0x20000274
 80016a4:	40003800 	.word	0x40003800

080016a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a25      	ldr	r2, [pc, #148]	; (800175c <HAL_SPI_MspInit+0xb4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d144      	bne.n	8001754 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016ca:	4b25      	ldr	r3, [pc, #148]	; (8001760 <HAL_SPI_MspInit+0xb8>)
 80016cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ce:	4a24      	ldr	r2, [pc, #144]	; (8001760 <HAL_SPI_MspInit+0xb8>)
 80016d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d4:	6593      	str	r3, [r2, #88]	; 0x58
 80016d6:	4b22      	ldr	r3, [pc, #136]	; (8001760 <HAL_SPI_MspInit+0xb8>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e2:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <HAL_SPI_MspInit+0xb8>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	4a1e      	ldr	r2, [pc, #120]	; (8001760 <HAL_SPI_MspInit+0xb8>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ee:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <HAL_SPI_MspInit+0xb8>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	4b19      	ldr	r3, [pc, #100]	; (8001760 <HAL_SPI_MspInit+0xb8>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	4a18      	ldr	r2, [pc, #96]	; (8001760 <HAL_SPI_MspInit+0xb8>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001706:	4b16      	ldr	r3, [pc, #88]	; (8001760 <HAL_SPI_MspInit+0xb8>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001712:	2308      	movs	r3, #8
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001722:	2305      	movs	r3, #5
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	480d      	ldr	r0, [pc, #52]	; (8001764 <HAL_SPI_MspInit+0xbc>)
 800172e:	f000 fc45 	bl	8001fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001744:	2305      	movs	r3, #5
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4619      	mov	r1, r3
 800174e:	4806      	ldr	r0, [pc, #24]	; (8001768 <HAL_SPI_MspInit+0xc0>)
 8001750:	f000 fc34 	bl	8001fbc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001754:	bf00      	nop
 8001756:	3728      	adds	r7, #40	; 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40003800 	.word	0x40003800
 8001760:	40021000 	.word	0x40021000
 8001764:	48000800 	.word	0x48000800
 8001768:	48000400 	.word	0x48000400

0800176c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <HAL_MspInit+0x44>)
 8001774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001776:	4a0e      	ldr	r2, [pc, #56]	; (80017b0 <HAL_MspInit+0x44>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6613      	str	r3, [r2, #96]	; 0x60
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <HAL_MspInit+0x44>)
 8001780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_MspInit+0x44>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178e:	4a08      	ldr	r2, [pc, #32]	; (80017b0 <HAL_MspInit+0x44>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001794:	6593      	str	r3, [r2, #88]	; 0x58
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_MspInit+0x44>)
 8001798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <NMI_Handler+0x4>

080017ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <MemManage_Handler+0x4>

080017c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <BusFault_Handler+0x4>

080017cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <UsageFault_Handler+0x4>

080017d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001800:	f000 faaa 	bl	8001d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}

08001808 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <RTC_WKUP_IRQHandler+0x10>)
 800180e:	f003 f9a5 	bl	8004b5c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000250 	.word	0x20000250

0800181c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8001820:	2001      	movs	r0, #1
 8001822:	f000 fd8d 	bl	8002340 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}

0800182a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  return 1;
 800182e:	2301      	movs	r3, #1
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <_kill>:

int _kill(int pid, int sig)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001844:	f004 fa24 	bl	8005c90 <__errno>
 8001848:	4603      	mov	r3, r0
 800184a:	2216      	movs	r2, #22
 800184c:	601a      	str	r2, [r3, #0]
  return -1;
 800184e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <_exit>:

void _exit (int status)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001862:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff ffe7 	bl	800183a <_kill>
  while (1) {}    /* Make sure we hang here */
 800186c:	e7fe      	b.n	800186c <_exit+0x12>

0800186e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e00a      	b.n	8001896 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001880:	f3af 8000 	nop.w
 8001884:	4601      	mov	r1, r0
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	1c5a      	adds	r2, r3, #1
 800188a:	60ba      	str	r2, [r7, #8]
 800188c:	b2ca      	uxtb	r2, r1
 800188e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	3301      	adds	r3, #1
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	429a      	cmp	r2, r3
 800189c:	dbf0      	blt.n	8001880 <_read+0x12>
  }

  return len;
 800189e:	687b      	ldr	r3, [r7, #4]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	e009      	b.n	80018ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	60ba      	str	r2, [r7, #8]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fccc 	bl	8001260 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3301      	adds	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	dbf1      	blt.n	80018ba <_write+0x12>
  }
  return len;
 80018d6:	687b      	ldr	r3, [r7, #4]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_close>:

int _close(int file)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001908:	605a      	str	r2, [r3, #4]
  return 0;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_isatty>:

int _isatty(int file)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001920:	2301      	movs	r3, #1
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800192e:	b480      	push	{r7}
 8001930:	b085      	sub	sp, #20
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001950:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <_sbrk+0x5c>)
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <_sbrk+0x60>)
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <_sbrk+0x64>)
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <_sbrk+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	429a      	cmp	r2, r3
 8001976:	d207      	bcs.n	8001988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001978:	f004 f98a 	bl	8005c90 <__errno>
 800197c:	4603      	mov	r3, r0
 800197e:	220c      	movs	r2, #12
 8001980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001986:	e009      	b.n	800199c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <_sbrk+0x64>)
 8001998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20018000 	.word	0x20018000
 80019a8:	00000400 	.word	0x00000400
 80019ac:	200002d8 	.word	0x200002d8
 80019b0:	200003c0 	.word	0x200003c0

080019b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <SystemInit+0x20>)
 80019ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <SystemInit+0x20>)
 80019c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08c      	sub	sp, #48	; 0x30
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019de:	f107 030c 	add.w	r3, r7, #12
 80019e2:	2224      	movs	r2, #36	; 0x24
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f004 f97c 	bl	8005ce4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ec:	463b      	mov	r3, r7
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019f6:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <MX_TIM3_Init+0xa4>)
 80019f8:	4a21      	ldr	r2, [pc, #132]	; (8001a80 <MX_TIM3_Init+0xa8>)
 80019fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <MX_TIM3_Init+0xa4>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <MX_TIM3_Init+0xa4>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <MX_TIM3_Init+0xa4>)
 8001a0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <MX_TIM3_Init+0xa4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <MX_TIM3_Init+0xa4>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a24:	2301      	movs	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a34:	2301      	movs	r3, #1
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	4619      	mov	r1, r3
 8001a46:	480d      	ldr	r0, [pc, #52]	; (8001a7c <MX_TIM3_Init+0xa4>)
 8001a48:	f003 f95b 	bl	8004d02 <HAL_TIM_Encoder_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001a52:	f7ff fd79 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a56:	2300      	movs	r3, #0
 8001a58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a5e:	463b      	mov	r3, r7
 8001a60:	4619      	mov	r1, r3
 8001a62:	4806      	ldr	r0, [pc, #24]	; (8001a7c <MX_TIM3_Init+0xa4>)
 8001a64:	f003 fb42 	bl	80050ec <HAL_TIMEx_MasterConfigSynchronization>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001a6e:	f7ff fd6b 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a72:	bf00      	nop
 8001a74:	3730      	adds	r7, #48	; 0x30
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200002dc 	.word	0x200002dc
 8001a80:	40000400 	.word	0x40000400

08001a84 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	; 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a25      	ldr	r2, [pc, #148]	; (8001b38 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d144      	bne.n	8001b30 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aa6:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aaa:	4a24      	ldr	r2, [pc, #144]	; (8001b3c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab2:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	4a1e      	ldr	r2, [pc, #120]	; (8001b3c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	4a18      	ldr	r2, [pc, #96]	; (8001b3c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001aee:	2380      	movs	r3, #128	; 0x80
 8001af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001afe:	2302      	movs	r3, #2
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b0c:	f000 fa56 	bl	8001fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b10:	2340      	movs	r3, #64	; 0x40
 8001b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b20:	2302      	movs	r3, #2
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001b2c:	f000 fa46 	bl	8001fbc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b30:	bf00      	nop
 8001b32:	3728      	adds	r7, #40	; 0x28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40000400 	.word	0x40000400
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	48000800 	.word	0x48000800

08001b44 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <MX_USART2_UART_Init+0x58>)
 8001b4a:	4a15      	ldr	r2, [pc, #84]	; (8001ba0 <MX_USART2_UART_Init+0x5c>)
 8001b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <MX_USART2_UART_Init+0x58>)
 8001b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <MX_USART2_UART_Init+0x58>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <MX_USART2_UART_Init+0x58>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <MX_USART2_UART_Init+0x58>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <MX_USART2_UART_Init+0x58>)
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <MX_USART2_UART_Init+0x58>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <MX_USART2_UART_Init+0x58>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b7a:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <MX_USART2_UART_Init+0x58>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <MX_USART2_UART_Init+0x58>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b86:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_USART2_UART_Init+0x58>)
 8001b88:	f003 fb38 	bl	80051fc <HAL_UART_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b92:	f7ff fcd9 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000328 	.word	0x20000328
 8001ba0:	40004400 	.word	0x40004400

08001ba4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b0ac      	sub	sp, #176	; 0xb0
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	2288      	movs	r2, #136	; 0x88
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f004 f88d 	bl	8005ce4 <memset>
  if(uartHandle->Instance==USART2)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <HAL_UART_MspInit+0xb0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d13b      	bne.n	8001c4c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4618      	mov	r0, r3
 8001be2:	f002 f885 	bl	8003cf0 <HAL_RCCEx_PeriphCLKConfig>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bec:	f7ff fcac 	bl	8001548 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_UART_MspInit+0xb4>)
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf4:	4a18      	ldr	r2, [pc, #96]	; (8001c58 <HAL_UART_MspInit+0xb4>)
 8001bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfa:	6593      	str	r3, [r2, #88]	; 0x58
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <HAL_UART_MspInit+0xb4>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <HAL_UART_MspInit+0xb4>)
 8001c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0c:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <HAL_UART_MspInit+0xb4>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c14:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_UART_MspInit+0xb4>)
 8001c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c20:	230c      	movs	r3, #12
 8001c22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c32:	2303      	movs	r3, #3
 8001c34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c38:	2307      	movs	r3, #7
 8001c3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c42:	4619      	mov	r1, r3
 8001c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c48:	f000 f9b8 	bl	8001fbc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	37b0      	adds	r7, #176	; 0xb0
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40004400 	.word	0x40004400
 8001c58:	40021000 	.word	0x40021000

08001c5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c60:	f7ff fea8 	bl	80019b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c64:	480c      	ldr	r0, [pc, #48]	; (8001c98 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c66:	490d      	ldr	r1, [pc, #52]	; (8001c9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c68:	4a0d      	ldr	r2, [pc, #52]	; (8001ca0 <LoopForever+0xe>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c6c:	e002      	b.n	8001c74 <LoopCopyDataInit>

08001c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c72:	3304      	adds	r3, #4

08001c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c78:	d3f9      	bcc.n	8001c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c7c:	4c0a      	ldr	r4, [pc, #40]	; (8001ca8 <LoopForever+0x16>)
  movs r3, #0
 8001c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c80:	e001      	b.n	8001c86 <LoopFillZerobss>

08001c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c84:	3204      	adds	r2, #4

08001c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c88:	d3fb      	bcc.n	8001c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c8a:	f004 f807 	bl	8005c9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c8e:	f7ff fb37 	bl	8001300 <main>

08001c92 <LoopForever>:

LoopForever:
    b LoopForever
 8001c92:	e7fe      	b.n	8001c92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c94:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c9c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ca0:	08008d7c 	.word	0x08008d7c
  ldr r2, =_sbss
 8001ca4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ca8:	200003c0 	.word	0x200003c0

08001cac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cac:	e7fe      	b.n	8001cac <ADC1_2_IRQHandler>

08001cae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb8:	2003      	movs	r0, #3
 8001cba:	f000 f93d 	bl	8001f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f000 f80e 	bl	8001ce0 <HAL_InitTick>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	71fb      	strb	r3, [r7, #7]
 8001cce:	e001      	b.n	8001cd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cd0:	f7ff fd4c 	bl	800176c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001cec:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <HAL_InitTick+0x6c>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d023      	beq.n	8001d3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001cf4:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <HAL_InitTick+0x70>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <HAL_InitTick+0x6c>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f949 	bl	8001fa2 <HAL_SYSTICK_Config>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10f      	bne.n	8001d36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b0f      	cmp	r3, #15
 8001d1a:	d809      	bhi.n	8001d30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d24:	f000 f913 	bl	8001f4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d28:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <HAL_InitTick+0x74>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e007      	b.n	8001d40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	73fb      	strb	r3, [r7, #15]
 8001d34:	e004      	b.n	8001d40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	73fb      	strb	r3, [r7, #15]
 8001d3a:	e001      	b.n	8001d40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000008 	.word	0x20000008
 8001d50:	20000000 	.word	0x20000000
 8001d54:	20000004 	.word	0x20000004

08001d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_IncTick+0x20>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_IncTick+0x24>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <HAL_IncTick+0x24>)
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000008 	.word	0x20000008
 8001d7c:	200003ac 	.word	0x200003ac

08001d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return uwTick;
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <HAL_GetTick+0x14>)
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	200003ac 	.word	0x200003ac

08001d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <__NVIC_SetPriorityGrouping+0x44>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db4:	4013      	ands	r3, r2
 8001db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dca:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <__NVIC_SetPriorityGrouping+0x44>)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	60d3      	str	r3, [r2, #12]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <__NVIC_GetPriorityGrouping+0x18>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	0a1b      	lsrs	r3, r3, #8
 8001dea:	f003 0307 	and.w	r3, r3, #7
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	db0b      	blt.n	8001e26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	f003 021f 	and.w	r2, r3, #31
 8001e14:	4907      	ldr	r1, [pc, #28]	; (8001e34 <__NVIC_EnableIRQ+0x38>)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000e100 	.word	0xe000e100

08001e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	6039      	str	r1, [r7, #0]
 8001e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	db0a      	blt.n	8001e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	490c      	ldr	r1, [pc, #48]	; (8001e84 <__NVIC_SetPriority+0x4c>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	0112      	lsls	r2, r2, #4
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e60:	e00a      	b.n	8001e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4908      	ldr	r1, [pc, #32]	; (8001e88 <__NVIC_SetPriority+0x50>)
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	3b04      	subs	r3, #4
 8001e70:	0112      	lsls	r2, r2, #4
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	440b      	add	r3, r1
 8001e76:	761a      	strb	r2, [r3, #24]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000e100 	.word	0xe000e100
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b089      	sub	sp, #36	; 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f1c3 0307 	rsb	r3, r3, #7
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	bf28      	it	cs
 8001eaa:	2304      	movcs	r3, #4
 8001eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d902      	bls.n	8001ebc <NVIC_EncodePriority+0x30>
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3b03      	subs	r3, #3
 8001eba:	e000      	b.n	8001ebe <NVIC_EncodePriority+0x32>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	401a      	ands	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	43d9      	mvns	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	4313      	orrs	r3, r2
         );
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	; 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f04:	d301      	bcc.n	8001f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f06:	2301      	movs	r3, #1
 8001f08:	e00f      	b.n	8001f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <SysTick_Config+0x40>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f12:	210f      	movs	r1, #15
 8001f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f18:	f7ff ff8e 	bl	8001e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <SysTick_Config+0x40>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f22:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <SysTick_Config+0x40>)
 8001f24:	2207      	movs	r2, #7
 8001f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	e000e010 	.word	0xe000e010

08001f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ff29 	bl	8001d98 <__NVIC_SetPriorityGrouping>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	4603      	mov	r3, r0
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f60:	f7ff ff3e 	bl	8001de0 <__NVIC_GetPriorityGrouping>
 8001f64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	6978      	ldr	r0, [r7, #20]
 8001f6c:	f7ff ff8e 	bl	8001e8c <NVIC_EncodePriority>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff5d 	bl	8001e38 <__NVIC_SetPriority>
}
 8001f7e:	bf00      	nop
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff31 	bl	8001dfc <__NVIC_EnableIRQ>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ffa2 	bl	8001ef4 <SysTick_Config>
 8001fb0:	4603      	mov	r3, r0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fca:	e17f      	b.n	80022cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 8171 	beq.w	80022c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d005      	beq.n	8001ffc <HAL_GPIO_Init+0x40>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d130      	bne.n	800205e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002032:	2201      	movs	r2, #1
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	091b      	lsrs	r3, r3, #4
 8002048:	f003 0201 	and.w	r2, r3, #1
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	2b03      	cmp	r3, #3
 8002068:	d118      	bne.n	800209c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002070:	2201      	movs	r2, #1
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	08db      	lsrs	r3, r3, #3
 8002086:	f003 0201 	and.w	r2, r3, #1
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d017      	beq.n	80020d8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	2203      	movs	r2, #3
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d123      	bne.n	800212c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	08da      	lsrs	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3208      	adds	r2, #8
 80020ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	220f      	movs	r2, #15
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	08da      	lsrs	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3208      	adds	r2, #8
 8002126:	6939      	ldr	r1, [r7, #16]
 8002128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	2203      	movs	r2, #3
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0203 	and.w	r2, r3, #3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80ac 	beq.w	80022c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216e:	4b5f      	ldr	r3, [pc, #380]	; (80022ec <HAL_GPIO_Init+0x330>)
 8002170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002172:	4a5e      	ldr	r2, [pc, #376]	; (80022ec <HAL_GPIO_Init+0x330>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6613      	str	r3, [r2, #96]	; 0x60
 800217a:	4b5c      	ldr	r3, [pc, #368]	; (80022ec <HAL_GPIO_Init+0x330>)
 800217c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002186:	4a5a      	ldr	r2, [pc, #360]	; (80022f0 <HAL_GPIO_Init+0x334>)
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	3302      	adds	r3, #2
 800218e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002192:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	220f      	movs	r2, #15
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021b0:	d025      	beq.n	80021fe <HAL_GPIO_Init+0x242>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4f      	ldr	r2, [pc, #316]	; (80022f4 <HAL_GPIO_Init+0x338>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d01f      	beq.n	80021fa <HAL_GPIO_Init+0x23e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4e      	ldr	r2, [pc, #312]	; (80022f8 <HAL_GPIO_Init+0x33c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d019      	beq.n	80021f6 <HAL_GPIO_Init+0x23a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a4d      	ldr	r2, [pc, #308]	; (80022fc <HAL_GPIO_Init+0x340>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <HAL_GPIO_Init+0x236>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4c      	ldr	r2, [pc, #304]	; (8002300 <HAL_GPIO_Init+0x344>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00d      	beq.n	80021ee <HAL_GPIO_Init+0x232>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4b      	ldr	r2, [pc, #300]	; (8002304 <HAL_GPIO_Init+0x348>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d007      	beq.n	80021ea <HAL_GPIO_Init+0x22e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4a      	ldr	r2, [pc, #296]	; (8002308 <HAL_GPIO_Init+0x34c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d101      	bne.n	80021e6 <HAL_GPIO_Init+0x22a>
 80021e2:	2306      	movs	r3, #6
 80021e4:	e00c      	b.n	8002200 <HAL_GPIO_Init+0x244>
 80021e6:	2307      	movs	r3, #7
 80021e8:	e00a      	b.n	8002200 <HAL_GPIO_Init+0x244>
 80021ea:	2305      	movs	r3, #5
 80021ec:	e008      	b.n	8002200 <HAL_GPIO_Init+0x244>
 80021ee:	2304      	movs	r3, #4
 80021f0:	e006      	b.n	8002200 <HAL_GPIO_Init+0x244>
 80021f2:	2303      	movs	r3, #3
 80021f4:	e004      	b.n	8002200 <HAL_GPIO_Init+0x244>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e002      	b.n	8002200 <HAL_GPIO_Init+0x244>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <HAL_GPIO_Init+0x244>
 80021fe:	2300      	movs	r3, #0
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	f002 0203 	and.w	r2, r2, #3
 8002206:	0092      	lsls	r2, r2, #2
 8002208:	4093      	lsls	r3, r2
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002210:	4937      	ldr	r1, [pc, #220]	; (80022f0 <HAL_GPIO_Init+0x334>)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	3302      	adds	r3, #2
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800221e:	4b3b      	ldr	r3, [pc, #236]	; (800230c <HAL_GPIO_Init+0x350>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	43db      	mvns	r3, r3
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4013      	ands	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002242:	4a32      	ldr	r2, [pc, #200]	; (800230c <HAL_GPIO_Init+0x350>)
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002248:	4b30      	ldr	r3, [pc, #192]	; (800230c <HAL_GPIO_Init+0x350>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	43db      	mvns	r3, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800226c:	4a27      	ldr	r2, [pc, #156]	; (800230c <HAL_GPIO_Init+0x350>)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002272:	4b26      	ldr	r3, [pc, #152]	; (800230c <HAL_GPIO_Init+0x350>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	43db      	mvns	r3, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4013      	ands	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002296:	4a1d      	ldr	r2, [pc, #116]	; (800230c <HAL_GPIO_Init+0x350>)
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800229c:	4b1b      	ldr	r3, [pc, #108]	; (800230c <HAL_GPIO_Init+0x350>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022c0:	4a12      	ldr	r2, [pc, #72]	; (800230c <HAL_GPIO_Init+0x350>)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3301      	adds	r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	fa22 f303 	lsr.w	r3, r2, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f47f ae78 	bne.w	8001fcc <HAL_GPIO_Init+0x10>
  }
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	371c      	adds	r7, #28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40010000 	.word	0x40010000
 80022f4:	48000400 	.word	0x48000400
 80022f8:	48000800 	.word	0x48000800
 80022fc:	48000c00 	.word	0x48000c00
 8002300:	48001000 	.word	0x48001000
 8002304:	48001400 	.word	0x48001400
 8002308:	48001800 	.word	0x48001800
 800230c:	40010400 	.word	0x40010400

08002310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	807b      	strh	r3, [r7, #2]
 800231c:	4613      	mov	r3, r2
 800231e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002320:	787b      	ldrb	r3, [r7, #1]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002326:	887a      	ldrh	r2, [r7, #2]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800232c:	e002      	b.n	8002334 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800234a:	4b08      	ldr	r3, [pc, #32]	; (800236c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	88fb      	ldrh	r3, [r7, #6]
 8002350:	4013      	ands	r3, r2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d006      	beq.n	8002364 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002356:	4a05      	ldr	r2, [pc, #20]	; (800236c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe ff96 	bl	8001290 <HAL_GPIO_EXTI_Callback>
  }
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40010400 	.word	0x40010400

08002370 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e081      	b.n	8002486 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7fe fe36 	bl	8001008 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2224      	movs	r2, #36	; 0x24
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0201 	bic.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d107      	bne.n	80023ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	e006      	b.n	80023f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d104      	bne.n	800240a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002408:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800241c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800242c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69d9      	ldr	r1, [r3, #28]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1a      	ldr	r2, [r3, #32]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af02      	add	r7, sp, #8
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	4608      	mov	r0, r1
 800249a:	4611      	mov	r1, r2
 800249c:	461a      	mov	r2, r3
 800249e:	4603      	mov	r3, r0
 80024a0:	817b      	strh	r3, [r7, #10]
 80024a2:	460b      	mov	r3, r1
 80024a4:	813b      	strh	r3, [r7, #8]
 80024a6:	4613      	mov	r3, r2
 80024a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b20      	cmp	r3, #32
 80024b4:	f040 80f9 	bne.w	80026aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d002      	beq.n	80024c4 <HAL_I2C_Mem_Write+0x34>
 80024be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d105      	bne.n	80024d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0ed      	b.n	80026ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_I2C_Mem_Write+0x4e>
 80024da:	2302      	movs	r3, #2
 80024dc:	e0e6      	b.n	80026ac <HAL_I2C_Mem_Write+0x21c>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024e6:	f7ff fc4b 	bl	8001d80 <HAL_GetTick>
 80024ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	2319      	movs	r3, #25
 80024f2:	2201      	movs	r2, #1
 80024f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 fac3 	bl	8002a84 <I2C_WaitOnFlagUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0d1      	b.n	80026ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2221      	movs	r2, #33	; 0x21
 800250c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2240      	movs	r2, #64	; 0x40
 8002514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a3a      	ldr	r2, [r7, #32]
 8002522:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002528:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002530:	88f8      	ldrh	r0, [r7, #6]
 8002532:	893a      	ldrh	r2, [r7, #8]
 8002534:	8979      	ldrh	r1, [r7, #10]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	4603      	mov	r3, r0
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 f9d3 	bl	80028ec <I2C_RequestMemoryWrite>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0a9      	b.n	80026ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255c:	b29b      	uxth	r3, r3
 800255e:	2bff      	cmp	r3, #255	; 0xff
 8002560:	d90e      	bls.n	8002580 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	22ff      	movs	r2, #255	; 0xff
 8002566:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256c:	b2da      	uxtb	r2, r3
 800256e:	8979      	ldrh	r1, [r7, #10]
 8002570:	2300      	movs	r3, #0
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 fc2b 	bl	8002dd4 <I2C_TransferConfig>
 800257e:	e00f      	b.n	80025a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258e:	b2da      	uxtb	r2, r3
 8002590:	8979      	ldrh	r1, [r7, #10]
 8002592:	2300      	movs	r3, #0
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 fc1a 	bl	8002dd4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 faad 	bl	8002b04 <I2C_WaitOnTXISFlagUntilTimeout>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e07b      	b.n	80026ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	781a      	ldrb	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d034      	beq.n	8002658 <HAL_I2C_Mem_Write+0x1c8>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d130      	bne.n	8002658 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	2200      	movs	r2, #0
 80025fe:	2180      	movs	r1, #128	; 0x80
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 fa3f 	bl	8002a84 <I2C_WaitOnFlagUntilTimeout>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e04d      	b.n	80026ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002614:	b29b      	uxth	r3, r3
 8002616:	2bff      	cmp	r3, #255	; 0xff
 8002618:	d90e      	bls.n	8002638 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	22ff      	movs	r2, #255	; 0xff
 800261e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002624:	b2da      	uxtb	r2, r3
 8002626:	8979      	ldrh	r1, [r7, #10]
 8002628:	2300      	movs	r3, #0
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 fbcf 	bl	8002dd4 <I2C_TransferConfig>
 8002636:	e00f      	b.n	8002658 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002646:	b2da      	uxtb	r2, r3
 8002648:	8979      	ldrh	r1, [r7, #10]
 800264a:	2300      	movs	r3, #0
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fbbe 	bl	8002dd4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265c:	b29b      	uxth	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d19e      	bne.n	80025a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 fa8c 	bl	8002b84 <I2C_WaitOnSTOPFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e01a      	b.n	80026ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2220      	movs	r2, #32
 800267c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6859      	ldr	r1, [r3, #4]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <HAL_I2C_Mem_Write+0x224>)
 800268a:	400b      	ands	r3, r1
 800268c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	e000      	b.n	80026ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80026aa:	2302      	movs	r3, #2
  }
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	fe00e800 	.word	0xfe00e800

080026b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af02      	add	r7, sp, #8
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	4608      	mov	r0, r1
 80026c2:	4611      	mov	r1, r2
 80026c4:	461a      	mov	r2, r3
 80026c6:	4603      	mov	r3, r0
 80026c8:	817b      	strh	r3, [r7, #10]
 80026ca:	460b      	mov	r3, r1
 80026cc:	813b      	strh	r3, [r7, #8]
 80026ce:	4613      	mov	r3, r2
 80026d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b20      	cmp	r3, #32
 80026dc:	f040 80fd 	bne.w	80028da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_I2C_Mem_Read+0x34>
 80026e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d105      	bne.n	80026f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0f1      	b.n	80028dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_I2C_Mem_Read+0x4e>
 8002702:	2302      	movs	r3, #2
 8002704:	e0ea      	b.n	80028dc <HAL_I2C_Mem_Read+0x224>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800270e:	f7ff fb37 	bl	8001d80 <HAL_GetTick>
 8002712:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	2319      	movs	r3, #25
 800271a:	2201      	movs	r2, #1
 800271c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f9af 	bl	8002a84 <I2C_WaitOnFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e0d5      	b.n	80028dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2222      	movs	r2, #34	; 0x22
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2240      	movs	r2, #64	; 0x40
 800273c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a3a      	ldr	r2, [r7, #32]
 800274a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002750:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002758:	88f8      	ldrh	r0, [r7, #6]
 800275a:	893a      	ldrh	r2, [r7, #8]
 800275c:	8979      	ldrh	r1, [r7, #10]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	9301      	str	r3, [sp, #4]
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	4603      	mov	r3, r0
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f913 	bl	8002994 <I2C_RequestMemoryRead>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0ad      	b.n	80028dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002784:	b29b      	uxth	r3, r3
 8002786:	2bff      	cmp	r3, #255	; 0xff
 8002788:	d90e      	bls.n	80027a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	22ff      	movs	r2, #255	; 0xff
 800278e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002794:	b2da      	uxtb	r2, r3
 8002796:	8979      	ldrh	r1, [r7, #10]
 8002798:	4b52      	ldr	r3, [pc, #328]	; (80028e4 <HAL_I2C_Mem_Read+0x22c>)
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 fb17 	bl	8002dd4 <I2C_TransferConfig>
 80027a6:	e00f      	b.n	80027c8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	8979      	ldrh	r1, [r7, #10]
 80027ba:	4b4a      	ldr	r3, [pc, #296]	; (80028e4 <HAL_I2C_Mem_Read+0x22c>)
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 fb06 	bl	8002dd4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ce:	2200      	movs	r2, #0
 80027d0:	2104      	movs	r1, #4
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f956 	bl	8002a84 <I2C_WaitOnFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e07c      	b.n	80028dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d034      	beq.n	8002888 <HAL_I2C_Mem_Read+0x1d0>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002822:	2b00      	cmp	r3, #0
 8002824:	d130      	bne.n	8002888 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282c:	2200      	movs	r2, #0
 800282e:	2180      	movs	r1, #128	; 0x80
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 f927 	bl	8002a84 <I2C_WaitOnFlagUntilTimeout>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e04d      	b.n	80028dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29b      	uxth	r3, r3
 8002846:	2bff      	cmp	r3, #255	; 0xff
 8002848:	d90e      	bls.n	8002868 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	22ff      	movs	r2, #255	; 0xff
 800284e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002854:	b2da      	uxtb	r2, r3
 8002856:	8979      	ldrh	r1, [r7, #10]
 8002858:	2300      	movs	r3, #0
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 fab7 	bl	8002dd4 <I2C_TransferConfig>
 8002866:	e00f      	b.n	8002888 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002876:	b2da      	uxtb	r2, r3
 8002878:	8979      	ldrh	r1, [r7, #10]
 800287a:	2300      	movs	r3, #0
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 faa6 	bl	8002dd4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d19a      	bne.n	80027c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f974 	bl	8002b84 <I2C_WaitOnSTOPFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e01a      	b.n	80028dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2220      	movs	r2, #32
 80028ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6859      	ldr	r1, [r3, #4]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_I2C_Mem_Read+0x230>)
 80028ba:	400b      	ands	r3, r1
 80028bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	e000      	b.n	80028dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80028da:	2302      	movs	r3, #2
  }
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	80002400 	.word	0x80002400
 80028e8:	fe00e800 	.word	0xfe00e800

080028ec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	4608      	mov	r0, r1
 80028f6:	4611      	mov	r1, r2
 80028f8:	461a      	mov	r2, r3
 80028fa:	4603      	mov	r3, r0
 80028fc:	817b      	strh	r3, [r7, #10]
 80028fe:	460b      	mov	r3, r1
 8002900:	813b      	strh	r3, [r7, #8]
 8002902:	4613      	mov	r3, r2
 8002904:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002906:	88fb      	ldrh	r3, [r7, #6]
 8002908:	b2da      	uxtb	r2, r3
 800290a:	8979      	ldrh	r1, [r7, #10]
 800290c:	4b20      	ldr	r3, [pc, #128]	; (8002990 <I2C_RequestMemoryWrite+0xa4>)
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 fa5d 	bl	8002dd4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	69b9      	ldr	r1, [r7, #24]
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f8f0 	bl	8002b04 <I2C_WaitOnTXISFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e02c      	b.n	8002988 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d105      	bne.n	8002940 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002934:	893b      	ldrh	r3, [r7, #8]
 8002936:	b2da      	uxtb	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	629a      	str	r2, [r3, #40]	; 0x28
 800293e:	e015      	b.n	800296c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002940:	893b      	ldrh	r3, [r7, #8]
 8002942:	0a1b      	lsrs	r3, r3, #8
 8002944:	b29b      	uxth	r3, r3
 8002946:	b2da      	uxtb	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800294e:	69fa      	ldr	r2, [r7, #28]
 8002950:	69b9      	ldr	r1, [r7, #24]
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 f8d6 	bl	8002b04 <I2C_WaitOnTXISFlagUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e012      	b.n	8002988 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002962:	893b      	ldrh	r3, [r7, #8]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2200      	movs	r2, #0
 8002974:	2180      	movs	r1, #128	; 0x80
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 f884 	bl	8002a84 <I2C_WaitOnFlagUntilTimeout>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	80002000 	.word	0x80002000

08002994 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	4608      	mov	r0, r1
 800299e:	4611      	mov	r1, r2
 80029a0:	461a      	mov	r2, r3
 80029a2:	4603      	mov	r3, r0
 80029a4:	817b      	strh	r3, [r7, #10]
 80029a6:	460b      	mov	r3, r1
 80029a8:	813b      	strh	r3, [r7, #8]
 80029aa:	4613      	mov	r3, r2
 80029ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	8979      	ldrh	r1, [r7, #10]
 80029b4:	4b20      	ldr	r3, [pc, #128]	; (8002a38 <I2C_RequestMemoryRead+0xa4>)
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2300      	movs	r3, #0
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 fa0a 	bl	8002dd4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	69b9      	ldr	r1, [r7, #24]
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 f89d 	bl	8002b04 <I2C_WaitOnTXISFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e02c      	b.n	8002a2e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d105      	bne.n	80029e6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029da:	893b      	ldrh	r3, [r7, #8]
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28
 80029e4:	e015      	b.n	8002a12 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029e6:	893b      	ldrh	r3, [r7, #8]
 80029e8:	0a1b      	lsrs	r3, r3, #8
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029f4:	69fa      	ldr	r2, [r7, #28]
 80029f6:	69b9      	ldr	r1, [r7, #24]
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 f883 	bl	8002b04 <I2C_WaitOnTXISFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e012      	b.n	8002a2e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a08:	893b      	ldrh	r3, [r7, #8]
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2140      	movs	r1, #64	; 0x40
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f831 	bl	8002a84 <I2C_WaitOnFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	80002000 	.word	0x80002000

08002a3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d103      	bne.n	8002a5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2200      	movs	r2, #0
 8002a58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d007      	beq.n	8002a78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699a      	ldr	r2, [r3, #24]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	619a      	str	r2, [r3, #24]
  }
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	4613      	mov	r3, r2
 8002a92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a94:	e022      	b.n	8002adc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a9c:	d01e      	beq.n	8002adc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a9e:	f7ff f96f 	bl	8001d80 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d302      	bcc.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d113      	bne.n	8002adc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e00f      	b.n	8002afc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d0cd      	beq.n	8002a96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b10:	e02c      	b.n	8002b6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f870 	bl	8002bfc <I2C_IsErrorOccurred>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e02a      	b.n	8002b7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b2c:	d01e      	beq.n	8002b6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2e:	f7ff f927 	bl	8001d80 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d302      	bcc.n	8002b44 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d113      	bne.n	8002b6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b48:	f043 0220 	orr.w	r2, r3, #32
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e007      	b.n	8002b7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d1cb      	bne.n	8002b12 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b90:	e028      	b.n	8002be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68b9      	ldr	r1, [r7, #8]
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f830 	bl	8002bfc <I2C_IsErrorOccurred>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e026      	b.n	8002bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba6:	f7ff f8eb 	bl	8001d80 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d302      	bcc.n	8002bbc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d113      	bne.n	8002be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc0:	f043 0220 	orr.w	r2, r3, #32
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e007      	b.n	8002bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	f003 0320 	and.w	r3, r3, #32
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	d1cf      	bne.n	8002b92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	; 0x28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	f003 0310 	and.w	r3, r3, #16
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d075      	beq.n	8002d14 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2210      	movs	r2, #16
 8002c2e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c30:	e056      	b.n	8002ce0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c38:	d052      	beq.n	8002ce0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c3a:	f7ff f8a1 	bl	8001d80 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d302      	bcc.n	8002c50 <I2C_IsErrorOccurred+0x54>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d147      	bne.n	8002ce0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c62:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c72:	d12e      	bne.n	8002cd2 <I2C_IsErrorOccurred+0xd6>
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c7a:	d02a      	beq.n	8002cd2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002c7c:	7cfb      	ldrb	r3, [r7, #19]
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	d027      	beq.n	8002cd2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c90:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c92:	f7ff f875 	bl	8001d80 <HAL_GetTick>
 8002c96:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c98:	e01b      	b.n	8002cd2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c9a:	f7ff f871 	bl	8001d80 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b19      	cmp	r3, #25
 8002ca6:	d914      	bls.n	8002cd2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	f043 0220 	orr.w	r2, r3, #32
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d1dc      	bne.n	8002c9a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	d003      	beq.n	8002cf6 <I2C_IsErrorOccurred+0xfa>
 8002cee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d09d      	beq.n	8002c32 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d103      	bne.n	8002d06 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2220      	movs	r2, #32
 8002d04:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	f043 0304 	orr.w	r3, r3, #4
 8002d0c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00b      	beq.n	8002d3e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00b      	beq.n	8002d60 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	f043 0308 	orr.w	r3, r3, #8
 8002d4e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00b      	beq.n	8002d82 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	f043 0302 	orr.w	r3, r3, #2
 8002d70:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002d82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d01c      	beq.n	8002dc4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f7ff fe56 	bl	8002a3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6859      	ldr	r1, [r3, #4]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <I2C_IsErrorOccurred+0x1d4>)
 8002d9c:	400b      	ands	r3, r1
 8002d9e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3728      	adds	r7, #40	; 0x28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	fe00e800 	.word	0xfe00e800

08002dd4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	607b      	str	r3, [r7, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	817b      	strh	r3, [r7, #10]
 8002de2:	4613      	mov	r3, r2
 8002de4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002de6:	897b      	ldrh	r3, [r7, #10]
 8002de8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dec:	7a7b      	ldrb	r3, [r7, #9]
 8002dee:	041b      	lsls	r3, r3, #16
 8002df0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002df4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e02:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	0d5b      	lsrs	r3, r3, #21
 8002e0e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e12:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <I2C_TransferConfig+0x60>)
 8002e14:	430b      	orrs	r3, r1
 8002e16:	43db      	mvns	r3, r3
 8002e18:	ea02 0103 	and.w	r1, r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e26:	bf00      	nop
 8002e28:	371c      	adds	r7, #28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	03ff63ff 	.word	0x03ff63ff

08002e38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	d138      	bne.n	8002ec0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e032      	b.n	8002ec2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2224      	movs	r2, #36	; 0x24
 8002e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0201 	bic.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6819      	ldr	r1, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	e000      	b.n	8002ec2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ec0:	2302      	movs	r3, #2
  }
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b085      	sub	sp, #20
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d139      	bne.n	8002f58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e033      	b.n	8002f5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2224      	movs	r2, #36	; 0x24
 8002efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0201 	bic.w	r2, r2, #1
 8002f10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	021b      	lsls	r3, r3, #8
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	e000      	b.n	8002f5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f58:	2302      	movs	r3, #2
  }
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a04      	ldr	r2, [pc, #16]	; (8002f84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f76:	6013      	str	r3, [r2, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40007000 	.word	0x40007000

08002f88 <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8002f90:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	401a      	ands	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	095b      	lsrs	r3, r3, #5
 8002fa2:	4908      	ldr	r1, [pc, #32]	; (8002fc4 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f003 031f 	and.w	r3, r3, #31
 8002fb2:	4904      	ldr	r1, [pc, #16]	; (8002fc4 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	608b      	str	r3, [r1, #8]


}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	40007000 	.word	0x40007000

08002fc8 <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8002fd0:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <HAL_PWR_DisableWakeUpPin+0x28>)
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f003 031f 	and.w	r3, r3, #31
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	4904      	ldr	r1, [pc, #16]	; (8002ff0 <HAL_PWR_DisableWakeUpPin+0x28>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40007000 	.word	0x40007000

08002ff4 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8002ff8:	4b09      	ldr	r3, [pc, #36]	; (8003020 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f023 0307 	bic.w	r3, r3, #7
 8003000:	4a07      	ldr	r2, [pc, #28]	; (8003020 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003002:	f043 0303 	orr.w	r3, r3, #3
 8003006:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003008:	4b06      	ldr	r3, [pc, #24]	; (8003024 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	4a05      	ldr	r2, [pc, #20]	; (8003024 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800300e:	f043 0304 	orr.w	r3, r3, #4
 8003012:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003014:	bf30      	wfi
}
 8003016:	bf00      	nop
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	40007000 	.word	0x40007000
 8003024:	e000ed00 	.word	0xe000ed00

08003028 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <HAL_PWREx_GetVoltageRange+0x18>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40007000 	.word	0x40007000

08003044 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003052:	d130      	bne.n	80030b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003054:	4b23      	ldr	r3, [pc, #140]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800305c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003060:	d038      	beq.n	80030d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003062:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800306a:	4a1e      	ldr	r2, [pc, #120]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800306c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003070:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003072:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2232      	movs	r2, #50	; 0x32
 8003078:	fb02 f303 	mul.w	r3, r2, r3
 800307c:	4a1b      	ldr	r2, [pc, #108]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	0c9b      	lsrs	r3, r3, #18
 8003084:	3301      	adds	r3, #1
 8003086:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003088:	e002      	b.n	8003090 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3b01      	subs	r3, #1
 800308e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003090:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309c:	d102      	bne.n	80030a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1f2      	bne.n	800308a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030a4:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030b0:	d110      	bne.n	80030d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e00f      	b.n	80030d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030b6:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c2:	d007      	beq.n	80030d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030c4:	4b07      	ldr	r3, [pc, #28]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030cc:	4a05      	ldr	r2, [pc, #20]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40007000 	.word	0x40007000
 80030e8:	20000000 	.word	0x20000000
 80030ec:	431bde83 	.word	0x431bde83

080030f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e3ca      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003102:	4b97      	ldr	r3, [pc, #604]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
 800310a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800310c:	4b94      	ldr	r3, [pc, #592]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 80e4 	beq.w	80032ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d007      	beq.n	800313a <HAL_RCC_OscConfig+0x4a>
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2b0c      	cmp	r3, #12
 800312e:	f040 808b 	bne.w	8003248 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2b01      	cmp	r3, #1
 8003136:	f040 8087 	bne.w	8003248 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800313a:	4b89      	ldr	r3, [pc, #548]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d005      	beq.n	8003152 <HAL_RCC_OscConfig+0x62>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e3a2      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1a      	ldr	r2, [r3, #32]
 8003156:	4b82      	ldr	r3, [pc, #520]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d004      	beq.n	800316c <HAL_RCC_OscConfig+0x7c>
 8003162:	4b7f      	ldr	r3, [pc, #508]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800316a:	e005      	b.n	8003178 <HAL_RCC_OscConfig+0x88>
 800316c:	4b7c      	ldr	r3, [pc, #496]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 800316e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003178:	4293      	cmp	r3, r2
 800317a:	d223      	bcs.n	80031c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	4618      	mov	r0, r3
 8003182:	f000 fd55 	bl	8003c30 <RCC_SetFlashLatencyFromMSIRange>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e383      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003190:	4b73      	ldr	r3, [pc, #460]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a72      	ldr	r2, [pc, #456]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 8003196:	f043 0308 	orr.w	r3, r3, #8
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	4b70      	ldr	r3, [pc, #448]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	496d      	ldr	r1, [pc, #436]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ae:	4b6c      	ldr	r3, [pc, #432]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	021b      	lsls	r3, r3, #8
 80031bc:	4968      	ldr	r1, [pc, #416]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
 80031c2:	e025      	b.n	8003210 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031c4:	4b66      	ldr	r3, [pc, #408]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a65      	ldr	r2, [pc, #404]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 80031ca:	f043 0308 	orr.w	r3, r3, #8
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	4b63      	ldr	r3, [pc, #396]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	4960      	ldr	r1, [pc, #384]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031e2:	4b5f      	ldr	r3, [pc, #380]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	495b      	ldr	r1, [pc, #364]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d109      	bne.n	8003210 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fd15 	bl	8003c30 <RCC_SetFlashLatencyFromMSIRange>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e343      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003210:	f000 fc4a 	bl	8003aa8 <HAL_RCC_GetSysClockFreq>
 8003214:	4602      	mov	r2, r0
 8003216:	4b52      	ldr	r3, [pc, #328]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	091b      	lsrs	r3, r3, #4
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	4950      	ldr	r1, [pc, #320]	; (8003364 <HAL_RCC_OscConfig+0x274>)
 8003222:	5ccb      	ldrb	r3, [r1, r3]
 8003224:	f003 031f 	and.w	r3, r3, #31
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
 800322c:	4a4e      	ldr	r2, [pc, #312]	; (8003368 <HAL_RCC_OscConfig+0x278>)
 800322e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003230:	4b4e      	ldr	r3, [pc, #312]	; (800336c <HAL_RCC_OscConfig+0x27c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7fe fd53 	bl	8001ce0 <HAL_InitTick>
 800323a:	4603      	mov	r3, r0
 800323c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d052      	beq.n	80032ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	e327      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d032      	beq.n	80032b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003250:	4b43      	ldr	r3, [pc, #268]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a42      	ldr	r2, [pc, #264]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800325c:	f7fe fd90 	bl	8001d80 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003264:	f7fe fd8c 	bl	8001d80 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e310      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003276:	4b3a      	ldr	r3, [pc, #232]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003282:	4b37      	ldr	r3, [pc, #220]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a36      	ldr	r2, [pc, #216]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 8003288:	f043 0308 	orr.w	r3, r3, #8
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	4b34      	ldr	r3, [pc, #208]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	4931      	ldr	r1, [pc, #196]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 800329c:	4313      	orrs	r3, r2
 800329e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032a0:	4b2f      	ldr	r3, [pc, #188]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	021b      	lsls	r3, r3, #8
 80032ae:	492c      	ldr	r1, [pc, #176]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
 80032b4:	e01a      	b.n	80032ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032b6:	4b2a      	ldr	r3, [pc, #168]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a29      	ldr	r2, [pc, #164]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032c2:	f7fe fd5d 	bl	8001d80 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032ca:	f7fe fd59 	bl	8001d80 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e2dd      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032dc:	4b20      	ldr	r3, [pc, #128]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f0      	bne.n	80032ca <HAL_RCC_OscConfig+0x1da>
 80032e8:	e000      	b.n	80032ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d074      	beq.n	80033e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d005      	beq.n	800330a <HAL_RCC_OscConfig+0x21a>
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b0c      	cmp	r3, #12
 8003302:	d10e      	bne.n	8003322 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2b03      	cmp	r3, #3
 8003308:	d10b      	bne.n	8003322 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330a:	4b15      	ldr	r3, [pc, #84]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d064      	beq.n	80033e0 <HAL_RCC_OscConfig+0x2f0>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d160      	bne.n	80033e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e2ba      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332a:	d106      	bne.n	800333a <HAL_RCC_OscConfig+0x24a>
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a0b      	ldr	r2, [pc, #44]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 8003332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	e026      	b.n	8003388 <HAL_RCC_OscConfig+0x298>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003342:	d115      	bne.n	8003370 <HAL_RCC_OscConfig+0x280>
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a05      	ldr	r2, [pc, #20]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 800334a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	4b03      	ldr	r3, [pc, #12]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a02      	ldr	r2, [pc, #8]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 8003356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	e014      	b.n	8003388 <HAL_RCC_OscConfig+0x298>
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000
 8003364:	0800894c 	.word	0x0800894c
 8003368:	20000000 	.word	0x20000000
 800336c:	20000004 	.word	0x20000004
 8003370:	4ba0      	ldr	r3, [pc, #640]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a9f      	ldr	r2, [pc, #636]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 8003376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800337a:	6013      	str	r3, [r2, #0]
 800337c:	4b9d      	ldr	r3, [pc, #628]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a9c      	ldr	r2, [pc, #624]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 8003382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d013      	beq.n	80033b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fe fcf6 	bl	8001d80 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003398:	f7fe fcf2 	bl	8001d80 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	; 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e276      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033aa:	4b92      	ldr	r3, [pc, #584]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0x2a8>
 80033b6:	e014      	b.n	80033e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fe fce2 	bl	8001d80 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c0:	f7fe fcde 	bl	8001d80 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b64      	cmp	r3, #100	; 0x64
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e262      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033d2:	4b88      	ldr	r3, [pc, #544]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0x2d0>
 80033de:	e000      	b.n	80033e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d060      	beq.n	80034b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_OscConfig+0x310>
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	2b0c      	cmp	r3, #12
 80033f8:	d119      	bne.n	800342e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d116      	bne.n	800342e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003400:	4b7c      	ldr	r3, [pc, #496]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <HAL_RCC_OscConfig+0x328>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e23f      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003418:	4b76      	ldr	r3, [pc, #472]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	061b      	lsls	r3, r3, #24
 8003426:	4973      	ldr	r1, [pc, #460]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 8003428:	4313      	orrs	r3, r2
 800342a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800342c:	e040      	b.n	80034b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d023      	beq.n	800347e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003436:	4b6f      	ldr	r3, [pc, #444]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a6e      	ldr	r2, [pc, #440]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 800343c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003442:	f7fe fc9d 	bl	8001d80 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800344a:	f7fe fc99 	bl	8001d80 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e21d      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800345c:	4b65      	ldr	r3, [pc, #404]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003468:	4b62      	ldr	r3, [pc, #392]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	061b      	lsls	r3, r3, #24
 8003476:	495f      	ldr	r1, [pc, #380]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 8003478:	4313      	orrs	r3, r2
 800347a:	604b      	str	r3, [r1, #4]
 800347c:	e018      	b.n	80034b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800347e:	4b5d      	ldr	r3, [pc, #372]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a5c      	ldr	r2, [pc, #368]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 8003484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348a:	f7fe fc79 	bl	8001d80 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003492:	f7fe fc75 	bl	8001d80 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e1f9      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034a4:	4b53      	ldr	r3, [pc, #332]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f0      	bne.n	8003492 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d03c      	beq.n	8003536 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d01c      	beq.n	80034fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034c4:	4b4b      	ldr	r3, [pc, #300]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 80034c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ca:	4a4a      	ldr	r2, [pc, #296]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d4:	f7fe fc54 	bl	8001d80 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034dc:	f7fe fc50 	bl	8001d80 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e1d4      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034ee:	4b41      	ldr	r3, [pc, #260]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 80034f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0ef      	beq.n	80034dc <HAL_RCC_OscConfig+0x3ec>
 80034fc:	e01b      	b.n	8003536 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034fe:	4b3d      	ldr	r3, [pc, #244]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 8003500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003504:	4a3b      	ldr	r2, [pc, #236]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 8003506:	f023 0301 	bic.w	r3, r3, #1
 800350a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350e:	f7fe fc37 	bl	8001d80 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003516:	f7fe fc33 	bl	8001d80 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e1b7      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003528:	4b32      	ldr	r3, [pc, #200]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 800352a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1ef      	bne.n	8003516 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 80a6 	beq.w	8003690 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003544:	2300      	movs	r3, #0
 8003546:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003548:	4b2a      	ldr	r3, [pc, #168]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 800354a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10d      	bne.n	8003570 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003554:	4b27      	ldr	r3, [pc, #156]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 8003556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003558:	4a26      	ldr	r2, [pc, #152]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 800355a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355e:	6593      	str	r3, [r2, #88]	; 0x58
 8003560:	4b24      	ldr	r3, [pc, #144]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 8003562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800356c:	2301      	movs	r3, #1
 800356e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003570:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <HAL_RCC_OscConfig+0x508>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003578:	2b00      	cmp	r3, #0
 800357a:	d118      	bne.n	80035ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800357c:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <HAL_RCC_OscConfig+0x508>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1d      	ldr	r2, [pc, #116]	; (80035f8 <HAL_RCC_OscConfig+0x508>)
 8003582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003586:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003588:	f7fe fbfa 	bl	8001d80 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003590:	f7fe fbf6 	bl	8001d80 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e17a      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035a2:	4b15      	ldr	r3, [pc, #84]	; (80035f8 <HAL_RCC_OscConfig+0x508>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0f0      	beq.n	8003590 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d108      	bne.n	80035c8 <HAL_RCC_OscConfig+0x4d8>
 80035b6:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 80035b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035bc:	4a0d      	ldr	r2, [pc, #52]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035c6:	e029      	b.n	800361c <HAL_RCC_OscConfig+0x52c>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	2b05      	cmp	r3, #5
 80035ce:	d115      	bne.n	80035fc <HAL_RCC_OscConfig+0x50c>
 80035d0:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d6:	4a07      	ldr	r2, [pc, #28]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 80035d8:	f043 0304 	orr.w	r3, r3, #4
 80035dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035e0:	4b04      	ldr	r3, [pc, #16]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 80035e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e6:	4a03      	ldr	r2, [pc, #12]	; (80035f4 <HAL_RCC_OscConfig+0x504>)
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035f0:	e014      	b.n	800361c <HAL_RCC_OscConfig+0x52c>
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000
 80035f8:	40007000 	.word	0x40007000
 80035fc:	4b9c      	ldr	r3, [pc, #624]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 80035fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003602:	4a9b      	ldr	r2, [pc, #620]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800360c:	4b98      	ldr	r3, [pc, #608]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 800360e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003612:	4a97      	ldr	r2, [pc, #604]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 8003614:	f023 0304 	bic.w	r3, r3, #4
 8003618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d016      	beq.n	8003652 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003624:	f7fe fbac 	bl	8001d80 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800362a:	e00a      	b.n	8003642 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362c:	f7fe fba8 	bl	8001d80 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	; 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e12a      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003642:	4b8b      	ldr	r3, [pc, #556]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 8003644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0ed      	beq.n	800362c <HAL_RCC_OscConfig+0x53c>
 8003650:	e015      	b.n	800367e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003652:	f7fe fb95 	bl	8001d80 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003658:	e00a      	b.n	8003670 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365a:	f7fe fb91 	bl	8001d80 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f241 3288 	movw	r2, #5000	; 0x1388
 8003668:	4293      	cmp	r3, r2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e113      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003670:	4b7f      	ldr	r3, [pc, #508]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1ed      	bne.n	800365a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800367e:	7ffb      	ldrb	r3, [r7, #31]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d105      	bne.n	8003690 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003684:	4b7a      	ldr	r3, [pc, #488]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 8003686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003688:	4a79      	ldr	r2, [pc, #484]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 800368a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80fe 	beq.w	8003896 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	2b02      	cmp	r3, #2
 80036a0:	f040 80d0 	bne.w	8003844 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80036a4:	4b72      	ldr	r3, [pc, #456]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f003 0203 	and.w	r2, r3, #3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d130      	bne.n	800371a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	3b01      	subs	r3, #1
 80036c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d127      	bne.n	800371a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d11f      	bne.n	800371a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036e4:	2a07      	cmp	r2, #7
 80036e6:	bf14      	ite	ne
 80036e8:	2201      	movne	r2, #1
 80036ea:	2200      	moveq	r2, #0
 80036ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d113      	bne.n	800371a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fc:	085b      	lsrs	r3, r3, #1
 80036fe:	3b01      	subs	r3, #1
 8003700:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003702:	429a      	cmp	r2, r3
 8003704:	d109      	bne.n	800371a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	085b      	lsrs	r3, r3, #1
 8003712:	3b01      	subs	r3, #1
 8003714:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003716:	429a      	cmp	r2, r3
 8003718:	d06e      	beq.n	80037f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	2b0c      	cmp	r3, #12
 800371e:	d069      	beq.n	80037f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003720:	4b53      	ldr	r3, [pc, #332]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d105      	bne.n	8003738 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800372c:	4b50      	ldr	r3, [pc, #320]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0ad      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800373c:	4b4c      	ldr	r3, [pc, #304]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a4b      	ldr	r2, [pc, #300]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 8003742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003746:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003748:	f7fe fb1a 	bl	8001d80 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003750:	f7fe fb16 	bl	8001d80 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e09a      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003762:	4b43      	ldr	r3, [pc, #268]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f0      	bne.n	8003750 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800376e:	4b40      	ldr	r3, [pc, #256]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	4b40      	ldr	r3, [pc, #256]	; (8003874 <HAL_RCC_OscConfig+0x784>)
 8003774:	4013      	ands	r3, r2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800377e:	3a01      	subs	r2, #1
 8003780:	0112      	lsls	r2, r2, #4
 8003782:	4311      	orrs	r1, r2
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003788:	0212      	lsls	r2, r2, #8
 800378a:	4311      	orrs	r1, r2
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003790:	0852      	lsrs	r2, r2, #1
 8003792:	3a01      	subs	r2, #1
 8003794:	0552      	lsls	r2, r2, #21
 8003796:	4311      	orrs	r1, r2
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800379c:	0852      	lsrs	r2, r2, #1
 800379e:	3a01      	subs	r2, #1
 80037a0:	0652      	lsls	r2, r2, #25
 80037a2:	4311      	orrs	r1, r2
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037a8:	0912      	lsrs	r2, r2, #4
 80037aa:	0452      	lsls	r2, r2, #17
 80037ac:	430a      	orrs	r2, r1
 80037ae:	4930      	ldr	r1, [pc, #192]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037b4:	4b2e      	ldr	r3, [pc, #184]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a2d      	ldr	r2, [pc, #180]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 80037ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037c0:	4b2b      	ldr	r3, [pc, #172]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	4a2a      	ldr	r2, [pc, #168]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 80037c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037cc:	f7fe fad8 	bl	8001d80 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d4:	f7fe fad4 	bl	8001d80 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e058      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037e6:	4b22      	ldr	r3, [pc, #136]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037f2:	e050      	b.n	8003896 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e04f      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037f8:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d148      	bne.n	8003896 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003804:	4b1a      	ldr	r3, [pc, #104]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a19      	ldr	r2, [pc, #100]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 800380a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800380e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003810:	4b17      	ldr	r3, [pc, #92]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	4a16      	ldr	r2, [pc, #88]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 8003816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800381a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800381c:	f7fe fab0 	bl	8001d80 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003824:	f7fe faac 	bl	8001d80 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e030      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003836:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0x734>
 8003842:	e028      	b.n	8003896 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	2b0c      	cmp	r3, #12
 8003848:	d023      	beq.n	8003892 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384a:	4b09      	ldr	r3, [pc, #36]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a08      	ldr	r2, [pc, #32]	; (8003870 <HAL_RCC_OscConfig+0x780>)
 8003850:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003856:	f7fe fa93 	bl	8001d80 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800385c:	e00c      	b.n	8003878 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385e:	f7fe fa8f 	bl	8001d80 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d905      	bls.n	8003878 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e013      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
 8003870:	40021000 	.word	0x40021000
 8003874:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003878:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <HAL_RCC_OscConfig+0x7b0>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1ec      	bne.n	800385e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <HAL_RCC_OscConfig+0x7b0>)
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	4905      	ldr	r1, [pc, #20]	; (80038a0 <HAL_RCC_OscConfig+0x7b0>)
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <HAL_RCC_OscConfig+0x7b4>)
 800388c:	4013      	ands	r3, r2
 800388e:	60cb      	str	r3, [r1, #12]
 8003890:	e001      	b.n	8003896 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3720      	adds	r7, #32
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021000 	.word	0x40021000
 80038a4:	feeefffc 	.word	0xfeeefffc

080038a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0e7      	b.n	8003a8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038bc:	4b75      	ldr	r3, [pc, #468]	; (8003a94 <HAL_RCC_ClockConfig+0x1ec>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d910      	bls.n	80038ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ca:	4b72      	ldr	r3, [pc, #456]	; (8003a94 <HAL_RCC_ClockConfig+0x1ec>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f023 0207 	bic.w	r2, r3, #7
 80038d2:	4970      	ldr	r1, [pc, #448]	; (8003a94 <HAL_RCC_ClockConfig+0x1ec>)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038da:	4b6e      	ldr	r3, [pc, #440]	; (8003a94 <HAL_RCC_ClockConfig+0x1ec>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d001      	beq.n	80038ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0cf      	b.n	8003a8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d010      	beq.n	800391a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	4b66      	ldr	r3, [pc, #408]	; (8003a98 <HAL_RCC_ClockConfig+0x1f0>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003904:	429a      	cmp	r2, r3
 8003906:	d908      	bls.n	800391a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003908:	4b63      	ldr	r3, [pc, #396]	; (8003a98 <HAL_RCC_ClockConfig+0x1f0>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4960      	ldr	r1, [pc, #384]	; (8003a98 <HAL_RCC_ClockConfig+0x1f0>)
 8003916:	4313      	orrs	r3, r2
 8003918:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d04c      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b03      	cmp	r3, #3
 800392c:	d107      	bne.n	800393e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392e:	4b5a      	ldr	r3, [pc, #360]	; (8003a98 <HAL_RCC_ClockConfig+0x1f0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d121      	bne.n	800397e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e0a6      	b.n	8003a8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d107      	bne.n	8003956 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003946:	4b54      	ldr	r3, [pc, #336]	; (8003a98 <HAL_RCC_ClockConfig+0x1f0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d115      	bne.n	800397e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e09a      	b.n	8003a8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d107      	bne.n	800396e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800395e:	4b4e      	ldr	r3, [pc, #312]	; (8003a98 <HAL_RCC_ClockConfig+0x1f0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e08e      	b.n	8003a8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800396e:	4b4a      	ldr	r3, [pc, #296]	; (8003a98 <HAL_RCC_ClockConfig+0x1f0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e086      	b.n	8003a8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800397e:	4b46      	ldr	r3, [pc, #280]	; (8003a98 <HAL_RCC_ClockConfig+0x1f0>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f023 0203 	bic.w	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4943      	ldr	r1, [pc, #268]	; (8003a98 <HAL_RCC_ClockConfig+0x1f0>)
 800398c:	4313      	orrs	r3, r2
 800398e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003990:	f7fe f9f6 	bl	8001d80 <HAL_GetTick>
 8003994:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003996:	e00a      	b.n	80039ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003998:	f7fe f9f2 	bl	8001d80 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e06e      	b.n	8003a8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ae:	4b3a      	ldr	r3, [pc, #232]	; (8003a98 <HAL_RCC_ClockConfig+0x1f0>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 020c 	and.w	r2, r3, #12
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	429a      	cmp	r2, r3
 80039be:	d1eb      	bne.n	8003998 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d010      	beq.n	80039ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	4b31      	ldr	r3, [pc, #196]	; (8003a98 <HAL_RCC_ClockConfig+0x1f0>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039d8:	429a      	cmp	r2, r3
 80039da:	d208      	bcs.n	80039ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039dc:	4b2e      	ldr	r3, [pc, #184]	; (8003a98 <HAL_RCC_ClockConfig+0x1f0>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	492b      	ldr	r1, [pc, #172]	; (8003a98 <HAL_RCC_ClockConfig+0x1f0>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039ee:	4b29      	ldr	r3, [pc, #164]	; (8003a94 <HAL_RCC_ClockConfig+0x1ec>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d210      	bcs.n	8003a1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fc:	4b25      	ldr	r3, [pc, #148]	; (8003a94 <HAL_RCC_ClockConfig+0x1ec>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f023 0207 	bic.w	r2, r3, #7
 8003a04:	4923      	ldr	r1, [pc, #140]	; (8003a94 <HAL_RCC_ClockConfig+0x1ec>)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0c:	4b21      	ldr	r3, [pc, #132]	; (8003a94 <HAL_RCC_ClockConfig+0x1ec>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d001      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e036      	b.n	8003a8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d008      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a2a:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <HAL_RCC_ClockConfig+0x1f0>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	4918      	ldr	r1, [pc, #96]	; (8003a98 <HAL_RCC_ClockConfig+0x1f0>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d009      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a48:	4b13      	ldr	r3, [pc, #76]	; (8003a98 <HAL_RCC_ClockConfig+0x1f0>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4910      	ldr	r1, [pc, #64]	; (8003a98 <HAL_RCC_ClockConfig+0x1f0>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a5c:	f000 f824 	bl	8003aa8 <HAL_RCC_GetSysClockFreq>
 8003a60:	4602      	mov	r2, r0
 8003a62:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <HAL_RCC_ClockConfig+0x1f0>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	091b      	lsrs	r3, r3, #4
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	490b      	ldr	r1, [pc, #44]	; (8003a9c <HAL_RCC_ClockConfig+0x1f4>)
 8003a6e:	5ccb      	ldrb	r3, [r1, r3]
 8003a70:	f003 031f 	and.w	r3, r3, #31
 8003a74:	fa22 f303 	lsr.w	r3, r2, r3
 8003a78:	4a09      	ldr	r2, [pc, #36]	; (8003aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8003a7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a7c:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <HAL_RCC_ClockConfig+0x1fc>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fe f92d 	bl	8001ce0 <HAL_InitTick>
 8003a86:	4603      	mov	r3, r0
 8003a88:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a8a:	7afb      	ldrb	r3, [r7, #11]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40022000 	.word	0x40022000
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	0800894c 	.word	0x0800894c
 8003aa0:	20000000 	.word	0x20000000
 8003aa4:	20000004 	.word	0x20000004

08003aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b089      	sub	sp, #36	; 0x24
 8003aac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ab6:	4b3e      	ldr	r3, [pc, #248]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ac0:	4b3b      	ldr	r3, [pc, #236]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_GetSysClockFreq+0x34>
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	2b0c      	cmp	r3, #12
 8003ad4:	d121      	bne.n	8003b1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d11e      	bne.n	8003b1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003adc:	4b34      	ldr	r3, [pc, #208]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d107      	bne.n	8003af8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ae8:	4b31      	ldr	r3, [pc, #196]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aee:	0a1b      	lsrs	r3, r3, #8
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	e005      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003af8:	4b2d      	ldr	r3, [pc, #180]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	091b      	lsrs	r3, r3, #4
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b04:	4a2b      	ldr	r2, [pc, #172]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10d      	bne.n	8003b30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b18:	e00a      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d102      	bne.n	8003b26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b20:	4b25      	ldr	r3, [pc, #148]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b22:	61bb      	str	r3, [r7, #24]
 8003b24:	e004      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d101      	bne.n	8003b30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b2c:	4b23      	ldr	r3, [pc, #140]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x114>)
 8003b2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	2b0c      	cmp	r3, #12
 8003b34:	d134      	bne.n	8003ba0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b36:	4b1e      	ldr	r3, [pc, #120]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d003      	beq.n	8003b4e <HAL_RCC_GetSysClockFreq+0xa6>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d003      	beq.n	8003b54 <HAL_RCC_GetSysClockFreq+0xac>
 8003b4c:	e005      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b4e:	4b1a      	ldr	r3, [pc, #104]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b50:	617b      	str	r3, [r7, #20]
      break;
 8003b52:	e005      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b54:	4b19      	ldr	r3, [pc, #100]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x114>)
 8003b56:	617b      	str	r3, [r7, #20]
      break;
 8003b58:	e002      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	617b      	str	r3, [r7, #20]
      break;
 8003b5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b60:	4b13      	ldr	r3, [pc, #76]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b6e:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	0a1b      	lsrs	r3, r3, #8
 8003b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	fb03 f202 	mul.w	r2, r3, r2
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b86:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	0e5b      	lsrs	r3, r3, #25
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	3301      	adds	r3, #1
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ba0:	69bb      	ldr	r3, [r7, #24]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3724      	adds	r7, #36	; 0x24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	08008964 	.word	0x08008964
 8003bb8:	00f42400 	.word	0x00f42400
 8003bbc:	007a1200 	.word	0x007a1200

08003bc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc4:	4b03      	ldr	r3, [pc, #12]	; (8003bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20000000 	.word	0x20000000

08003bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bdc:	f7ff fff0 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	0a1b      	lsrs	r3, r3, #8
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4904      	ldr	r1, [pc, #16]	; (8003c00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bee:	5ccb      	ldrb	r3, [r1, r3]
 8003bf0:	f003 031f 	and.w	r3, r3, #31
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	0800895c 	.word	0x0800895c

08003c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c08:	f7ff ffda 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	0adb      	lsrs	r3, r3, #11
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	4904      	ldr	r1, [pc, #16]	; (8003c2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c1a:	5ccb      	ldrb	r3, [r1, r3]
 8003c1c:	f003 031f 	and.w	r3, r3, #31
 8003c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	0800895c 	.word	0x0800895c

08003c30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c38:	2300      	movs	r3, #0
 8003c3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c3c:	4b2a      	ldr	r3, [pc, #168]	; (8003ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c48:	f7ff f9ee 	bl	8003028 <HAL_PWREx_GetVoltageRange>
 8003c4c:	6178      	str	r0, [r7, #20]
 8003c4e:	e014      	b.n	8003c7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c50:	4b25      	ldr	r3, [pc, #148]	; (8003ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c54:	4a24      	ldr	r2, [pc, #144]	; (8003ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c5c:	4b22      	ldr	r3, [pc, #136]	; (8003ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c68:	f7ff f9de 	bl	8003028 <HAL_PWREx_GetVoltageRange>
 8003c6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c72:	4a1d      	ldr	r2, [pc, #116]	; (8003ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c80:	d10b      	bne.n	8003c9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b80      	cmp	r3, #128	; 0x80
 8003c86:	d919      	bls.n	8003cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2ba0      	cmp	r3, #160	; 0xa0
 8003c8c:	d902      	bls.n	8003c94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c8e:	2302      	movs	r3, #2
 8003c90:	613b      	str	r3, [r7, #16]
 8003c92:	e013      	b.n	8003cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c94:	2301      	movs	r3, #1
 8003c96:	613b      	str	r3, [r7, #16]
 8003c98:	e010      	b.n	8003cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b80      	cmp	r3, #128	; 0x80
 8003c9e:	d902      	bls.n	8003ca6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	613b      	str	r3, [r7, #16]
 8003ca4:	e00a      	b.n	8003cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b80      	cmp	r3, #128	; 0x80
 8003caa:	d102      	bne.n	8003cb2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cac:	2302      	movs	r3, #2
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	e004      	b.n	8003cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b70      	cmp	r3, #112	; 0x70
 8003cb6:	d101      	bne.n	8003cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cb8:	2301      	movs	r3, #1
 8003cba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f023 0207 	bic.w	r2, r3, #7
 8003cc4:	4909      	ldr	r1, [pc, #36]	; (8003cec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ccc:	4b07      	ldr	r3, [pc, #28]	; (8003cec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d001      	beq.n	8003cde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40022000 	.word	0x40022000

08003cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d041      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d14:	d02a      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d1a:	d824      	bhi.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d20:	d008      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d26:	d81e      	bhi.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d30:	d010      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d32:	e018      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d34:	4b86      	ldr	r3, [pc, #536]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	4a85      	ldr	r2, [pc, #532]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d3e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d40:	e015      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3304      	adds	r3, #4
 8003d46:	2100      	movs	r1, #0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 facb 	bl	80042e4 <RCCEx_PLLSAI1_Config>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d52:	e00c      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3320      	adds	r3, #32
 8003d58:	2100      	movs	r1, #0
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fbb6 	bl	80044cc <RCCEx_PLLSAI2_Config>
 8003d60:	4603      	mov	r3, r0
 8003d62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d64:	e003      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	74fb      	strb	r3, [r7, #19]
      break;
 8003d6a:	e000      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d6e:	7cfb      	ldrb	r3, [r7, #19]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10b      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d74:	4b76      	ldr	r3, [pc, #472]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d82:	4973      	ldr	r1, [pc, #460]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d8a:	e001      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8c:	7cfb      	ldrb	r3, [r7, #19]
 8003d8e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d041      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003da0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003da4:	d02a      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003da6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003daa:	d824      	bhi.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003dac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003db0:	d008      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003db2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003db6:	d81e      	bhi.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dc0:	d010      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003dc2:	e018      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dc4:	4b62      	ldr	r3, [pc, #392]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	4a61      	ldr	r2, [pc, #388]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003dd0:	e015      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fa83 	bl	80042e4 <RCCEx_PLLSAI1_Config>
 8003dde:	4603      	mov	r3, r0
 8003de0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003de2:	e00c      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3320      	adds	r3, #32
 8003de8:	2100      	movs	r1, #0
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fb6e 	bl	80044cc <RCCEx_PLLSAI2_Config>
 8003df0:	4603      	mov	r3, r0
 8003df2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003df4:	e003      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	74fb      	strb	r3, [r7, #19]
      break;
 8003dfa:	e000      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003dfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dfe:	7cfb      	ldrb	r3, [r7, #19]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10b      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e04:	4b52      	ldr	r3, [pc, #328]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e12:	494f      	ldr	r1, [pc, #316]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e1a:	e001      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1c:	7cfb      	ldrb	r3, [r7, #19]
 8003e1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 80a0 	beq.w	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e32:	4b47      	ldr	r3, [pc, #284]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003e42:	2300      	movs	r3, #0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00d      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e48:	4b41      	ldr	r3, [pc, #260]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4c:	4a40      	ldr	r2, [pc, #256]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e52:	6593      	str	r3, [r2, #88]	; 0x58
 8003e54:	4b3e      	ldr	r3, [pc, #248]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e60:	2301      	movs	r3, #1
 8003e62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e64:	4b3b      	ldr	r3, [pc, #236]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a3a      	ldr	r2, [pc, #232]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e70:	f7fd ff86 	bl	8001d80 <HAL_GetTick>
 8003e74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e76:	e009      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e78:	f7fd ff82 	bl	8001d80 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d902      	bls.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	74fb      	strb	r3, [r7, #19]
        break;
 8003e8a:	e005      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e8c:	4b31      	ldr	r3, [pc, #196]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0ef      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e98:	7cfb      	ldrb	r3, [r7, #19]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d15c      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e9e:	4b2c      	ldr	r3, [pc, #176]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d01f      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d019      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ebc:	4b24      	ldr	r3, [pc, #144]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ec8:	4b21      	ldr	r3, [pc, #132]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ece:	4a20      	ldr	r2, [pc, #128]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ed8:	4b1d      	ldr	r3, [pc, #116]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ede:	4a1c      	ldr	r2, [pc, #112]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ee8:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d016      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efa:	f7fd ff41 	bl	8001d80 <HAL_GetTick>
 8003efe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f00:	e00b      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f02:	f7fd ff3d 	bl	8001d80 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d902      	bls.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	74fb      	strb	r3, [r7, #19]
            break;
 8003f18:	e006      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f1a:	4b0d      	ldr	r3, [pc, #52]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0ec      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003f28:	7cfb      	ldrb	r3, [r7, #19]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10c      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f2e:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f3e:	4904      	ldr	r1, [pc, #16]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f46:	e009      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f48:	7cfb      	ldrb	r3, [r7, #19]
 8003f4a:	74bb      	strb	r3, [r7, #18]
 8003f4c:	e006      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f4e:	bf00      	nop
 8003f50:	40021000 	.word	0x40021000
 8003f54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f58:	7cfb      	ldrb	r3, [r7, #19]
 8003f5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f5c:	7c7b      	ldrb	r3, [r7, #17]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d105      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f62:	4b9e      	ldr	r3, [pc, #632]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f66:	4a9d      	ldr	r2, [pc, #628]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f7a:	4b98      	ldr	r3, [pc, #608]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f80:	f023 0203 	bic.w	r2, r3, #3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	4994      	ldr	r1, [pc, #592]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f9c:	4b8f      	ldr	r3, [pc, #572]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa2:	f023 020c 	bic.w	r2, r3, #12
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003faa:	498c      	ldr	r1, [pc, #560]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fbe:	4b87      	ldr	r3, [pc, #540]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	4983      	ldr	r1, [pc, #524]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fe0:	4b7e      	ldr	r3, [pc, #504]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	497b      	ldr	r1, [pc, #492]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0310 	and.w	r3, r3, #16
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004002:	4b76      	ldr	r3, [pc, #472]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004008:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004010:	4972      	ldr	r1, [pc, #456]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00a      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004024:	4b6d      	ldr	r3, [pc, #436]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004032:	496a      	ldr	r1, [pc, #424]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004046:	4b65      	ldr	r3, [pc, #404]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004054:	4961      	ldr	r1, [pc, #388]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00a      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004068:	4b5c      	ldr	r3, [pc, #368]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004076:	4959      	ldr	r1, [pc, #356]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800408a:	4b54      	ldr	r3, [pc, #336]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004090:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004098:	4950      	ldr	r1, [pc, #320]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040ac:	4b4b      	ldr	r3, [pc, #300]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ba:	4948      	ldr	r1, [pc, #288]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040ce:	4b43      	ldr	r3, [pc, #268]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040dc:	493f      	ldr	r1, [pc, #252]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d028      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040f0:	4b3a      	ldr	r3, [pc, #232]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040fe:	4937      	ldr	r1, [pc, #220]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800410a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800410e:	d106      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004110:	4b32      	ldr	r3, [pc, #200]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	4a31      	ldr	r2, [pc, #196]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004116:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800411a:	60d3      	str	r3, [r2, #12]
 800411c:	e011      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004122:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004126:	d10c      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3304      	adds	r3, #4
 800412c:	2101      	movs	r1, #1
 800412e:	4618      	mov	r0, r3
 8004130:	f000 f8d8 	bl	80042e4 <RCCEx_PLLSAI1_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800413e:	7cfb      	ldrb	r3, [r7, #19]
 8004140:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d028      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800414e:	4b23      	ldr	r3, [pc, #140]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004154:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415c:	491f      	ldr	r1, [pc, #124]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800416c:	d106      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800416e:	4b1b      	ldr	r3, [pc, #108]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	4a1a      	ldr	r2, [pc, #104]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004174:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004178:	60d3      	str	r3, [r2, #12]
 800417a:	e011      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004180:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004184:	d10c      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3304      	adds	r3, #4
 800418a:	2101      	movs	r1, #1
 800418c:	4618      	mov	r0, r3
 800418e:	f000 f8a9 	bl	80042e4 <RCCEx_PLLSAI1_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004196:	7cfb      	ldrb	r3, [r7, #19]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800419c:	7cfb      	ldrb	r3, [r7, #19]
 800419e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d02b      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041ac:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ba:	4908      	ldr	r1, [pc, #32]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041ca:	d109      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041cc:	4b03      	ldr	r3, [pc, #12]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4a02      	ldr	r2, [pc, #8]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041d6:	60d3      	str	r3, [r2, #12]
 80041d8:	e014      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80041da:	bf00      	nop
 80041dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041e8:	d10c      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3304      	adds	r3, #4
 80041ee:	2101      	movs	r1, #1
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 f877 	bl	80042e4 <RCCEx_PLLSAI1_Config>
 80041f6:	4603      	mov	r3, r0
 80041f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041fa:	7cfb      	ldrb	r3, [r7, #19]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004200:	7cfb      	ldrb	r3, [r7, #19]
 8004202:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d02f      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004210:	4b2b      	ldr	r3, [pc, #172]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004216:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800421e:	4928      	ldr	r1, [pc, #160]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800422a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800422e:	d10d      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3304      	adds	r3, #4
 8004234:	2102      	movs	r1, #2
 8004236:	4618      	mov	r0, r3
 8004238:	f000 f854 	bl	80042e4 <RCCEx_PLLSAI1_Config>
 800423c:	4603      	mov	r3, r0
 800423e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004240:	7cfb      	ldrb	r3, [r7, #19]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d014      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004246:	7cfb      	ldrb	r3, [r7, #19]
 8004248:	74bb      	strb	r3, [r7, #18]
 800424a:	e011      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004254:	d10c      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3320      	adds	r3, #32
 800425a:	2102      	movs	r1, #2
 800425c:	4618      	mov	r0, r3
 800425e:	f000 f935 	bl	80044cc <RCCEx_PLLSAI2_Config>
 8004262:	4603      	mov	r3, r0
 8004264:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004266:	7cfb      	ldrb	r3, [r7, #19]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800426c:	7cfb      	ldrb	r3, [r7, #19]
 800426e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800427c:	4b10      	ldr	r3, [pc, #64]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800428a:	490d      	ldr	r1, [pc, #52]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00b      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800429e:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042ae:	4904      	ldr	r1, [pc, #16]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40021000 	.word	0x40021000

080042c4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a04      	ldr	r2, [pc, #16]	; (80042e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80042ce:	f043 0304 	orr.w	r3, r3, #4
 80042d2:	6013      	str	r3, [r2, #0]
}
 80042d4:	bf00      	nop
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40021000 	.word	0x40021000

080042e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042f2:	4b75      	ldr	r3, [pc, #468]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d018      	beq.n	8004330 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80042fe:	4b72      	ldr	r3, [pc, #456]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f003 0203 	and.w	r2, r3, #3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d10d      	bne.n	800432a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
       ||
 8004312:	2b00      	cmp	r3, #0
 8004314:	d009      	beq.n	800432a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004316:	4b6c      	ldr	r3, [pc, #432]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	091b      	lsrs	r3, r3, #4
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
       ||
 8004326:	429a      	cmp	r2, r3
 8004328:	d047      	beq.n	80043ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	73fb      	strb	r3, [r7, #15]
 800432e:	e044      	b.n	80043ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b03      	cmp	r3, #3
 8004336:	d018      	beq.n	800436a <RCCEx_PLLSAI1_Config+0x86>
 8004338:	2b03      	cmp	r3, #3
 800433a:	d825      	bhi.n	8004388 <RCCEx_PLLSAI1_Config+0xa4>
 800433c:	2b01      	cmp	r3, #1
 800433e:	d002      	beq.n	8004346 <RCCEx_PLLSAI1_Config+0x62>
 8004340:	2b02      	cmp	r3, #2
 8004342:	d009      	beq.n	8004358 <RCCEx_PLLSAI1_Config+0x74>
 8004344:	e020      	b.n	8004388 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004346:	4b60      	ldr	r3, [pc, #384]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d11d      	bne.n	800438e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004356:	e01a      	b.n	800438e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004358:	4b5b      	ldr	r3, [pc, #364]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004360:	2b00      	cmp	r3, #0
 8004362:	d116      	bne.n	8004392 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004368:	e013      	b.n	8004392 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800436a:	4b57      	ldr	r3, [pc, #348]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10f      	bne.n	8004396 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004376:	4b54      	ldr	r3, [pc, #336]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d109      	bne.n	8004396 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004386:	e006      	b.n	8004396 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
      break;
 800438c:	e004      	b.n	8004398 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800438e:	bf00      	nop
 8004390:	e002      	b.n	8004398 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004392:	bf00      	nop
 8004394:	e000      	b.n	8004398 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004396:	bf00      	nop
    }

    if(status == HAL_OK)
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10d      	bne.n	80043ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800439e:	4b4a      	ldr	r3, [pc, #296]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6819      	ldr	r1, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	430b      	orrs	r3, r1
 80043b4:	4944      	ldr	r1, [pc, #272]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d17d      	bne.n	80044bc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043c0:	4b41      	ldr	r3, [pc, #260]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a40      	ldr	r2, [pc, #256]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043cc:	f7fd fcd8 	bl	8001d80 <HAL_GetTick>
 80043d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043d2:	e009      	b.n	80043e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043d4:	f7fd fcd4 	bl	8001d80 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d902      	bls.n	80043e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	73fb      	strb	r3, [r7, #15]
        break;
 80043e6:	e005      	b.n	80043f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043e8:	4b37      	ldr	r3, [pc, #220]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1ef      	bne.n	80043d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d160      	bne.n	80044bc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d111      	bne.n	8004424 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004400:	4b31      	ldr	r3, [pc, #196]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6892      	ldr	r2, [r2, #8]
 8004410:	0211      	lsls	r1, r2, #8
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68d2      	ldr	r2, [r2, #12]
 8004416:	0912      	lsrs	r2, r2, #4
 8004418:	0452      	lsls	r2, r2, #17
 800441a:	430a      	orrs	r2, r1
 800441c:	492a      	ldr	r1, [pc, #168]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800441e:	4313      	orrs	r3, r2
 8004420:	610b      	str	r3, [r1, #16]
 8004422:	e027      	b.n	8004474 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d112      	bne.n	8004450 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800442a:	4b27      	ldr	r3, [pc, #156]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004432:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6892      	ldr	r2, [r2, #8]
 800443a:	0211      	lsls	r1, r2, #8
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6912      	ldr	r2, [r2, #16]
 8004440:	0852      	lsrs	r2, r2, #1
 8004442:	3a01      	subs	r2, #1
 8004444:	0552      	lsls	r2, r2, #21
 8004446:	430a      	orrs	r2, r1
 8004448:	491f      	ldr	r1, [pc, #124]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800444a:	4313      	orrs	r3, r2
 800444c:	610b      	str	r3, [r1, #16]
 800444e:	e011      	b.n	8004474 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004450:	4b1d      	ldr	r3, [pc, #116]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004458:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6892      	ldr	r2, [r2, #8]
 8004460:	0211      	lsls	r1, r2, #8
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6952      	ldr	r2, [r2, #20]
 8004466:	0852      	lsrs	r2, r2, #1
 8004468:	3a01      	subs	r2, #1
 800446a:	0652      	lsls	r2, r2, #25
 800446c:	430a      	orrs	r2, r1
 800446e:	4916      	ldr	r1, [pc, #88]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004470:	4313      	orrs	r3, r2
 8004472:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004474:	4b14      	ldr	r3, [pc, #80]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a13      	ldr	r2, [pc, #76]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800447a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800447e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004480:	f7fd fc7e 	bl	8001d80 <HAL_GetTick>
 8004484:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004486:	e009      	b.n	800449c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004488:	f7fd fc7a 	bl	8001d80 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d902      	bls.n	800449c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	73fb      	strb	r3, [r7, #15]
          break;
 800449a:	e005      	b.n	80044a8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800449c:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0ef      	beq.n	8004488 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80044ae:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	4904      	ldr	r1, [pc, #16]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40021000 	.word	0x40021000

080044cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044da:	4b6a      	ldr	r3, [pc, #424]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d018      	beq.n	8004518 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80044e6:	4b67      	ldr	r3, [pc, #412]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f003 0203 	and.w	r2, r3, #3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d10d      	bne.n	8004512 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
       ||
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d009      	beq.n	8004512 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80044fe:	4b61      	ldr	r3, [pc, #388]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	091b      	lsrs	r3, r3, #4
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
       ||
 800450e:	429a      	cmp	r2, r3
 8004510:	d047      	beq.n	80045a2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	73fb      	strb	r3, [r7, #15]
 8004516:	e044      	b.n	80045a2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b03      	cmp	r3, #3
 800451e:	d018      	beq.n	8004552 <RCCEx_PLLSAI2_Config+0x86>
 8004520:	2b03      	cmp	r3, #3
 8004522:	d825      	bhi.n	8004570 <RCCEx_PLLSAI2_Config+0xa4>
 8004524:	2b01      	cmp	r3, #1
 8004526:	d002      	beq.n	800452e <RCCEx_PLLSAI2_Config+0x62>
 8004528:	2b02      	cmp	r3, #2
 800452a:	d009      	beq.n	8004540 <RCCEx_PLLSAI2_Config+0x74>
 800452c:	e020      	b.n	8004570 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800452e:	4b55      	ldr	r3, [pc, #340]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d11d      	bne.n	8004576 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800453e:	e01a      	b.n	8004576 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004540:	4b50      	ldr	r3, [pc, #320]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004548:	2b00      	cmp	r3, #0
 800454a:	d116      	bne.n	800457a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004550:	e013      	b.n	800457a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004552:	4b4c      	ldr	r3, [pc, #304]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10f      	bne.n	800457e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800455e:	4b49      	ldr	r3, [pc, #292]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d109      	bne.n	800457e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800456e:	e006      	b.n	800457e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	73fb      	strb	r3, [r7, #15]
      break;
 8004574:	e004      	b.n	8004580 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004576:	bf00      	nop
 8004578:	e002      	b.n	8004580 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800457a:	bf00      	nop
 800457c:	e000      	b.n	8004580 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800457e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10d      	bne.n	80045a2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004586:	4b3f      	ldr	r3, [pc, #252]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6819      	ldr	r1, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	3b01      	subs	r3, #1
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	430b      	orrs	r3, r1
 800459c:	4939      	ldr	r1, [pc, #228]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d167      	bne.n	8004678 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80045a8:	4b36      	ldr	r3, [pc, #216]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a35      	ldr	r2, [pc, #212]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b4:	f7fd fbe4 	bl	8001d80 <HAL_GetTick>
 80045b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045ba:	e009      	b.n	80045d0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045bc:	f7fd fbe0 	bl	8001d80 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d902      	bls.n	80045d0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	73fb      	strb	r3, [r7, #15]
        break;
 80045ce:	e005      	b.n	80045dc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045d0:	4b2c      	ldr	r3, [pc, #176]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1ef      	bne.n	80045bc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d14a      	bne.n	8004678 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d111      	bne.n	800460c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045e8:	4b26      	ldr	r3, [pc, #152]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80045f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6892      	ldr	r2, [r2, #8]
 80045f8:	0211      	lsls	r1, r2, #8
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	68d2      	ldr	r2, [r2, #12]
 80045fe:	0912      	lsrs	r2, r2, #4
 8004600:	0452      	lsls	r2, r2, #17
 8004602:	430a      	orrs	r2, r1
 8004604:	491f      	ldr	r1, [pc, #124]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004606:	4313      	orrs	r3, r2
 8004608:	614b      	str	r3, [r1, #20]
 800460a:	e011      	b.n	8004630 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800460c:	4b1d      	ldr	r3, [pc, #116]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004614:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6892      	ldr	r2, [r2, #8]
 800461c:	0211      	lsls	r1, r2, #8
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6912      	ldr	r2, [r2, #16]
 8004622:	0852      	lsrs	r2, r2, #1
 8004624:	3a01      	subs	r2, #1
 8004626:	0652      	lsls	r2, r2, #25
 8004628:	430a      	orrs	r2, r1
 800462a:	4916      	ldr	r1, [pc, #88]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 800462c:	4313      	orrs	r3, r2
 800462e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004630:	4b14      	ldr	r3, [pc, #80]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a13      	ldr	r2, [pc, #76]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463c:	f7fd fba0 	bl	8001d80 <HAL_GetTick>
 8004640:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004642:	e009      	b.n	8004658 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004644:	f7fd fb9c 	bl	8001d80 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d902      	bls.n	8004658 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	73fb      	strb	r3, [r7, #15]
          break;
 8004656:	e005      	b.n	8004664 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0ef      	beq.n	8004644 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800466a:	4b06      	ldr	r3, [pc, #24]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 800466c:	695a      	ldr	r2, [r3, #20]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	4904      	ldr	r1, [pc, #16]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004674:	4313      	orrs	r3, r2
 8004676:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004678:	7bfb      	ldrb	r3, [r7, #15]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40021000 	.word	0x40021000

08004688 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d06c      	beq.n	8004774 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fc ff82 	bl	80015b8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	22ca      	movs	r2, #202	; 0xca
 80046c2:	625a      	str	r2, [r3, #36]	; 0x24
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2253      	movs	r2, #83	; 0x53
 80046ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f925 	bl	800491c <RTC_EnterInitMode>
 80046d2:	4603      	mov	r3, r0
 80046d4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d14b      	bne.n	8004774 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6812      	ldr	r2, [r2, #0]
 80046e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80046ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ee:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6899      	ldr	r1, [r3, #8]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	68d2      	ldr	r2, [r2, #12]
 8004716:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6919      	ldr	r1, [r3, #16]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	041a      	lsls	r2, r3, #16
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f929 	bl	8004984 <RTC_ExitInitMode>
 8004732:	4603      	mov	r3, r0
 8004734:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d11b      	bne.n	8004774 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0203 	bic.w	r2, r2, #3
 800474a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69da      	ldr	r2, [r3, #28]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	22ff      	movs	r2, #255	; 0xff
 800476a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004774:	7bfb      	ldrb	r3, [r7, #15]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b086      	sub	sp, #24
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80047ac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80047b0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	0c1b      	lsrs	r3, r3, #16
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	0a1b      	lsrs	r3, r3, #8
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	0d9b      	lsrs	r3, r3, #22
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d11a      	bne.n	800482c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 f900 	bl	8004a00 <RTC_Bcd2ToByte>
 8004800:	4603      	mov	r3, r0
 8004802:	461a      	mov	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	785b      	ldrb	r3, [r3, #1]
 800480c:	4618      	mov	r0, r3
 800480e:	f000 f8f7 	bl	8004a00 <RTC_Bcd2ToByte>
 8004812:	4603      	mov	r3, r0
 8004814:	461a      	mov	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	789b      	ldrb	r3, [r3, #2]
 800481e:	4618      	mov	r0, r3
 8004820:	f000 f8ee 	bl	8004a00 <RTC_Bcd2ToByte>
 8004824:	4603      	mov	r3, r0
 8004826:	461a      	mov	r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b086      	sub	sp, #24
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800484c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004850:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	0c1b      	lsrs	r3, r3, #16
 8004856:	b2da      	uxtb	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	0a1b      	lsrs	r3, r3, #8
 8004860:	b2db      	uxtb	r3, r3
 8004862:	f003 031f 	and.w	r3, r3, #31
 8004866:	b2da      	uxtb	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004874:	b2da      	uxtb	r2, r3
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	0b5b      	lsrs	r3, r3, #13
 800487e:	b2db      	uxtb	r3, r3
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	b2da      	uxtb	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d11a      	bne.n	80048c6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	78db      	ldrb	r3, [r3, #3]
 8004894:	4618      	mov	r0, r3
 8004896:	f000 f8b3 	bl	8004a00 <RTC_Bcd2ToByte>
 800489a:	4603      	mov	r3, r0
 800489c:	461a      	mov	r2, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	785b      	ldrb	r3, [r3, #1]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 f8aa 	bl	8004a00 <RTC_Bcd2ToByte>
 80048ac:	4603      	mov	r3, r0
 80048ae:	461a      	mov	r2, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	789b      	ldrb	r3, [r3, #2]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 f8a1 	bl	8004a00 <RTC_Bcd2ToByte>
 80048be:	4603      	mov	r3, r0
 80048c0:	461a      	mov	r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048e6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80048e8:	f7fd fa4a 	bl	8001d80 <HAL_GetTick>
 80048ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80048ee:	e009      	b.n	8004904 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048f0:	f7fd fa46 	bl	8001d80 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048fe:	d901      	bls.n	8004904 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e007      	b.n	8004914 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0ee      	beq.n	80048f0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	d120      	bne.n	8004978 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800493e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004940:	f7fd fa1e 	bl	8001d80 <HAL_GetTick>
 8004944:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004946:	e00d      	b.n	8004964 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004948:	f7fd fa1a 	bl	8001d80 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004956:	d905      	bls.n	8004964 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2203      	movs	r2, #3
 8004960:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496e:	2b00      	cmp	r3, #0
 8004970:	d102      	bne.n	8004978 <RTC_EnterInitMode+0x5c>
 8004972:	7bfb      	ldrb	r3, [r7, #15]
 8004974:	2b03      	cmp	r3, #3
 8004976:	d1e7      	bne.n	8004948 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004978:	7bfb      	ldrb	r3, [r7, #15]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004990:	4b1a      	ldr	r3, [pc, #104]	; (80049fc <RTC_ExitInitMode+0x78>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	4a19      	ldr	r2, [pc, #100]	; (80049fc <RTC_ExitInitMode+0x78>)
 8004996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800499a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800499c:	4b17      	ldr	r3, [pc, #92]	; (80049fc <RTC_ExitInitMode+0x78>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f003 0320 	and.w	r3, r3, #32
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10c      	bne.n	80049c2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7ff ff91 	bl	80048d0 <HAL_RTC_WaitForSynchro>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01e      	beq.n	80049f2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2203      	movs	r2, #3
 80049b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	73fb      	strb	r3, [r7, #15]
 80049c0:	e017      	b.n	80049f2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80049c2:	4b0e      	ldr	r3, [pc, #56]	; (80049fc <RTC_ExitInitMode+0x78>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	4a0d      	ldr	r2, [pc, #52]	; (80049fc <RTC_ExitInitMode+0x78>)
 80049c8:	f023 0320 	bic.w	r3, r3, #32
 80049cc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff ff7e 	bl	80048d0 <HAL_RTC_WaitForSynchro>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d005      	beq.n	80049e6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2203      	movs	r2, #3
 80049de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80049e6:	4b05      	ldr	r3, [pc, #20]	; (80049fc <RTC_ExitInitMode+0x78>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	4a04      	ldr	r2, [pc, #16]	; (80049fc <RTC_ExitInitMode+0x78>)
 80049ec:	f043 0320 	orr.w	r3, r3, #32
 80049f0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40002800 	.word	0x40002800

08004a00 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	091b      	lsrs	r3, r3, #4
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	461a      	mov	r2, r3
 8004a12:	0092      	lsls	r2, r2, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8004a1a:	79fb      	ldrb	r3, [r7, #7]
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	4413      	add	r3, r2
 8004a26:	b2db      	uxtb	r3, r3
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d101      	bne.n	8004a4e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e07f      	b.n	8004b4e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2202      	movs	r2, #2
 8004a5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	22ca      	movs	r2, #202	; 0xca
 8004a64:	625a      	str	r2, [r3, #36]	; 0x24
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2253      	movs	r2, #83	; 0x53
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a7c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004a8e:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d120      	bne.n	8004ae0 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8004a9e:	f7fd f96f 	bl	8001d80 <HAL_GetTick>
 8004aa2:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8004aa4:	e015      	b.n	8004ad2 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004aa6:	f7fd f96b 	bl	8001d80 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ab4:	d90d      	bls.n	8004ad2 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	22ff      	movs	r2, #255	; 0xff
 8004abc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2203      	movs	r2, #3
 8004ac2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e03d      	b.n	8004b4e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0e2      	beq.n	8004aa6 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f023 0107 	bic.w	r1, r3, #7
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004afc:	4b16      	ldr	r3, [pc, #88]	; (8004b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a15      	ldr	r2, [pc, #84]	; (8004b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8004b02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b06:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004b08:	4b13      	ldr	r3, [pc, #76]	; (8004b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	4a12      	ldr	r2, [pc, #72]	; (8004b58 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8004b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b12:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b22:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689a      	ldr	r2, [r3, #8]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b32:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	22ff      	movs	r2, #255	; 0xff
 8004b3a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40010400 	.word	0x40010400

08004b5c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004b64:	4b0f      	ldr	r3, [pc, #60]	; (8004ba4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8004b66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b6a:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00b      	beq.n	8004b92 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004b8a:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f80b 	bl	8004ba8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40010400 	.word	0x40010400

08004ba8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e095      	b.n	8004cfa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d108      	bne.n	8004be8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bde:	d009      	beq.n	8004bf4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	61da      	str	r2, [r3, #28]
 8004be6:	e005      	b.n	8004bf4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d106      	bne.n	8004c14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7fc fd4a 	bl	80016a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c34:	d902      	bls.n	8004c3c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	e002      	b.n	8004c42 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c4a:	d007      	beq.n	8004c5c <HAL_SPI_Init+0xa0>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c54:	d002      	beq.n	8004c5c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9e:	ea42 0103 	orr.w	r1, r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	0c1b      	lsrs	r3, r3, #16
 8004cb8:	f003 0204 	and.w	r2, r3, #4
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	f003 0310 	and.w	r3, r3, #16
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004cd8:	ea42 0103 	orr.w	r1, r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b086      	sub	sp, #24
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e097      	b.n	8004e46 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d106      	bne.n	8004d30 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fc feaa 	bl	8001a84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2202      	movs	r2, #2
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6812      	ldr	r2, [r2, #0]
 8004d42:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004d46:	f023 0307 	bic.w	r3, r3, #7
 8004d4a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3304      	adds	r3, #4
 8004d54:	4619      	mov	r1, r3
 8004d56:	4610      	mov	r0, r2
 8004d58:	f000 f908 	bl	8004f6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d84:	f023 0303 	bic.w	r3, r3, #3
 8004d88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	4313      	orrs	r3, r2
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004da2:	f023 030c 	bic.w	r3, r3, #12
 8004da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	021b      	lsls	r3, r3, #8
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	011a      	lsls	r2, r3, #4
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	031b      	lsls	r3, r3, #12
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004de0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004de8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	4313      	orrs	r3, r2
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e5e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e66:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e6e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e76:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d110      	bne.n	8004ea0 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d102      	bne.n	8004e8a <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e84:	7b7b      	ldrb	r3, [r7, #13]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d001      	beq.n	8004e8e <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e069      	b.n	8004f62 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2202      	movs	r2, #2
 8004e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e9e:	e031      	b.n	8004f04 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d110      	bne.n	8004ec8 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ea6:	7bbb      	ldrb	r3, [r7, #14]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d102      	bne.n	8004eb2 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004eac:	7b3b      	ldrb	r3, [r7, #12]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d001      	beq.n	8004eb6 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e055      	b.n	8004f62 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2202      	movs	r2, #2
 8004eba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ec6:	e01d      	b.n	8004f04 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d108      	bne.n	8004ee0 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ece:	7bbb      	ldrb	r3, [r7, #14]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d105      	bne.n	8004ee0 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ed4:	7b7b      	ldrb	r3, [r7, #13]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d102      	bne.n	8004ee0 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004eda:	7b3b      	ldrb	r3, [r7, #12]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d001      	beq.n	8004ee4 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e03e      	b.n	8004f62 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_TIM_Encoder_Start+0xc4>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d008      	beq.n	8004f22 <HAL_TIM_Encoder_Start+0xd4>
 8004f10:	e00f      	b.n	8004f32 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2201      	movs	r2, #1
 8004f18:	2100      	movs	r1, #0
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 f8c0 	bl	80050a0 <TIM_CCxChannelCmd>
      break;
 8004f20:	e016      	b.n	8004f50 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2201      	movs	r2, #1
 8004f28:	2104      	movs	r1, #4
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 f8b8 	bl	80050a0 <TIM_CCxChannelCmd>
      break;
 8004f30:	e00e      	b.n	8004f50 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2201      	movs	r2, #1
 8004f38:	2100      	movs	r1, #0
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 f8b0 	bl	80050a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2201      	movs	r2, #1
 8004f46:	2104      	movs	r1, #4
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 f8a9 	bl	80050a0 <TIM_CCxChannelCmd>
      break;
 8004f4e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0201 	orr.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a40      	ldr	r2, [pc, #256]	; (8005080 <TIM_Base_SetConfig+0x114>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d013      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8a:	d00f      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a3d      	ldr	r2, [pc, #244]	; (8005084 <TIM_Base_SetConfig+0x118>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d00b      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a3c      	ldr	r2, [pc, #240]	; (8005088 <TIM_Base_SetConfig+0x11c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d007      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a3b      	ldr	r2, [pc, #236]	; (800508c <TIM_Base_SetConfig+0x120>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d003      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a3a      	ldr	r2, [pc, #232]	; (8005090 <TIM_Base_SetConfig+0x124>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d108      	bne.n	8004fbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a2f      	ldr	r2, [pc, #188]	; (8005080 <TIM_Base_SetConfig+0x114>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d01f      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fcc:	d01b      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a2c      	ldr	r2, [pc, #176]	; (8005084 <TIM_Base_SetConfig+0x118>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d017      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a2b      	ldr	r2, [pc, #172]	; (8005088 <TIM_Base_SetConfig+0x11c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d013      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a2a      	ldr	r2, [pc, #168]	; (800508c <TIM_Base_SetConfig+0x120>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00f      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a29      	ldr	r2, [pc, #164]	; (8005090 <TIM_Base_SetConfig+0x124>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00b      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a28      	ldr	r2, [pc, #160]	; (8005094 <TIM_Base_SetConfig+0x128>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d007      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a27      	ldr	r2, [pc, #156]	; (8005098 <TIM_Base_SetConfig+0x12c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d003      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a26      	ldr	r2, [pc, #152]	; (800509c <TIM_Base_SetConfig+0x130>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d108      	bne.n	8005018 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a10      	ldr	r2, [pc, #64]	; (8005080 <TIM_Base_SetConfig+0x114>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00f      	beq.n	8005064 <TIM_Base_SetConfig+0xf8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a12      	ldr	r2, [pc, #72]	; (8005090 <TIM_Base_SetConfig+0x124>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00b      	beq.n	8005064 <TIM_Base_SetConfig+0xf8>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a11      	ldr	r2, [pc, #68]	; (8005094 <TIM_Base_SetConfig+0x128>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d007      	beq.n	8005064 <TIM_Base_SetConfig+0xf8>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a10      	ldr	r2, [pc, #64]	; (8005098 <TIM_Base_SetConfig+0x12c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d003      	beq.n	8005064 <TIM_Base_SetConfig+0xf8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a0f      	ldr	r2, [pc, #60]	; (800509c <TIM_Base_SetConfig+0x130>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d103      	bne.n	800506c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	615a      	str	r2, [r3, #20]
}
 8005072:	bf00      	nop
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	40012c00 	.word	0x40012c00
 8005084:	40000400 	.word	0x40000400
 8005088:	40000800 	.word	0x40000800
 800508c:	40000c00 	.word	0x40000c00
 8005090:	40013400 	.word	0x40013400
 8005094:	40014000 	.word	0x40014000
 8005098:	40014400 	.word	0x40014400
 800509c:	40014800 	.word	0x40014800

080050a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f003 031f 	and.w	r3, r3, #31
 80050b2:	2201      	movs	r2, #1
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a1a      	ldr	r2, [r3, #32]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	43db      	mvns	r3, r3
 80050c2:	401a      	ands	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a1a      	ldr	r2, [r3, #32]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f003 031f 	and.w	r3, r3, #31
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	fa01 f303 	lsl.w	r3, r1, r3
 80050d8:	431a      	orrs	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	621a      	str	r2, [r3, #32]
}
 80050de:	bf00      	nop
 80050e0:	371c      	adds	r7, #28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
	...

080050ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005100:	2302      	movs	r3, #2
 8005102:	e068      	b.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a2e      	ldr	r2, [pc, #184]	; (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d004      	beq.n	8005138 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a2d      	ldr	r2, [pc, #180]	; (80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d108      	bne.n	800514a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800513e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005150:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1e      	ldr	r2, [pc, #120]	; (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d01d      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005176:	d018      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a1b      	ldr	r2, [pc, #108]	; (80051ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d013      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a1a      	ldr	r2, [pc, #104]	; (80051f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00e      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a18      	ldr	r2, [pc, #96]	; (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d009      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a13      	ldr	r2, [pc, #76]	; (80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d004      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a14      	ldr	r2, [pc, #80]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d10c      	bne.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40012c00 	.word	0x40012c00
 80051e8:	40013400 	.word	0x40013400
 80051ec:	40000400 	.word	0x40000400
 80051f0:	40000800 	.word	0x40000800
 80051f4:	40000c00 	.word	0x40000c00
 80051f8:	40014000 	.word	0x40014000

080051fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e040      	b.n	8005290 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7fc fcc0 	bl	8001ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2224      	movs	r2, #36	; 0x24
 8005228:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0201 	bic.w	r2, r2, #1
 8005238:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f8c0 	bl	80053c0 <UART_SetConfig>
 8005240:	4603      	mov	r3, r0
 8005242:	2b01      	cmp	r3, #1
 8005244:	d101      	bne.n	800524a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e022      	b.n	8005290 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	2b00      	cmp	r3, #0
 8005250:	d002      	beq.n	8005258 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fb6c 	bl	8005930 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005266:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689a      	ldr	r2, [r3, #8]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005276:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fbf3 	bl	8005a74 <UART_CheckIdleState>
 800528e:	4603      	mov	r3, r0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08a      	sub	sp, #40	; 0x28
 800529c:	af02      	add	r7, sp, #8
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	603b      	str	r3, [r7, #0]
 80052a4:	4613      	mov	r3, r2
 80052a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052ac:	2b20      	cmp	r3, #32
 80052ae:	f040 8082 	bne.w	80053b6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <HAL_UART_Transmit+0x26>
 80052b8:	88fb      	ldrh	r3, [r7, #6]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e07a      	b.n	80053b8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d101      	bne.n	80052d0 <HAL_UART_Transmit+0x38>
 80052cc:	2302      	movs	r3, #2
 80052ce:	e073      	b.n	80053b8 <HAL_UART_Transmit+0x120>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2221      	movs	r2, #33	; 0x21
 80052e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052e6:	f7fc fd4b 	bl	8001d80 <HAL_GetTick>
 80052ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	88fa      	ldrh	r2, [r7, #6]
 80052f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	88fa      	ldrh	r2, [r7, #6]
 80052f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005304:	d108      	bne.n	8005318 <HAL_UART_Transmit+0x80>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d104      	bne.n	8005318 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800530e:	2300      	movs	r3, #0
 8005310:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	61bb      	str	r3, [r7, #24]
 8005316:	e003      	b.n	8005320 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800531c:	2300      	movs	r3, #0
 800531e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005328:	e02d      	b.n	8005386 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2200      	movs	r2, #0
 8005332:	2180      	movs	r1, #128	; 0x80
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 fbe6 	bl	8005b06 <UART_WaitOnFlagUntilTimeout>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e039      	b.n	80053b8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10b      	bne.n	8005362 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	881a      	ldrh	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005356:	b292      	uxth	r2, r2
 8005358:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	3302      	adds	r3, #2
 800535e:	61bb      	str	r3, [r7, #24]
 8005360:	e008      	b.n	8005374 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	781a      	ldrb	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	b292      	uxth	r2, r2
 800536c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	3301      	adds	r3, #1
 8005372:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800537a:	b29b      	uxth	r3, r3
 800537c:	3b01      	subs	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1cb      	bne.n	800532a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2200      	movs	r2, #0
 800539a:	2140      	movs	r1, #64	; 0x40
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 fbb2 	bl	8005b06 <UART_WaitOnFlagUntilTimeout>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e005      	b.n	80053b8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2220      	movs	r2, #32
 80053b0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	e000      	b.n	80053b8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80053b6:	2302      	movs	r3, #2
  }
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3720      	adds	r7, #32
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053c4:	b08a      	sub	sp, #40	; 0x28
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	431a      	orrs	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	431a      	orrs	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	4ba4      	ldr	r3, [pc, #656]	; (8005680 <UART_SetConfig+0x2c0>)
 80053f0:	4013      	ands	r3, r2
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	6812      	ldr	r2, [r2, #0]
 80053f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053f8:	430b      	orrs	r3, r1
 80053fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a99      	ldr	r2, [pc, #612]	; (8005684 <UART_SetConfig+0x2c4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d004      	beq.n	800542c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005428:	4313      	orrs	r3, r2
 800542a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800543c:	430a      	orrs	r2, r1
 800543e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a90      	ldr	r2, [pc, #576]	; (8005688 <UART_SetConfig+0x2c8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d126      	bne.n	8005498 <UART_SetConfig+0xd8>
 800544a:	4b90      	ldr	r3, [pc, #576]	; (800568c <UART_SetConfig+0x2cc>)
 800544c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005450:	f003 0303 	and.w	r3, r3, #3
 8005454:	2b03      	cmp	r3, #3
 8005456:	d81b      	bhi.n	8005490 <UART_SetConfig+0xd0>
 8005458:	a201      	add	r2, pc, #4	; (adr r2, 8005460 <UART_SetConfig+0xa0>)
 800545a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545e:	bf00      	nop
 8005460:	08005471 	.word	0x08005471
 8005464:	08005481 	.word	0x08005481
 8005468:	08005479 	.word	0x08005479
 800546c:	08005489 	.word	0x08005489
 8005470:	2301      	movs	r3, #1
 8005472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005476:	e116      	b.n	80056a6 <UART_SetConfig+0x2e6>
 8005478:	2302      	movs	r3, #2
 800547a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547e:	e112      	b.n	80056a6 <UART_SetConfig+0x2e6>
 8005480:	2304      	movs	r3, #4
 8005482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005486:	e10e      	b.n	80056a6 <UART_SetConfig+0x2e6>
 8005488:	2308      	movs	r3, #8
 800548a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800548e:	e10a      	b.n	80056a6 <UART_SetConfig+0x2e6>
 8005490:	2310      	movs	r3, #16
 8005492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005496:	e106      	b.n	80056a6 <UART_SetConfig+0x2e6>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a7c      	ldr	r2, [pc, #496]	; (8005690 <UART_SetConfig+0x2d0>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d138      	bne.n	8005514 <UART_SetConfig+0x154>
 80054a2:	4b7a      	ldr	r3, [pc, #488]	; (800568c <UART_SetConfig+0x2cc>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a8:	f003 030c 	and.w	r3, r3, #12
 80054ac:	2b0c      	cmp	r3, #12
 80054ae:	d82d      	bhi.n	800550c <UART_SetConfig+0x14c>
 80054b0:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <UART_SetConfig+0xf8>)
 80054b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b6:	bf00      	nop
 80054b8:	080054ed 	.word	0x080054ed
 80054bc:	0800550d 	.word	0x0800550d
 80054c0:	0800550d 	.word	0x0800550d
 80054c4:	0800550d 	.word	0x0800550d
 80054c8:	080054fd 	.word	0x080054fd
 80054cc:	0800550d 	.word	0x0800550d
 80054d0:	0800550d 	.word	0x0800550d
 80054d4:	0800550d 	.word	0x0800550d
 80054d8:	080054f5 	.word	0x080054f5
 80054dc:	0800550d 	.word	0x0800550d
 80054e0:	0800550d 	.word	0x0800550d
 80054e4:	0800550d 	.word	0x0800550d
 80054e8:	08005505 	.word	0x08005505
 80054ec:	2300      	movs	r3, #0
 80054ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054f2:	e0d8      	b.n	80056a6 <UART_SetConfig+0x2e6>
 80054f4:	2302      	movs	r3, #2
 80054f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054fa:	e0d4      	b.n	80056a6 <UART_SetConfig+0x2e6>
 80054fc:	2304      	movs	r3, #4
 80054fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005502:	e0d0      	b.n	80056a6 <UART_SetConfig+0x2e6>
 8005504:	2308      	movs	r3, #8
 8005506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800550a:	e0cc      	b.n	80056a6 <UART_SetConfig+0x2e6>
 800550c:	2310      	movs	r3, #16
 800550e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005512:	e0c8      	b.n	80056a6 <UART_SetConfig+0x2e6>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a5e      	ldr	r2, [pc, #376]	; (8005694 <UART_SetConfig+0x2d4>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d125      	bne.n	800556a <UART_SetConfig+0x1aa>
 800551e:	4b5b      	ldr	r3, [pc, #364]	; (800568c <UART_SetConfig+0x2cc>)
 8005520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005524:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005528:	2b30      	cmp	r3, #48	; 0x30
 800552a:	d016      	beq.n	800555a <UART_SetConfig+0x19a>
 800552c:	2b30      	cmp	r3, #48	; 0x30
 800552e:	d818      	bhi.n	8005562 <UART_SetConfig+0x1a2>
 8005530:	2b20      	cmp	r3, #32
 8005532:	d00a      	beq.n	800554a <UART_SetConfig+0x18a>
 8005534:	2b20      	cmp	r3, #32
 8005536:	d814      	bhi.n	8005562 <UART_SetConfig+0x1a2>
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <UART_SetConfig+0x182>
 800553c:	2b10      	cmp	r3, #16
 800553e:	d008      	beq.n	8005552 <UART_SetConfig+0x192>
 8005540:	e00f      	b.n	8005562 <UART_SetConfig+0x1a2>
 8005542:	2300      	movs	r3, #0
 8005544:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005548:	e0ad      	b.n	80056a6 <UART_SetConfig+0x2e6>
 800554a:	2302      	movs	r3, #2
 800554c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005550:	e0a9      	b.n	80056a6 <UART_SetConfig+0x2e6>
 8005552:	2304      	movs	r3, #4
 8005554:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005558:	e0a5      	b.n	80056a6 <UART_SetConfig+0x2e6>
 800555a:	2308      	movs	r3, #8
 800555c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005560:	e0a1      	b.n	80056a6 <UART_SetConfig+0x2e6>
 8005562:	2310      	movs	r3, #16
 8005564:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005568:	e09d      	b.n	80056a6 <UART_SetConfig+0x2e6>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a4a      	ldr	r2, [pc, #296]	; (8005698 <UART_SetConfig+0x2d8>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d125      	bne.n	80055c0 <UART_SetConfig+0x200>
 8005574:	4b45      	ldr	r3, [pc, #276]	; (800568c <UART_SetConfig+0x2cc>)
 8005576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800557e:	2bc0      	cmp	r3, #192	; 0xc0
 8005580:	d016      	beq.n	80055b0 <UART_SetConfig+0x1f0>
 8005582:	2bc0      	cmp	r3, #192	; 0xc0
 8005584:	d818      	bhi.n	80055b8 <UART_SetConfig+0x1f8>
 8005586:	2b80      	cmp	r3, #128	; 0x80
 8005588:	d00a      	beq.n	80055a0 <UART_SetConfig+0x1e0>
 800558a:	2b80      	cmp	r3, #128	; 0x80
 800558c:	d814      	bhi.n	80055b8 <UART_SetConfig+0x1f8>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <UART_SetConfig+0x1d8>
 8005592:	2b40      	cmp	r3, #64	; 0x40
 8005594:	d008      	beq.n	80055a8 <UART_SetConfig+0x1e8>
 8005596:	e00f      	b.n	80055b8 <UART_SetConfig+0x1f8>
 8005598:	2300      	movs	r3, #0
 800559a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800559e:	e082      	b.n	80056a6 <UART_SetConfig+0x2e6>
 80055a0:	2302      	movs	r3, #2
 80055a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055a6:	e07e      	b.n	80056a6 <UART_SetConfig+0x2e6>
 80055a8:	2304      	movs	r3, #4
 80055aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ae:	e07a      	b.n	80056a6 <UART_SetConfig+0x2e6>
 80055b0:	2308      	movs	r3, #8
 80055b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055b6:	e076      	b.n	80056a6 <UART_SetConfig+0x2e6>
 80055b8:	2310      	movs	r3, #16
 80055ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055be:	e072      	b.n	80056a6 <UART_SetConfig+0x2e6>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a35      	ldr	r2, [pc, #212]	; (800569c <UART_SetConfig+0x2dc>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d12a      	bne.n	8005620 <UART_SetConfig+0x260>
 80055ca:	4b30      	ldr	r3, [pc, #192]	; (800568c <UART_SetConfig+0x2cc>)
 80055cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055d8:	d01a      	beq.n	8005610 <UART_SetConfig+0x250>
 80055da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055de:	d81b      	bhi.n	8005618 <UART_SetConfig+0x258>
 80055e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e4:	d00c      	beq.n	8005600 <UART_SetConfig+0x240>
 80055e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ea:	d815      	bhi.n	8005618 <UART_SetConfig+0x258>
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <UART_SetConfig+0x238>
 80055f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f4:	d008      	beq.n	8005608 <UART_SetConfig+0x248>
 80055f6:	e00f      	b.n	8005618 <UART_SetConfig+0x258>
 80055f8:	2300      	movs	r3, #0
 80055fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055fe:	e052      	b.n	80056a6 <UART_SetConfig+0x2e6>
 8005600:	2302      	movs	r3, #2
 8005602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005606:	e04e      	b.n	80056a6 <UART_SetConfig+0x2e6>
 8005608:	2304      	movs	r3, #4
 800560a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800560e:	e04a      	b.n	80056a6 <UART_SetConfig+0x2e6>
 8005610:	2308      	movs	r3, #8
 8005612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005616:	e046      	b.n	80056a6 <UART_SetConfig+0x2e6>
 8005618:	2310      	movs	r3, #16
 800561a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800561e:	e042      	b.n	80056a6 <UART_SetConfig+0x2e6>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a17      	ldr	r2, [pc, #92]	; (8005684 <UART_SetConfig+0x2c4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d13a      	bne.n	80056a0 <UART_SetConfig+0x2e0>
 800562a:	4b18      	ldr	r3, [pc, #96]	; (800568c <UART_SetConfig+0x2cc>)
 800562c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005630:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005634:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005638:	d01a      	beq.n	8005670 <UART_SetConfig+0x2b0>
 800563a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800563e:	d81b      	bhi.n	8005678 <UART_SetConfig+0x2b8>
 8005640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005644:	d00c      	beq.n	8005660 <UART_SetConfig+0x2a0>
 8005646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564a:	d815      	bhi.n	8005678 <UART_SetConfig+0x2b8>
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <UART_SetConfig+0x298>
 8005650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005654:	d008      	beq.n	8005668 <UART_SetConfig+0x2a8>
 8005656:	e00f      	b.n	8005678 <UART_SetConfig+0x2b8>
 8005658:	2300      	movs	r3, #0
 800565a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800565e:	e022      	b.n	80056a6 <UART_SetConfig+0x2e6>
 8005660:	2302      	movs	r3, #2
 8005662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005666:	e01e      	b.n	80056a6 <UART_SetConfig+0x2e6>
 8005668:	2304      	movs	r3, #4
 800566a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800566e:	e01a      	b.n	80056a6 <UART_SetConfig+0x2e6>
 8005670:	2308      	movs	r3, #8
 8005672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005676:	e016      	b.n	80056a6 <UART_SetConfig+0x2e6>
 8005678:	2310      	movs	r3, #16
 800567a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800567e:	e012      	b.n	80056a6 <UART_SetConfig+0x2e6>
 8005680:	efff69f3 	.word	0xefff69f3
 8005684:	40008000 	.word	0x40008000
 8005688:	40013800 	.word	0x40013800
 800568c:	40021000 	.word	0x40021000
 8005690:	40004400 	.word	0x40004400
 8005694:	40004800 	.word	0x40004800
 8005698:	40004c00 	.word	0x40004c00
 800569c:	40005000 	.word	0x40005000
 80056a0:	2310      	movs	r3, #16
 80056a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a9f      	ldr	r2, [pc, #636]	; (8005928 <UART_SetConfig+0x568>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d17a      	bne.n	80057a6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d824      	bhi.n	8005702 <UART_SetConfig+0x342>
 80056b8:	a201      	add	r2, pc, #4	; (adr r2, 80056c0 <UART_SetConfig+0x300>)
 80056ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056be:	bf00      	nop
 80056c0:	080056e5 	.word	0x080056e5
 80056c4:	08005703 	.word	0x08005703
 80056c8:	080056ed 	.word	0x080056ed
 80056cc:	08005703 	.word	0x08005703
 80056d0:	080056f3 	.word	0x080056f3
 80056d4:	08005703 	.word	0x08005703
 80056d8:	08005703 	.word	0x08005703
 80056dc:	08005703 	.word	0x08005703
 80056e0:	080056fb 	.word	0x080056fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056e4:	f7fe fa78 	bl	8003bd8 <HAL_RCC_GetPCLK1Freq>
 80056e8:	61f8      	str	r0, [r7, #28]
        break;
 80056ea:	e010      	b.n	800570e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056ec:	4b8f      	ldr	r3, [pc, #572]	; (800592c <UART_SetConfig+0x56c>)
 80056ee:	61fb      	str	r3, [r7, #28]
        break;
 80056f0:	e00d      	b.n	800570e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056f2:	f7fe f9d9 	bl	8003aa8 <HAL_RCC_GetSysClockFreq>
 80056f6:	61f8      	str	r0, [r7, #28]
        break;
 80056f8:	e009      	b.n	800570e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056fe:	61fb      	str	r3, [r7, #28]
        break;
 8005700:	e005      	b.n	800570e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005702:	2300      	movs	r3, #0
 8005704:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800570c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 80fb 	beq.w	800590c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	4613      	mov	r3, r2
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	4413      	add	r3, r2
 8005720:	69fa      	ldr	r2, [r7, #28]
 8005722:	429a      	cmp	r2, r3
 8005724:	d305      	bcc.n	8005732 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	429a      	cmp	r2, r3
 8005730:	d903      	bls.n	800573a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005738:	e0e8      	b.n	800590c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	2200      	movs	r2, #0
 800573e:	461c      	mov	r4, r3
 8005740:	4615      	mov	r5, r2
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	f04f 0300 	mov.w	r3, #0
 800574a:	022b      	lsls	r3, r5, #8
 800574c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005750:	0222      	lsls	r2, r4, #8
 8005752:	68f9      	ldr	r1, [r7, #12]
 8005754:	6849      	ldr	r1, [r1, #4]
 8005756:	0849      	lsrs	r1, r1, #1
 8005758:	2000      	movs	r0, #0
 800575a:	4688      	mov	r8, r1
 800575c:	4681      	mov	r9, r0
 800575e:	eb12 0a08 	adds.w	sl, r2, r8
 8005762:	eb43 0b09 	adc.w	fp, r3, r9
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	603b      	str	r3, [r7, #0]
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005774:	4650      	mov	r0, sl
 8005776:	4659      	mov	r1, fp
 8005778:	f7fb fa16 	bl	8000ba8 <__aeabi_uldivmod>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	4613      	mov	r3, r2
 8005782:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800578a:	d308      	bcc.n	800579e <UART_SetConfig+0x3de>
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005792:	d204      	bcs.n	800579e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	60da      	str	r2, [r3, #12]
 800579c:	e0b6      	b.n	800590c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80057a4:	e0b2      	b.n	800590c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ae:	d15e      	bne.n	800586e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80057b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d828      	bhi.n	800580a <UART_SetConfig+0x44a>
 80057b8:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <UART_SetConfig+0x400>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	080057e5 	.word	0x080057e5
 80057c4:	080057ed 	.word	0x080057ed
 80057c8:	080057f5 	.word	0x080057f5
 80057cc:	0800580b 	.word	0x0800580b
 80057d0:	080057fb 	.word	0x080057fb
 80057d4:	0800580b 	.word	0x0800580b
 80057d8:	0800580b 	.word	0x0800580b
 80057dc:	0800580b 	.word	0x0800580b
 80057e0:	08005803 	.word	0x08005803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057e4:	f7fe f9f8 	bl	8003bd8 <HAL_RCC_GetPCLK1Freq>
 80057e8:	61f8      	str	r0, [r7, #28]
        break;
 80057ea:	e014      	b.n	8005816 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057ec:	f7fe fa0a 	bl	8003c04 <HAL_RCC_GetPCLK2Freq>
 80057f0:	61f8      	str	r0, [r7, #28]
        break;
 80057f2:	e010      	b.n	8005816 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057f4:	4b4d      	ldr	r3, [pc, #308]	; (800592c <UART_SetConfig+0x56c>)
 80057f6:	61fb      	str	r3, [r7, #28]
        break;
 80057f8:	e00d      	b.n	8005816 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057fa:	f7fe f955 	bl	8003aa8 <HAL_RCC_GetSysClockFreq>
 80057fe:	61f8      	str	r0, [r7, #28]
        break;
 8005800:	e009      	b.n	8005816 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005806:	61fb      	str	r3, [r7, #28]
        break;
 8005808:	e005      	b.n	8005816 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005814:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d077      	beq.n	800590c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	005a      	lsls	r2, r3, #1
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	085b      	lsrs	r3, r3, #1
 8005826:	441a      	add	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005830:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	2b0f      	cmp	r3, #15
 8005836:	d916      	bls.n	8005866 <UART_SetConfig+0x4a6>
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800583e:	d212      	bcs.n	8005866 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	b29b      	uxth	r3, r3
 8005844:	f023 030f 	bic.w	r3, r3, #15
 8005848:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	085b      	lsrs	r3, r3, #1
 800584e:	b29b      	uxth	r3, r3
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	b29a      	uxth	r2, r3
 8005856:	8afb      	ldrh	r3, [r7, #22]
 8005858:	4313      	orrs	r3, r2
 800585a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	8afa      	ldrh	r2, [r7, #22]
 8005862:	60da      	str	r2, [r3, #12]
 8005864:	e052      	b.n	800590c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800586c:	e04e      	b.n	800590c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800586e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005872:	2b08      	cmp	r3, #8
 8005874:	d827      	bhi.n	80058c6 <UART_SetConfig+0x506>
 8005876:	a201      	add	r2, pc, #4	; (adr r2, 800587c <UART_SetConfig+0x4bc>)
 8005878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587c:	080058a1 	.word	0x080058a1
 8005880:	080058a9 	.word	0x080058a9
 8005884:	080058b1 	.word	0x080058b1
 8005888:	080058c7 	.word	0x080058c7
 800588c:	080058b7 	.word	0x080058b7
 8005890:	080058c7 	.word	0x080058c7
 8005894:	080058c7 	.word	0x080058c7
 8005898:	080058c7 	.word	0x080058c7
 800589c:	080058bf 	.word	0x080058bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058a0:	f7fe f99a 	bl	8003bd8 <HAL_RCC_GetPCLK1Freq>
 80058a4:	61f8      	str	r0, [r7, #28]
        break;
 80058a6:	e014      	b.n	80058d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058a8:	f7fe f9ac 	bl	8003c04 <HAL_RCC_GetPCLK2Freq>
 80058ac:	61f8      	str	r0, [r7, #28]
        break;
 80058ae:	e010      	b.n	80058d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058b0:	4b1e      	ldr	r3, [pc, #120]	; (800592c <UART_SetConfig+0x56c>)
 80058b2:	61fb      	str	r3, [r7, #28]
        break;
 80058b4:	e00d      	b.n	80058d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058b6:	f7fe f8f7 	bl	8003aa8 <HAL_RCC_GetSysClockFreq>
 80058ba:	61f8      	str	r0, [r7, #28]
        break;
 80058bc:	e009      	b.n	80058d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058c2:	61fb      	str	r3, [r7, #28]
        break;
 80058c4:	e005      	b.n	80058d2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80058d0:	bf00      	nop
    }

    if (pclk != 0U)
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d019      	beq.n	800590c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	085a      	lsrs	r2, r3, #1
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	441a      	add	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	2b0f      	cmp	r3, #15
 80058f0:	d909      	bls.n	8005906 <UART_SetConfig+0x546>
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f8:	d205      	bcs.n	8005906 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	60da      	str	r2, [r3, #12]
 8005904:	e002      	b.n	800590c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005918:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800591c:	4618      	mov	r0, r3
 800591e:	3728      	adds	r7, #40	; 0x28
 8005920:	46bd      	mov	sp, r7
 8005922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005926:	bf00      	nop
 8005928:	40008000 	.word	0x40008000
 800592c:	00f42400 	.word	0x00f42400

08005930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00a      	beq.n	800599e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	f003 0308 	and.w	r3, r3, #8
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00a      	beq.n	80059e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	f003 0320 	and.w	r3, r3, #32
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d01a      	beq.n	8005a46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a2e:	d10a      	bne.n	8005a46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	605a      	str	r2, [r3, #4]
  }
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af02      	add	r7, sp, #8
 8005a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a84:	f7fc f97c 	bl	8001d80 <HAL_GetTick>
 8005a88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0308 	and.w	r3, r3, #8
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d10e      	bne.n	8005ab6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f82d 	bl	8005b06 <UART_WaitOnFlagUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e023      	b.n	8005afe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d10e      	bne.n	8005ae2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ac4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f817 	bl	8005b06 <UART_WaitOnFlagUntilTimeout>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e00d      	b.n	8005afe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2220      	movs	r2, #32
 8005aec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b09c      	sub	sp, #112	; 0x70
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	60f8      	str	r0, [r7, #12]
 8005b0e:	60b9      	str	r1, [r7, #8]
 8005b10:	603b      	str	r3, [r7, #0]
 8005b12:	4613      	mov	r3, r2
 8005b14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b16:	e0a5      	b.n	8005c64 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b1e:	f000 80a1 	beq.w	8005c64 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b22:	f7fc f92d 	bl	8001d80 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d302      	bcc.n	8005b38 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d13e      	bne.n	8005bb6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b40:	e853 3f00 	ldrex	r3, [r3]
 8005b44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b4c:	667b      	str	r3, [r7, #100]	; 0x64
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	461a      	mov	r2, r3
 8005b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b58:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b5e:	e841 2300 	strex	r3, r2, [r1]
 8005b62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1e6      	bne.n	8005b38 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3308      	adds	r3, #8
 8005b70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7c:	f023 0301 	bic.w	r3, r3, #1
 8005b80:	663b      	str	r3, [r7, #96]	; 0x60
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3308      	adds	r3, #8
 8005b88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b92:	e841 2300 	strex	r3, r2, [r1]
 8005b96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1e5      	bne.n	8005b6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e067      	b.n	8005c86 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d04f      	beq.n	8005c64 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd2:	d147      	bne.n	8005c64 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bdc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	e853 3f00 	ldrex	r3, [r3]
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bf2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8005bfe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c04:	e841 2300 	strex	r3, r2, [r1]
 8005c08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1e6      	bne.n	8005bde <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3308      	adds	r3, #8
 8005c16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	e853 3f00 	ldrex	r3, [r3]
 8005c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f023 0301 	bic.w	r3, r3, #1
 8005c26:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3308      	adds	r3, #8
 8005c2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c30:	623a      	str	r2, [r7, #32]
 8005c32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c34:	69f9      	ldr	r1, [r7, #28]
 8005c36:	6a3a      	ldr	r2, [r7, #32]
 8005c38:	e841 2300 	strex	r3, r2, [r1]
 8005c3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1e5      	bne.n	8005c10 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2220      	movs	r2, #32
 8005c48:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e010      	b.n	8005c86 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	69da      	ldr	r2, [r3, #28]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	bf0c      	ite	eq
 8005c74:	2301      	moveq	r3, #1
 8005c76:	2300      	movne	r3, #0
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	79fb      	ldrb	r3, [r7, #7]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	f43f af4a 	beq.w	8005b18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3770      	adds	r7, #112	; 0x70
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
	...

08005c90 <__errno>:
 8005c90:	4b01      	ldr	r3, [pc, #4]	; (8005c98 <__errno+0x8>)
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	2000000c 	.word	0x2000000c

08005c9c <__libc_init_array>:
 8005c9c:	b570      	push	{r4, r5, r6, lr}
 8005c9e:	4d0d      	ldr	r5, [pc, #52]	; (8005cd4 <__libc_init_array+0x38>)
 8005ca0:	4c0d      	ldr	r4, [pc, #52]	; (8005cd8 <__libc_init_array+0x3c>)
 8005ca2:	1b64      	subs	r4, r4, r5
 8005ca4:	10a4      	asrs	r4, r4, #2
 8005ca6:	2600      	movs	r6, #0
 8005ca8:	42a6      	cmp	r6, r4
 8005caa:	d109      	bne.n	8005cc0 <__libc_init_array+0x24>
 8005cac:	4d0b      	ldr	r5, [pc, #44]	; (8005cdc <__libc_init_array+0x40>)
 8005cae:	4c0c      	ldr	r4, [pc, #48]	; (8005ce0 <__libc_init_array+0x44>)
 8005cb0:	f002 fdc4 	bl	800883c <_init>
 8005cb4:	1b64      	subs	r4, r4, r5
 8005cb6:	10a4      	asrs	r4, r4, #2
 8005cb8:	2600      	movs	r6, #0
 8005cba:	42a6      	cmp	r6, r4
 8005cbc:	d105      	bne.n	8005cca <__libc_init_array+0x2e>
 8005cbe:	bd70      	pop	{r4, r5, r6, pc}
 8005cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc4:	4798      	blx	r3
 8005cc6:	3601      	adds	r6, #1
 8005cc8:	e7ee      	b.n	8005ca8 <__libc_init_array+0xc>
 8005cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cce:	4798      	blx	r3
 8005cd0:	3601      	adds	r6, #1
 8005cd2:	e7f2      	b.n	8005cba <__libc_init_array+0x1e>
 8005cd4:	08008d74 	.word	0x08008d74
 8005cd8:	08008d74 	.word	0x08008d74
 8005cdc:	08008d74 	.word	0x08008d74
 8005ce0:	08008d78 	.word	0x08008d78

08005ce4 <memset>:
 8005ce4:	4402      	add	r2, r0
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d100      	bne.n	8005cee <memset+0xa>
 8005cec:	4770      	bx	lr
 8005cee:	f803 1b01 	strb.w	r1, [r3], #1
 8005cf2:	e7f9      	b.n	8005ce8 <memset+0x4>

08005cf4 <__cvt>:
 8005cf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf8:	ec55 4b10 	vmov	r4, r5, d0
 8005cfc:	2d00      	cmp	r5, #0
 8005cfe:	460e      	mov	r6, r1
 8005d00:	4619      	mov	r1, r3
 8005d02:	462b      	mov	r3, r5
 8005d04:	bfbb      	ittet	lt
 8005d06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005d0a:	461d      	movlt	r5, r3
 8005d0c:	2300      	movge	r3, #0
 8005d0e:	232d      	movlt	r3, #45	; 0x2d
 8005d10:	700b      	strb	r3, [r1, #0]
 8005d12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d18:	4691      	mov	r9, r2
 8005d1a:	f023 0820 	bic.w	r8, r3, #32
 8005d1e:	bfbc      	itt	lt
 8005d20:	4622      	movlt	r2, r4
 8005d22:	4614      	movlt	r4, r2
 8005d24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d28:	d005      	beq.n	8005d36 <__cvt+0x42>
 8005d2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d2e:	d100      	bne.n	8005d32 <__cvt+0x3e>
 8005d30:	3601      	adds	r6, #1
 8005d32:	2102      	movs	r1, #2
 8005d34:	e000      	b.n	8005d38 <__cvt+0x44>
 8005d36:	2103      	movs	r1, #3
 8005d38:	ab03      	add	r3, sp, #12
 8005d3a:	9301      	str	r3, [sp, #4]
 8005d3c:	ab02      	add	r3, sp, #8
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	ec45 4b10 	vmov	d0, r4, r5
 8005d44:	4653      	mov	r3, sl
 8005d46:	4632      	mov	r2, r6
 8005d48:	f000 fe1a 	bl	8006980 <_dtoa_r>
 8005d4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d50:	4607      	mov	r7, r0
 8005d52:	d102      	bne.n	8005d5a <__cvt+0x66>
 8005d54:	f019 0f01 	tst.w	r9, #1
 8005d58:	d022      	beq.n	8005da0 <__cvt+0xac>
 8005d5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d5e:	eb07 0906 	add.w	r9, r7, r6
 8005d62:	d110      	bne.n	8005d86 <__cvt+0x92>
 8005d64:	783b      	ldrb	r3, [r7, #0]
 8005d66:	2b30      	cmp	r3, #48	; 0x30
 8005d68:	d10a      	bne.n	8005d80 <__cvt+0x8c>
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	4620      	mov	r0, r4
 8005d70:	4629      	mov	r1, r5
 8005d72:	f7fa fea9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d76:	b918      	cbnz	r0, 8005d80 <__cvt+0x8c>
 8005d78:	f1c6 0601 	rsb	r6, r6, #1
 8005d7c:	f8ca 6000 	str.w	r6, [sl]
 8005d80:	f8da 3000 	ldr.w	r3, [sl]
 8005d84:	4499      	add	r9, r3
 8005d86:	2200      	movs	r2, #0
 8005d88:	2300      	movs	r3, #0
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	4629      	mov	r1, r5
 8005d8e:	f7fa fe9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d92:	b108      	cbz	r0, 8005d98 <__cvt+0xa4>
 8005d94:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d98:	2230      	movs	r2, #48	; 0x30
 8005d9a:	9b03      	ldr	r3, [sp, #12]
 8005d9c:	454b      	cmp	r3, r9
 8005d9e:	d307      	bcc.n	8005db0 <__cvt+0xbc>
 8005da0:	9b03      	ldr	r3, [sp, #12]
 8005da2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005da4:	1bdb      	subs	r3, r3, r7
 8005da6:	4638      	mov	r0, r7
 8005da8:	6013      	str	r3, [r2, #0]
 8005daa:	b004      	add	sp, #16
 8005dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db0:	1c59      	adds	r1, r3, #1
 8005db2:	9103      	str	r1, [sp, #12]
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	e7f0      	b.n	8005d9a <__cvt+0xa6>

08005db8 <__exponent>:
 8005db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2900      	cmp	r1, #0
 8005dbe:	bfb8      	it	lt
 8005dc0:	4249      	neglt	r1, r1
 8005dc2:	f803 2b02 	strb.w	r2, [r3], #2
 8005dc6:	bfb4      	ite	lt
 8005dc8:	222d      	movlt	r2, #45	; 0x2d
 8005dca:	222b      	movge	r2, #43	; 0x2b
 8005dcc:	2909      	cmp	r1, #9
 8005dce:	7042      	strb	r2, [r0, #1]
 8005dd0:	dd2a      	ble.n	8005e28 <__exponent+0x70>
 8005dd2:	f10d 0407 	add.w	r4, sp, #7
 8005dd6:	46a4      	mov	ip, r4
 8005dd8:	270a      	movs	r7, #10
 8005dda:	46a6      	mov	lr, r4
 8005ddc:	460a      	mov	r2, r1
 8005dde:	fb91 f6f7 	sdiv	r6, r1, r7
 8005de2:	fb07 1516 	mls	r5, r7, r6, r1
 8005de6:	3530      	adds	r5, #48	; 0x30
 8005de8:	2a63      	cmp	r2, #99	; 0x63
 8005dea:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005dee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005df2:	4631      	mov	r1, r6
 8005df4:	dcf1      	bgt.n	8005dda <__exponent+0x22>
 8005df6:	3130      	adds	r1, #48	; 0x30
 8005df8:	f1ae 0502 	sub.w	r5, lr, #2
 8005dfc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005e00:	1c44      	adds	r4, r0, #1
 8005e02:	4629      	mov	r1, r5
 8005e04:	4561      	cmp	r1, ip
 8005e06:	d30a      	bcc.n	8005e1e <__exponent+0x66>
 8005e08:	f10d 0209 	add.w	r2, sp, #9
 8005e0c:	eba2 020e 	sub.w	r2, r2, lr
 8005e10:	4565      	cmp	r5, ip
 8005e12:	bf88      	it	hi
 8005e14:	2200      	movhi	r2, #0
 8005e16:	4413      	add	r3, r2
 8005e18:	1a18      	subs	r0, r3, r0
 8005e1a:	b003      	add	sp, #12
 8005e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e22:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005e26:	e7ed      	b.n	8005e04 <__exponent+0x4c>
 8005e28:	2330      	movs	r3, #48	; 0x30
 8005e2a:	3130      	adds	r1, #48	; 0x30
 8005e2c:	7083      	strb	r3, [r0, #2]
 8005e2e:	70c1      	strb	r1, [r0, #3]
 8005e30:	1d03      	adds	r3, r0, #4
 8005e32:	e7f1      	b.n	8005e18 <__exponent+0x60>

08005e34 <_printf_float>:
 8005e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e38:	ed2d 8b02 	vpush	{d8}
 8005e3c:	b08d      	sub	sp, #52	; 0x34
 8005e3e:	460c      	mov	r4, r1
 8005e40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e44:	4616      	mov	r6, r2
 8005e46:	461f      	mov	r7, r3
 8005e48:	4605      	mov	r5, r0
 8005e4a:	f001 fd3f 	bl	80078cc <_localeconv_r>
 8005e4e:	f8d0 a000 	ldr.w	sl, [r0]
 8005e52:	4650      	mov	r0, sl
 8005e54:	f7fa f9bc 	bl	80001d0 <strlen>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	930a      	str	r3, [sp, #40]	; 0x28
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	9305      	str	r3, [sp, #20]
 8005e60:	f8d8 3000 	ldr.w	r3, [r8]
 8005e64:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005e68:	3307      	adds	r3, #7
 8005e6a:	f023 0307 	bic.w	r3, r3, #7
 8005e6e:	f103 0208 	add.w	r2, r3, #8
 8005e72:	f8c8 2000 	str.w	r2, [r8]
 8005e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e7e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005e82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e86:	9307      	str	r3, [sp, #28]
 8005e88:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e8c:	ee08 0a10 	vmov	s16, r0
 8005e90:	4b9f      	ldr	r3, [pc, #636]	; (8006110 <_printf_float+0x2dc>)
 8005e92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e9a:	f7fa fe47 	bl	8000b2c <__aeabi_dcmpun>
 8005e9e:	bb88      	cbnz	r0, 8005f04 <_printf_float+0xd0>
 8005ea0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ea4:	4b9a      	ldr	r3, [pc, #616]	; (8006110 <_printf_float+0x2dc>)
 8005ea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eaa:	f7fa fe21 	bl	8000af0 <__aeabi_dcmple>
 8005eae:	bb48      	cbnz	r0, 8005f04 <_printf_float+0xd0>
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	4640      	mov	r0, r8
 8005eb6:	4649      	mov	r1, r9
 8005eb8:	f7fa fe10 	bl	8000adc <__aeabi_dcmplt>
 8005ebc:	b110      	cbz	r0, 8005ec4 <_printf_float+0x90>
 8005ebe:	232d      	movs	r3, #45	; 0x2d
 8005ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ec4:	4b93      	ldr	r3, [pc, #588]	; (8006114 <_printf_float+0x2e0>)
 8005ec6:	4894      	ldr	r0, [pc, #592]	; (8006118 <_printf_float+0x2e4>)
 8005ec8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005ecc:	bf94      	ite	ls
 8005ece:	4698      	movls	r8, r3
 8005ed0:	4680      	movhi	r8, r0
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	6123      	str	r3, [r4, #16]
 8005ed6:	9b05      	ldr	r3, [sp, #20]
 8005ed8:	f023 0204 	bic.w	r2, r3, #4
 8005edc:	6022      	str	r2, [r4, #0]
 8005ede:	f04f 0900 	mov.w	r9, #0
 8005ee2:	9700      	str	r7, [sp, #0]
 8005ee4:	4633      	mov	r3, r6
 8005ee6:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ee8:	4621      	mov	r1, r4
 8005eea:	4628      	mov	r0, r5
 8005eec:	f000 f9d8 	bl	80062a0 <_printf_common>
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	f040 8090 	bne.w	8006016 <_printf_float+0x1e2>
 8005ef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005efa:	b00d      	add	sp, #52	; 0x34
 8005efc:	ecbd 8b02 	vpop	{d8}
 8005f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f04:	4642      	mov	r2, r8
 8005f06:	464b      	mov	r3, r9
 8005f08:	4640      	mov	r0, r8
 8005f0a:	4649      	mov	r1, r9
 8005f0c:	f7fa fe0e 	bl	8000b2c <__aeabi_dcmpun>
 8005f10:	b140      	cbz	r0, 8005f24 <_printf_float+0xf0>
 8005f12:	464b      	mov	r3, r9
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bfbc      	itt	lt
 8005f18:	232d      	movlt	r3, #45	; 0x2d
 8005f1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f1e:	487f      	ldr	r0, [pc, #508]	; (800611c <_printf_float+0x2e8>)
 8005f20:	4b7f      	ldr	r3, [pc, #508]	; (8006120 <_printf_float+0x2ec>)
 8005f22:	e7d1      	b.n	8005ec8 <_printf_float+0x94>
 8005f24:	6863      	ldr	r3, [r4, #4]
 8005f26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f2a:	9206      	str	r2, [sp, #24]
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	d13f      	bne.n	8005fb0 <_printf_float+0x17c>
 8005f30:	2306      	movs	r3, #6
 8005f32:	6063      	str	r3, [r4, #4]
 8005f34:	9b05      	ldr	r3, [sp, #20]
 8005f36:	6861      	ldr	r1, [r4, #4]
 8005f38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	9303      	str	r3, [sp, #12]
 8005f40:	ab0a      	add	r3, sp, #40	; 0x28
 8005f42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005f46:	ab09      	add	r3, sp, #36	; 0x24
 8005f48:	ec49 8b10 	vmov	d0, r8, r9
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	6022      	str	r2, [r4, #0]
 8005f50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f54:	4628      	mov	r0, r5
 8005f56:	f7ff fecd 	bl	8005cf4 <__cvt>
 8005f5a:	9b06      	ldr	r3, [sp, #24]
 8005f5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f5e:	2b47      	cmp	r3, #71	; 0x47
 8005f60:	4680      	mov	r8, r0
 8005f62:	d108      	bne.n	8005f76 <_printf_float+0x142>
 8005f64:	1cc8      	adds	r0, r1, #3
 8005f66:	db02      	blt.n	8005f6e <_printf_float+0x13a>
 8005f68:	6863      	ldr	r3, [r4, #4]
 8005f6a:	4299      	cmp	r1, r3
 8005f6c:	dd41      	ble.n	8005ff2 <_printf_float+0x1be>
 8005f6e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005f72:	fa5f fb8b 	uxtb.w	fp, fp
 8005f76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f7a:	d820      	bhi.n	8005fbe <_printf_float+0x18a>
 8005f7c:	3901      	subs	r1, #1
 8005f7e:	465a      	mov	r2, fp
 8005f80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f84:	9109      	str	r1, [sp, #36]	; 0x24
 8005f86:	f7ff ff17 	bl	8005db8 <__exponent>
 8005f8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f8c:	1813      	adds	r3, r2, r0
 8005f8e:	2a01      	cmp	r2, #1
 8005f90:	4681      	mov	r9, r0
 8005f92:	6123      	str	r3, [r4, #16]
 8005f94:	dc02      	bgt.n	8005f9c <_printf_float+0x168>
 8005f96:	6822      	ldr	r2, [r4, #0]
 8005f98:	07d2      	lsls	r2, r2, #31
 8005f9a:	d501      	bpl.n	8005fa0 <_printf_float+0x16c>
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	6123      	str	r3, [r4, #16]
 8005fa0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d09c      	beq.n	8005ee2 <_printf_float+0xae>
 8005fa8:	232d      	movs	r3, #45	; 0x2d
 8005faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fae:	e798      	b.n	8005ee2 <_printf_float+0xae>
 8005fb0:	9a06      	ldr	r2, [sp, #24]
 8005fb2:	2a47      	cmp	r2, #71	; 0x47
 8005fb4:	d1be      	bne.n	8005f34 <_printf_float+0x100>
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1bc      	bne.n	8005f34 <_printf_float+0x100>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e7b9      	b.n	8005f32 <_printf_float+0xfe>
 8005fbe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005fc2:	d118      	bne.n	8005ff6 <_printf_float+0x1c2>
 8005fc4:	2900      	cmp	r1, #0
 8005fc6:	6863      	ldr	r3, [r4, #4]
 8005fc8:	dd0b      	ble.n	8005fe2 <_printf_float+0x1ae>
 8005fca:	6121      	str	r1, [r4, #16]
 8005fcc:	b913      	cbnz	r3, 8005fd4 <_printf_float+0x1a0>
 8005fce:	6822      	ldr	r2, [r4, #0]
 8005fd0:	07d0      	lsls	r0, r2, #31
 8005fd2:	d502      	bpl.n	8005fda <_printf_float+0x1a6>
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	440b      	add	r3, r1
 8005fd8:	6123      	str	r3, [r4, #16]
 8005fda:	65a1      	str	r1, [r4, #88]	; 0x58
 8005fdc:	f04f 0900 	mov.w	r9, #0
 8005fe0:	e7de      	b.n	8005fa0 <_printf_float+0x16c>
 8005fe2:	b913      	cbnz	r3, 8005fea <_printf_float+0x1b6>
 8005fe4:	6822      	ldr	r2, [r4, #0]
 8005fe6:	07d2      	lsls	r2, r2, #31
 8005fe8:	d501      	bpl.n	8005fee <_printf_float+0x1ba>
 8005fea:	3302      	adds	r3, #2
 8005fec:	e7f4      	b.n	8005fd8 <_printf_float+0x1a4>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e7f2      	b.n	8005fd8 <_printf_float+0x1a4>
 8005ff2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ff8:	4299      	cmp	r1, r3
 8005ffa:	db05      	blt.n	8006008 <_printf_float+0x1d4>
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	6121      	str	r1, [r4, #16]
 8006000:	07d8      	lsls	r0, r3, #31
 8006002:	d5ea      	bpl.n	8005fda <_printf_float+0x1a6>
 8006004:	1c4b      	adds	r3, r1, #1
 8006006:	e7e7      	b.n	8005fd8 <_printf_float+0x1a4>
 8006008:	2900      	cmp	r1, #0
 800600a:	bfd4      	ite	le
 800600c:	f1c1 0202 	rsble	r2, r1, #2
 8006010:	2201      	movgt	r2, #1
 8006012:	4413      	add	r3, r2
 8006014:	e7e0      	b.n	8005fd8 <_printf_float+0x1a4>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	055a      	lsls	r2, r3, #21
 800601a:	d407      	bmi.n	800602c <_printf_float+0x1f8>
 800601c:	6923      	ldr	r3, [r4, #16]
 800601e:	4642      	mov	r2, r8
 8006020:	4631      	mov	r1, r6
 8006022:	4628      	mov	r0, r5
 8006024:	47b8      	blx	r7
 8006026:	3001      	adds	r0, #1
 8006028:	d12c      	bne.n	8006084 <_printf_float+0x250>
 800602a:	e764      	b.n	8005ef6 <_printf_float+0xc2>
 800602c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006030:	f240 80e0 	bls.w	80061f4 <_printf_float+0x3c0>
 8006034:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006038:	2200      	movs	r2, #0
 800603a:	2300      	movs	r3, #0
 800603c:	f7fa fd44 	bl	8000ac8 <__aeabi_dcmpeq>
 8006040:	2800      	cmp	r0, #0
 8006042:	d034      	beq.n	80060ae <_printf_float+0x27a>
 8006044:	4a37      	ldr	r2, [pc, #220]	; (8006124 <_printf_float+0x2f0>)
 8006046:	2301      	movs	r3, #1
 8006048:	4631      	mov	r1, r6
 800604a:	4628      	mov	r0, r5
 800604c:	47b8      	blx	r7
 800604e:	3001      	adds	r0, #1
 8006050:	f43f af51 	beq.w	8005ef6 <_printf_float+0xc2>
 8006054:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006058:	429a      	cmp	r2, r3
 800605a:	db02      	blt.n	8006062 <_printf_float+0x22e>
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	07d8      	lsls	r0, r3, #31
 8006060:	d510      	bpl.n	8006084 <_printf_float+0x250>
 8006062:	ee18 3a10 	vmov	r3, s16
 8006066:	4652      	mov	r2, sl
 8006068:	4631      	mov	r1, r6
 800606a:	4628      	mov	r0, r5
 800606c:	47b8      	blx	r7
 800606e:	3001      	adds	r0, #1
 8006070:	f43f af41 	beq.w	8005ef6 <_printf_float+0xc2>
 8006074:	f04f 0800 	mov.w	r8, #0
 8006078:	f104 091a 	add.w	r9, r4, #26
 800607c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800607e:	3b01      	subs	r3, #1
 8006080:	4543      	cmp	r3, r8
 8006082:	dc09      	bgt.n	8006098 <_printf_float+0x264>
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	079b      	lsls	r3, r3, #30
 8006088:	f100 8105 	bmi.w	8006296 <_printf_float+0x462>
 800608c:	68e0      	ldr	r0, [r4, #12]
 800608e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006090:	4298      	cmp	r0, r3
 8006092:	bfb8      	it	lt
 8006094:	4618      	movlt	r0, r3
 8006096:	e730      	b.n	8005efa <_printf_float+0xc6>
 8006098:	2301      	movs	r3, #1
 800609a:	464a      	mov	r2, r9
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	47b8      	blx	r7
 80060a2:	3001      	adds	r0, #1
 80060a4:	f43f af27 	beq.w	8005ef6 <_printf_float+0xc2>
 80060a8:	f108 0801 	add.w	r8, r8, #1
 80060ac:	e7e6      	b.n	800607c <_printf_float+0x248>
 80060ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	dc39      	bgt.n	8006128 <_printf_float+0x2f4>
 80060b4:	4a1b      	ldr	r2, [pc, #108]	; (8006124 <_printf_float+0x2f0>)
 80060b6:	2301      	movs	r3, #1
 80060b8:	4631      	mov	r1, r6
 80060ba:	4628      	mov	r0, r5
 80060bc:	47b8      	blx	r7
 80060be:	3001      	adds	r0, #1
 80060c0:	f43f af19 	beq.w	8005ef6 <_printf_float+0xc2>
 80060c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060c8:	4313      	orrs	r3, r2
 80060ca:	d102      	bne.n	80060d2 <_printf_float+0x29e>
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	07d9      	lsls	r1, r3, #31
 80060d0:	d5d8      	bpl.n	8006084 <_printf_float+0x250>
 80060d2:	ee18 3a10 	vmov	r3, s16
 80060d6:	4652      	mov	r2, sl
 80060d8:	4631      	mov	r1, r6
 80060da:	4628      	mov	r0, r5
 80060dc:	47b8      	blx	r7
 80060de:	3001      	adds	r0, #1
 80060e0:	f43f af09 	beq.w	8005ef6 <_printf_float+0xc2>
 80060e4:	f04f 0900 	mov.w	r9, #0
 80060e8:	f104 0a1a 	add.w	sl, r4, #26
 80060ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ee:	425b      	negs	r3, r3
 80060f0:	454b      	cmp	r3, r9
 80060f2:	dc01      	bgt.n	80060f8 <_printf_float+0x2c4>
 80060f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060f6:	e792      	b.n	800601e <_printf_float+0x1ea>
 80060f8:	2301      	movs	r3, #1
 80060fa:	4652      	mov	r2, sl
 80060fc:	4631      	mov	r1, r6
 80060fe:	4628      	mov	r0, r5
 8006100:	47b8      	blx	r7
 8006102:	3001      	adds	r0, #1
 8006104:	f43f aef7 	beq.w	8005ef6 <_printf_float+0xc2>
 8006108:	f109 0901 	add.w	r9, r9, #1
 800610c:	e7ee      	b.n	80060ec <_printf_float+0x2b8>
 800610e:	bf00      	nop
 8006110:	7fefffff 	.word	0x7fefffff
 8006114:	08008998 	.word	0x08008998
 8006118:	0800899c 	.word	0x0800899c
 800611c:	080089a4 	.word	0x080089a4
 8006120:	080089a0 	.word	0x080089a0
 8006124:	080089a8 	.word	0x080089a8
 8006128:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800612a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800612c:	429a      	cmp	r2, r3
 800612e:	bfa8      	it	ge
 8006130:	461a      	movge	r2, r3
 8006132:	2a00      	cmp	r2, #0
 8006134:	4691      	mov	r9, r2
 8006136:	dc37      	bgt.n	80061a8 <_printf_float+0x374>
 8006138:	f04f 0b00 	mov.w	fp, #0
 800613c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006140:	f104 021a 	add.w	r2, r4, #26
 8006144:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006146:	9305      	str	r3, [sp, #20]
 8006148:	eba3 0309 	sub.w	r3, r3, r9
 800614c:	455b      	cmp	r3, fp
 800614e:	dc33      	bgt.n	80061b8 <_printf_float+0x384>
 8006150:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006154:	429a      	cmp	r2, r3
 8006156:	db3b      	blt.n	80061d0 <_printf_float+0x39c>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	07da      	lsls	r2, r3, #31
 800615c:	d438      	bmi.n	80061d0 <_printf_float+0x39c>
 800615e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006160:	9a05      	ldr	r2, [sp, #20]
 8006162:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006164:	1a9a      	subs	r2, r3, r2
 8006166:	eba3 0901 	sub.w	r9, r3, r1
 800616a:	4591      	cmp	r9, r2
 800616c:	bfa8      	it	ge
 800616e:	4691      	movge	r9, r2
 8006170:	f1b9 0f00 	cmp.w	r9, #0
 8006174:	dc35      	bgt.n	80061e2 <_printf_float+0x3ae>
 8006176:	f04f 0800 	mov.w	r8, #0
 800617a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800617e:	f104 0a1a 	add.w	sl, r4, #26
 8006182:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006186:	1a9b      	subs	r3, r3, r2
 8006188:	eba3 0309 	sub.w	r3, r3, r9
 800618c:	4543      	cmp	r3, r8
 800618e:	f77f af79 	ble.w	8006084 <_printf_float+0x250>
 8006192:	2301      	movs	r3, #1
 8006194:	4652      	mov	r2, sl
 8006196:	4631      	mov	r1, r6
 8006198:	4628      	mov	r0, r5
 800619a:	47b8      	blx	r7
 800619c:	3001      	adds	r0, #1
 800619e:	f43f aeaa 	beq.w	8005ef6 <_printf_float+0xc2>
 80061a2:	f108 0801 	add.w	r8, r8, #1
 80061a6:	e7ec      	b.n	8006182 <_printf_float+0x34e>
 80061a8:	4613      	mov	r3, r2
 80061aa:	4631      	mov	r1, r6
 80061ac:	4642      	mov	r2, r8
 80061ae:	4628      	mov	r0, r5
 80061b0:	47b8      	blx	r7
 80061b2:	3001      	adds	r0, #1
 80061b4:	d1c0      	bne.n	8006138 <_printf_float+0x304>
 80061b6:	e69e      	b.n	8005ef6 <_printf_float+0xc2>
 80061b8:	2301      	movs	r3, #1
 80061ba:	4631      	mov	r1, r6
 80061bc:	4628      	mov	r0, r5
 80061be:	9205      	str	r2, [sp, #20]
 80061c0:	47b8      	blx	r7
 80061c2:	3001      	adds	r0, #1
 80061c4:	f43f ae97 	beq.w	8005ef6 <_printf_float+0xc2>
 80061c8:	9a05      	ldr	r2, [sp, #20]
 80061ca:	f10b 0b01 	add.w	fp, fp, #1
 80061ce:	e7b9      	b.n	8006144 <_printf_float+0x310>
 80061d0:	ee18 3a10 	vmov	r3, s16
 80061d4:	4652      	mov	r2, sl
 80061d6:	4631      	mov	r1, r6
 80061d8:	4628      	mov	r0, r5
 80061da:	47b8      	blx	r7
 80061dc:	3001      	adds	r0, #1
 80061de:	d1be      	bne.n	800615e <_printf_float+0x32a>
 80061e0:	e689      	b.n	8005ef6 <_printf_float+0xc2>
 80061e2:	9a05      	ldr	r2, [sp, #20]
 80061e4:	464b      	mov	r3, r9
 80061e6:	4442      	add	r2, r8
 80061e8:	4631      	mov	r1, r6
 80061ea:	4628      	mov	r0, r5
 80061ec:	47b8      	blx	r7
 80061ee:	3001      	adds	r0, #1
 80061f0:	d1c1      	bne.n	8006176 <_printf_float+0x342>
 80061f2:	e680      	b.n	8005ef6 <_printf_float+0xc2>
 80061f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061f6:	2a01      	cmp	r2, #1
 80061f8:	dc01      	bgt.n	80061fe <_printf_float+0x3ca>
 80061fa:	07db      	lsls	r3, r3, #31
 80061fc:	d538      	bpl.n	8006270 <_printf_float+0x43c>
 80061fe:	2301      	movs	r3, #1
 8006200:	4642      	mov	r2, r8
 8006202:	4631      	mov	r1, r6
 8006204:	4628      	mov	r0, r5
 8006206:	47b8      	blx	r7
 8006208:	3001      	adds	r0, #1
 800620a:	f43f ae74 	beq.w	8005ef6 <_printf_float+0xc2>
 800620e:	ee18 3a10 	vmov	r3, s16
 8006212:	4652      	mov	r2, sl
 8006214:	4631      	mov	r1, r6
 8006216:	4628      	mov	r0, r5
 8006218:	47b8      	blx	r7
 800621a:	3001      	adds	r0, #1
 800621c:	f43f ae6b 	beq.w	8005ef6 <_printf_float+0xc2>
 8006220:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006224:	2200      	movs	r2, #0
 8006226:	2300      	movs	r3, #0
 8006228:	f7fa fc4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800622c:	b9d8      	cbnz	r0, 8006266 <_printf_float+0x432>
 800622e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006230:	f108 0201 	add.w	r2, r8, #1
 8006234:	3b01      	subs	r3, #1
 8006236:	4631      	mov	r1, r6
 8006238:	4628      	mov	r0, r5
 800623a:	47b8      	blx	r7
 800623c:	3001      	adds	r0, #1
 800623e:	d10e      	bne.n	800625e <_printf_float+0x42a>
 8006240:	e659      	b.n	8005ef6 <_printf_float+0xc2>
 8006242:	2301      	movs	r3, #1
 8006244:	4652      	mov	r2, sl
 8006246:	4631      	mov	r1, r6
 8006248:	4628      	mov	r0, r5
 800624a:	47b8      	blx	r7
 800624c:	3001      	adds	r0, #1
 800624e:	f43f ae52 	beq.w	8005ef6 <_printf_float+0xc2>
 8006252:	f108 0801 	add.w	r8, r8, #1
 8006256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006258:	3b01      	subs	r3, #1
 800625a:	4543      	cmp	r3, r8
 800625c:	dcf1      	bgt.n	8006242 <_printf_float+0x40e>
 800625e:	464b      	mov	r3, r9
 8006260:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006264:	e6dc      	b.n	8006020 <_printf_float+0x1ec>
 8006266:	f04f 0800 	mov.w	r8, #0
 800626a:	f104 0a1a 	add.w	sl, r4, #26
 800626e:	e7f2      	b.n	8006256 <_printf_float+0x422>
 8006270:	2301      	movs	r3, #1
 8006272:	4642      	mov	r2, r8
 8006274:	e7df      	b.n	8006236 <_printf_float+0x402>
 8006276:	2301      	movs	r3, #1
 8006278:	464a      	mov	r2, r9
 800627a:	4631      	mov	r1, r6
 800627c:	4628      	mov	r0, r5
 800627e:	47b8      	blx	r7
 8006280:	3001      	adds	r0, #1
 8006282:	f43f ae38 	beq.w	8005ef6 <_printf_float+0xc2>
 8006286:	f108 0801 	add.w	r8, r8, #1
 800628a:	68e3      	ldr	r3, [r4, #12]
 800628c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800628e:	1a5b      	subs	r3, r3, r1
 8006290:	4543      	cmp	r3, r8
 8006292:	dcf0      	bgt.n	8006276 <_printf_float+0x442>
 8006294:	e6fa      	b.n	800608c <_printf_float+0x258>
 8006296:	f04f 0800 	mov.w	r8, #0
 800629a:	f104 0919 	add.w	r9, r4, #25
 800629e:	e7f4      	b.n	800628a <_printf_float+0x456>

080062a0 <_printf_common>:
 80062a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062a4:	4616      	mov	r6, r2
 80062a6:	4699      	mov	r9, r3
 80062a8:	688a      	ldr	r2, [r1, #8]
 80062aa:	690b      	ldr	r3, [r1, #16]
 80062ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062b0:	4293      	cmp	r3, r2
 80062b2:	bfb8      	it	lt
 80062b4:	4613      	movlt	r3, r2
 80062b6:	6033      	str	r3, [r6, #0]
 80062b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062bc:	4607      	mov	r7, r0
 80062be:	460c      	mov	r4, r1
 80062c0:	b10a      	cbz	r2, 80062c6 <_printf_common+0x26>
 80062c2:	3301      	adds	r3, #1
 80062c4:	6033      	str	r3, [r6, #0]
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	0699      	lsls	r1, r3, #26
 80062ca:	bf42      	ittt	mi
 80062cc:	6833      	ldrmi	r3, [r6, #0]
 80062ce:	3302      	addmi	r3, #2
 80062d0:	6033      	strmi	r3, [r6, #0]
 80062d2:	6825      	ldr	r5, [r4, #0]
 80062d4:	f015 0506 	ands.w	r5, r5, #6
 80062d8:	d106      	bne.n	80062e8 <_printf_common+0x48>
 80062da:	f104 0a19 	add.w	sl, r4, #25
 80062de:	68e3      	ldr	r3, [r4, #12]
 80062e0:	6832      	ldr	r2, [r6, #0]
 80062e2:	1a9b      	subs	r3, r3, r2
 80062e4:	42ab      	cmp	r3, r5
 80062e6:	dc26      	bgt.n	8006336 <_printf_common+0x96>
 80062e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062ec:	1e13      	subs	r3, r2, #0
 80062ee:	6822      	ldr	r2, [r4, #0]
 80062f0:	bf18      	it	ne
 80062f2:	2301      	movne	r3, #1
 80062f4:	0692      	lsls	r2, r2, #26
 80062f6:	d42b      	bmi.n	8006350 <_printf_common+0xb0>
 80062f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062fc:	4649      	mov	r1, r9
 80062fe:	4638      	mov	r0, r7
 8006300:	47c0      	blx	r8
 8006302:	3001      	adds	r0, #1
 8006304:	d01e      	beq.n	8006344 <_printf_common+0xa4>
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	68e5      	ldr	r5, [r4, #12]
 800630a:	6832      	ldr	r2, [r6, #0]
 800630c:	f003 0306 	and.w	r3, r3, #6
 8006310:	2b04      	cmp	r3, #4
 8006312:	bf08      	it	eq
 8006314:	1aad      	subeq	r5, r5, r2
 8006316:	68a3      	ldr	r3, [r4, #8]
 8006318:	6922      	ldr	r2, [r4, #16]
 800631a:	bf0c      	ite	eq
 800631c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006320:	2500      	movne	r5, #0
 8006322:	4293      	cmp	r3, r2
 8006324:	bfc4      	itt	gt
 8006326:	1a9b      	subgt	r3, r3, r2
 8006328:	18ed      	addgt	r5, r5, r3
 800632a:	2600      	movs	r6, #0
 800632c:	341a      	adds	r4, #26
 800632e:	42b5      	cmp	r5, r6
 8006330:	d11a      	bne.n	8006368 <_printf_common+0xc8>
 8006332:	2000      	movs	r0, #0
 8006334:	e008      	b.n	8006348 <_printf_common+0xa8>
 8006336:	2301      	movs	r3, #1
 8006338:	4652      	mov	r2, sl
 800633a:	4649      	mov	r1, r9
 800633c:	4638      	mov	r0, r7
 800633e:	47c0      	blx	r8
 8006340:	3001      	adds	r0, #1
 8006342:	d103      	bne.n	800634c <_printf_common+0xac>
 8006344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800634c:	3501      	adds	r5, #1
 800634e:	e7c6      	b.n	80062de <_printf_common+0x3e>
 8006350:	18e1      	adds	r1, r4, r3
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	2030      	movs	r0, #48	; 0x30
 8006356:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800635a:	4422      	add	r2, r4
 800635c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006360:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006364:	3302      	adds	r3, #2
 8006366:	e7c7      	b.n	80062f8 <_printf_common+0x58>
 8006368:	2301      	movs	r3, #1
 800636a:	4622      	mov	r2, r4
 800636c:	4649      	mov	r1, r9
 800636e:	4638      	mov	r0, r7
 8006370:	47c0      	blx	r8
 8006372:	3001      	adds	r0, #1
 8006374:	d0e6      	beq.n	8006344 <_printf_common+0xa4>
 8006376:	3601      	adds	r6, #1
 8006378:	e7d9      	b.n	800632e <_printf_common+0x8e>
	...

0800637c <_printf_i>:
 800637c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006380:	7e0f      	ldrb	r7, [r1, #24]
 8006382:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006384:	2f78      	cmp	r7, #120	; 0x78
 8006386:	4691      	mov	r9, r2
 8006388:	4680      	mov	r8, r0
 800638a:	460c      	mov	r4, r1
 800638c:	469a      	mov	sl, r3
 800638e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006392:	d807      	bhi.n	80063a4 <_printf_i+0x28>
 8006394:	2f62      	cmp	r7, #98	; 0x62
 8006396:	d80a      	bhi.n	80063ae <_printf_i+0x32>
 8006398:	2f00      	cmp	r7, #0
 800639a:	f000 80d8 	beq.w	800654e <_printf_i+0x1d2>
 800639e:	2f58      	cmp	r7, #88	; 0x58
 80063a0:	f000 80a3 	beq.w	80064ea <_printf_i+0x16e>
 80063a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063ac:	e03a      	b.n	8006424 <_printf_i+0xa8>
 80063ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063b2:	2b15      	cmp	r3, #21
 80063b4:	d8f6      	bhi.n	80063a4 <_printf_i+0x28>
 80063b6:	a101      	add	r1, pc, #4	; (adr r1, 80063bc <_printf_i+0x40>)
 80063b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063bc:	08006415 	.word	0x08006415
 80063c0:	08006429 	.word	0x08006429
 80063c4:	080063a5 	.word	0x080063a5
 80063c8:	080063a5 	.word	0x080063a5
 80063cc:	080063a5 	.word	0x080063a5
 80063d0:	080063a5 	.word	0x080063a5
 80063d4:	08006429 	.word	0x08006429
 80063d8:	080063a5 	.word	0x080063a5
 80063dc:	080063a5 	.word	0x080063a5
 80063e0:	080063a5 	.word	0x080063a5
 80063e4:	080063a5 	.word	0x080063a5
 80063e8:	08006535 	.word	0x08006535
 80063ec:	08006459 	.word	0x08006459
 80063f0:	08006517 	.word	0x08006517
 80063f4:	080063a5 	.word	0x080063a5
 80063f8:	080063a5 	.word	0x080063a5
 80063fc:	08006557 	.word	0x08006557
 8006400:	080063a5 	.word	0x080063a5
 8006404:	08006459 	.word	0x08006459
 8006408:	080063a5 	.word	0x080063a5
 800640c:	080063a5 	.word	0x080063a5
 8006410:	0800651f 	.word	0x0800651f
 8006414:	682b      	ldr	r3, [r5, #0]
 8006416:	1d1a      	adds	r2, r3, #4
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	602a      	str	r2, [r5, #0]
 800641c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006420:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006424:	2301      	movs	r3, #1
 8006426:	e0a3      	b.n	8006570 <_printf_i+0x1f4>
 8006428:	6820      	ldr	r0, [r4, #0]
 800642a:	6829      	ldr	r1, [r5, #0]
 800642c:	0606      	lsls	r6, r0, #24
 800642e:	f101 0304 	add.w	r3, r1, #4
 8006432:	d50a      	bpl.n	800644a <_printf_i+0xce>
 8006434:	680e      	ldr	r6, [r1, #0]
 8006436:	602b      	str	r3, [r5, #0]
 8006438:	2e00      	cmp	r6, #0
 800643a:	da03      	bge.n	8006444 <_printf_i+0xc8>
 800643c:	232d      	movs	r3, #45	; 0x2d
 800643e:	4276      	negs	r6, r6
 8006440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006444:	485e      	ldr	r0, [pc, #376]	; (80065c0 <_printf_i+0x244>)
 8006446:	230a      	movs	r3, #10
 8006448:	e019      	b.n	800647e <_printf_i+0x102>
 800644a:	680e      	ldr	r6, [r1, #0]
 800644c:	602b      	str	r3, [r5, #0]
 800644e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006452:	bf18      	it	ne
 8006454:	b236      	sxthne	r6, r6
 8006456:	e7ef      	b.n	8006438 <_printf_i+0xbc>
 8006458:	682b      	ldr	r3, [r5, #0]
 800645a:	6820      	ldr	r0, [r4, #0]
 800645c:	1d19      	adds	r1, r3, #4
 800645e:	6029      	str	r1, [r5, #0]
 8006460:	0601      	lsls	r1, r0, #24
 8006462:	d501      	bpl.n	8006468 <_printf_i+0xec>
 8006464:	681e      	ldr	r6, [r3, #0]
 8006466:	e002      	b.n	800646e <_printf_i+0xf2>
 8006468:	0646      	lsls	r6, r0, #25
 800646a:	d5fb      	bpl.n	8006464 <_printf_i+0xe8>
 800646c:	881e      	ldrh	r6, [r3, #0]
 800646e:	4854      	ldr	r0, [pc, #336]	; (80065c0 <_printf_i+0x244>)
 8006470:	2f6f      	cmp	r7, #111	; 0x6f
 8006472:	bf0c      	ite	eq
 8006474:	2308      	moveq	r3, #8
 8006476:	230a      	movne	r3, #10
 8006478:	2100      	movs	r1, #0
 800647a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800647e:	6865      	ldr	r5, [r4, #4]
 8006480:	60a5      	str	r5, [r4, #8]
 8006482:	2d00      	cmp	r5, #0
 8006484:	bfa2      	ittt	ge
 8006486:	6821      	ldrge	r1, [r4, #0]
 8006488:	f021 0104 	bicge.w	r1, r1, #4
 800648c:	6021      	strge	r1, [r4, #0]
 800648e:	b90e      	cbnz	r6, 8006494 <_printf_i+0x118>
 8006490:	2d00      	cmp	r5, #0
 8006492:	d04d      	beq.n	8006530 <_printf_i+0x1b4>
 8006494:	4615      	mov	r5, r2
 8006496:	fbb6 f1f3 	udiv	r1, r6, r3
 800649a:	fb03 6711 	mls	r7, r3, r1, r6
 800649e:	5dc7      	ldrb	r7, [r0, r7]
 80064a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064a4:	4637      	mov	r7, r6
 80064a6:	42bb      	cmp	r3, r7
 80064a8:	460e      	mov	r6, r1
 80064aa:	d9f4      	bls.n	8006496 <_printf_i+0x11a>
 80064ac:	2b08      	cmp	r3, #8
 80064ae:	d10b      	bne.n	80064c8 <_printf_i+0x14c>
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	07de      	lsls	r6, r3, #31
 80064b4:	d508      	bpl.n	80064c8 <_printf_i+0x14c>
 80064b6:	6923      	ldr	r3, [r4, #16]
 80064b8:	6861      	ldr	r1, [r4, #4]
 80064ba:	4299      	cmp	r1, r3
 80064bc:	bfde      	ittt	le
 80064be:	2330      	movle	r3, #48	; 0x30
 80064c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80064c8:	1b52      	subs	r2, r2, r5
 80064ca:	6122      	str	r2, [r4, #16]
 80064cc:	f8cd a000 	str.w	sl, [sp]
 80064d0:	464b      	mov	r3, r9
 80064d2:	aa03      	add	r2, sp, #12
 80064d4:	4621      	mov	r1, r4
 80064d6:	4640      	mov	r0, r8
 80064d8:	f7ff fee2 	bl	80062a0 <_printf_common>
 80064dc:	3001      	adds	r0, #1
 80064de:	d14c      	bne.n	800657a <_printf_i+0x1fe>
 80064e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064e4:	b004      	add	sp, #16
 80064e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ea:	4835      	ldr	r0, [pc, #212]	; (80065c0 <_printf_i+0x244>)
 80064ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064f0:	6829      	ldr	r1, [r5, #0]
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80064f8:	6029      	str	r1, [r5, #0]
 80064fa:	061d      	lsls	r5, r3, #24
 80064fc:	d514      	bpl.n	8006528 <_printf_i+0x1ac>
 80064fe:	07df      	lsls	r7, r3, #31
 8006500:	bf44      	itt	mi
 8006502:	f043 0320 	orrmi.w	r3, r3, #32
 8006506:	6023      	strmi	r3, [r4, #0]
 8006508:	b91e      	cbnz	r6, 8006512 <_printf_i+0x196>
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	f023 0320 	bic.w	r3, r3, #32
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	2310      	movs	r3, #16
 8006514:	e7b0      	b.n	8006478 <_printf_i+0xfc>
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	f043 0320 	orr.w	r3, r3, #32
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	2378      	movs	r3, #120	; 0x78
 8006520:	4828      	ldr	r0, [pc, #160]	; (80065c4 <_printf_i+0x248>)
 8006522:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006526:	e7e3      	b.n	80064f0 <_printf_i+0x174>
 8006528:	0659      	lsls	r1, r3, #25
 800652a:	bf48      	it	mi
 800652c:	b2b6      	uxthmi	r6, r6
 800652e:	e7e6      	b.n	80064fe <_printf_i+0x182>
 8006530:	4615      	mov	r5, r2
 8006532:	e7bb      	b.n	80064ac <_printf_i+0x130>
 8006534:	682b      	ldr	r3, [r5, #0]
 8006536:	6826      	ldr	r6, [r4, #0]
 8006538:	6961      	ldr	r1, [r4, #20]
 800653a:	1d18      	adds	r0, r3, #4
 800653c:	6028      	str	r0, [r5, #0]
 800653e:	0635      	lsls	r5, r6, #24
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	d501      	bpl.n	8006548 <_printf_i+0x1cc>
 8006544:	6019      	str	r1, [r3, #0]
 8006546:	e002      	b.n	800654e <_printf_i+0x1d2>
 8006548:	0670      	lsls	r0, r6, #25
 800654a:	d5fb      	bpl.n	8006544 <_printf_i+0x1c8>
 800654c:	8019      	strh	r1, [r3, #0]
 800654e:	2300      	movs	r3, #0
 8006550:	6123      	str	r3, [r4, #16]
 8006552:	4615      	mov	r5, r2
 8006554:	e7ba      	b.n	80064cc <_printf_i+0x150>
 8006556:	682b      	ldr	r3, [r5, #0]
 8006558:	1d1a      	adds	r2, r3, #4
 800655a:	602a      	str	r2, [r5, #0]
 800655c:	681d      	ldr	r5, [r3, #0]
 800655e:	6862      	ldr	r2, [r4, #4]
 8006560:	2100      	movs	r1, #0
 8006562:	4628      	mov	r0, r5
 8006564:	f7f9 fe3c 	bl	80001e0 <memchr>
 8006568:	b108      	cbz	r0, 800656e <_printf_i+0x1f2>
 800656a:	1b40      	subs	r0, r0, r5
 800656c:	6060      	str	r0, [r4, #4]
 800656e:	6863      	ldr	r3, [r4, #4]
 8006570:	6123      	str	r3, [r4, #16]
 8006572:	2300      	movs	r3, #0
 8006574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006578:	e7a8      	b.n	80064cc <_printf_i+0x150>
 800657a:	6923      	ldr	r3, [r4, #16]
 800657c:	462a      	mov	r2, r5
 800657e:	4649      	mov	r1, r9
 8006580:	4640      	mov	r0, r8
 8006582:	47d0      	blx	sl
 8006584:	3001      	adds	r0, #1
 8006586:	d0ab      	beq.n	80064e0 <_printf_i+0x164>
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	079b      	lsls	r3, r3, #30
 800658c:	d413      	bmi.n	80065b6 <_printf_i+0x23a>
 800658e:	68e0      	ldr	r0, [r4, #12]
 8006590:	9b03      	ldr	r3, [sp, #12]
 8006592:	4298      	cmp	r0, r3
 8006594:	bfb8      	it	lt
 8006596:	4618      	movlt	r0, r3
 8006598:	e7a4      	b.n	80064e4 <_printf_i+0x168>
 800659a:	2301      	movs	r3, #1
 800659c:	4632      	mov	r2, r6
 800659e:	4649      	mov	r1, r9
 80065a0:	4640      	mov	r0, r8
 80065a2:	47d0      	blx	sl
 80065a4:	3001      	adds	r0, #1
 80065a6:	d09b      	beq.n	80064e0 <_printf_i+0x164>
 80065a8:	3501      	adds	r5, #1
 80065aa:	68e3      	ldr	r3, [r4, #12]
 80065ac:	9903      	ldr	r1, [sp, #12]
 80065ae:	1a5b      	subs	r3, r3, r1
 80065b0:	42ab      	cmp	r3, r5
 80065b2:	dcf2      	bgt.n	800659a <_printf_i+0x21e>
 80065b4:	e7eb      	b.n	800658e <_printf_i+0x212>
 80065b6:	2500      	movs	r5, #0
 80065b8:	f104 0619 	add.w	r6, r4, #25
 80065bc:	e7f5      	b.n	80065aa <_printf_i+0x22e>
 80065be:	bf00      	nop
 80065c0:	080089aa 	.word	0x080089aa
 80065c4:	080089bb 	.word	0x080089bb

080065c8 <iprintf>:
 80065c8:	b40f      	push	{r0, r1, r2, r3}
 80065ca:	4b0a      	ldr	r3, [pc, #40]	; (80065f4 <iprintf+0x2c>)
 80065cc:	b513      	push	{r0, r1, r4, lr}
 80065ce:	681c      	ldr	r4, [r3, #0]
 80065d0:	b124      	cbz	r4, 80065dc <iprintf+0x14>
 80065d2:	69a3      	ldr	r3, [r4, #24]
 80065d4:	b913      	cbnz	r3, 80065dc <iprintf+0x14>
 80065d6:	4620      	mov	r0, r4
 80065d8:	f001 f8da 	bl	8007790 <__sinit>
 80065dc:	ab05      	add	r3, sp, #20
 80065de:	9a04      	ldr	r2, [sp, #16]
 80065e0:	68a1      	ldr	r1, [r4, #8]
 80065e2:	9301      	str	r3, [sp, #4]
 80065e4:	4620      	mov	r0, r4
 80065e6:	f001 fe97 	bl	8008318 <_vfiprintf_r>
 80065ea:	b002      	add	sp, #8
 80065ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065f0:	b004      	add	sp, #16
 80065f2:	4770      	bx	lr
 80065f4:	2000000c 	.word	0x2000000c

080065f8 <_puts_r>:
 80065f8:	b570      	push	{r4, r5, r6, lr}
 80065fa:	460e      	mov	r6, r1
 80065fc:	4605      	mov	r5, r0
 80065fe:	b118      	cbz	r0, 8006608 <_puts_r+0x10>
 8006600:	6983      	ldr	r3, [r0, #24]
 8006602:	b90b      	cbnz	r3, 8006608 <_puts_r+0x10>
 8006604:	f001 f8c4 	bl	8007790 <__sinit>
 8006608:	69ab      	ldr	r3, [r5, #24]
 800660a:	68ac      	ldr	r4, [r5, #8]
 800660c:	b913      	cbnz	r3, 8006614 <_puts_r+0x1c>
 800660e:	4628      	mov	r0, r5
 8006610:	f001 f8be 	bl	8007790 <__sinit>
 8006614:	4b2c      	ldr	r3, [pc, #176]	; (80066c8 <_puts_r+0xd0>)
 8006616:	429c      	cmp	r4, r3
 8006618:	d120      	bne.n	800665c <_puts_r+0x64>
 800661a:	686c      	ldr	r4, [r5, #4]
 800661c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800661e:	07db      	lsls	r3, r3, #31
 8006620:	d405      	bmi.n	800662e <_puts_r+0x36>
 8006622:	89a3      	ldrh	r3, [r4, #12]
 8006624:	0598      	lsls	r0, r3, #22
 8006626:	d402      	bmi.n	800662e <_puts_r+0x36>
 8006628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800662a:	f001 f954 	bl	80078d6 <__retarget_lock_acquire_recursive>
 800662e:	89a3      	ldrh	r3, [r4, #12]
 8006630:	0719      	lsls	r1, r3, #28
 8006632:	d51d      	bpl.n	8006670 <_puts_r+0x78>
 8006634:	6923      	ldr	r3, [r4, #16]
 8006636:	b1db      	cbz	r3, 8006670 <_puts_r+0x78>
 8006638:	3e01      	subs	r6, #1
 800663a:	68a3      	ldr	r3, [r4, #8]
 800663c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006640:	3b01      	subs	r3, #1
 8006642:	60a3      	str	r3, [r4, #8]
 8006644:	bb39      	cbnz	r1, 8006696 <_puts_r+0x9e>
 8006646:	2b00      	cmp	r3, #0
 8006648:	da38      	bge.n	80066bc <_puts_r+0xc4>
 800664a:	4622      	mov	r2, r4
 800664c:	210a      	movs	r1, #10
 800664e:	4628      	mov	r0, r5
 8006650:	f000 f848 	bl	80066e4 <__swbuf_r>
 8006654:	3001      	adds	r0, #1
 8006656:	d011      	beq.n	800667c <_puts_r+0x84>
 8006658:	250a      	movs	r5, #10
 800665a:	e011      	b.n	8006680 <_puts_r+0x88>
 800665c:	4b1b      	ldr	r3, [pc, #108]	; (80066cc <_puts_r+0xd4>)
 800665e:	429c      	cmp	r4, r3
 8006660:	d101      	bne.n	8006666 <_puts_r+0x6e>
 8006662:	68ac      	ldr	r4, [r5, #8]
 8006664:	e7da      	b.n	800661c <_puts_r+0x24>
 8006666:	4b1a      	ldr	r3, [pc, #104]	; (80066d0 <_puts_r+0xd8>)
 8006668:	429c      	cmp	r4, r3
 800666a:	bf08      	it	eq
 800666c:	68ec      	ldreq	r4, [r5, #12]
 800666e:	e7d5      	b.n	800661c <_puts_r+0x24>
 8006670:	4621      	mov	r1, r4
 8006672:	4628      	mov	r0, r5
 8006674:	f000 f888 	bl	8006788 <__swsetup_r>
 8006678:	2800      	cmp	r0, #0
 800667a:	d0dd      	beq.n	8006638 <_puts_r+0x40>
 800667c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006680:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006682:	07da      	lsls	r2, r3, #31
 8006684:	d405      	bmi.n	8006692 <_puts_r+0x9a>
 8006686:	89a3      	ldrh	r3, [r4, #12]
 8006688:	059b      	lsls	r3, r3, #22
 800668a:	d402      	bmi.n	8006692 <_puts_r+0x9a>
 800668c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800668e:	f001 f923 	bl	80078d8 <__retarget_lock_release_recursive>
 8006692:	4628      	mov	r0, r5
 8006694:	bd70      	pop	{r4, r5, r6, pc}
 8006696:	2b00      	cmp	r3, #0
 8006698:	da04      	bge.n	80066a4 <_puts_r+0xac>
 800669a:	69a2      	ldr	r2, [r4, #24]
 800669c:	429a      	cmp	r2, r3
 800669e:	dc06      	bgt.n	80066ae <_puts_r+0xb6>
 80066a0:	290a      	cmp	r1, #10
 80066a2:	d004      	beq.n	80066ae <_puts_r+0xb6>
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	1c5a      	adds	r2, r3, #1
 80066a8:	6022      	str	r2, [r4, #0]
 80066aa:	7019      	strb	r1, [r3, #0]
 80066ac:	e7c5      	b.n	800663a <_puts_r+0x42>
 80066ae:	4622      	mov	r2, r4
 80066b0:	4628      	mov	r0, r5
 80066b2:	f000 f817 	bl	80066e4 <__swbuf_r>
 80066b6:	3001      	adds	r0, #1
 80066b8:	d1bf      	bne.n	800663a <_puts_r+0x42>
 80066ba:	e7df      	b.n	800667c <_puts_r+0x84>
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	250a      	movs	r5, #10
 80066c0:	1c5a      	adds	r2, r3, #1
 80066c2:	6022      	str	r2, [r4, #0]
 80066c4:	701d      	strb	r5, [r3, #0]
 80066c6:	e7db      	b.n	8006680 <_puts_r+0x88>
 80066c8:	08008a7c 	.word	0x08008a7c
 80066cc:	08008a9c 	.word	0x08008a9c
 80066d0:	08008a5c 	.word	0x08008a5c

080066d4 <puts>:
 80066d4:	4b02      	ldr	r3, [pc, #8]	; (80066e0 <puts+0xc>)
 80066d6:	4601      	mov	r1, r0
 80066d8:	6818      	ldr	r0, [r3, #0]
 80066da:	f7ff bf8d 	b.w	80065f8 <_puts_r>
 80066de:	bf00      	nop
 80066e0:	2000000c 	.word	0x2000000c

080066e4 <__swbuf_r>:
 80066e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e6:	460e      	mov	r6, r1
 80066e8:	4614      	mov	r4, r2
 80066ea:	4605      	mov	r5, r0
 80066ec:	b118      	cbz	r0, 80066f6 <__swbuf_r+0x12>
 80066ee:	6983      	ldr	r3, [r0, #24]
 80066f0:	b90b      	cbnz	r3, 80066f6 <__swbuf_r+0x12>
 80066f2:	f001 f84d 	bl	8007790 <__sinit>
 80066f6:	4b21      	ldr	r3, [pc, #132]	; (800677c <__swbuf_r+0x98>)
 80066f8:	429c      	cmp	r4, r3
 80066fa:	d12b      	bne.n	8006754 <__swbuf_r+0x70>
 80066fc:	686c      	ldr	r4, [r5, #4]
 80066fe:	69a3      	ldr	r3, [r4, #24]
 8006700:	60a3      	str	r3, [r4, #8]
 8006702:	89a3      	ldrh	r3, [r4, #12]
 8006704:	071a      	lsls	r2, r3, #28
 8006706:	d52f      	bpl.n	8006768 <__swbuf_r+0x84>
 8006708:	6923      	ldr	r3, [r4, #16]
 800670a:	b36b      	cbz	r3, 8006768 <__swbuf_r+0x84>
 800670c:	6923      	ldr	r3, [r4, #16]
 800670e:	6820      	ldr	r0, [r4, #0]
 8006710:	1ac0      	subs	r0, r0, r3
 8006712:	6963      	ldr	r3, [r4, #20]
 8006714:	b2f6      	uxtb	r6, r6
 8006716:	4283      	cmp	r3, r0
 8006718:	4637      	mov	r7, r6
 800671a:	dc04      	bgt.n	8006726 <__swbuf_r+0x42>
 800671c:	4621      	mov	r1, r4
 800671e:	4628      	mov	r0, r5
 8006720:	f000 ffa2 	bl	8007668 <_fflush_r>
 8006724:	bb30      	cbnz	r0, 8006774 <__swbuf_r+0x90>
 8006726:	68a3      	ldr	r3, [r4, #8]
 8006728:	3b01      	subs	r3, #1
 800672a:	60a3      	str	r3, [r4, #8]
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	1c5a      	adds	r2, r3, #1
 8006730:	6022      	str	r2, [r4, #0]
 8006732:	701e      	strb	r6, [r3, #0]
 8006734:	6963      	ldr	r3, [r4, #20]
 8006736:	3001      	adds	r0, #1
 8006738:	4283      	cmp	r3, r0
 800673a:	d004      	beq.n	8006746 <__swbuf_r+0x62>
 800673c:	89a3      	ldrh	r3, [r4, #12]
 800673e:	07db      	lsls	r3, r3, #31
 8006740:	d506      	bpl.n	8006750 <__swbuf_r+0x6c>
 8006742:	2e0a      	cmp	r6, #10
 8006744:	d104      	bne.n	8006750 <__swbuf_r+0x6c>
 8006746:	4621      	mov	r1, r4
 8006748:	4628      	mov	r0, r5
 800674a:	f000 ff8d 	bl	8007668 <_fflush_r>
 800674e:	b988      	cbnz	r0, 8006774 <__swbuf_r+0x90>
 8006750:	4638      	mov	r0, r7
 8006752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006754:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <__swbuf_r+0x9c>)
 8006756:	429c      	cmp	r4, r3
 8006758:	d101      	bne.n	800675e <__swbuf_r+0x7a>
 800675a:	68ac      	ldr	r4, [r5, #8]
 800675c:	e7cf      	b.n	80066fe <__swbuf_r+0x1a>
 800675e:	4b09      	ldr	r3, [pc, #36]	; (8006784 <__swbuf_r+0xa0>)
 8006760:	429c      	cmp	r4, r3
 8006762:	bf08      	it	eq
 8006764:	68ec      	ldreq	r4, [r5, #12]
 8006766:	e7ca      	b.n	80066fe <__swbuf_r+0x1a>
 8006768:	4621      	mov	r1, r4
 800676a:	4628      	mov	r0, r5
 800676c:	f000 f80c 	bl	8006788 <__swsetup_r>
 8006770:	2800      	cmp	r0, #0
 8006772:	d0cb      	beq.n	800670c <__swbuf_r+0x28>
 8006774:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006778:	e7ea      	b.n	8006750 <__swbuf_r+0x6c>
 800677a:	bf00      	nop
 800677c:	08008a7c 	.word	0x08008a7c
 8006780:	08008a9c 	.word	0x08008a9c
 8006784:	08008a5c 	.word	0x08008a5c

08006788 <__swsetup_r>:
 8006788:	4b32      	ldr	r3, [pc, #200]	; (8006854 <__swsetup_r+0xcc>)
 800678a:	b570      	push	{r4, r5, r6, lr}
 800678c:	681d      	ldr	r5, [r3, #0]
 800678e:	4606      	mov	r6, r0
 8006790:	460c      	mov	r4, r1
 8006792:	b125      	cbz	r5, 800679e <__swsetup_r+0x16>
 8006794:	69ab      	ldr	r3, [r5, #24]
 8006796:	b913      	cbnz	r3, 800679e <__swsetup_r+0x16>
 8006798:	4628      	mov	r0, r5
 800679a:	f000 fff9 	bl	8007790 <__sinit>
 800679e:	4b2e      	ldr	r3, [pc, #184]	; (8006858 <__swsetup_r+0xd0>)
 80067a0:	429c      	cmp	r4, r3
 80067a2:	d10f      	bne.n	80067c4 <__swsetup_r+0x3c>
 80067a4:	686c      	ldr	r4, [r5, #4]
 80067a6:	89a3      	ldrh	r3, [r4, #12]
 80067a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067ac:	0719      	lsls	r1, r3, #28
 80067ae:	d42c      	bmi.n	800680a <__swsetup_r+0x82>
 80067b0:	06dd      	lsls	r5, r3, #27
 80067b2:	d411      	bmi.n	80067d8 <__swsetup_r+0x50>
 80067b4:	2309      	movs	r3, #9
 80067b6:	6033      	str	r3, [r6, #0]
 80067b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067bc:	81a3      	strh	r3, [r4, #12]
 80067be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067c2:	e03e      	b.n	8006842 <__swsetup_r+0xba>
 80067c4:	4b25      	ldr	r3, [pc, #148]	; (800685c <__swsetup_r+0xd4>)
 80067c6:	429c      	cmp	r4, r3
 80067c8:	d101      	bne.n	80067ce <__swsetup_r+0x46>
 80067ca:	68ac      	ldr	r4, [r5, #8]
 80067cc:	e7eb      	b.n	80067a6 <__swsetup_r+0x1e>
 80067ce:	4b24      	ldr	r3, [pc, #144]	; (8006860 <__swsetup_r+0xd8>)
 80067d0:	429c      	cmp	r4, r3
 80067d2:	bf08      	it	eq
 80067d4:	68ec      	ldreq	r4, [r5, #12]
 80067d6:	e7e6      	b.n	80067a6 <__swsetup_r+0x1e>
 80067d8:	0758      	lsls	r0, r3, #29
 80067da:	d512      	bpl.n	8006802 <__swsetup_r+0x7a>
 80067dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067de:	b141      	cbz	r1, 80067f2 <__swsetup_r+0x6a>
 80067e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067e4:	4299      	cmp	r1, r3
 80067e6:	d002      	beq.n	80067ee <__swsetup_r+0x66>
 80067e8:	4630      	mov	r0, r6
 80067ea:	f001 fc8b 	bl	8008104 <_free_r>
 80067ee:	2300      	movs	r3, #0
 80067f0:	6363      	str	r3, [r4, #52]	; 0x34
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067f8:	81a3      	strh	r3, [r4, #12]
 80067fa:	2300      	movs	r3, #0
 80067fc:	6063      	str	r3, [r4, #4]
 80067fe:	6923      	ldr	r3, [r4, #16]
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	89a3      	ldrh	r3, [r4, #12]
 8006804:	f043 0308 	orr.w	r3, r3, #8
 8006808:	81a3      	strh	r3, [r4, #12]
 800680a:	6923      	ldr	r3, [r4, #16]
 800680c:	b94b      	cbnz	r3, 8006822 <__swsetup_r+0x9a>
 800680e:	89a3      	ldrh	r3, [r4, #12]
 8006810:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006818:	d003      	beq.n	8006822 <__swsetup_r+0x9a>
 800681a:	4621      	mov	r1, r4
 800681c:	4630      	mov	r0, r6
 800681e:	f001 f881 	bl	8007924 <__smakebuf_r>
 8006822:	89a0      	ldrh	r0, [r4, #12]
 8006824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006828:	f010 0301 	ands.w	r3, r0, #1
 800682c:	d00a      	beq.n	8006844 <__swsetup_r+0xbc>
 800682e:	2300      	movs	r3, #0
 8006830:	60a3      	str	r3, [r4, #8]
 8006832:	6963      	ldr	r3, [r4, #20]
 8006834:	425b      	negs	r3, r3
 8006836:	61a3      	str	r3, [r4, #24]
 8006838:	6923      	ldr	r3, [r4, #16]
 800683a:	b943      	cbnz	r3, 800684e <__swsetup_r+0xc6>
 800683c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006840:	d1ba      	bne.n	80067b8 <__swsetup_r+0x30>
 8006842:	bd70      	pop	{r4, r5, r6, pc}
 8006844:	0781      	lsls	r1, r0, #30
 8006846:	bf58      	it	pl
 8006848:	6963      	ldrpl	r3, [r4, #20]
 800684a:	60a3      	str	r3, [r4, #8]
 800684c:	e7f4      	b.n	8006838 <__swsetup_r+0xb0>
 800684e:	2000      	movs	r0, #0
 8006850:	e7f7      	b.n	8006842 <__swsetup_r+0xba>
 8006852:	bf00      	nop
 8006854:	2000000c 	.word	0x2000000c
 8006858:	08008a7c 	.word	0x08008a7c
 800685c:	08008a9c 	.word	0x08008a9c
 8006860:	08008a5c 	.word	0x08008a5c

08006864 <quorem>:
 8006864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006868:	6903      	ldr	r3, [r0, #16]
 800686a:	690c      	ldr	r4, [r1, #16]
 800686c:	42a3      	cmp	r3, r4
 800686e:	4607      	mov	r7, r0
 8006870:	f2c0 8081 	blt.w	8006976 <quorem+0x112>
 8006874:	3c01      	subs	r4, #1
 8006876:	f101 0814 	add.w	r8, r1, #20
 800687a:	f100 0514 	add.w	r5, r0, #20
 800687e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006882:	9301      	str	r3, [sp, #4]
 8006884:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006888:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800688c:	3301      	adds	r3, #1
 800688e:	429a      	cmp	r2, r3
 8006890:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006894:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006898:	fbb2 f6f3 	udiv	r6, r2, r3
 800689c:	d331      	bcc.n	8006902 <quorem+0x9e>
 800689e:	f04f 0e00 	mov.w	lr, #0
 80068a2:	4640      	mov	r0, r8
 80068a4:	46ac      	mov	ip, r5
 80068a6:	46f2      	mov	sl, lr
 80068a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80068ac:	b293      	uxth	r3, r2
 80068ae:	fb06 e303 	mla	r3, r6, r3, lr
 80068b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	ebaa 0303 	sub.w	r3, sl, r3
 80068bc:	f8dc a000 	ldr.w	sl, [ip]
 80068c0:	0c12      	lsrs	r2, r2, #16
 80068c2:	fa13 f38a 	uxtah	r3, r3, sl
 80068c6:	fb06 e202 	mla	r2, r6, r2, lr
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	9b00      	ldr	r3, [sp, #0]
 80068ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068d2:	b292      	uxth	r2, r2
 80068d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80068d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80068e0:	4581      	cmp	r9, r0
 80068e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068e6:	f84c 3b04 	str.w	r3, [ip], #4
 80068ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80068ee:	d2db      	bcs.n	80068a8 <quorem+0x44>
 80068f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80068f4:	b92b      	cbnz	r3, 8006902 <quorem+0x9e>
 80068f6:	9b01      	ldr	r3, [sp, #4]
 80068f8:	3b04      	subs	r3, #4
 80068fa:	429d      	cmp	r5, r3
 80068fc:	461a      	mov	r2, r3
 80068fe:	d32e      	bcc.n	800695e <quorem+0xfa>
 8006900:	613c      	str	r4, [r7, #16]
 8006902:	4638      	mov	r0, r7
 8006904:	f001 fae6 	bl	8007ed4 <__mcmp>
 8006908:	2800      	cmp	r0, #0
 800690a:	db24      	blt.n	8006956 <quorem+0xf2>
 800690c:	3601      	adds	r6, #1
 800690e:	4628      	mov	r0, r5
 8006910:	f04f 0c00 	mov.w	ip, #0
 8006914:	f858 2b04 	ldr.w	r2, [r8], #4
 8006918:	f8d0 e000 	ldr.w	lr, [r0]
 800691c:	b293      	uxth	r3, r2
 800691e:	ebac 0303 	sub.w	r3, ip, r3
 8006922:	0c12      	lsrs	r2, r2, #16
 8006924:	fa13 f38e 	uxtah	r3, r3, lr
 8006928:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800692c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006930:	b29b      	uxth	r3, r3
 8006932:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006936:	45c1      	cmp	r9, r8
 8006938:	f840 3b04 	str.w	r3, [r0], #4
 800693c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006940:	d2e8      	bcs.n	8006914 <quorem+0xb0>
 8006942:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006946:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800694a:	b922      	cbnz	r2, 8006956 <quorem+0xf2>
 800694c:	3b04      	subs	r3, #4
 800694e:	429d      	cmp	r5, r3
 8006950:	461a      	mov	r2, r3
 8006952:	d30a      	bcc.n	800696a <quorem+0x106>
 8006954:	613c      	str	r4, [r7, #16]
 8006956:	4630      	mov	r0, r6
 8006958:	b003      	add	sp, #12
 800695a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695e:	6812      	ldr	r2, [r2, #0]
 8006960:	3b04      	subs	r3, #4
 8006962:	2a00      	cmp	r2, #0
 8006964:	d1cc      	bne.n	8006900 <quorem+0x9c>
 8006966:	3c01      	subs	r4, #1
 8006968:	e7c7      	b.n	80068fa <quorem+0x96>
 800696a:	6812      	ldr	r2, [r2, #0]
 800696c:	3b04      	subs	r3, #4
 800696e:	2a00      	cmp	r2, #0
 8006970:	d1f0      	bne.n	8006954 <quorem+0xf0>
 8006972:	3c01      	subs	r4, #1
 8006974:	e7eb      	b.n	800694e <quorem+0xea>
 8006976:	2000      	movs	r0, #0
 8006978:	e7ee      	b.n	8006958 <quorem+0xf4>
 800697a:	0000      	movs	r0, r0
 800697c:	0000      	movs	r0, r0
	...

08006980 <_dtoa_r>:
 8006980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006984:	ed2d 8b04 	vpush	{d8-d9}
 8006988:	ec57 6b10 	vmov	r6, r7, d0
 800698c:	b093      	sub	sp, #76	; 0x4c
 800698e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006990:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006994:	9106      	str	r1, [sp, #24]
 8006996:	ee10 aa10 	vmov	sl, s0
 800699a:	4604      	mov	r4, r0
 800699c:	9209      	str	r2, [sp, #36]	; 0x24
 800699e:	930c      	str	r3, [sp, #48]	; 0x30
 80069a0:	46bb      	mov	fp, r7
 80069a2:	b975      	cbnz	r5, 80069c2 <_dtoa_r+0x42>
 80069a4:	2010      	movs	r0, #16
 80069a6:	f000 fffd 	bl	80079a4 <malloc>
 80069aa:	4602      	mov	r2, r0
 80069ac:	6260      	str	r0, [r4, #36]	; 0x24
 80069ae:	b920      	cbnz	r0, 80069ba <_dtoa_r+0x3a>
 80069b0:	4ba7      	ldr	r3, [pc, #668]	; (8006c50 <_dtoa_r+0x2d0>)
 80069b2:	21ea      	movs	r1, #234	; 0xea
 80069b4:	48a7      	ldr	r0, [pc, #668]	; (8006c54 <_dtoa_r+0x2d4>)
 80069b6:	f001 fe45 	bl	8008644 <__assert_func>
 80069ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80069be:	6005      	str	r5, [r0, #0]
 80069c0:	60c5      	str	r5, [r0, #12]
 80069c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069c4:	6819      	ldr	r1, [r3, #0]
 80069c6:	b151      	cbz	r1, 80069de <_dtoa_r+0x5e>
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	604a      	str	r2, [r1, #4]
 80069cc:	2301      	movs	r3, #1
 80069ce:	4093      	lsls	r3, r2
 80069d0:	608b      	str	r3, [r1, #8]
 80069d2:	4620      	mov	r0, r4
 80069d4:	f001 f83c 	bl	8007a50 <_Bfree>
 80069d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	1e3b      	subs	r3, r7, #0
 80069e0:	bfaa      	itet	ge
 80069e2:	2300      	movge	r3, #0
 80069e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80069e8:	f8c8 3000 	strge.w	r3, [r8]
 80069ec:	4b9a      	ldr	r3, [pc, #616]	; (8006c58 <_dtoa_r+0x2d8>)
 80069ee:	bfbc      	itt	lt
 80069f0:	2201      	movlt	r2, #1
 80069f2:	f8c8 2000 	strlt.w	r2, [r8]
 80069f6:	ea33 030b 	bics.w	r3, r3, fp
 80069fa:	d11b      	bne.n	8006a34 <_dtoa_r+0xb4>
 80069fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a02:	6013      	str	r3, [r2, #0]
 8006a04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a08:	4333      	orrs	r3, r6
 8006a0a:	f000 8592 	beq.w	8007532 <_dtoa_r+0xbb2>
 8006a0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a10:	b963      	cbnz	r3, 8006a2c <_dtoa_r+0xac>
 8006a12:	4b92      	ldr	r3, [pc, #584]	; (8006c5c <_dtoa_r+0x2dc>)
 8006a14:	e022      	b.n	8006a5c <_dtoa_r+0xdc>
 8006a16:	4b92      	ldr	r3, [pc, #584]	; (8006c60 <_dtoa_r+0x2e0>)
 8006a18:	9301      	str	r3, [sp, #4]
 8006a1a:	3308      	adds	r3, #8
 8006a1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	9801      	ldr	r0, [sp, #4]
 8006a22:	b013      	add	sp, #76	; 0x4c
 8006a24:	ecbd 8b04 	vpop	{d8-d9}
 8006a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2c:	4b8b      	ldr	r3, [pc, #556]	; (8006c5c <_dtoa_r+0x2dc>)
 8006a2e:	9301      	str	r3, [sp, #4]
 8006a30:	3303      	adds	r3, #3
 8006a32:	e7f3      	b.n	8006a1c <_dtoa_r+0x9c>
 8006a34:	2200      	movs	r2, #0
 8006a36:	2300      	movs	r3, #0
 8006a38:	4650      	mov	r0, sl
 8006a3a:	4659      	mov	r1, fp
 8006a3c:	f7fa f844 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a40:	ec4b ab19 	vmov	d9, sl, fp
 8006a44:	4680      	mov	r8, r0
 8006a46:	b158      	cbz	r0, 8006a60 <_dtoa_r+0xe0>
 8006a48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 856b 	beq.w	800752c <_dtoa_r+0xbac>
 8006a56:	4883      	ldr	r0, [pc, #524]	; (8006c64 <_dtoa_r+0x2e4>)
 8006a58:	6018      	str	r0, [r3, #0]
 8006a5a:	1e43      	subs	r3, r0, #1
 8006a5c:	9301      	str	r3, [sp, #4]
 8006a5e:	e7df      	b.n	8006a20 <_dtoa_r+0xa0>
 8006a60:	ec4b ab10 	vmov	d0, sl, fp
 8006a64:	aa10      	add	r2, sp, #64	; 0x40
 8006a66:	a911      	add	r1, sp, #68	; 0x44
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f001 fad9 	bl	8008020 <__d2b>
 8006a6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006a72:	ee08 0a10 	vmov	s16, r0
 8006a76:	2d00      	cmp	r5, #0
 8006a78:	f000 8084 	beq.w	8006b84 <_dtoa_r+0x204>
 8006a7c:	ee19 3a90 	vmov	r3, s19
 8006a80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006a88:	4656      	mov	r6, sl
 8006a8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006a8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006a96:	4b74      	ldr	r3, [pc, #464]	; (8006c68 <_dtoa_r+0x2e8>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	4639      	mov	r1, r7
 8006a9e:	f7f9 fbf3 	bl	8000288 <__aeabi_dsub>
 8006aa2:	a365      	add	r3, pc, #404	; (adr r3, 8006c38 <_dtoa_r+0x2b8>)
 8006aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa8:	f7f9 fda6 	bl	80005f8 <__aeabi_dmul>
 8006aac:	a364      	add	r3, pc, #400	; (adr r3, 8006c40 <_dtoa_r+0x2c0>)
 8006aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab2:	f7f9 fbeb 	bl	800028c <__adddf3>
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	4628      	mov	r0, r5
 8006aba:	460f      	mov	r7, r1
 8006abc:	f7f9 fd32 	bl	8000524 <__aeabi_i2d>
 8006ac0:	a361      	add	r3, pc, #388	; (adr r3, 8006c48 <_dtoa_r+0x2c8>)
 8006ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac6:	f7f9 fd97 	bl	80005f8 <__aeabi_dmul>
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	4630      	mov	r0, r6
 8006ad0:	4639      	mov	r1, r7
 8006ad2:	f7f9 fbdb 	bl	800028c <__adddf3>
 8006ad6:	4606      	mov	r6, r0
 8006ad8:	460f      	mov	r7, r1
 8006ada:	f7fa f83d 	bl	8000b58 <__aeabi_d2iz>
 8006ade:	2200      	movs	r2, #0
 8006ae0:	9000      	str	r0, [sp, #0]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	4639      	mov	r1, r7
 8006ae8:	f7f9 fff8 	bl	8000adc <__aeabi_dcmplt>
 8006aec:	b150      	cbz	r0, 8006b04 <_dtoa_r+0x184>
 8006aee:	9800      	ldr	r0, [sp, #0]
 8006af0:	f7f9 fd18 	bl	8000524 <__aeabi_i2d>
 8006af4:	4632      	mov	r2, r6
 8006af6:	463b      	mov	r3, r7
 8006af8:	f7f9 ffe6 	bl	8000ac8 <__aeabi_dcmpeq>
 8006afc:	b910      	cbnz	r0, 8006b04 <_dtoa_r+0x184>
 8006afe:	9b00      	ldr	r3, [sp, #0]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	9b00      	ldr	r3, [sp, #0]
 8006b06:	2b16      	cmp	r3, #22
 8006b08:	d85a      	bhi.n	8006bc0 <_dtoa_r+0x240>
 8006b0a:	9a00      	ldr	r2, [sp, #0]
 8006b0c:	4b57      	ldr	r3, [pc, #348]	; (8006c6c <_dtoa_r+0x2ec>)
 8006b0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b16:	ec51 0b19 	vmov	r0, r1, d9
 8006b1a:	f7f9 ffdf 	bl	8000adc <__aeabi_dcmplt>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d050      	beq.n	8006bc4 <_dtoa_r+0x244>
 8006b22:	9b00      	ldr	r3, [sp, #0]
 8006b24:	3b01      	subs	r3, #1
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	2300      	movs	r3, #0
 8006b2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b2e:	1b5d      	subs	r5, r3, r5
 8006b30:	1e6b      	subs	r3, r5, #1
 8006b32:	9305      	str	r3, [sp, #20]
 8006b34:	bf45      	ittet	mi
 8006b36:	f1c5 0301 	rsbmi	r3, r5, #1
 8006b3a:	9304      	strmi	r3, [sp, #16]
 8006b3c:	2300      	movpl	r3, #0
 8006b3e:	2300      	movmi	r3, #0
 8006b40:	bf4c      	ite	mi
 8006b42:	9305      	strmi	r3, [sp, #20]
 8006b44:	9304      	strpl	r3, [sp, #16]
 8006b46:	9b00      	ldr	r3, [sp, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	db3d      	blt.n	8006bc8 <_dtoa_r+0x248>
 8006b4c:	9b05      	ldr	r3, [sp, #20]
 8006b4e:	9a00      	ldr	r2, [sp, #0]
 8006b50:	920a      	str	r2, [sp, #40]	; 0x28
 8006b52:	4413      	add	r3, r2
 8006b54:	9305      	str	r3, [sp, #20]
 8006b56:	2300      	movs	r3, #0
 8006b58:	9307      	str	r3, [sp, #28]
 8006b5a:	9b06      	ldr	r3, [sp, #24]
 8006b5c:	2b09      	cmp	r3, #9
 8006b5e:	f200 8089 	bhi.w	8006c74 <_dtoa_r+0x2f4>
 8006b62:	2b05      	cmp	r3, #5
 8006b64:	bfc4      	itt	gt
 8006b66:	3b04      	subgt	r3, #4
 8006b68:	9306      	strgt	r3, [sp, #24]
 8006b6a:	9b06      	ldr	r3, [sp, #24]
 8006b6c:	f1a3 0302 	sub.w	r3, r3, #2
 8006b70:	bfcc      	ite	gt
 8006b72:	2500      	movgt	r5, #0
 8006b74:	2501      	movle	r5, #1
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	f200 8087 	bhi.w	8006c8a <_dtoa_r+0x30a>
 8006b7c:	e8df f003 	tbb	[pc, r3]
 8006b80:	59383a2d 	.word	0x59383a2d
 8006b84:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006b88:	441d      	add	r5, r3
 8006b8a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b8e:	2b20      	cmp	r3, #32
 8006b90:	bfc1      	itttt	gt
 8006b92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b96:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006b9a:	fa0b f303 	lslgt.w	r3, fp, r3
 8006b9e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006ba2:	bfda      	itte	le
 8006ba4:	f1c3 0320 	rsble	r3, r3, #32
 8006ba8:	fa06 f003 	lslle.w	r0, r6, r3
 8006bac:	4318      	orrgt	r0, r3
 8006bae:	f7f9 fca9 	bl	8000504 <__aeabi_ui2d>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	4606      	mov	r6, r0
 8006bb6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006bba:	3d01      	subs	r5, #1
 8006bbc:	930e      	str	r3, [sp, #56]	; 0x38
 8006bbe:	e76a      	b.n	8006a96 <_dtoa_r+0x116>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e7b2      	b.n	8006b2a <_dtoa_r+0x1aa>
 8006bc4:	900b      	str	r0, [sp, #44]	; 0x2c
 8006bc6:	e7b1      	b.n	8006b2c <_dtoa_r+0x1ac>
 8006bc8:	9b04      	ldr	r3, [sp, #16]
 8006bca:	9a00      	ldr	r2, [sp, #0]
 8006bcc:	1a9b      	subs	r3, r3, r2
 8006bce:	9304      	str	r3, [sp, #16]
 8006bd0:	4253      	negs	r3, r2
 8006bd2:	9307      	str	r3, [sp, #28]
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8006bd8:	e7bf      	b.n	8006b5a <_dtoa_r+0x1da>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	9308      	str	r3, [sp, #32]
 8006bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	dc55      	bgt.n	8006c90 <_dtoa_r+0x310>
 8006be4:	2301      	movs	r3, #1
 8006be6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006bea:	461a      	mov	r2, r3
 8006bec:	9209      	str	r2, [sp, #36]	; 0x24
 8006bee:	e00c      	b.n	8006c0a <_dtoa_r+0x28a>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e7f3      	b.n	8006bdc <_dtoa_r+0x25c>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bf8:	9308      	str	r3, [sp, #32]
 8006bfa:	9b00      	ldr	r3, [sp, #0]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	9302      	str	r3, [sp, #8]
 8006c00:	3301      	adds	r3, #1
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	9303      	str	r3, [sp, #12]
 8006c06:	bfb8      	it	lt
 8006c08:	2301      	movlt	r3, #1
 8006c0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	6042      	str	r2, [r0, #4]
 8006c10:	2204      	movs	r2, #4
 8006c12:	f102 0614 	add.w	r6, r2, #20
 8006c16:	429e      	cmp	r6, r3
 8006c18:	6841      	ldr	r1, [r0, #4]
 8006c1a:	d93d      	bls.n	8006c98 <_dtoa_r+0x318>
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f000 fed7 	bl	80079d0 <_Balloc>
 8006c22:	9001      	str	r0, [sp, #4]
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d13b      	bne.n	8006ca0 <_dtoa_r+0x320>
 8006c28:	4b11      	ldr	r3, [pc, #68]	; (8006c70 <_dtoa_r+0x2f0>)
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006c30:	e6c0      	b.n	80069b4 <_dtoa_r+0x34>
 8006c32:	2301      	movs	r3, #1
 8006c34:	e7df      	b.n	8006bf6 <_dtoa_r+0x276>
 8006c36:	bf00      	nop
 8006c38:	636f4361 	.word	0x636f4361
 8006c3c:	3fd287a7 	.word	0x3fd287a7
 8006c40:	8b60c8b3 	.word	0x8b60c8b3
 8006c44:	3fc68a28 	.word	0x3fc68a28
 8006c48:	509f79fb 	.word	0x509f79fb
 8006c4c:	3fd34413 	.word	0x3fd34413
 8006c50:	080089d9 	.word	0x080089d9
 8006c54:	080089f0 	.word	0x080089f0
 8006c58:	7ff00000 	.word	0x7ff00000
 8006c5c:	080089d5 	.word	0x080089d5
 8006c60:	080089cc 	.word	0x080089cc
 8006c64:	080089a9 	.word	0x080089a9
 8006c68:	3ff80000 	.word	0x3ff80000
 8006c6c:	08008b40 	.word	0x08008b40
 8006c70:	08008a4b 	.word	0x08008a4b
 8006c74:	2501      	movs	r5, #1
 8006c76:	2300      	movs	r3, #0
 8006c78:	9306      	str	r3, [sp, #24]
 8006c7a:	9508      	str	r5, [sp, #32]
 8006c7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c84:	2200      	movs	r2, #0
 8006c86:	2312      	movs	r3, #18
 8006c88:	e7b0      	b.n	8006bec <_dtoa_r+0x26c>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	9308      	str	r3, [sp, #32]
 8006c8e:	e7f5      	b.n	8006c7c <_dtoa_r+0x2fc>
 8006c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c96:	e7b8      	b.n	8006c0a <_dtoa_r+0x28a>
 8006c98:	3101      	adds	r1, #1
 8006c9a:	6041      	str	r1, [r0, #4]
 8006c9c:	0052      	lsls	r2, r2, #1
 8006c9e:	e7b8      	b.n	8006c12 <_dtoa_r+0x292>
 8006ca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ca2:	9a01      	ldr	r2, [sp, #4]
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	9b03      	ldr	r3, [sp, #12]
 8006ca8:	2b0e      	cmp	r3, #14
 8006caa:	f200 809d 	bhi.w	8006de8 <_dtoa_r+0x468>
 8006cae:	2d00      	cmp	r5, #0
 8006cb0:	f000 809a 	beq.w	8006de8 <_dtoa_r+0x468>
 8006cb4:	9b00      	ldr	r3, [sp, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	dd32      	ble.n	8006d20 <_dtoa_r+0x3a0>
 8006cba:	4ab7      	ldr	r2, [pc, #732]	; (8006f98 <_dtoa_r+0x618>)
 8006cbc:	f003 030f 	and.w	r3, r3, #15
 8006cc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006cc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006cc8:	9b00      	ldr	r3, [sp, #0]
 8006cca:	05d8      	lsls	r0, r3, #23
 8006ccc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006cd0:	d516      	bpl.n	8006d00 <_dtoa_r+0x380>
 8006cd2:	4bb2      	ldr	r3, [pc, #712]	; (8006f9c <_dtoa_r+0x61c>)
 8006cd4:	ec51 0b19 	vmov	r0, r1, d9
 8006cd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cdc:	f7f9 fdb6 	bl	800084c <__aeabi_ddiv>
 8006ce0:	f007 070f 	and.w	r7, r7, #15
 8006ce4:	4682      	mov	sl, r0
 8006ce6:	468b      	mov	fp, r1
 8006ce8:	2503      	movs	r5, #3
 8006cea:	4eac      	ldr	r6, [pc, #688]	; (8006f9c <_dtoa_r+0x61c>)
 8006cec:	b957      	cbnz	r7, 8006d04 <_dtoa_r+0x384>
 8006cee:	4642      	mov	r2, r8
 8006cf0:	464b      	mov	r3, r9
 8006cf2:	4650      	mov	r0, sl
 8006cf4:	4659      	mov	r1, fp
 8006cf6:	f7f9 fda9 	bl	800084c <__aeabi_ddiv>
 8006cfa:	4682      	mov	sl, r0
 8006cfc:	468b      	mov	fp, r1
 8006cfe:	e028      	b.n	8006d52 <_dtoa_r+0x3d2>
 8006d00:	2502      	movs	r5, #2
 8006d02:	e7f2      	b.n	8006cea <_dtoa_r+0x36a>
 8006d04:	07f9      	lsls	r1, r7, #31
 8006d06:	d508      	bpl.n	8006d1a <_dtoa_r+0x39a>
 8006d08:	4640      	mov	r0, r8
 8006d0a:	4649      	mov	r1, r9
 8006d0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d10:	f7f9 fc72 	bl	80005f8 <__aeabi_dmul>
 8006d14:	3501      	adds	r5, #1
 8006d16:	4680      	mov	r8, r0
 8006d18:	4689      	mov	r9, r1
 8006d1a:	107f      	asrs	r7, r7, #1
 8006d1c:	3608      	adds	r6, #8
 8006d1e:	e7e5      	b.n	8006cec <_dtoa_r+0x36c>
 8006d20:	f000 809b 	beq.w	8006e5a <_dtoa_r+0x4da>
 8006d24:	9b00      	ldr	r3, [sp, #0]
 8006d26:	4f9d      	ldr	r7, [pc, #628]	; (8006f9c <_dtoa_r+0x61c>)
 8006d28:	425e      	negs	r6, r3
 8006d2a:	4b9b      	ldr	r3, [pc, #620]	; (8006f98 <_dtoa_r+0x618>)
 8006d2c:	f006 020f 	and.w	r2, r6, #15
 8006d30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	ec51 0b19 	vmov	r0, r1, d9
 8006d3c:	f7f9 fc5c 	bl	80005f8 <__aeabi_dmul>
 8006d40:	1136      	asrs	r6, r6, #4
 8006d42:	4682      	mov	sl, r0
 8006d44:	468b      	mov	fp, r1
 8006d46:	2300      	movs	r3, #0
 8006d48:	2502      	movs	r5, #2
 8006d4a:	2e00      	cmp	r6, #0
 8006d4c:	d17a      	bne.n	8006e44 <_dtoa_r+0x4c4>
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1d3      	bne.n	8006cfa <_dtoa_r+0x37a>
 8006d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 8082 	beq.w	8006e5e <_dtoa_r+0x4de>
 8006d5a:	4b91      	ldr	r3, [pc, #580]	; (8006fa0 <_dtoa_r+0x620>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	4650      	mov	r0, sl
 8006d60:	4659      	mov	r1, fp
 8006d62:	f7f9 febb 	bl	8000adc <__aeabi_dcmplt>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d079      	beq.n	8006e5e <_dtoa_r+0x4de>
 8006d6a:	9b03      	ldr	r3, [sp, #12]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d076      	beq.n	8006e5e <_dtoa_r+0x4de>
 8006d70:	9b02      	ldr	r3, [sp, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	dd36      	ble.n	8006de4 <_dtoa_r+0x464>
 8006d76:	9b00      	ldr	r3, [sp, #0]
 8006d78:	4650      	mov	r0, sl
 8006d7a:	4659      	mov	r1, fp
 8006d7c:	1e5f      	subs	r7, r3, #1
 8006d7e:	2200      	movs	r2, #0
 8006d80:	4b88      	ldr	r3, [pc, #544]	; (8006fa4 <_dtoa_r+0x624>)
 8006d82:	f7f9 fc39 	bl	80005f8 <__aeabi_dmul>
 8006d86:	9e02      	ldr	r6, [sp, #8]
 8006d88:	4682      	mov	sl, r0
 8006d8a:	468b      	mov	fp, r1
 8006d8c:	3501      	adds	r5, #1
 8006d8e:	4628      	mov	r0, r5
 8006d90:	f7f9 fbc8 	bl	8000524 <__aeabi_i2d>
 8006d94:	4652      	mov	r2, sl
 8006d96:	465b      	mov	r3, fp
 8006d98:	f7f9 fc2e 	bl	80005f8 <__aeabi_dmul>
 8006d9c:	4b82      	ldr	r3, [pc, #520]	; (8006fa8 <_dtoa_r+0x628>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f7f9 fa74 	bl	800028c <__adddf3>
 8006da4:	46d0      	mov	r8, sl
 8006da6:	46d9      	mov	r9, fp
 8006da8:	4682      	mov	sl, r0
 8006daa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006dae:	2e00      	cmp	r6, #0
 8006db0:	d158      	bne.n	8006e64 <_dtoa_r+0x4e4>
 8006db2:	4b7e      	ldr	r3, [pc, #504]	; (8006fac <_dtoa_r+0x62c>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	4640      	mov	r0, r8
 8006db8:	4649      	mov	r1, r9
 8006dba:	f7f9 fa65 	bl	8000288 <__aeabi_dsub>
 8006dbe:	4652      	mov	r2, sl
 8006dc0:	465b      	mov	r3, fp
 8006dc2:	4680      	mov	r8, r0
 8006dc4:	4689      	mov	r9, r1
 8006dc6:	f7f9 fea7 	bl	8000b18 <__aeabi_dcmpgt>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	f040 8295 	bne.w	80072fa <_dtoa_r+0x97a>
 8006dd0:	4652      	mov	r2, sl
 8006dd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006dd6:	4640      	mov	r0, r8
 8006dd8:	4649      	mov	r1, r9
 8006dda:	f7f9 fe7f 	bl	8000adc <__aeabi_dcmplt>
 8006dde:	2800      	cmp	r0, #0
 8006de0:	f040 8289 	bne.w	80072f6 <_dtoa_r+0x976>
 8006de4:	ec5b ab19 	vmov	sl, fp, d9
 8006de8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f2c0 8148 	blt.w	8007080 <_dtoa_r+0x700>
 8006df0:	9a00      	ldr	r2, [sp, #0]
 8006df2:	2a0e      	cmp	r2, #14
 8006df4:	f300 8144 	bgt.w	8007080 <_dtoa_r+0x700>
 8006df8:	4b67      	ldr	r3, [pc, #412]	; (8006f98 <_dtoa_r+0x618>)
 8006dfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f280 80d5 	bge.w	8006fb4 <_dtoa_r+0x634>
 8006e0a:	9b03      	ldr	r3, [sp, #12]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f300 80d1 	bgt.w	8006fb4 <_dtoa_r+0x634>
 8006e12:	f040 826f 	bne.w	80072f4 <_dtoa_r+0x974>
 8006e16:	4b65      	ldr	r3, [pc, #404]	; (8006fac <_dtoa_r+0x62c>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	4640      	mov	r0, r8
 8006e1c:	4649      	mov	r1, r9
 8006e1e:	f7f9 fbeb 	bl	80005f8 <__aeabi_dmul>
 8006e22:	4652      	mov	r2, sl
 8006e24:	465b      	mov	r3, fp
 8006e26:	f7f9 fe6d 	bl	8000b04 <__aeabi_dcmpge>
 8006e2a:	9e03      	ldr	r6, [sp, #12]
 8006e2c:	4637      	mov	r7, r6
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	f040 8245 	bne.w	80072be <_dtoa_r+0x93e>
 8006e34:	9d01      	ldr	r5, [sp, #4]
 8006e36:	2331      	movs	r3, #49	; 0x31
 8006e38:	f805 3b01 	strb.w	r3, [r5], #1
 8006e3c:	9b00      	ldr	r3, [sp, #0]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	e240      	b.n	80072c6 <_dtoa_r+0x946>
 8006e44:	07f2      	lsls	r2, r6, #31
 8006e46:	d505      	bpl.n	8006e54 <_dtoa_r+0x4d4>
 8006e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e4c:	f7f9 fbd4 	bl	80005f8 <__aeabi_dmul>
 8006e50:	3501      	adds	r5, #1
 8006e52:	2301      	movs	r3, #1
 8006e54:	1076      	asrs	r6, r6, #1
 8006e56:	3708      	adds	r7, #8
 8006e58:	e777      	b.n	8006d4a <_dtoa_r+0x3ca>
 8006e5a:	2502      	movs	r5, #2
 8006e5c:	e779      	b.n	8006d52 <_dtoa_r+0x3d2>
 8006e5e:	9f00      	ldr	r7, [sp, #0]
 8006e60:	9e03      	ldr	r6, [sp, #12]
 8006e62:	e794      	b.n	8006d8e <_dtoa_r+0x40e>
 8006e64:	9901      	ldr	r1, [sp, #4]
 8006e66:	4b4c      	ldr	r3, [pc, #304]	; (8006f98 <_dtoa_r+0x618>)
 8006e68:	4431      	add	r1, r6
 8006e6a:	910d      	str	r1, [sp, #52]	; 0x34
 8006e6c:	9908      	ldr	r1, [sp, #32]
 8006e6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006e72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e76:	2900      	cmp	r1, #0
 8006e78:	d043      	beq.n	8006f02 <_dtoa_r+0x582>
 8006e7a:	494d      	ldr	r1, [pc, #308]	; (8006fb0 <_dtoa_r+0x630>)
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	f7f9 fce5 	bl	800084c <__aeabi_ddiv>
 8006e82:	4652      	mov	r2, sl
 8006e84:	465b      	mov	r3, fp
 8006e86:	f7f9 f9ff 	bl	8000288 <__aeabi_dsub>
 8006e8a:	9d01      	ldr	r5, [sp, #4]
 8006e8c:	4682      	mov	sl, r0
 8006e8e:	468b      	mov	fp, r1
 8006e90:	4649      	mov	r1, r9
 8006e92:	4640      	mov	r0, r8
 8006e94:	f7f9 fe60 	bl	8000b58 <__aeabi_d2iz>
 8006e98:	4606      	mov	r6, r0
 8006e9a:	f7f9 fb43 	bl	8000524 <__aeabi_i2d>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	4640      	mov	r0, r8
 8006ea4:	4649      	mov	r1, r9
 8006ea6:	f7f9 f9ef 	bl	8000288 <__aeabi_dsub>
 8006eaa:	3630      	adds	r6, #48	; 0x30
 8006eac:	f805 6b01 	strb.w	r6, [r5], #1
 8006eb0:	4652      	mov	r2, sl
 8006eb2:	465b      	mov	r3, fp
 8006eb4:	4680      	mov	r8, r0
 8006eb6:	4689      	mov	r9, r1
 8006eb8:	f7f9 fe10 	bl	8000adc <__aeabi_dcmplt>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	d163      	bne.n	8006f88 <_dtoa_r+0x608>
 8006ec0:	4642      	mov	r2, r8
 8006ec2:	464b      	mov	r3, r9
 8006ec4:	4936      	ldr	r1, [pc, #216]	; (8006fa0 <_dtoa_r+0x620>)
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	f7f9 f9de 	bl	8000288 <__aeabi_dsub>
 8006ecc:	4652      	mov	r2, sl
 8006ece:	465b      	mov	r3, fp
 8006ed0:	f7f9 fe04 	bl	8000adc <__aeabi_dcmplt>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	f040 80b5 	bne.w	8007044 <_dtoa_r+0x6c4>
 8006eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006edc:	429d      	cmp	r5, r3
 8006ede:	d081      	beq.n	8006de4 <_dtoa_r+0x464>
 8006ee0:	4b30      	ldr	r3, [pc, #192]	; (8006fa4 <_dtoa_r+0x624>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	4650      	mov	r0, sl
 8006ee6:	4659      	mov	r1, fp
 8006ee8:	f7f9 fb86 	bl	80005f8 <__aeabi_dmul>
 8006eec:	4b2d      	ldr	r3, [pc, #180]	; (8006fa4 <_dtoa_r+0x624>)
 8006eee:	4682      	mov	sl, r0
 8006ef0:	468b      	mov	fp, r1
 8006ef2:	4640      	mov	r0, r8
 8006ef4:	4649      	mov	r1, r9
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f7f9 fb7e 	bl	80005f8 <__aeabi_dmul>
 8006efc:	4680      	mov	r8, r0
 8006efe:	4689      	mov	r9, r1
 8006f00:	e7c6      	b.n	8006e90 <_dtoa_r+0x510>
 8006f02:	4650      	mov	r0, sl
 8006f04:	4659      	mov	r1, fp
 8006f06:	f7f9 fb77 	bl	80005f8 <__aeabi_dmul>
 8006f0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f0c:	9d01      	ldr	r5, [sp, #4]
 8006f0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f10:	4682      	mov	sl, r0
 8006f12:	468b      	mov	fp, r1
 8006f14:	4649      	mov	r1, r9
 8006f16:	4640      	mov	r0, r8
 8006f18:	f7f9 fe1e 	bl	8000b58 <__aeabi_d2iz>
 8006f1c:	4606      	mov	r6, r0
 8006f1e:	f7f9 fb01 	bl	8000524 <__aeabi_i2d>
 8006f22:	3630      	adds	r6, #48	; 0x30
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	4640      	mov	r0, r8
 8006f2a:	4649      	mov	r1, r9
 8006f2c:	f7f9 f9ac 	bl	8000288 <__aeabi_dsub>
 8006f30:	f805 6b01 	strb.w	r6, [r5], #1
 8006f34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f36:	429d      	cmp	r5, r3
 8006f38:	4680      	mov	r8, r0
 8006f3a:	4689      	mov	r9, r1
 8006f3c:	f04f 0200 	mov.w	r2, #0
 8006f40:	d124      	bne.n	8006f8c <_dtoa_r+0x60c>
 8006f42:	4b1b      	ldr	r3, [pc, #108]	; (8006fb0 <_dtoa_r+0x630>)
 8006f44:	4650      	mov	r0, sl
 8006f46:	4659      	mov	r1, fp
 8006f48:	f7f9 f9a0 	bl	800028c <__adddf3>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4640      	mov	r0, r8
 8006f52:	4649      	mov	r1, r9
 8006f54:	f7f9 fde0 	bl	8000b18 <__aeabi_dcmpgt>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d173      	bne.n	8007044 <_dtoa_r+0x6c4>
 8006f5c:	4652      	mov	r2, sl
 8006f5e:	465b      	mov	r3, fp
 8006f60:	4913      	ldr	r1, [pc, #76]	; (8006fb0 <_dtoa_r+0x630>)
 8006f62:	2000      	movs	r0, #0
 8006f64:	f7f9 f990 	bl	8000288 <__aeabi_dsub>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4640      	mov	r0, r8
 8006f6e:	4649      	mov	r1, r9
 8006f70:	f7f9 fdb4 	bl	8000adc <__aeabi_dcmplt>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	f43f af35 	beq.w	8006de4 <_dtoa_r+0x464>
 8006f7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006f7c:	1e6b      	subs	r3, r5, #1
 8006f7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f84:	2b30      	cmp	r3, #48	; 0x30
 8006f86:	d0f8      	beq.n	8006f7a <_dtoa_r+0x5fa>
 8006f88:	9700      	str	r7, [sp, #0]
 8006f8a:	e049      	b.n	8007020 <_dtoa_r+0x6a0>
 8006f8c:	4b05      	ldr	r3, [pc, #20]	; (8006fa4 <_dtoa_r+0x624>)
 8006f8e:	f7f9 fb33 	bl	80005f8 <__aeabi_dmul>
 8006f92:	4680      	mov	r8, r0
 8006f94:	4689      	mov	r9, r1
 8006f96:	e7bd      	b.n	8006f14 <_dtoa_r+0x594>
 8006f98:	08008b40 	.word	0x08008b40
 8006f9c:	08008b18 	.word	0x08008b18
 8006fa0:	3ff00000 	.word	0x3ff00000
 8006fa4:	40240000 	.word	0x40240000
 8006fa8:	401c0000 	.word	0x401c0000
 8006fac:	40140000 	.word	0x40140000
 8006fb0:	3fe00000 	.word	0x3fe00000
 8006fb4:	9d01      	ldr	r5, [sp, #4]
 8006fb6:	4656      	mov	r6, sl
 8006fb8:	465f      	mov	r7, fp
 8006fba:	4642      	mov	r2, r8
 8006fbc:	464b      	mov	r3, r9
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	4639      	mov	r1, r7
 8006fc2:	f7f9 fc43 	bl	800084c <__aeabi_ddiv>
 8006fc6:	f7f9 fdc7 	bl	8000b58 <__aeabi_d2iz>
 8006fca:	4682      	mov	sl, r0
 8006fcc:	f7f9 faaa 	bl	8000524 <__aeabi_i2d>
 8006fd0:	4642      	mov	r2, r8
 8006fd2:	464b      	mov	r3, r9
 8006fd4:	f7f9 fb10 	bl	80005f8 <__aeabi_dmul>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4630      	mov	r0, r6
 8006fde:	4639      	mov	r1, r7
 8006fe0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006fe4:	f7f9 f950 	bl	8000288 <__aeabi_dsub>
 8006fe8:	f805 6b01 	strb.w	r6, [r5], #1
 8006fec:	9e01      	ldr	r6, [sp, #4]
 8006fee:	9f03      	ldr	r7, [sp, #12]
 8006ff0:	1bae      	subs	r6, r5, r6
 8006ff2:	42b7      	cmp	r7, r6
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	d135      	bne.n	8007066 <_dtoa_r+0x6e6>
 8006ffa:	f7f9 f947 	bl	800028c <__adddf3>
 8006ffe:	4642      	mov	r2, r8
 8007000:	464b      	mov	r3, r9
 8007002:	4606      	mov	r6, r0
 8007004:	460f      	mov	r7, r1
 8007006:	f7f9 fd87 	bl	8000b18 <__aeabi_dcmpgt>
 800700a:	b9d0      	cbnz	r0, 8007042 <_dtoa_r+0x6c2>
 800700c:	4642      	mov	r2, r8
 800700e:	464b      	mov	r3, r9
 8007010:	4630      	mov	r0, r6
 8007012:	4639      	mov	r1, r7
 8007014:	f7f9 fd58 	bl	8000ac8 <__aeabi_dcmpeq>
 8007018:	b110      	cbz	r0, 8007020 <_dtoa_r+0x6a0>
 800701a:	f01a 0f01 	tst.w	sl, #1
 800701e:	d110      	bne.n	8007042 <_dtoa_r+0x6c2>
 8007020:	4620      	mov	r0, r4
 8007022:	ee18 1a10 	vmov	r1, s16
 8007026:	f000 fd13 	bl	8007a50 <_Bfree>
 800702a:	2300      	movs	r3, #0
 800702c:	9800      	ldr	r0, [sp, #0]
 800702e:	702b      	strb	r3, [r5, #0]
 8007030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007032:	3001      	adds	r0, #1
 8007034:	6018      	str	r0, [r3, #0]
 8007036:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007038:	2b00      	cmp	r3, #0
 800703a:	f43f acf1 	beq.w	8006a20 <_dtoa_r+0xa0>
 800703e:	601d      	str	r5, [r3, #0]
 8007040:	e4ee      	b.n	8006a20 <_dtoa_r+0xa0>
 8007042:	9f00      	ldr	r7, [sp, #0]
 8007044:	462b      	mov	r3, r5
 8007046:	461d      	mov	r5, r3
 8007048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800704c:	2a39      	cmp	r2, #57	; 0x39
 800704e:	d106      	bne.n	800705e <_dtoa_r+0x6de>
 8007050:	9a01      	ldr	r2, [sp, #4]
 8007052:	429a      	cmp	r2, r3
 8007054:	d1f7      	bne.n	8007046 <_dtoa_r+0x6c6>
 8007056:	9901      	ldr	r1, [sp, #4]
 8007058:	2230      	movs	r2, #48	; 0x30
 800705a:	3701      	adds	r7, #1
 800705c:	700a      	strb	r2, [r1, #0]
 800705e:	781a      	ldrb	r2, [r3, #0]
 8007060:	3201      	adds	r2, #1
 8007062:	701a      	strb	r2, [r3, #0]
 8007064:	e790      	b.n	8006f88 <_dtoa_r+0x608>
 8007066:	4ba6      	ldr	r3, [pc, #664]	; (8007300 <_dtoa_r+0x980>)
 8007068:	2200      	movs	r2, #0
 800706a:	f7f9 fac5 	bl	80005f8 <__aeabi_dmul>
 800706e:	2200      	movs	r2, #0
 8007070:	2300      	movs	r3, #0
 8007072:	4606      	mov	r6, r0
 8007074:	460f      	mov	r7, r1
 8007076:	f7f9 fd27 	bl	8000ac8 <__aeabi_dcmpeq>
 800707a:	2800      	cmp	r0, #0
 800707c:	d09d      	beq.n	8006fba <_dtoa_r+0x63a>
 800707e:	e7cf      	b.n	8007020 <_dtoa_r+0x6a0>
 8007080:	9a08      	ldr	r2, [sp, #32]
 8007082:	2a00      	cmp	r2, #0
 8007084:	f000 80d7 	beq.w	8007236 <_dtoa_r+0x8b6>
 8007088:	9a06      	ldr	r2, [sp, #24]
 800708a:	2a01      	cmp	r2, #1
 800708c:	f300 80ba 	bgt.w	8007204 <_dtoa_r+0x884>
 8007090:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007092:	2a00      	cmp	r2, #0
 8007094:	f000 80b2 	beq.w	80071fc <_dtoa_r+0x87c>
 8007098:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800709c:	9e07      	ldr	r6, [sp, #28]
 800709e:	9d04      	ldr	r5, [sp, #16]
 80070a0:	9a04      	ldr	r2, [sp, #16]
 80070a2:	441a      	add	r2, r3
 80070a4:	9204      	str	r2, [sp, #16]
 80070a6:	9a05      	ldr	r2, [sp, #20]
 80070a8:	2101      	movs	r1, #1
 80070aa:	441a      	add	r2, r3
 80070ac:	4620      	mov	r0, r4
 80070ae:	9205      	str	r2, [sp, #20]
 80070b0:	f000 fd86 	bl	8007bc0 <__i2b>
 80070b4:	4607      	mov	r7, r0
 80070b6:	2d00      	cmp	r5, #0
 80070b8:	dd0c      	ble.n	80070d4 <_dtoa_r+0x754>
 80070ba:	9b05      	ldr	r3, [sp, #20]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	dd09      	ble.n	80070d4 <_dtoa_r+0x754>
 80070c0:	42ab      	cmp	r3, r5
 80070c2:	9a04      	ldr	r2, [sp, #16]
 80070c4:	bfa8      	it	ge
 80070c6:	462b      	movge	r3, r5
 80070c8:	1ad2      	subs	r2, r2, r3
 80070ca:	9204      	str	r2, [sp, #16]
 80070cc:	9a05      	ldr	r2, [sp, #20]
 80070ce:	1aed      	subs	r5, r5, r3
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	9305      	str	r3, [sp, #20]
 80070d4:	9b07      	ldr	r3, [sp, #28]
 80070d6:	b31b      	cbz	r3, 8007120 <_dtoa_r+0x7a0>
 80070d8:	9b08      	ldr	r3, [sp, #32]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 80af 	beq.w	800723e <_dtoa_r+0x8be>
 80070e0:	2e00      	cmp	r6, #0
 80070e2:	dd13      	ble.n	800710c <_dtoa_r+0x78c>
 80070e4:	4639      	mov	r1, r7
 80070e6:	4632      	mov	r2, r6
 80070e8:	4620      	mov	r0, r4
 80070ea:	f000 fe29 	bl	8007d40 <__pow5mult>
 80070ee:	ee18 2a10 	vmov	r2, s16
 80070f2:	4601      	mov	r1, r0
 80070f4:	4607      	mov	r7, r0
 80070f6:	4620      	mov	r0, r4
 80070f8:	f000 fd78 	bl	8007bec <__multiply>
 80070fc:	ee18 1a10 	vmov	r1, s16
 8007100:	4680      	mov	r8, r0
 8007102:	4620      	mov	r0, r4
 8007104:	f000 fca4 	bl	8007a50 <_Bfree>
 8007108:	ee08 8a10 	vmov	s16, r8
 800710c:	9b07      	ldr	r3, [sp, #28]
 800710e:	1b9a      	subs	r2, r3, r6
 8007110:	d006      	beq.n	8007120 <_dtoa_r+0x7a0>
 8007112:	ee18 1a10 	vmov	r1, s16
 8007116:	4620      	mov	r0, r4
 8007118:	f000 fe12 	bl	8007d40 <__pow5mult>
 800711c:	ee08 0a10 	vmov	s16, r0
 8007120:	2101      	movs	r1, #1
 8007122:	4620      	mov	r0, r4
 8007124:	f000 fd4c 	bl	8007bc0 <__i2b>
 8007128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800712a:	2b00      	cmp	r3, #0
 800712c:	4606      	mov	r6, r0
 800712e:	f340 8088 	ble.w	8007242 <_dtoa_r+0x8c2>
 8007132:	461a      	mov	r2, r3
 8007134:	4601      	mov	r1, r0
 8007136:	4620      	mov	r0, r4
 8007138:	f000 fe02 	bl	8007d40 <__pow5mult>
 800713c:	9b06      	ldr	r3, [sp, #24]
 800713e:	2b01      	cmp	r3, #1
 8007140:	4606      	mov	r6, r0
 8007142:	f340 8081 	ble.w	8007248 <_dtoa_r+0x8c8>
 8007146:	f04f 0800 	mov.w	r8, #0
 800714a:	6933      	ldr	r3, [r6, #16]
 800714c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007150:	6918      	ldr	r0, [r3, #16]
 8007152:	f000 fce5 	bl	8007b20 <__hi0bits>
 8007156:	f1c0 0020 	rsb	r0, r0, #32
 800715a:	9b05      	ldr	r3, [sp, #20]
 800715c:	4418      	add	r0, r3
 800715e:	f010 001f 	ands.w	r0, r0, #31
 8007162:	f000 8092 	beq.w	800728a <_dtoa_r+0x90a>
 8007166:	f1c0 0320 	rsb	r3, r0, #32
 800716a:	2b04      	cmp	r3, #4
 800716c:	f340 808a 	ble.w	8007284 <_dtoa_r+0x904>
 8007170:	f1c0 001c 	rsb	r0, r0, #28
 8007174:	9b04      	ldr	r3, [sp, #16]
 8007176:	4403      	add	r3, r0
 8007178:	9304      	str	r3, [sp, #16]
 800717a:	9b05      	ldr	r3, [sp, #20]
 800717c:	4403      	add	r3, r0
 800717e:	4405      	add	r5, r0
 8007180:	9305      	str	r3, [sp, #20]
 8007182:	9b04      	ldr	r3, [sp, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	dd07      	ble.n	8007198 <_dtoa_r+0x818>
 8007188:	ee18 1a10 	vmov	r1, s16
 800718c:	461a      	mov	r2, r3
 800718e:	4620      	mov	r0, r4
 8007190:	f000 fe30 	bl	8007df4 <__lshift>
 8007194:	ee08 0a10 	vmov	s16, r0
 8007198:	9b05      	ldr	r3, [sp, #20]
 800719a:	2b00      	cmp	r3, #0
 800719c:	dd05      	ble.n	80071aa <_dtoa_r+0x82a>
 800719e:	4631      	mov	r1, r6
 80071a0:	461a      	mov	r2, r3
 80071a2:	4620      	mov	r0, r4
 80071a4:	f000 fe26 	bl	8007df4 <__lshift>
 80071a8:	4606      	mov	r6, r0
 80071aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d06e      	beq.n	800728e <_dtoa_r+0x90e>
 80071b0:	ee18 0a10 	vmov	r0, s16
 80071b4:	4631      	mov	r1, r6
 80071b6:	f000 fe8d 	bl	8007ed4 <__mcmp>
 80071ba:	2800      	cmp	r0, #0
 80071bc:	da67      	bge.n	800728e <_dtoa_r+0x90e>
 80071be:	9b00      	ldr	r3, [sp, #0]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	ee18 1a10 	vmov	r1, s16
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	220a      	movs	r2, #10
 80071ca:	2300      	movs	r3, #0
 80071cc:	4620      	mov	r0, r4
 80071ce:	f000 fc61 	bl	8007a94 <__multadd>
 80071d2:	9b08      	ldr	r3, [sp, #32]
 80071d4:	ee08 0a10 	vmov	s16, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f000 81b1 	beq.w	8007540 <_dtoa_r+0xbc0>
 80071de:	2300      	movs	r3, #0
 80071e0:	4639      	mov	r1, r7
 80071e2:	220a      	movs	r2, #10
 80071e4:	4620      	mov	r0, r4
 80071e6:	f000 fc55 	bl	8007a94 <__multadd>
 80071ea:	9b02      	ldr	r3, [sp, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	4607      	mov	r7, r0
 80071f0:	f300 808e 	bgt.w	8007310 <_dtoa_r+0x990>
 80071f4:	9b06      	ldr	r3, [sp, #24]
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	dc51      	bgt.n	800729e <_dtoa_r+0x91e>
 80071fa:	e089      	b.n	8007310 <_dtoa_r+0x990>
 80071fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007202:	e74b      	b.n	800709c <_dtoa_r+0x71c>
 8007204:	9b03      	ldr	r3, [sp, #12]
 8007206:	1e5e      	subs	r6, r3, #1
 8007208:	9b07      	ldr	r3, [sp, #28]
 800720a:	42b3      	cmp	r3, r6
 800720c:	bfbf      	itttt	lt
 800720e:	9b07      	ldrlt	r3, [sp, #28]
 8007210:	9607      	strlt	r6, [sp, #28]
 8007212:	1af2      	sublt	r2, r6, r3
 8007214:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007216:	bfb6      	itet	lt
 8007218:	189b      	addlt	r3, r3, r2
 800721a:	1b9e      	subge	r6, r3, r6
 800721c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800721e:	9b03      	ldr	r3, [sp, #12]
 8007220:	bfb8      	it	lt
 8007222:	2600      	movlt	r6, #0
 8007224:	2b00      	cmp	r3, #0
 8007226:	bfb7      	itett	lt
 8007228:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800722c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007230:	1a9d      	sublt	r5, r3, r2
 8007232:	2300      	movlt	r3, #0
 8007234:	e734      	b.n	80070a0 <_dtoa_r+0x720>
 8007236:	9e07      	ldr	r6, [sp, #28]
 8007238:	9d04      	ldr	r5, [sp, #16]
 800723a:	9f08      	ldr	r7, [sp, #32]
 800723c:	e73b      	b.n	80070b6 <_dtoa_r+0x736>
 800723e:	9a07      	ldr	r2, [sp, #28]
 8007240:	e767      	b.n	8007112 <_dtoa_r+0x792>
 8007242:	9b06      	ldr	r3, [sp, #24]
 8007244:	2b01      	cmp	r3, #1
 8007246:	dc18      	bgt.n	800727a <_dtoa_r+0x8fa>
 8007248:	f1ba 0f00 	cmp.w	sl, #0
 800724c:	d115      	bne.n	800727a <_dtoa_r+0x8fa>
 800724e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007252:	b993      	cbnz	r3, 800727a <_dtoa_r+0x8fa>
 8007254:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007258:	0d1b      	lsrs	r3, r3, #20
 800725a:	051b      	lsls	r3, r3, #20
 800725c:	b183      	cbz	r3, 8007280 <_dtoa_r+0x900>
 800725e:	9b04      	ldr	r3, [sp, #16]
 8007260:	3301      	adds	r3, #1
 8007262:	9304      	str	r3, [sp, #16]
 8007264:	9b05      	ldr	r3, [sp, #20]
 8007266:	3301      	adds	r3, #1
 8007268:	9305      	str	r3, [sp, #20]
 800726a:	f04f 0801 	mov.w	r8, #1
 800726e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007270:	2b00      	cmp	r3, #0
 8007272:	f47f af6a 	bne.w	800714a <_dtoa_r+0x7ca>
 8007276:	2001      	movs	r0, #1
 8007278:	e76f      	b.n	800715a <_dtoa_r+0x7da>
 800727a:	f04f 0800 	mov.w	r8, #0
 800727e:	e7f6      	b.n	800726e <_dtoa_r+0x8ee>
 8007280:	4698      	mov	r8, r3
 8007282:	e7f4      	b.n	800726e <_dtoa_r+0x8ee>
 8007284:	f43f af7d 	beq.w	8007182 <_dtoa_r+0x802>
 8007288:	4618      	mov	r0, r3
 800728a:	301c      	adds	r0, #28
 800728c:	e772      	b.n	8007174 <_dtoa_r+0x7f4>
 800728e:	9b03      	ldr	r3, [sp, #12]
 8007290:	2b00      	cmp	r3, #0
 8007292:	dc37      	bgt.n	8007304 <_dtoa_r+0x984>
 8007294:	9b06      	ldr	r3, [sp, #24]
 8007296:	2b02      	cmp	r3, #2
 8007298:	dd34      	ble.n	8007304 <_dtoa_r+0x984>
 800729a:	9b03      	ldr	r3, [sp, #12]
 800729c:	9302      	str	r3, [sp, #8]
 800729e:	9b02      	ldr	r3, [sp, #8]
 80072a0:	b96b      	cbnz	r3, 80072be <_dtoa_r+0x93e>
 80072a2:	4631      	mov	r1, r6
 80072a4:	2205      	movs	r2, #5
 80072a6:	4620      	mov	r0, r4
 80072a8:	f000 fbf4 	bl	8007a94 <__multadd>
 80072ac:	4601      	mov	r1, r0
 80072ae:	4606      	mov	r6, r0
 80072b0:	ee18 0a10 	vmov	r0, s16
 80072b4:	f000 fe0e 	bl	8007ed4 <__mcmp>
 80072b8:	2800      	cmp	r0, #0
 80072ba:	f73f adbb 	bgt.w	8006e34 <_dtoa_r+0x4b4>
 80072be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c0:	9d01      	ldr	r5, [sp, #4]
 80072c2:	43db      	mvns	r3, r3
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	f04f 0800 	mov.w	r8, #0
 80072ca:	4631      	mov	r1, r6
 80072cc:	4620      	mov	r0, r4
 80072ce:	f000 fbbf 	bl	8007a50 <_Bfree>
 80072d2:	2f00      	cmp	r7, #0
 80072d4:	f43f aea4 	beq.w	8007020 <_dtoa_r+0x6a0>
 80072d8:	f1b8 0f00 	cmp.w	r8, #0
 80072dc:	d005      	beq.n	80072ea <_dtoa_r+0x96a>
 80072de:	45b8      	cmp	r8, r7
 80072e0:	d003      	beq.n	80072ea <_dtoa_r+0x96a>
 80072e2:	4641      	mov	r1, r8
 80072e4:	4620      	mov	r0, r4
 80072e6:	f000 fbb3 	bl	8007a50 <_Bfree>
 80072ea:	4639      	mov	r1, r7
 80072ec:	4620      	mov	r0, r4
 80072ee:	f000 fbaf 	bl	8007a50 <_Bfree>
 80072f2:	e695      	b.n	8007020 <_dtoa_r+0x6a0>
 80072f4:	2600      	movs	r6, #0
 80072f6:	4637      	mov	r7, r6
 80072f8:	e7e1      	b.n	80072be <_dtoa_r+0x93e>
 80072fa:	9700      	str	r7, [sp, #0]
 80072fc:	4637      	mov	r7, r6
 80072fe:	e599      	b.n	8006e34 <_dtoa_r+0x4b4>
 8007300:	40240000 	.word	0x40240000
 8007304:	9b08      	ldr	r3, [sp, #32]
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 80ca 	beq.w	80074a0 <_dtoa_r+0xb20>
 800730c:	9b03      	ldr	r3, [sp, #12]
 800730e:	9302      	str	r3, [sp, #8]
 8007310:	2d00      	cmp	r5, #0
 8007312:	dd05      	ble.n	8007320 <_dtoa_r+0x9a0>
 8007314:	4639      	mov	r1, r7
 8007316:	462a      	mov	r2, r5
 8007318:	4620      	mov	r0, r4
 800731a:	f000 fd6b 	bl	8007df4 <__lshift>
 800731e:	4607      	mov	r7, r0
 8007320:	f1b8 0f00 	cmp.w	r8, #0
 8007324:	d05b      	beq.n	80073de <_dtoa_r+0xa5e>
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	4620      	mov	r0, r4
 800732a:	f000 fb51 	bl	80079d0 <_Balloc>
 800732e:	4605      	mov	r5, r0
 8007330:	b928      	cbnz	r0, 800733e <_dtoa_r+0x9be>
 8007332:	4b87      	ldr	r3, [pc, #540]	; (8007550 <_dtoa_r+0xbd0>)
 8007334:	4602      	mov	r2, r0
 8007336:	f240 21ea 	movw	r1, #746	; 0x2ea
 800733a:	f7ff bb3b 	b.w	80069b4 <_dtoa_r+0x34>
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	3202      	adds	r2, #2
 8007342:	0092      	lsls	r2, r2, #2
 8007344:	f107 010c 	add.w	r1, r7, #12
 8007348:	300c      	adds	r0, #12
 800734a:	f000 fb33 	bl	80079b4 <memcpy>
 800734e:	2201      	movs	r2, #1
 8007350:	4629      	mov	r1, r5
 8007352:	4620      	mov	r0, r4
 8007354:	f000 fd4e 	bl	8007df4 <__lshift>
 8007358:	9b01      	ldr	r3, [sp, #4]
 800735a:	f103 0901 	add.w	r9, r3, #1
 800735e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007362:	4413      	add	r3, r2
 8007364:	9305      	str	r3, [sp, #20]
 8007366:	f00a 0301 	and.w	r3, sl, #1
 800736a:	46b8      	mov	r8, r7
 800736c:	9304      	str	r3, [sp, #16]
 800736e:	4607      	mov	r7, r0
 8007370:	4631      	mov	r1, r6
 8007372:	ee18 0a10 	vmov	r0, s16
 8007376:	f7ff fa75 	bl	8006864 <quorem>
 800737a:	4641      	mov	r1, r8
 800737c:	9002      	str	r0, [sp, #8]
 800737e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007382:	ee18 0a10 	vmov	r0, s16
 8007386:	f000 fda5 	bl	8007ed4 <__mcmp>
 800738a:	463a      	mov	r2, r7
 800738c:	9003      	str	r0, [sp, #12]
 800738e:	4631      	mov	r1, r6
 8007390:	4620      	mov	r0, r4
 8007392:	f000 fdbb 	bl	8007f0c <__mdiff>
 8007396:	68c2      	ldr	r2, [r0, #12]
 8007398:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800739c:	4605      	mov	r5, r0
 800739e:	bb02      	cbnz	r2, 80073e2 <_dtoa_r+0xa62>
 80073a0:	4601      	mov	r1, r0
 80073a2:	ee18 0a10 	vmov	r0, s16
 80073a6:	f000 fd95 	bl	8007ed4 <__mcmp>
 80073aa:	4602      	mov	r2, r0
 80073ac:	4629      	mov	r1, r5
 80073ae:	4620      	mov	r0, r4
 80073b0:	9207      	str	r2, [sp, #28]
 80073b2:	f000 fb4d 	bl	8007a50 <_Bfree>
 80073b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80073ba:	ea43 0102 	orr.w	r1, r3, r2
 80073be:	9b04      	ldr	r3, [sp, #16]
 80073c0:	430b      	orrs	r3, r1
 80073c2:	464d      	mov	r5, r9
 80073c4:	d10f      	bne.n	80073e6 <_dtoa_r+0xa66>
 80073c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80073ca:	d02a      	beq.n	8007422 <_dtoa_r+0xaa2>
 80073cc:	9b03      	ldr	r3, [sp, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	dd02      	ble.n	80073d8 <_dtoa_r+0xa58>
 80073d2:	9b02      	ldr	r3, [sp, #8]
 80073d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80073d8:	f88b a000 	strb.w	sl, [fp]
 80073dc:	e775      	b.n	80072ca <_dtoa_r+0x94a>
 80073de:	4638      	mov	r0, r7
 80073e0:	e7ba      	b.n	8007358 <_dtoa_r+0x9d8>
 80073e2:	2201      	movs	r2, #1
 80073e4:	e7e2      	b.n	80073ac <_dtoa_r+0xa2c>
 80073e6:	9b03      	ldr	r3, [sp, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	db04      	blt.n	80073f6 <_dtoa_r+0xa76>
 80073ec:	9906      	ldr	r1, [sp, #24]
 80073ee:	430b      	orrs	r3, r1
 80073f0:	9904      	ldr	r1, [sp, #16]
 80073f2:	430b      	orrs	r3, r1
 80073f4:	d122      	bne.n	800743c <_dtoa_r+0xabc>
 80073f6:	2a00      	cmp	r2, #0
 80073f8:	ddee      	ble.n	80073d8 <_dtoa_r+0xa58>
 80073fa:	ee18 1a10 	vmov	r1, s16
 80073fe:	2201      	movs	r2, #1
 8007400:	4620      	mov	r0, r4
 8007402:	f000 fcf7 	bl	8007df4 <__lshift>
 8007406:	4631      	mov	r1, r6
 8007408:	ee08 0a10 	vmov	s16, r0
 800740c:	f000 fd62 	bl	8007ed4 <__mcmp>
 8007410:	2800      	cmp	r0, #0
 8007412:	dc03      	bgt.n	800741c <_dtoa_r+0xa9c>
 8007414:	d1e0      	bne.n	80073d8 <_dtoa_r+0xa58>
 8007416:	f01a 0f01 	tst.w	sl, #1
 800741a:	d0dd      	beq.n	80073d8 <_dtoa_r+0xa58>
 800741c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007420:	d1d7      	bne.n	80073d2 <_dtoa_r+0xa52>
 8007422:	2339      	movs	r3, #57	; 0x39
 8007424:	f88b 3000 	strb.w	r3, [fp]
 8007428:	462b      	mov	r3, r5
 800742a:	461d      	mov	r5, r3
 800742c:	3b01      	subs	r3, #1
 800742e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007432:	2a39      	cmp	r2, #57	; 0x39
 8007434:	d071      	beq.n	800751a <_dtoa_r+0xb9a>
 8007436:	3201      	adds	r2, #1
 8007438:	701a      	strb	r2, [r3, #0]
 800743a:	e746      	b.n	80072ca <_dtoa_r+0x94a>
 800743c:	2a00      	cmp	r2, #0
 800743e:	dd07      	ble.n	8007450 <_dtoa_r+0xad0>
 8007440:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007444:	d0ed      	beq.n	8007422 <_dtoa_r+0xaa2>
 8007446:	f10a 0301 	add.w	r3, sl, #1
 800744a:	f88b 3000 	strb.w	r3, [fp]
 800744e:	e73c      	b.n	80072ca <_dtoa_r+0x94a>
 8007450:	9b05      	ldr	r3, [sp, #20]
 8007452:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007456:	4599      	cmp	r9, r3
 8007458:	d047      	beq.n	80074ea <_dtoa_r+0xb6a>
 800745a:	ee18 1a10 	vmov	r1, s16
 800745e:	2300      	movs	r3, #0
 8007460:	220a      	movs	r2, #10
 8007462:	4620      	mov	r0, r4
 8007464:	f000 fb16 	bl	8007a94 <__multadd>
 8007468:	45b8      	cmp	r8, r7
 800746a:	ee08 0a10 	vmov	s16, r0
 800746e:	f04f 0300 	mov.w	r3, #0
 8007472:	f04f 020a 	mov.w	r2, #10
 8007476:	4641      	mov	r1, r8
 8007478:	4620      	mov	r0, r4
 800747a:	d106      	bne.n	800748a <_dtoa_r+0xb0a>
 800747c:	f000 fb0a 	bl	8007a94 <__multadd>
 8007480:	4680      	mov	r8, r0
 8007482:	4607      	mov	r7, r0
 8007484:	f109 0901 	add.w	r9, r9, #1
 8007488:	e772      	b.n	8007370 <_dtoa_r+0x9f0>
 800748a:	f000 fb03 	bl	8007a94 <__multadd>
 800748e:	4639      	mov	r1, r7
 8007490:	4680      	mov	r8, r0
 8007492:	2300      	movs	r3, #0
 8007494:	220a      	movs	r2, #10
 8007496:	4620      	mov	r0, r4
 8007498:	f000 fafc 	bl	8007a94 <__multadd>
 800749c:	4607      	mov	r7, r0
 800749e:	e7f1      	b.n	8007484 <_dtoa_r+0xb04>
 80074a0:	9b03      	ldr	r3, [sp, #12]
 80074a2:	9302      	str	r3, [sp, #8]
 80074a4:	9d01      	ldr	r5, [sp, #4]
 80074a6:	ee18 0a10 	vmov	r0, s16
 80074aa:	4631      	mov	r1, r6
 80074ac:	f7ff f9da 	bl	8006864 <quorem>
 80074b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80074b4:	9b01      	ldr	r3, [sp, #4]
 80074b6:	f805 ab01 	strb.w	sl, [r5], #1
 80074ba:	1aea      	subs	r2, r5, r3
 80074bc:	9b02      	ldr	r3, [sp, #8]
 80074be:	4293      	cmp	r3, r2
 80074c0:	dd09      	ble.n	80074d6 <_dtoa_r+0xb56>
 80074c2:	ee18 1a10 	vmov	r1, s16
 80074c6:	2300      	movs	r3, #0
 80074c8:	220a      	movs	r2, #10
 80074ca:	4620      	mov	r0, r4
 80074cc:	f000 fae2 	bl	8007a94 <__multadd>
 80074d0:	ee08 0a10 	vmov	s16, r0
 80074d4:	e7e7      	b.n	80074a6 <_dtoa_r+0xb26>
 80074d6:	9b02      	ldr	r3, [sp, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	bfc8      	it	gt
 80074dc:	461d      	movgt	r5, r3
 80074de:	9b01      	ldr	r3, [sp, #4]
 80074e0:	bfd8      	it	le
 80074e2:	2501      	movle	r5, #1
 80074e4:	441d      	add	r5, r3
 80074e6:	f04f 0800 	mov.w	r8, #0
 80074ea:	ee18 1a10 	vmov	r1, s16
 80074ee:	2201      	movs	r2, #1
 80074f0:	4620      	mov	r0, r4
 80074f2:	f000 fc7f 	bl	8007df4 <__lshift>
 80074f6:	4631      	mov	r1, r6
 80074f8:	ee08 0a10 	vmov	s16, r0
 80074fc:	f000 fcea 	bl	8007ed4 <__mcmp>
 8007500:	2800      	cmp	r0, #0
 8007502:	dc91      	bgt.n	8007428 <_dtoa_r+0xaa8>
 8007504:	d102      	bne.n	800750c <_dtoa_r+0xb8c>
 8007506:	f01a 0f01 	tst.w	sl, #1
 800750a:	d18d      	bne.n	8007428 <_dtoa_r+0xaa8>
 800750c:	462b      	mov	r3, r5
 800750e:	461d      	mov	r5, r3
 8007510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007514:	2a30      	cmp	r2, #48	; 0x30
 8007516:	d0fa      	beq.n	800750e <_dtoa_r+0xb8e>
 8007518:	e6d7      	b.n	80072ca <_dtoa_r+0x94a>
 800751a:	9a01      	ldr	r2, [sp, #4]
 800751c:	429a      	cmp	r2, r3
 800751e:	d184      	bne.n	800742a <_dtoa_r+0xaaa>
 8007520:	9b00      	ldr	r3, [sp, #0]
 8007522:	3301      	adds	r3, #1
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	2331      	movs	r3, #49	; 0x31
 8007528:	7013      	strb	r3, [r2, #0]
 800752a:	e6ce      	b.n	80072ca <_dtoa_r+0x94a>
 800752c:	4b09      	ldr	r3, [pc, #36]	; (8007554 <_dtoa_r+0xbd4>)
 800752e:	f7ff ba95 	b.w	8006a5c <_dtoa_r+0xdc>
 8007532:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007534:	2b00      	cmp	r3, #0
 8007536:	f47f aa6e 	bne.w	8006a16 <_dtoa_r+0x96>
 800753a:	4b07      	ldr	r3, [pc, #28]	; (8007558 <_dtoa_r+0xbd8>)
 800753c:	f7ff ba8e 	b.w	8006a5c <_dtoa_r+0xdc>
 8007540:	9b02      	ldr	r3, [sp, #8]
 8007542:	2b00      	cmp	r3, #0
 8007544:	dcae      	bgt.n	80074a4 <_dtoa_r+0xb24>
 8007546:	9b06      	ldr	r3, [sp, #24]
 8007548:	2b02      	cmp	r3, #2
 800754a:	f73f aea8 	bgt.w	800729e <_dtoa_r+0x91e>
 800754e:	e7a9      	b.n	80074a4 <_dtoa_r+0xb24>
 8007550:	08008a4b 	.word	0x08008a4b
 8007554:	080089a8 	.word	0x080089a8
 8007558:	080089cc 	.word	0x080089cc

0800755c <__sflush_r>:
 800755c:	898a      	ldrh	r2, [r1, #12]
 800755e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007562:	4605      	mov	r5, r0
 8007564:	0710      	lsls	r0, r2, #28
 8007566:	460c      	mov	r4, r1
 8007568:	d458      	bmi.n	800761c <__sflush_r+0xc0>
 800756a:	684b      	ldr	r3, [r1, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	dc05      	bgt.n	800757c <__sflush_r+0x20>
 8007570:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007572:	2b00      	cmp	r3, #0
 8007574:	dc02      	bgt.n	800757c <__sflush_r+0x20>
 8007576:	2000      	movs	r0, #0
 8007578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800757c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800757e:	2e00      	cmp	r6, #0
 8007580:	d0f9      	beq.n	8007576 <__sflush_r+0x1a>
 8007582:	2300      	movs	r3, #0
 8007584:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007588:	682f      	ldr	r7, [r5, #0]
 800758a:	602b      	str	r3, [r5, #0]
 800758c:	d032      	beq.n	80075f4 <__sflush_r+0x98>
 800758e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007590:	89a3      	ldrh	r3, [r4, #12]
 8007592:	075a      	lsls	r2, r3, #29
 8007594:	d505      	bpl.n	80075a2 <__sflush_r+0x46>
 8007596:	6863      	ldr	r3, [r4, #4]
 8007598:	1ac0      	subs	r0, r0, r3
 800759a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800759c:	b10b      	cbz	r3, 80075a2 <__sflush_r+0x46>
 800759e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075a0:	1ac0      	subs	r0, r0, r3
 80075a2:	2300      	movs	r3, #0
 80075a4:	4602      	mov	r2, r0
 80075a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075a8:	6a21      	ldr	r1, [r4, #32]
 80075aa:	4628      	mov	r0, r5
 80075ac:	47b0      	blx	r6
 80075ae:	1c43      	adds	r3, r0, #1
 80075b0:	89a3      	ldrh	r3, [r4, #12]
 80075b2:	d106      	bne.n	80075c2 <__sflush_r+0x66>
 80075b4:	6829      	ldr	r1, [r5, #0]
 80075b6:	291d      	cmp	r1, #29
 80075b8:	d82c      	bhi.n	8007614 <__sflush_r+0xb8>
 80075ba:	4a2a      	ldr	r2, [pc, #168]	; (8007664 <__sflush_r+0x108>)
 80075bc:	40ca      	lsrs	r2, r1
 80075be:	07d6      	lsls	r6, r2, #31
 80075c0:	d528      	bpl.n	8007614 <__sflush_r+0xb8>
 80075c2:	2200      	movs	r2, #0
 80075c4:	6062      	str	r2, [r4, #4]
 80075c6:	04d9      	lsls	r1, r3, #19
 80075c8:	6922      	ldr	r2, [r4, #16]
 80075ca:	6022      	str	r2, [r4, #0]
 80075cc:	d504      	bpl.n	80075d8 <__sflush_r+0x7c>
 80075ce:	1c42      	adds	r2, r0, #1
 80075d0:	d101      	bne.n	80075d6 <__sflush_r+0x7a>
 80075d2:	682b      	ldr	r3, [r5, #0]
 80075d4:	b903      	cbnz	r3, 80075d8 <__sflush_r+0x7c>
 80075d6:	6560      	str	r0, [r4, #84]	; 0x54
 80075d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075da:	602f      	str	r7, [r5, #0]
 80075dc:	2900      	cmp	r1, #0
 80075de:	d0ca      	beq.n	8007576 <__sflush_r+0x1a>
 80075e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075e4:	4299      	cmp	r1, r3
 80075e6:	d002      	beq.n	80075ee <__sflush_r+0x92>
 80075e8:	4628      	mov	r0, r5
 80075ea:	f000 fd8b 	bl	8008104 <_free_r>
 80075ee:	2000      	movs	r0, #0
 80075f0:	6360      	str	r0, [r4, #52]	; 0x34
 80075f2:	e7c1      	b.n	8007578 <__sflush_r+0x1c>
 80075f4:	6a21      	ldr	r1, [r4, #32]
 80075f6:	2301      	movs	r3, #1
 80075f8:	4628      	mov	r0, r5
 80075fa:	47b0      	blx	r6
 80075fc:	1c41      	adds	r1, r0, #1
 80075fe:	d1c7      	bne.n	8007590 <__sflush_r+0x34>
 8007600:	682b      	ldr	r3, [r5, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d0c4      	beq.n	8007590 <__sflush_r+0x34>
 8007606:	2b1d      	cmp	r3, #29
 8007608:	d001      	beq.n	800760e <__sflush_r+0xb2>
 800760a:	2b16      	cmp	r3, #22
 800760c:	d101      	bne.n	8007612 <__sflush_r+0xb6>
 800760e:	602f      	str	r7, [r5, #0]
 8007610:	e7b1      	b.n	8007576 <__sflush_r+0x1a>
 8007612:	89a3      	ldrh	r3, [r4, #12]
 8007614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007618:	81a3      	strh	r3, [r4, #12]
 800761a:	e7ad      	b.n	8007578 <__sflush_r+0x1c>
 800761c:	690f      	ldr	r7, [r1, #16]
 800761e:	2f00      	cmp	r7, #0
 8007620:	d0a9      	beq.n	8007576 <__sflush_r+0x1a>
 8007622:	0793      	lsls	r3, r2, #30
 8007624:	680e      	ldr	r6, [r1, #0]
 8007626:	bf08      	it	eq
 8007628:	694b      	ldreq	r3, [r1, #20]
 800762a:	600f      	str	r7, [r1, #0]
 800762c:	bf18      	it	ne
 800762e:	2300      	movne	r3, #0
 8007630:	eba6 0807 	sub.w	r8, r6, r7
 8007634:	608b      	str	r3, [r1, #8]
 8007636:	f1b8 0f00 	cmp.w	r8, #0
 800763a:	dd9c      	ble.n	8007576 <__sflush_r+0x1a>
 800763c:	6a21      	ldr	r1, [r4, #32]
 800763e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007640:	4643      	mov	r3, r8
 8007642:	463a      	mov	r2, r7
 8007644:	4628      	mov	r0, r5
 8007646:	47b0      	blx	r6
 8007648:	2800      	cmp	r0, #0
 800764a:	dc06      	bgt.n	800765a <__sflush_r+0xfe>
 800764c:	89a3      	ldrh	r3, [r4, #12]
 800764e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007652:	81a3      	strh	r3, [r4, #12]
 8007654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007658:	e78e      	b.n	8007578 <__sflush_r+0x1c>
 800765a:	4407      	add	r7, r0
 800765c:	eba8 0800 	sub.w	r8, r8, r0
 8007660:	e7e9      	b.n	8007636 <__sflush_r+0xda>
 8007662:	bf00      	nop
 8007664:	20400001 	.word	0x20400001

08007668 <_fflush_r>:
 8007668:	b538      	push	{r3, r4, r5, lr}
 800766a:	690b      	ldr	r3, [r1, #16]
 800766c:	4605      	mov	r5, r0
 800766e:	460c      	mov	r4, r1
 8007670:	b913      	cbnz	r3, 8007678 <_fflush_r+0x10>
 8007672:	2500      	movs	r5, #0
 8007674:	4628      	mov	r0, r5
 8007676:	bd38      	pop	{r3, r4, r5, pc}
 8007678:	b118      	cbz	r0, 8007682 <_fflush_r+0x1a>
 800767a:	6983      	ldr	r3, [r0, #24]
 800767c:	b90b      	cbnz	r3, 8007682 <_fflush_r+0x1a>
 800767e:	f000 f887 	bl	8007790 <__sinit>
 8007682:	4b14      	ldr	r3, [pc, #80]	; (80076d4 <_fflush_r+0x6c>)
 8007684:	429c      	cmp	r4, r3
 8007686:	d11b      	bne.n	80076c0 <_fflush_r+0x58>
 8007688:	686c      	ldr	r4, [r5, #4]
 800768a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d0ef      	beq.n	8007672 <_fflush_r+0xa>
 8007692:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007694:	07d0      	lsls	r0, r2, #31
 8007696:	d404      	bmi.n	80076a2 <_fflush_r+0x3a>
 8007698:	0599      	lsls	r1, r3, #22
 800769a:	d402      	bmi.n	80076a2 <_fflush_r+0x3a>
 800769c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800769e:	f000 f91a 	bl	80078d6 <__retarget_lock_acquire_recursive>
 80076a2:	4628      	mov	r0, r5
 80076a4:	4621      	mov	r1, r4
 80076a6:	f7ff ff59 	bl	800755c <__sflush_r>
 80076aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076ac:	07da      	lsls	r2, r3, #31
 80076ae:	4605      	mov	r5, r0
 80076b0:	d4e0      	bmi.n	8007674 <_fflush_r+0xc>
 80076b2:	89a3      	ldrh	r3, [r4, #12]
 80076b4:	059b      	lsls	r3, r3, #22
 80076b6:	d4dd      	bmi.n	8007674 <_fflush_r+0xc>
 80076b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076ba:	f000 f90d 	bl	80078d8 <__retarget_lock_release_recursive>
 80076be:	e7d9      	b.n	8007674 <_fflush_r+0xc>
 80076c0:	4b05      	ldr	r3, [pc, #20]	; (80076d8 <_fflush_r+0x70>)
 80076c2:	429c      	cmp	r4, r3
 80076c4:	d101      	bne.n	80076ca <_fflush_r+0x62>
 80076c6:	68ac      	ldr	r4, [r5, #8]
 80076c8:	e7df      	b.n	800768a <_fflush_r+0x22>
 80076ca:	4b04      	ldr	r3, [pc, #16]	; (80076dc <_fflush_r+0x74>)
 80076cc:	429c      	cmp	r4, r3
 80076ce:	bf08      	it	eq
 80076d0:	68ec      	ldreq	r4, [r5, #12]
 80076d2:	e7da      	b.n	800768a <_fflush_r+0x22>
 80076d4:	08008a7c 	.word	0x08008a7c
 80076d8:	08008a9c 	.word	0x08008a9c
 80076dc:	08008a5c 	.word	0x08008a5c

080076e0 <std>:
 80076e0:	2300      	movs	r3, #0
 80076e2:	b510      	push	{r4, lr}
 80076e4:	4604      	mov	r4, r0
 80076e6:	e9c0 3300 	strd	r3, r3, [r0]
 80076ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076ee:	6083      	str	r3, [r0, #8]
 80076f0:	8181      	strh	r1, [r0, #12]
 80076f2:	6643      	str	r3, [r0, #100]	; 0x64
 80076f4:	81c2      	strh	r2, [r0, #14]
 80076f6:	6183      	str	r3, [r0, #24]
 80076f8:	4619      	mov	r1, r3
 80076fa:	2208      	movs	r2, #8
 80076fc:	305c      	adds	r0, #92	; 0x5c
 80076fe:	f7fe faf1 	bl	8005ce4 <memset>
 8007702:	4b05      	ldr	r3, [pc, #20]	; (8007718 <std+0x38>)
 8007704:	6263      	str	r3, [r4, #36]	; 0x24
 8007706:	4b05      	ldr	r3, [pc, #20]	; (800771c <std+0x3c>)
 8007708:	62a3      	str	r3, [r4, #40]	; 0x28
 800770a:	4b05      	ldr	r3, [pc, #20]	; (8007720 <std+0x40>)
 800770c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800770e:	4b05      	ldr	r3, [pc, #20]	; (8007724 <std+0x44>)
 8007710:	6224      	str	r4, [r4, #32]
 8007712:	6323      	str	r3, [r4, #48]	; 0x30
 8007714:	bd10      	pop	{r4, pc}
 8007716:	bf00      	nop
 8007718:	08008599 	.word	0x08008599
 800771c:	080085bb 	.word	0x080085bb
 8007720:	080085f3 	.word	0x080085f3
 8007724:	08008617 	.word	0x08008617

08007728 <_cleanup_r>:
 8007728:	4901      	ldr	r1, [pc, #4]	; (8007730 <_cleanup_r+0x8>)
 800772a:	f000 b8af 	b.w	800788c <_fwalk_reent>
 800772e:	bf00      	nop
 8007730:	08007669 	.word	0x08007669

08007734 <__sfmoreglue>:
 8007734:	b570      	push	{r4, r5, r6, lr}
 8007736:	2268      	movs	r2, #104	; 0x68
 8007738:	1e4d      	subs	r5, r1, #1
 800773a:	4355      	muls	r5, r2
 800773c:	460e      	mov	r6, r1
 800773e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007742:	f000 fd4b 	bl	80081dc <_malloc_r>
 8007746:	4604      	mov	r4, r0
 8007748:	b140      	cbz	r0, 800775c <__sfmoreglue+0x28>
 800774a:	2100      	movs	r1, #0
 800774c:	e9c0 1600 	strd	r1, r6, [r0]
 8007750:	300c      	adds	r0, #12
 8007752:	60a0      	str	r0, [r4, #8]
 8007754:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007758:	f7fe fac4 	bl	8005ce4 <memset>
 800775c:	4620      	mov	r0, r4
 800775e:	bd70      	pop	{r4, r5, r6, pc}

08007760 <__sfp_lock_acquire>:
 8007760:	4801      	ldr	r0, [pc, #4]	; (8007768 <__sfp_lock_acquire+0x8>)
 8007762:	f000 b8b8 	b.w	80078d6 <__retarget_lock_acquire_recursive>
 8007766:	bf00      	nop
 8007768:	200003b1 	.word	0x200003b1

0800776c <__sfp_lock_release>:
 800776c:	4801      	ldr	r0, [pc, #4]	; (8007774 <__sfp_lock_release+0x8>)
 800776e:	f000 b8b3 	b.w	80078d8 <__retarget_lock_release_recursive>
 8007772:	bf00      	nop
 8007774:	200003b1 	.word	0x200003b1

08007778 <__sinit_lock_acquire>:
 8007778:	4801      	ldr	r0, [pc, #4]	; (8007780 <__sinit_lock_acquire+0x8>)
 800777a:	f000 b8ac 	b.w	80078d6 <__retarget_lock_acquire_recursive>
 800777e:	bf00      	nop
 8007780:	200003b2 	.word	0x200003b2

08007784 <__sinit_lock_release>:
 8007784:	4801      	ldr	r0, [pc, #4]	; (800778c <__sinit_lock_release+0x8>)
 8007786:	f000 b8a7 	b.w	80078d8 <__retarget_lock_release_recursive>
 800778a:	bf00      	nop
 800778c:	200003b2 	.word	0x200003b2

08007790 <__sinit>:
 8007790:	b510      	push	{r4, lr}
 8007792:	4604      	mov	r4, r0
 8007794:	f7ff fff0 	bl	8007778 <__sinit_lock_acquire>
 8007798:	69a3      	ldr	r3, [r4, #24]
 800779a:	b11b      	cbz	r3, 80077a4 <__sinit+0x14>
 800779c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077a0:	f7ff bff0 	b.w	8007784 <__sinit_lock_release>
 80077a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80077a8:	6523      	str	r3, [r4, #80]	; 0x50
 80077aa:	4b13      	ldr	r3, [pc, #76]	; (80077f8 <__sinit+0x68>)
 80077ac:	4a13      	ldr	r2, [pc, #76]	; (80077fc <__sinit+0x6c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80077b2:	42a3      	cmp	r3, r4
 80077b4:	bf04      	itt	eq
 80077b6:	2301      	moveq	r3, #1
 80077b8:	61a3      	streq	r3, [r4, #24]
 80077ba:	4620      	mov	r0, r4
 80077bc:	f000 f820 	bl	8007800 <__sfp>
 80077c0:	6060      	str	r0, [r4, #4]
 80077c2:	4620      	mov	r0, r4
 80077c4:	f000 f81c 	bl	8007800 <__sfp>
 80077c8:	60a0      	str	r0, [r4, #8]
 80077ca:	4620      	mov	r0, r4
 80077cc:	f000 f818 	bl	8007800 <__sfp>
 80077d0:	2200      	movs	r2, #0
 80077d2:	60e0      	str	r0, [r4, #12]
 80077d4:	2104      	movs	r1, #4
 80077d6:	6860      	ldr	r0, [r4, #4]
 80077d8:	f7ff ff82 	bl	80076e0 <std>
 80077dc:	68a0      	ldr	r0, [r4, #8]
 80077de:	2201      	movs	r2, #1
 80077e0:	2109      	movs	r1, #9
 80077e2:	f7ff ff7d 	bl	80076e0 <std>
 80077e6:	68e0      	ldr	r0, [r4, #12]
 80077e8:	2202      	movs	r2, #2
 80077ea:	2112      	movs	r1, #18
 80077ec:	f7ff ff78 	bl	80076e0 <std>
 80077f0:	2301      	movs	r3, #1
 80077f2:	61a3      	str	r3, [r4, #24]
 80077f4:	e7d2      	b.n	800779c <__sinit+0xc>
 80077f6:	bf00      	nop
 80077f8:	08008994 	.word	0x08008994
 80077fc:	08007729 	.word	0x08007729

08007800 <__sfp>:
 8007800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007802:	4607      	mov	r7, r0
 8007804:	f7ff ffac 	bl	8007760 <__sfp_lock_acquire>
 8007808:	4b1e      	ldr	r3, [pc, #120]	; (8007884 <__sfp+0x84>)
 800780a:	681e      	ldr	r6, [r3, #0]
 800780c:	69b3      	ldr	r3, [r6, #24]
 800780e:	b913      	cbnz	r3, 8007816 <__sfp+0x16>
 8007810:	4630      	mov	r0, r6
 8007812:	f7ff ffbd 	bl	8007790 <__sinit>
 8007816:	3648      	adds	r6, #72	; 0x48
 8007818:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800781c:	3b01      	subs	r3, #1
 800781e:	d503      	bpl.n	8007828 <__sfp+0x28>
 8007820:	6833      	ldr	r3, [r6, #0]
 8007822:	b30b      	cbz	r3, 8007868 <__sfp+0x68>
 8007824:	6836      	ldr	r6, [r6, #0]
 8007826:	e7f7      	b.n	8007818 <__sfp+0x18>
 8007828:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800782c:	b9d5      	cbnz	r5, 8007864 <__sfp+0x64>
 800782e:	4b16      	ldr	r3, [pc, #88]	; (8007888 <__sfp+0x88>)
 8007830:	60e3      	str	r3, [r4, #12]
 8007832:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007836:	6665      	str	r5, [r4, #100]	; 0x64
 8007838:	f000 f84c 	bl	80078d4 <__retarget_lock_init_recursive>
 800783c:	f7ff ff96 	bl	800776c <__sfp_lock_release>
 8007840:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007844:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007848:	6025      	str	r5, [r4, #0]
 800784a:	61a5      	str	r5, [r4, #24]
 800784c:	2208      	movs	r2, #8
 800784e:	4629      	mov	r1, r5
 8007850:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007854:	f7fe fa46 	bl	8005ce4 <memset>
 8007858:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800785c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007860:	4620      	mov	r0, r4
 8007862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007864:	3468      	adds	r4, #104	; 0x68
 8007866:	e7d9      	b.n	800781c <__sfp+0x1c>
 8007868:	2104      	movs	r1, #4
 800786a:	4638      	mov	r0, r7
 800786c:	f7ff ff62 	bl	8007734 <__sfmoreglue>
 8007870:	4604      	mov	r4, r0
 8007872:	6030      	str	r0, [r6, #0]
 8007874:	2800      	cmp	r0, #0
 8007876:	d1d5      	bne.n	8007824 <__sfp+0x24>
 8007878:	f7ff ff78 	bl	800776c <__sfp_lock_release>
 800787c:	230c      	movs	r3, #12
 800787e:	603b      	str	r3, [r7, #0]
 8007880:	e7ee      	b.n	8007860 <__sfp+0x60>
 8007882:	bf00      	nop
 8007884:	08008994 	.word	0x08008994
 8007888:	ffff0001 	.word	0xffff0001

0800788c <_fwalk_reent>:
 800788c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007890:	4606      	mov	r6, r0
 8007892:	4688      	mov	r8, r1
 8007894:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007898:	2700      	movs	r7, #0
 800789a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800789e:	f1b9 0901 	subs.w	r9, r9, #1
 80078a2:	d505      	bpl.n	80078b0 <_fwalk_reent+0x24>
 80078a4:	6824      	ldr	r4, [r4, #0]
 80078a6:	2c00      	cmp	r4, #0
 80078a8:	d1f7      	bne.n	800789a <_fwalk_reent+0xe>
 80078aa:	4638      	mov	r0, r7
 80078ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078b0:	89ab      	ldrh	r3, [r5, #12]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d907      	bls.n	80078c6 <_fwalk_reent+0x3a>
 80078b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078ba:	3301      	adds	r3, #1
 80078bc:	d003      	beq.n	80078c6 <_fwalk_reent+0x3a>
 80078be:	4629      	mov	r1, r5
 80078c0:	4630      	mov	r0, r6
 80078c2:	47c0      	blx	r8
 80078c4:	4307      	orrs	r7, r0
 80078c6:	3568      	adds	r5, #104	; 0x68
 80078c8:	e7e9      	b.n	800789e <_fwalk_reent+0x12>
	...

080078cc <_localeconv_r>:
 80078cc:	4800      	ldr	r0, [pc, #0]	; (80078d0 <_localeconv_r+0x4>)
 80078ce:	4770      	bx	lr
 80078d0:	20000160 	.word	0x20000160

080078d4 <__retarget_lock_init_recursive>:
 80078d4:	4770      	bx	lr

080078d6 <__retarget_lock_acquire_recursive>:
 80078d6:	4770      	bx	lr

080078d8 <__retarget_lock_release_recursive>:
 80078d8:	4770      	bx	lr

080078da <__swhatbuf_r>:
 80078da:	b570      	push	{r4, r5, r6, lr}
 80078dc:	460e      	mov	r6, r1
 80078de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078e2:	2900      	cmp	r1, #0
 80078e4:	b096      	sub	sp, #88	; 0x58
 80078e6:	4614      	mov	r4, r2
 80078e8:	461d      	mov	r5, r3
 80078ea:	da08      	bge.n	80078fe <__swhatbuf_r+0x24>
 80078ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	602a      	str	r2, [r5, #0]
 80078f4:	061a      	lsls	r2, r3, #24
 80078f6:	d410      	bmi.n	800791a <__swhatbuf_r+0x40>
 80078f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078fc:	e00e      	b.n	800791c <__swhatbuf_r+0x42>
 80078fe:	466a      	mov	r2, sp
 8007900:	f000 fee0 	bl	80086c4 <_fstat_r>
 8007904:	2800      	cmp	r0, #0
 8007906:	dbf1      	blt.n	80078ec <__swhatbuf_r+0x12>
 8007908:	9a01      	ldr	r2, [sp, #4]
 800790a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800790e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007912:	425a      	negs	r2, r3
 8007914:	415a      	adcs	r2, r3
 8007916:	602a      	str	r2, [r5, #0]
 8007918:	e7ee      	b.n	80078f8 <__swhatbuf_r+0x1e>
 800791a:	2340      	movs	r3, #64	; 0x40
 800791c:	2000      	movs	r0, #0
 800791e:	6023      	str	r3, [r4, #0]
 8007920:	b016      	add	sp, #88	; 0x58
 8007922:	bd70      	pop	{r4, r5, r6, pc}

08007924 <__smakebuf_r>:
 8007924:	898b      	ldrh	r3, [r1, #12]
 8007926:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007928:	079d      	lsls	r5, r3, #30
 800792a:	4606      	mov	r6, r0
 800792c:	460c      	mov	r4, r1
 800792e:	d507      	bpl.n	8007940 <__smakebuf_r+0x1c>
 8007930:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	6123      	str	r3, [r4, #16]
 8007938:	2301      	movs	r3, #1
 800793a:	6163      	str	r3, [r4, #20]
 800793c:	b002      	add	sp, #8
 800793e:	bd70      	pop	{r4, r5, r6, pc}
 8007940:	ab01      	add	r3, sp, #4
 8007942:	466a      	mov	r2, sp
 8007944:	f7ff ffc9 	bl	80078da <__swhatbuf_r>
 8007948:	9900      	ldr	r1, [sp, #0]
 800794a:	4605      	mov	r5, r0
 800794c:	4630      	mov	r0, r6
 800794e:	f000 fc45 	bl	80081dc <_malloc_r>
 8007952:	b948      	cbnz	r0, 8007968 <__smakebuf_r+0x44>
 8007954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007958:	059a      	lsls	r2, r3, #22
 800795a:	d4ef      	bmi.n	800793c <__smakebuf_r+0x18>
 800795c:	f023 0303 	bic.w	r3, r3, #3
 8007960:	f043 0302 	orr.w	r3, r3, #2
 8007964:	81a3      	strh	r3, [r4, #12]
 8007966:	e7e3      	b.n	8007930 <__smakebuf_r+0xc>
 8007968:	4b0d      	ldr	r3, [pc, #52]	; (80079a0 <__smakebuf_r+0x7c>)
 800796a:	62b3      	str	r3, [r6, #40]	; 0x28
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	6020      	str	r0, [r4, #0]
 8007970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007974:	81a3      	strh	r3, [r4, #12]
 8007976:	9b00      	ldr	r3, [sp, #0]
 8007978:	6163      	str	r3, [r4, #20]
 800797a:	9b01      	ldr	r3, [sp, #4]
 800797c:	6120      	str	r0, [r4, #16]
 800797e:	b15b      	cbz	r3, 8007998 <__smakebuf_r+0x74>
 8007980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007984:	4630      	mov	r0, r6
 8007986:	f000 feaf 	bl	80086e8 <_isatty_r>
 800798a:	b128      	cbz	r0, 8007998 <__smakebuf_r+0x74>
 800798c:	89a3      	ldrh	r3, [r4, #12]
 800798e:	f023 0303 	bic.w	r3, r3, #3
 8007992:	f043 0301 	orr.w	r3, r3, #1
 8007996:	81a3      	strh	r3, [r4, #12]
 8007998:	89a0      	ldrh	r0, [r4, #12]
 800799a:	4305      	orrs	r5, r0
 800799c:	81a5      	strh	r5, [r4, #12]
 800799e:	e7cd      	b.n	800793c <__smakebuf_r+0x18>
 80079a0:	08007729 	.word	0x08007729

080079a4 <malloc>:
 80079a4:	4b02      	ldr	r3, [pc, #8]	; (80079b0 <malloc+0xc>)
 80079a6:	4601      	mov	r1, r0
 80079a8:	6818      	ldr	r0, [r3, #0]
 80079aa:	f000 bc17 	b.w	80081dc <_malloc_r>
 80079ae:	bf00      	nop
 80079b0:	2000000c 	.word	0x2000000c

080079b4 <memcpy>:
 80079b4:	440a      	add	r2, r1
 80079b6:	4291      	cmp	r1, r2
 80079b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80079bc:	d100      	bne.n	80079c0 <memcpy+0xc>
 80079be:	4770      	bx	lr
 80079c0:	b510      	push	{r4, lr}
 80079c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079ca:	4291      	cmp	r1, r2
 80079cc:	d1f9      	bne.n	80079c2 <memcpy+0xe>
 80079ce:	bd10      	pop	{r4, pc}

080079d0 <_Balloc>:
 80079d0:	b570      	push	{r4, r5, r6, lr}
 80079d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079d4:	4604      	mov	r4, r0
 80079d6:	460d      	mov	r5, r1
 80079d8:	b976      	cbnz	r6, 80079f8 <_Balloc+0x28>
 80079da:	2010      	movs	r0, #16
 80079dc:	f7ff ffe2 	bl	80079a4 <malloc>
 80079e0:	4602      	mov	r2, r0
 80079e2:	6260      	str	r0, [r4, #36]	; 0x24
 80079e4:	b920      	cbnz	r0, 80079f0 <_Balloc+0x20>
 80079e6:	4b18      	ldr	r3, [pc, #96]	; (8007a48 <_Balloc+0x78>)
 80079e8:	4818      	ldr	r0, [pc, #96]	; (8007a4c <_Balloc+0x7c>)
 80079ea:	2166      	movs	r1, #102	; 0x66
 80079ec:	f000 fe2a 	bl	8008644 <__assert_func>
 80079f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079f4:	6006      	str	r6, [r0, #0]
 80079f6:	60c6      	str	r6, [r0, #12]
 80079f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80079fa:	68f3      	ldr	r3, [r6, #12]
 80079fc:	b183      	cbz	r3, 8007a20 <_Balloc+0x50>
 80079fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a06:	b9b8      	cbnz	r0, 8007a38 <_Balloc+0x68>
 8007a08:	2101      	movs	r1, #1
 8007a0a:	fa01 f605 	lsl.w	r6, r1, r5
 8007a0e:	1d72      	adds	r2, r6, #5
 8007a10:	0092      	lsls	r2, r2, #2
 8007a12:	4620      	mov	r0, r4
 8007a14:	f000 fb60 	bl	80080d8 <_calloc_r>
 8007a18:	b160      	cbz	r0, 8007a34 <_Balloc+0x64>
 8007a1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a1e:	e00e      	b.n	8007a3e <_Balloc+0x6e>
 8007a20:	2221      	movs	r2, #33	; 0x21
 8007a22:	2104      	movs	r1, #4
 8007a24:	4620      	mov	r0, r4
 8007a26:	f000 fb57 	bl	80080d8 <_calloc_r>
 8007a2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a2c:	60f0      	str	r0, [r6, #12]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1e4      	bne.n	80079fe <_Balloc+0x2e>
 8007a34:	2000      	movs	r0, #0
 8007a36:	bd70      	pop	{r4, r5, r6, pc}
 8007a38:	6802      	ldr	r2, [r0, #0]
 8007a3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a44:	e7f7      	b.n	8007a36 <_Balloc+0x66>
 8007a46:	bf00      	nop
 8007a48:	080089d9 	.word	0x080089d9
 8007a4c:	08008abc 	.word	0x08008abc

08007a50 <_Bfree>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a54:	4605      	mov	r5, r0
 8007a56:	460c      	mov	r4, r1
 8007a58:	b976      	cbnz	r6, 8007a78 <_Bfree+0x28>
 8007a5a:	2010      	movs	r0, #16
 8007a5c:	f7ff ffa2 	bl	80079a4 <malloc>
 8007a60:	4602      	mov	r2, r0
 8007a62:	6268      	str	r0, [r5, #36]	; 0x24
 8007a64:	b920      	cbnz	r0, 8007a70 <_Bfree+0x20>
 8007a66:	4b09      	ldr	r3, [pc, #36]	; (8007a8c <_Bfree+0x3c>)
 8007a68:	4809      	ldr	r0, [pc, #36]	; (8007a90 <_Bfree+0x40>)
 8007a6a:	218a      	movs	r1, #138	; 0x8a
 8007a6c:	f000 fdea 	bl	8008644 <__assert_func>
 8007a70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a74:	6006      	str	r6, [r0, #0]
 8007a76:	60c6      	str	r6, [r0, #12]
 8007a78:	b13c      	cbz	r4, 8007a8a <_Bfree+0x3a>
 8007a7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a7c:	6862      	ldr	r2, [r4, #4]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a84:	6021      	str	r1, [r4, #0]
 8007a86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a8a:	bd70      	pop	{r4, r5, r6, pc}
 8007a8c:	080089d9 	.word	0x080089d9
 8007a90:	08008abc 	.word	0x08008abc

08007a94 <__multadd>:
 8007a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a98:	690d      	ldr	r5, [r1, #16]
 8007a9a:	4607      	mov	r7, r0
 8007a9c:	460c      	mov	r4, r1
 8007a9e:	461e      	mov	r6, r3
 8007aa0:	f101 0c14 	add.w	ip, r1, #20
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	f8dc 3000 	ldr.w	r3, [ip]
 8007aaa:	b299      	uxth	r1, r3
 8007aac:	fb02 6101 	mla	r1, r2, r1, r6
 8007ab0:	0c1e      	lsrs	r6, r3, #16
 8007ab2:	0c0b      	lsrs	r3, r1, #16
 8007ab4:	fb02 3306 	mla	r3, r2, r6, r3
 8007ab8:	b289      	uxth	r1, r1
 8007aba:	3001      	adds	r0, #1
 8007abc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ac0:	4285      	cmp	r5, r0
 8007ac2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ac6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007aca:	dcec      	bgt.n	8007aa6 <__multadd+0x12>
 8007acc:	b30e      	cbz	r6, 8007b12 <__multadd+0x7e>
 8007ace:	68a3      	ldr	r3, [r4, #8]
 8007ad0:	42ab      	cmp	r3, r5
 8007ad2:	dc19      	bgt.n	8007b08 <__multadd+0x74>
 8007ad4:	6861      	ldr	r1, [r4, #4]
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	3101      	adds	r1, #1
 8007ada:	f7ff ff79 	bl	80079d0 <_Balloc>
 8007ade:	4680      	mov	r8, r0
 8007ae0:	b928      	cbnz	r0, 8007aee <__multadd+0x5a>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	4b0c      	ldr	r3, [pc, #48]	; (8007b18 <__multadd+0x84>)
 8007ae6:	480d      	ldr	r0, [pc, #52]	; (8007b1c <__multadd+0x88>)
 8007ae8:	21b5      	movs	r1, #181	; 0xb5
 8007aea:	f000 fdab 	bl	8008644 <__assert_func>
 8007aee:	6922      	ldr	r2, [r4, #16]
 8007af0:	3202      	adds	r2, #2
 8007af2:	f104 010c 	add.w	r1, r4, #12
 8007af6:	0092      	lsls	r2, r2, #2
 8007af8:	300c      	adds	r0, #12
 8007afa:	f7ff ff5b 	bl	80079b4 <memcpy>
 8007afe:	4621      	mov	r1, r4
 8007b00:	4638      	mov	r0, r7
 8007b02:	f7ff ffa5 	bl	8007a50 <_Bfree>
 8007b06:	4644      	mov	r4, r8
 8007b08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b0c:	3501      	adds	r5, #1
 8007b0e:	615e      	str	r6, [r3, #20]
 8007b10:	6125      	str	r5, [r4, #16]
 8007b12:	4620      	mov	r0, r4
 8007b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b18:	08008a4b 	.word	0x08008a4b
 8007b1c:	08008abc 	.word	0x08008abc

08007b20 <__hi0bits>:
 8007b20:	0c03      	lsrs	r3, r0, #16
 8007b22:	041b      	lsls	r3, r3, #16
 8007b24:	b9d3      	cbnz	r3, 8007b5c <__hi0bits+0x3c>
 8007b26:	0400      	lsls	r0, r0, #16
 8007b28:	2310      	movs	r3, #16
 8007b2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007b2e:	bf04      	itt	eq
 8007b30:	0200      	lsleq	r0, r0, #8
 8007b32:	3308      	addeq	r3, #8
 8007b34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007b38:	bf04      	itt	eq
 8007b3a:	0100      	lsleq	r0, r0, #4
 8007b3c:	3304      	addeq	r3, #4
 8007b3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007b42:	bf04      	itt	eq
 8007b44:	0080      	lsleq	r0, r0, #2
 8007b46:	3302      	addeq	r3, #2
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	db05      	blt.n	8007b58 <__hi0bits+0x38>
 8007b4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007b50:	f103 0301 	add.w	r3, r3, #1
 8007b54:	bf08      	it	eq
 8007b56:	2320      	moveq	r3, #32
 8007b58:	4618      	mov	r0, r3
 8007b5a:	4770      	bx	lr
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	e7e4      	b.n	8007b2a <__hi0bits+0xa>

08007b60 <__lo0bits>:
 8007b60:	6803      	ldr	r3, [r0, #0]
 8007b62:	f013 0207 	ands.w	r2, r3, #7
 8007b66:	4601      	mov	r1, r0
 8007b68:	d00b      	beq.n	8007b82 <__lo0bits+0x22>
 8007b6a:	07da      	lsls	r2, r3, #31
 8007b6c:	d423      	bmi.n	8007bb6 <__lo0bits+0x56>
 8007b6e:	0798      	lsls	r0, r3, #30
 8007b70:	bf49      	itett	mi
 8007b72:	085b      	lsrmi	r3, r3, #1
 8007b74:	089b      	lsrpl	r3, r3, #2
 8007b76:	2001      	movmi	r0, #1
 8007b78:	600b      	strmi	r3, [r1, #0]
 8007b7a:	bf5c      	itt	pl
 8007b7c:	600b      	strpl	r3, [r1, #0]
 8007b7e:	2002      	movpl	r0, #2
 8007b80:	4770      	bx	lr
 8007b82:	b298      	uxth	r0, r3
 8007b84:	b9a8      	cbnz	r0, 8007bb2 <__lo0bits+0x52>
 8007b86:	0c1b      	lsrs	r3, r3, #16
 8007b88:	2010      	movs	r0, #16
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	b90a      	cbnz	r2, 8007b92 <__lo0bits+0x32>
 8007b8e:	3008      	adds	r0, #8
 8007b90:	0a1b      	lsrs	r3, r3, #8
 8007b92:	071a      	lsls	r2, r3, #28
 8007b94:	bf04      	itt	eq
 8007b96:	091b      	lsreq	r3, r3, #4
 8007b98:	3004      	addeq	r0, #4
 8007b9a:	079a      	lsls	r2, r3, #30
 8007b9c:	bf04      	itt	eq
 8007b9e:	089b      	lsreq	r3, r3, #2
 8007ba0:	3002      	addeq	r0, #2
 8007ba2:	07da      	lsls	r2, r3, #31
 8007ba4:	d403      	bmi.n	8007bae <__lo0bits+0x4e>
 8007ba6:	085b      	lsrs	r3, r3, #1
 8007ba8:	f100 0001 	add.w	r0, r0, #1
 8007bac:	d005      	beq.n	8007bba <__lo0bits+0x5a>
 8007bae:	600b      	str	r3, [r1, #0]
 8007bb0:	4770      	bx	lr
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	e7e9      	b.n	8007b8a <__lo0bits+0x2a>
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	4770      	bx	lr
 8007bba:	2020      	movs	r0, #32
 8007bbc:	4770      	bx	lr
	...

08007bc0 <__i2b>:
 8007bc0:	b510      	push	{r4, lr}
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	f7ff ff03 	bl	80079d0 <_Balloc>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	b928      	cbnz	r0, 8007bda <__i2b+0x1a>
 8007bce:	4b05      	ldr	r3, [pc, #20]	; (8007be4 <__i2b+0x24>)
 8007bd0:	4805      	ldr	r0, [pc, #20]	; (8007be8 <__i2b+0x28>)
 8007bd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007bd6:	f000 fd35 	bl	8008644 <__assert_func>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	6144      	str	r4, [r0, #20]
 8007bde:	6103      	str	r3, [r0, #16]
 8007be0:	bd10      	pop	{r4, pc}
 8007be2:	bf00      	nop
 8007be4:	08008a4b 	.word	0x08008a4b
 8007be8:	08008abc 	.word	0x08008abc

08007bec <__multiply>:
 8007bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf0:	4691      	mov	r9, r2
 8007bf2:	690a      	ldr	r2, [r1, #16]
 8007bf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	bfb8      	it	lt
 8007bfc:	460b      	movlt	r3, r1
 8007bfe:	460c      	mov	r4, r1
 8007c00:	bfbc      	itt	lt
 8007c02:	464c      	movlt	r4, r9
 8007c04:	4699      	movlt	r9, r3
 8007c06:	6927      	ldr	r7, [r4, #16]
 8007c08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c0c:	68a3      	ldr	r3, [r4, #8]
 8007c0e:	6861      	ldr	r1, [r4, #4]
 8007c10:	eb07 060a 	add.w	r6, r7, sl
 8007c14:	42b3      	cmp	r3, r6
 8007c16:	b085      	sub	sp, #20
 8007c18:	bfb8      	it	lt
 8007c1a:	3101      	addlt	r1, #1
 8007c1c:	f7ff fed8 	bl	80079d0 <_Balloc>
 8007c20:	b930      	cbnz	r0, 8007c30 <__multiply+0x44>
 8007c22:	4602      	mov	r2, r0
 8007c24:	4b44      	ldr	r3, [pc, #272]	; (8007d38 <__multiply+0x14c>)
 8007c26:	4845      	ldr	r0, [pc, #276]	; (8007d3c <__multiply+0x150>)
 8007c28:	f240 115d 	movw	r1, #349	; 0x15d
 8007c2c:	f000 fd0a 	bl	8008644 <__assert_func>
 8007c30:	f100 0514 	add.w	r5, r0, #20
 8007c34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c38:	462b      	mov	r3, r5
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	4543      	cmp	r3, r8
 8007c3e:	d321      	bcc.n	8007c84 <__multiply+0x98>
 8007c40:	f104 0314 	add.w	r3, r4, #20
 8007c44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007c48:	f109 0314 	add.w	r3, r9, #20
 8007c4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007c50:	9202      	str	r2, [sp, #8]
 8007c52:	1b3a      	subs	r2, r7, r4
 8007c54:	3a15      	subs	r2, #21
 8007c56:	f022 0203 	bic.w	r2, r2, #3
 8007c5a:	3204      	adds	r2, #4
 8007c5c:	f104 0115 	add.w	r1, r4, #21
 8007c60:	428f      	cmp	r7, r1
 8007c62:	bf38      	it	cc
 8007c64:	2204      	movcc	r2, #4
 8007c66:	9201      	str	r2, [sp, #4]
 8007c68:	9a02      	ldr	r2, [sp, #8]
 8007c6a:	9303      	str	r3, [sp, #12]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d80c      	bhi.n	8007c8a <__multiply+0x9e>
 8007c70:	2e00      	cmp	r6, #0
 8007c72:	dd03      	ble.n	8007c7c <__multiply+0x90>
 8007c74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d05a      	beq.n	8007d32 <__multiply+0x146>
 8007c7c:	6106      	str	r6, [r0, #16]
 8007c7e:	b005      	add	sp, #20
 8007c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c84:	f843 2b04 	str.w	r2, [r3], #4
 8007c88:	e7d8      	b.n	8007c3c <__multiply+0x50>
 8007c8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c8e:	f1ba 0f00 	cmp.w	sl, #0
 8007c92:	d024      	beq.n	8007cde <__multiply+0xf2>
 8007c94:	f104 0e14 	add.w	lr, r4, #20
 8007c98:	46a9      	mov	r9, r5
 8007c9a:	f04f 0c00 	mov.w	ip, #0
 8007c9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ca2:	f8d9 1000 	ldr.w	r1, [r9]
 8007ca6:	fa1f fb82 	uxth.w	fp, r2
 8007caa:	b289      	uxth	r1, r1
 8007cac:	fb0a 110b 	mla	r1, sl, fp, r1
 8007cb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007cb4:	f8d9 2000 	ldr.w	r2, [r9]
 8007cb8:	4461      	add	r1, ip
 8007cba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007cbe:	fb0a c20b 	mla	r2, sl, fp, ip
 8007cc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007cc6:	b289      	uxth	r1, r1
 8007cc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ccc:	4577      	cmp	r7, lr
 8007cce:	f849 1b04 	str.w	r1, [r9], #4
 8007cd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007cd6:	d8e2      	bhi.n	8007c9e <__multiply+0xb2>
 8007cd8:	9a01      	ldr	r2, [sp, #4]
 8007cda:	f845 c002 	str.w	ip, [r5, r2]
 8007cde:	9a03      	ldr	r2, [sp, #12]
 8007ce0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	f1b9 0f00 	cmp.w	r9, #0
 8007cea:	d020      	beq.n	8007d2e <__multiply+0x142>
 8007cec:	6829      	ldr	r1, [r5, #0]
 8007cee:	f104 0c14 	add.w	ip, r4, #20
 8007cf2:	46ae      	mov	lr, r5
 8007cf4:	f04f 0a00 	mov.w	sl, #0
 8007cf8:	f8bc b000 	ldrh.w	fp, [ip]
 8007cfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d00:	fb09 220b 	mla	r2, r9, fp, r2
 8007d04:	4492      	add	sl, r2
 8007d06:	b289      	uxth	r1, r1
 8007d08:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007d0c:	f84e 1b04 	str.w	r1, [lr], #4
 8007d10:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007d14:	f8be 1000 	ldrh.w	r1, [lr]
 8007d18:	0c12      	lsrs	r2, r2, #16
 8007d1a:	fb09 1102 	mla	r1, r9, r2, r1
 8007d1e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007d22:	4567      	cmp	r7, ip
 8007d24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d28:	d8e6      	bhi.n	8007cf8 <__multiply+0x10c>
 8007d2a:	9a01      	ldr	r2, [sp, #4]
 8007d2c:	50a9      	str	r1, [r5, r2]
 8007d2e:	3504      	adds	r5, #4
 8007d30:	e79a      	b.n	8007c68 <__multiply+0x7c>
 8007d32:	3e01      	subs	r6, #1
 8007d34:	e79c      	b.n	8007c70 <__multiply+0x84>
 8007d36:	bf00      	nop
 8007d38:	08008a4b 	.word	0x08008a4b
 8007d3c:	08008abc 	.word	0x08008abc

08007d40 <__pow5mult>:
 8007d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d44:	4615      	mov	r5, r2
 8007d46:	f012 0203 	ands.w	r2, r2, #3
 8007d4a:	4606      	mov	r6, r0
 8007d4c:	460f      	mov	r7, r1
 8007d4e:	d007      	beq.n	8007d60 <__pow5mult+0x20>
 8007d50:	4c25      	ldr	r4, [pc, #148]	; (8007de8 <__pow5mult+0xa8>)
 8007d52:	3a01      	subs	r2, #1
 8007d54:	2300      	movs	r3, #0
 8007d56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d5a:	f7ff fe9b 	bl	8007a94 <__multadd>
 8007d5e:	4607      	mov	r7, r0
 8007d60:	10ad      	asrs	r5, r5, #2
 8007d62:	d03d      	beq.n	8007de0 <__pow5mult+0xa0>
 8007d64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007d66:	b97c      	cbnz	r4, 8007d88 <__pow5mult+0x48>
 8007d68:	2010      	movs	r0, #16
 8007d6a:	f7ff fe1b 	bl	80079a4 <malloc>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	6270      	str	r0, [r6, #36]	; 0x24
 8007d72:	b928      	cbnz	r0, 8007d80 <__pow5mult+0x40>
 8007d74:	4b1d      	ldr	r3, [pc, #116]	; (8007dec <__pow5mult+0xac>)
 8007d76:	481e      	ldr	r0, [pc, #120]	; (8007df0 <__pow5mult+0xb0>)
 8007d78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007d7c:	f000 fc62 	bl	8008644 <__assert_func>
 8007d80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d84:	6004      	str	r4, [r0, #0]
 8007d86:	60c4      	str	r4, [r0, #12]
 8007d88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007d8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d90:	b94c      	cbnz	r4, 8007da6 <__pow5mult+0x66>
 8007d92:	f240 2171 	movw	r1, #625	; 0x271
 8007d96:	4630      	mov	r0, r6
 8007d98:	f7ff ff12 	bl	8007bc0 <__i2b>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007da2:	4604      	mov	r4, r0
 8007da4:	6003      	str	r3, [r0, #0]
 8007da6:	f04f 0900 	mov.w	r9, #0
 8007daa:	07eb      	lsls	r3, r5, #31
 8007dac:	d50a      	bpl.n	8007dc4 <__pow5mult+0x84>
 8007dae:	4639      	mov	r1, r7
 8007db0:	4622      	mov	r2, r4
 8007db2:	4630      	mov	r0, r6
 8007db4:	f7ff ff1a 	bl	8007bec <__multiply>
 8007db8:	4639      	mov	r1, r7
 8007dba:	4680      	mov	r8, r0
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	f7ff fe47 	bl	8007a50 <_Bfree>
 8007dc2:	4647      	mov	r7, r8
 8007dc4:	106d      	asrs	r5, r5, #1
 8007dc6:	d00b      	beq.n	8007de0 <__pow5mult+0xa0>
 8007dc8:	6820      	ldr	r0, [r4, #0]
 8007dca:	b938      	cbnz	r0, 8007ddc <__pow5mult+0x9c>
 8007dcc:	4622      	mov	r2, r4
 8007dce:	4621      	mov	r1, r4
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f7ff ff0b 	bl	8007bec <__multiply>
 8007dd6:	6020      	str	r0, [r4, #0]
 8007dd8:	f8c0 9000 	str.w	r9, [r0]
 8007ddc:	4604      	mov	r4, r0
 8007dde:	e7e4      	b.n	8007daa <__pow5mult+0x6a>
 8007de0:	4638      	mov	r0, r7
 8007de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007de6:	bf00      	nop
 8007de8:	08008c08 	.word	0x08008c08
 8007dec:	080089d9 	.word	0x080089d9
 8007df0:	08008abc 	.word	0x08008abc

08007df4 <__lshift>:
 8007df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007df8:	460c      	mov	r4, r1
 8007dfa:	6849      	ldr	r1, [r1, #4]
 8007dfc:	6923      	ldr	r3, [r4, #16]
 8007dfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e02:	68a3      	ldr	r3, [r4, #8]
 8007e04:	4607      	mov	r7, r0
 8007e06:	4691      	mov	r9, r2
 8007e08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e0c:	f108 0601 	add.w	r6, r8, #1
 8007e10:	42b3      	cmp	r3, r6
 8007e12:	db0b      	blt.n	8007e2c <__lshift+0x38>
 8007e14:	4638      	mov	r0, r7
 8007e16:	f7ff fddb 	bl	80079d0 <_Balloc>
 8007e1a:	4605      	mov	r5, r0
 8007e1c:	b948      	cbnz	r0, 8007e32 <__lshift+0x3e>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	4b2a      	ldr	r3, [pc, #168]	; (8007ecc <__lshift+0xd8>)
 8007e22:	482b      	ldr	r0, [pc, #172]	; (8007ed0 <__lshift+0xdc>)
 8007e24:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007e28:	f000 fc0c 	bl	8008644 <__assert_func>
 8007e2c:	3101      	adds	r1, #1
 8007e2e:	005b      	lsls	r3, r3, #1
 8007e30:	e7ee      	b.n	8007e10 <__lshift+0x1c>
 8007e32:	2300      	movs	r3, #0
 8007e34:	f100 0114 	add.w	r1, r0, #20
 8007e38:	f100 0210 	add.w	r2, r0, #16
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	4553      	cmp	r3, sl
 8007e40:	db37      	blt.n	8007eb2 <__lshift+0xbe>
 8007e42:	6920      	ldr	r0, [r4, #16]
 8007e44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e48:	f104 0314 	add.w	r3, r4, #20
 8007e4c:	f019 091f 	ands.w	r9, r9, #31
 8007e50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007e58:	d02f      	beq.n	8007eba <__lshift+0xc6>
 8007e5a:	f1c9 0e20 	rsb	lr, r9, #32
 8007e5e:	468a      	mov	sl, r1
 8007e60:	f04f 0c00 	mov.w	ip, #0
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	fa02 f209 	lsl.w	r2, r2, r9
 8007e6a:	ea42 020c 	orr.w	r2, r2, ip
 8007e6e:	f84a 2b04 	str.w	r2, [sl], #4
 8007e72:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e76:	4298      	cmp	r0, r3
 8007e78:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007e7c:	d8f2      	bhi.n	8007e64 <__lshift+0x70>
 8007e7e:	1b03      	subs	r3, r0, r4
 8007e80:	3b15      	subs	r3, #21
 8007e82:	f023 0303 	bic.w	r3, r3, #3
 8007e86:	3304      	adds	r3, #4
 8007e88:	f104 0215 	add.w	r2, r4, #21
 8007e8c:	4290      	cmp	r0, r2
 8007e8e:	bf38      	it	cc
 8007e90:	2304      	movcc	r3, #4
 8007e92:	f841 c003 	str.w	ip, [r1, r3]
 8007e96:	f1bc 0f00 	cmp.w	ip, #0
 8007e9a:	d001      	beq.n	8007ea0 <__lshift+0xac>
 8007e9c:	f108 0602 	add.w	r6, r8, #2
 8007ea0:	3e01      	subs	r6, #1
 8007ea2:	4638      	mov	r0, r7
 8007ea4:	612e      	str	r6, [r5, #16]
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	f7ff fdd2 	bl	8007a50 <_Bfree>
 8007eac:	4628      	mov	r0, r5
 8007eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	e7c1      	b.n	8007e3e <__lshift+0x4a>
 8007eba:	3904      	subs	r1, #4
 8007ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ec0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ec4:	4298      	cmp	r0, r3
 8007ec6:	d8f9      	bhi.n	8007ebc <__lshift+0xc8>
 8007ec8:	e7ea      	b.n	8007ea0 <__lshift+0xac>
 8007eca:	bf00      	nop
 8007ecc:	08008a4b 	.word	0x08008a4b
 8007ed0:	08008abc 	.word	0x08008abc

08007ed4 <__mcmp>:
 8007ed4:	b530      	push	{r4, r5, lr}
 8007ed6:	6902      	ldr	r2, [r0, #16]
 8007ed8:	690c      	ldr	r4, [r1, #16]
 8007eda:	1b12      	subs	r2, r2, r4
 8007edc:	d10e      	bne.n	8007efc <__mcmp+0x28>
 8007ede:	f100 0314 	add.w	r3, r0, #20
 8007ee2:	3114      	adds	r1, #20
 8007ee4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007ee8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007eec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007ef0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007ef4:	42a5      	cmp	r5, r4
 8007ef6:	d003      	beq.n	8007f00 <__mcmp+0x2c>
 8007ef8:	d305      	bcc.n	8007f06 <__mcmp+0x32>
 8007efa:	2201      	movs	r2, #1
 8007efc:	4610      	mov	r0, r2
 8007efe:	bd30      	pop	{r4, r5, pc}
 8007f00:	4283      	cmp	r3, r0
 8007f02:	d3f3      	bcc.n	8007eec <__mcmp+0x18>
 8007f04:	e7fa      	b.n	8007efc <__mcmp+0x28>
 8007f06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f0a:	e7f7      	b.n	8007efc <__mcmp+0x28>

08007f0c <__mdiff>:
 8007f0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f10:	460c      	mov	r4, r1
 8007f12:	4606      	mov	r6, r0
 8007f14:	4611      	mov	r1, r2
 8007f16:	4620      	mov	r0, r4
 8007f18:	4690      	mov	r8, r2
 8007f1a:	f7ff ffdb 	bl	8007ed4 <__mcmp>
 8007f1e:	1e05      	subs	r5, r0, #0
 8007f20:	d110      	bne.n	8007f44 <__mdiff+0x38>
 8007f22:	4629      	mov	r1, r5
 8007f24:	4630      	mov	r0, r6
 8007f26:	f7ff fd53 	bl	80079d0 <_Balloc>
 8007f2a:	b930      	cbnz	r0, 8007f3a <__mdiff+0x2e>
 8007f2c:	4b3a      	ldr	r3, [pc, #232]	; (8008018 <__mdiff+0x10c>)
 8007f2e:	4602      	mov	r2, r0
 8007f30:	f240 2132 	movw	r1, #562	; 0x232
 8007f34:	4839      	ldr	r0, [pc, #228]	; (800801c <__mdiff+0x110>)
 8007f36:	f000 fb85 	bl	8008644 <__assert_func>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f44:	bfa4      	itt	ge
 8007f46:	4643      	movge	r3, r8
 8007f48:	46a0      	movge	r8, r4
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007f50:	bfa6      	itte	ge
 8007f52:	461c      	movge	r4, r3
 8007f54:	2500      	movge	r5, #0
 8007f56:	2501      	movlt	r5, #1
 8007f58:	f7ff fd3a 	bl	80079d0 <_Balloc>
 8007f5c:	b920      	cbnz	r0, 8007f68 <__mdiff+0x5c>
 8007f5e:	4b2e      	ldr	r3, [pc, #184]	; (8008018 <__mdiff+0x10c>)
 8007f60:	4602      	mov	r2, r0
 8007f62:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007f66:	e7e5      	b.n	8007f34 <__mdiff+0x28>
 8007f68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007f6c:	6926      	ldr	r6, [r4, #16]
 8007f6e:	60c5      	str	r5, [r0, #12]
 8007f70:	f104 0914 	add.w	r9, r4, #20
 8007f74:	f108 0514 	add.w	r5, r8, #20
 8007f78:	f100 0e14 	add.w	lr, r0, #20
 8007f7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007f80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007f84:	f108 0210 	add.w	r2, r8, #16
 8007f88:	46f2      	mov	sl, lr
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f94:	fa1f f883 	uxth.w	r8, r3
 8007f98:	fa11 f18b 	uxtah	r1, r1, fp
 8007f9c:	0c1b      	lsrs	r3, r3, #16
 8007f9e:	eba1 0808 	sub.w	r8, r1, r8
 8007fa2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007fa6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007faa:	fa1f f888 	uxth.w	r8, r8
 8007fae:	1419      	asrs	r1, r3, #16
 8007fb0:	454e      	cmp	r6, r9
 8007fb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007fb6:	f84a 3b04 	str.w	r3, [sl], #4
 8007fba:	d8e7      	bhi.n	8007f8c <__mdiff+0x80>
 8007fbc:	1b33      	subs	r3, r6, r4
 8007fbe:	3b15      	subs	r3, #21
 8007fc0:	f023 0303 	bic.w	r3, r3, #3
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	3415      	adds	r4, #21
 8007fc8:	42a6      	cmp	r6, r4
 8007fca:	bf38      	it	cc
 8007fcc:	2304      	movcc	r3, #4
 8007fce:	441d      	add	r5, r3
 8007fd0:	4473      	add	r3, lr
 8007fd2:	469e      	mov	lr, r3
 8007fd4:	462e      	mov	r6, r5
 8007fd6:	4566      	cmp	r6, ip
 8007fd8:	d30e      	bcc.n	8007ff8 <__mdiff+0xec>
 8007fda:	f10c 0203 	add.w	r2, ip, #3
 8007fde:	1b52      	subs	r2, r2, r5
 8007fe0:	f022 0203 	bic.w	r2, r2, #3
 8007fe4:	3d03      	subs	r5, #3
 8007fe6:	45ac      	cmp	ip, r5
 8007fe8:	bf38      	it	cc
 8007fea:	2200      	movcc	r2, #0
 8007fec:	441a      	add	r2, r3
 8007fee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007ff2:	b17b      	cbz	r3, 8008014 <__mdiff+0x108>
 8007ff4:	6107      	str	r7, [r0, #16]
 8007ff6:	e7a3      	b.n	8007f40 <__mdiff+0x34>
 8007ff8:	f856 8b04 	ldr.w	r8, [r6], #4
 8007ffc:	fa11 f288 	uxtah	r2, r1, r8
 8008000:	1414      	asrs	r4, r2, #16
 8008002:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008006:	b292      	uxth	r2, r2
 8008008:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800800c:	f84e 2b04 	str.w	r2, [lr], #4
 8008010:	1421      	asrs	r1, r4, #16
 8008012:	e7e0      	b.n	8007fd6 <__mdiff+0xca>
 8008014:	3f01      	subs	r7, #1
 8008016:	e7ea      	b.n	8007fee <__mdiff+0xe2>
 8008018:	08008a4b 	.word	0x08008a4b
 800801c:	08008abc 	.word	0x08008abc

08008020 <__d2b>:
 8008020:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008024:	4689      	mov	r9, r1
 8008026:	2101      	movs	r1, #1
 8008028:	ec57 6b10 	vmov	r6, r7, d0
 800802c:	4690      	mov	r8, r2
 800802e:	f7ff fccf 	bl	80079d0 <_Balloc>
 8008032:	4604      	mov	r4, r0
 8008034:	b930      	cbnz	r0, 8008044 <__d2b+0x24>
 8008036:	4602      	mov	r2, r0
 8008038:	4b25      	ldr	r3, [pc, #148]	; (80080d0 <__d2b+0xb0>)
 800803a:	4826      	ldr	r0, [pc, #152]	; (80080d4 <__d2b+0xb4>)
 800803c:	f240 310a 	movw	r1, #778	; 0x30a
 8008040:	f000 fb00 	bl	8008644 <__assert_func>
 8008044:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008048:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800804c:	bb35      	cbnz	r5, 800809c <__d2b+0x7c>
 800804e:	2e00      	cmp	r6, #0
 8008050:	9301      	str	r3, [sp, #4]
 8008052:	d028      	beq.n	80080a6 <__d2b+0x86>
 8008054:	4668      	mov	r0, sp
 8008056:	9600      	str	r6, [sp, #0]
 8008058:	f7ff fd82 	bl	8007b60 <__lo0bits>
 800805c:	9900      	ldr	r1, [sp, #0]
 800805e:	b300      	cbz	r0, 80080a2 <__d2b+0x82>
 8008060:	9a01      	ldr	r2, [sp, #4]
 8008062:	f1c0 0320 	rsb	r3, r0, #32
 8008066:	fa02 f303 	lsl.w	r3, r2, r3
 800806a:	430b      	orrs	r3, r1
 800806c:	40c2      	lsrs	r2, r0
 800806e:	6163      	str	r3, [r4, #20]
 8008070:	9201      	str	r2, [sp, #4]
 8008072:	9b01      	ldr	r3, [sp, #4]
 8008074:	61a3      	str	r3, [r4, #24]
 8008076:	2b00      	cmp	r3, #0
 8008078:	bf14      	ite	ne
 800807a:	2202      	movne	r2, #2
 800807c:	2201      	moveq	r2, #1
 800807e:	6122      	str	r2, [r4, #16]
 8008080:	b1d5      	cbz	r5, 80080b8 <__d2b+0x98>
 8008082:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008086:	4405      	add	r5, r0
 8008088:	f8c9 5000 	str.w	r5, [r9]
 800808c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008090:	f8c8 0000 	str.w	r0, [r8]
 8008094:	4620      	mov	r0, r4
 8008096:	b003      	add	sp, #12
 8008098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800809c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080a0:	e7d5      	b.n	800804e <__d2b+0x2e>
 80080a2:	6161      	str	r1, [r4, #20]
 80080a4:	e7e5      	b.n	8008072 <__d2b+0x52>
 80080a6:	a801      	add	r0, sp, #4
 80080a8:	f7ff fd5a 	bl	8007b60 <__lo0bits>
 80080ac:	9b01      	ldr	r3, [sp, #4]
 80080ae:	6163      	str	r3, [r4, #20]
 80080b0:	2201      	movs	r2, #1
 80080b2:	6122      	str	r2, [r4, #16]
 80080b4:	3020      	adds	r0, #32
 80080b6:	e7e3      	b.n	8008080 <__d2b+0x60>
 80080b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80080bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80080c0:	f8c9 0000 	str.w	r0, [r9]
 80080c4:	6918      	ldr	r0, [r3, #16]
 80080c6:	f7ff fd2b 	bl	8007b20 <__hi0bits>
 80080ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80080ce:	e7df      	b.n	8008090 <__d2b+0x70>
 80080d0:	08008a4b 	.word	0x08008a4b
 80080d4:	08008abc 	.word	0x08008abc

080080d8 <_calloc_r>:
 80080d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080da:	fba1 2402 	umull	r2, r4, r1, r2
 80080de:	b94c      	cbnz	r4, 80080f4 <_calloc_r+0x1c>
 80080e0:	4611      	mov	r1, r2
 80080e2:	9201      	str	r2, [sp, #4]
 80080e4:	f000 f87a 	bl	80081dc <_malloc_r>
 80080e8:	9a01      	ldr	r2, [sp, #4]
 80080ea:	4605      	mov	r5, r0
 80080ec:	b930      	cbnz	r0, 80080fc <_calloc_r+0x24>
 80080ee:	4628      	mov	r0, r5
 80080f0:	b003      	add	sp, #12
 80080f2:	bd30      	pop	{r4, r5, pc}
 80080f4:	220c      	movs	r2, #12
 80080f6:	6002      	str	r2, [r0, #0]
 80080f8:	2500      	movs	r5, #0
 80080fa:	e7f8      	b.n	80080ee <_calloc_r+0x16>
 80080fc:	4621      	mov	r1, r4
 80080fe:	f7fd fdf1 	bl	8005ce4 <memset>
 8008102:	e7f4      	b.n	80080ee <_calloc_r+0x16>

08008104 <_free_r>:
 8008104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008106:	2900      	cmp	r1, #0
 8008108:	d044      	beq.n	8008194 <_free_r+0x90>
 800810a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800810e:	9001      	str	r0, [sp, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	f1a1 0404 	sub.w	r4, r1, #4
 8008116:	bfb8      	it	lt
 8008118:	18e4      	addlt	r4, r4, r3
 800811a:	f000 fb19 	bl	8008750 <__malloc_lock>
 800811e:	4a1e      	ldr	r2, [pc, #120]	; (8008198 <_free_r+0x94>)
 8008120:	9801      	ldr	r0, [sp, #4]
 8008122:	6813      	ldr	r3, [r2, #0]
 8008124:	b933      	cbnz	r3, 8008134 <_free_r+0x30>
 8008126:	6063      	str	r3, [r4, #4]
 8008128:	6014      	str	r4, [r2, #0]
 800812a:	b003      	add	sp, #12
 800812c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008130:	f000 bb14 	b.w	800875c <__malloc_unlock>
 8008134:	42a3      	cmp	r3, r4
 8008136:	d908      	bls.n	800814a <_free_r+0x46>
 8008138:	6825      	ldr	r5, [r4, #0]
 800813a:	1961      	adds	r1, r4, r5
 800813c:	428b      	cmp	r3, r1
 800813e:	bf01      	itttt	eq
 8008140:	6819      	ldreq	r1, [r3, #0]
 8008142:	685b      	ldreq	r3, [r3, #4]
 8008144:	1949      	addeq	r1, r1, r5
 8008146:	6021      	streq	r1, [r4, #0]
 8008148:	e7ed      	b.n	8008126 <_free_r+0x22>
 800814a:	461a      	mov	r2, r3
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	b10b      	cbz	r3, 8008154 <_free_r+0x50>
 8008150:	42a3      	cmp	r3, r4
 8008152:	d9fa      	bls.n	800814a <_free_r+0x46>
 8008154:	6811      	ldr	r1, [r2, #0]
 8008156:	1855      	adds	r5, r2, r1
 8008158:	42a5      	cmp	r5, r4
 800815a:	d10b      	bne.n	8008174 <_free_r+0x70>
 800815c:	6824      	ldr	r4, [r4, #0]
 800815e:	4421      	add	r1, r4
 8008160:	1854      	adds	r4, r2, r1
 8008162:	42a3      	cmp	r3, r4
 8008164:	6011      	str	r1, [r2, #0]
 8008166:	d1e0      	bne.n	800812a <_free_r+0x26>
 8008168:	681c      	ldr	r4, [r3, #0]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	6053      	str	r3, [r2, #4]
 800816e:	4421      	add	r1, r4
 8008170:	6011      	str	r1, [r2, #0]
 8008172:	e7da      	b.n	800812a <_free_r+0x26>
 8008174:	d902      	bls.n	800817c <_free_r+0x78>
 8008176:	230c      	movs	r3, #12
 8008178:	6003      	str	r3, [r0, #0]
 800817a:	e7d6      	b.n	800812a <_free_r+0x26>
 800817c:	6825      	ldr	r5, [r4, #0]
 800817e:	1961      	adds	r1, r4, r5
 8008180:	428b      	cmp	r3, r1
 8008182:	bf04      	itt	eq
 8008184:	6819      	ldreq	r1, [r3, #0]
 8008186:	685b      	ldreq	r3, [r3, #4]
 8008188:	6063      	str	r3, [r4, #4]
 800818a:	bf04      	itt	eq
 800818c:	1949      	addeq	r1, r1, r5
 800818e:	6021      	streq	r1, [r4, #0]
 8008190:	6054      	str	r4, [r2, #4]
 8008192:	e7ca      	b.n	800812a <_free_r+0x26>
 8008194:	b003      	add	sp, #12
 8008196:	bd30      	pop	{r4, r5, pc}
 8008198:	200003b4 	.word	0x200003b4

0800819c <sbrk_aligned>:
 800819c:	b570      	push	{r4, r5, r6, lr}
 800819e:	4e0e      	ldr	r6, [pc, #56]	; (80081d8 <sbrk_aligned+0x3c>)
 80081a0:	460c      	mov	r4, r1
 80081a2:	6831      	ldr	r1, [r6, #0]
 80081a4:	4605      	mov	r5, r0
 80081a6:	b911      	cbnz	r1, 80081ae <sbrk_aligned+0x12>
 80081a8:	f000 f9e6 	bl	8008578 <_sbrk_r>
 80081ac:	6030      	str	r0, [r6, #0]
 80081ae:	4621      	mov	r1, r4
 80081b0:	4628      	mov	r0, r5
 80081b2:	f000 f9e1 	bl	8008578 <_sbrk_r>
 80081b6:	1c43      	adds	r3, r0, #1
 80081b8:	d00a      	beq.n	80081d0 <sbrk_aligned+0x34>
 80081ba:	1cc4      	adds	r4, r0, #3
 80081bc:	f024 0403 	bic.w	r4, r4, #3
 80081c0:	42a0      	cmp	r0, r4
 80081c2:	d007      	beq.n	80081d4 <sbrk_aligned+0x38>
 80081c4:	1a21      	subs	r1, r4, r0
 80081c6:	4628      	mov	r0, r5
 80081c8:	f000 f9d6 	bl	8008578 <_sbrk_r>
 80081cc:	3001      	adds	r0, #1
 80081ce:	d101      	bne.n	80081d4 <sbrk_aligned+0x38>
 80081d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80081d4:	4620      	mov	r0, r4
 80081d6:	bd70      	pop	{r4, r5, r6, pc}
 80081d8:	200003b8 	.word	0x200003b8

080081dc <_malloc_r>:
 80081dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e0:	1ccd      	adds	r5, r1, #3
 80081e2:	f025 0503 	bic.w	r5, r5, #3
 80081e6:	3508      	adds	r5, #8
 80081e8:	2d0c      	cmp	r5, #12
 80081ea:	bf38      	it	cc
 80081ec:	250c      	movcc	r5, #12
 80081ee:	2d00      	cmp	r5, #0
 80081f0:	4607      	mov	r7, r0
 80081f2:	db01      	blt.n	80081f8 <_malloc_r+0x1c>
 80081f4:	42a9      	cmp	r1, r5
 80081f6:	d905      	bls.n	8008204 <_malloc_r+0x28>
 80081f8:	230c      	movs	r3, #12
 80081fa:	603b      	str	r3, [r7, #0]
 80081fc:	2600      	movs	r6, #0
 80081fe:	4630      	mov	r0, r6
 8008200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008204:	4e2e      	ldr	r6, [pc, #184]	; (80082c0 <_malloc_r+0xe4>)
 8008206:	f000 faa3 	bl	8008750 <__malloc_lock>
 800820a:	6833      	ldr	r3, [r6, #0]
 800820c:	461c      	mov	r4, r3
 800820e:	bb34      	cbnz	r4, 800825e <_malloc_r+0x82>
 8008210:	4629      	mov	r1, r5
 8008212:	4638      	mov	r0, r7
 8008214:	f7ff ffc2 	bl	800819c <sbrk_aligned>
 8008218:	1c43      	adds	r3, r0, #1
 800821a:	4604      	mov	r4, r0
 800821c:	d14d      	bne.n	80082ba <_malloc_r+0xde>
 800821e:	6834      	ldr	r4, [r6, #0]
 8008220:	4626      	mov	r6, r4
 8008222:	2e00      	cmp	r6, #0
 8008224:	d140      	bne.n	80082a8 <_malloc_r+0xcc>
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	4631      	mov	r1, r6
 800822a:	4638      	mov	r0, r7
 800822c:	eb04 0803 	add.w	r8, r4, r3
 8008230:	f000 f9a2 	bl	8008578 <_sbrk_r>
 8008234:	4580      	cmp	r8, r0
 8008236:	d13a      	bne.n	80082ae <_malloc_r+0xd2>
 8008238:	6821      	ldr	r1, [r4, #0]
 800823a:	3503      	adds	r5, #3
 800823c:	1a6d      	subs	r5, r5, r1
 800823e:	f025 0503 	bic.w	r5, r5, #3
 8008242:	3508      	adds	r5, #8
 8008244:	2d0c      	cmp	r5, #12
 8008246:	bf38      	it	cc
 8008248:	250c      	movcc	r5, #12
 800824a:	4629      	mov	r1, r5
 800824c:	4638      	mov	r0, r7
 800824e:	f7ff ffa5 	bl	800819c <sbrk_aligned>
 8008252:	3001      	adds	r0, #1
 8008254:	d02b      	beq.n	80082ae <_malloc_r+0xd2>
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	442b      	add	r3, r5
 800825a:	6023      	str	r3, [r4, #0]
 800825c:	e00e      	b.n	800827c <_malloc_r+0xa0>
 800825e:	6822      	ldr	r2, [r4, #0]
 8008260:	1b52      	subs	r2, r2, r5
 8008262:	d41e      	bmi.n	80082a2 <_malloc_r+0xc6>
 8008264:	2a0b      	cmp	r2, #11
 8008266:	d916      	bls.n	8008296 <_malloc_r+0xba>
 8008268:	1961      	adds	r1, r4, r5
 800826a:	42a3      	cmp	r3, r4
 800826c:	6025      	str	r5, [r4, #0]
 800826e:	bf18      	it	ne
 8008270:	6059      	strne	r1, [r3, #4]
 8008272:	6863      	ldr	r3, [r4, #4]
 8008274:	bf08      	it	eq
 8008276:	6031      	streq	r1, [r6, #0]
 8008278:	5162      	str	r2, [r4, r5]
 800827a:	604b      	str	r3, [r1, #4]
 800827c:	4638      	mov	r0, r7
 800827e:	f104 060b 	add.w	r6, r4, #11
 8008282:	f000 fa6b 	bl	800875c <__malloc_unlock>
 8008286:	f026 0607 	bic.w	r6, r6, #7
 800828a:	1d23      	adds	r3, r4, #4
 800828c:	1af2      	subs	r2, r6, r3
 800828e:	d0b6      	beq.n	80081fe <_malloc_r+0x22>
 8008290:	1b9b      	subs	r3, r3, r6
 8008292:	50a3      	str	r3, [r4, r2]
 8008294:	e7b3      	b.n	80081fe <_malloc_r+0x22>
 8008296:	6862      	ldr	r2, [r4, #4]
 8008298:	42a3      	cmp	r3, r4
 800829a:	bf0c      	ite	eq
 800829c:	6032      	streq	r2, [r6, #0]
 800829e:	605a      	strne	r2, [r3, #4]
 80082a0:	e7ec      	b.n	800827c <_malloc_r+0xa0>
 80082a2:	4623      	mov	r3, r4
 80082a4:	6864      	ldr	r4, [r4, #4]
 80082a6:	e7b2      	b.n	800820e <_malloc_r+0x32>
 80082a8:	4634      	mov	r4, r6
 80082aa:	6876      	ldr	r6, [r6, #4]
 80082ac:	e7b9      	b.n	8008222 <_malloc_r+0x46>
 80082ae:	230c      	movs	r3, #12
 80082b0:	603b      	str	r3, [r7, #0]
 80082b2:	4638      	mov	r0, r7
 80082b4:	f000 fa52 	bl	800875c <__malloc_unlock>
 80082b8:	e7a1      	b.n	80081fe <_malloc_r+0x22>
 80082ba:	6025      	str	r5, [r4, #0]
 80082bc:	e7de      	b.n	800827c <_malloc_r+0xa0>
 80082be:	bf00      	nop
 80082c0:	200003b4 	.word	0x200003b4

080082c4 <__sfputc_r>:
 80082c4:	6893      	ldr	r3, [r2, #8]
 80082c6:	3b01      	subs	r3, #1
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	b410      	push	{r4}
 80082cc:	6093      	str	r3, [r2, #8]
 80082ce:	da08      	bge.n	80082e2 <__sfputc_r+0x1e>
 80082d0:	6994      	ldr	r4, [r2, #24]
 80082d2:	42a3      	cmp	r3, r4
 80082d4:	db01      	blt.n	80082da <__sfputc_r+0x16>
 80082d6:	290a      	cmp	r1, #10
 80082d8:	d103      	bne.n	80082e2 <__sfputc_r+0x1e>
 80082da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082de:	f7fe ba01 	b.w	80066e4 <__swbuf_r>
 80082e2:	6813      	ldr	r3, [r2, #0]
 80082e4:	1c58      	adds	r0, r3, #1
 80082e6:	6010      	str	r0, [r2, #0]
 80082e8:	7019      	strb	r1, [r3, #0]
 80082ea:	4608      	mov	r0, r1
 80082ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <__sfputs_r>:
 80082f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f4:	4606      	mov	r6, r0
 80082f6:	460f      	mov	r7, r1
 80082f8:	4614      	mov	r4, r2
 80082fa:	18d5      	adds	r5, r2, r3
 80082fc:	42ac      	cmp	r4, r5
 80082fe:	d101      	bne.n	8008304 <__sfputs_r+0x12>
 8008300:	2000      	movs	r0, #0
 8008302:	e007      	b.n	8008314 <__sfputs_r+0x22>
 8008304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008308:	463a      	mov	r2, r7
 800830a:	4630      	mov	r0, r6
 800830c:	f7ff ffda 	bl	80082c4 <__sfputc_r>
 8008310:	1c43      	adds	r3, r0, #1
 8008312:	d1f3      	bne.n	80082fc <__sfputs_r+0xa>
 8008314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008318 <_vfiprintf_r>:
 8008318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831c:	460d      	mov	r5, r1
 800831e:	b09d      	sub	sp, #116	; 0x74
 8008320:	4614      	mov	r4, r2
 8008322:	4698      	mov	r8, r3
 8008324:	4606      	mov	r6, r0
 8008326:	b118      	cbz	r0, 8008330 <_vfiprintf_r+0x18>
 8008328:	6983      	ldr	r3, [r0, #24]
 800832a:	b90b      	cbnz	r3, 8008330 <_vfiprintf_r+0x18>
 800832c:	f7ff fa30 	bl	8007790 <__sinit>
 8008330:	4b89      	ldr	r3, [pc, #548]	; (8008558 <_vfiprintf_r+0x240>)
 8008332:	429d      	cmp	r5, r3
 8008334:	d11b      	bne.n	800836e <_vfiprintf_r+0x56>
 8008336:	6875      	ldr	r5, [r6, #4]
 8008338:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800833a:	07d9      	lsls	r1, r3, #31
 800833c:	d405      	bmi.n	800834a <_vfiprintf_r+0x32>
 800833e:	89ab      	ldrh	r3, [r5, #12]
 8008340:	059a      	lsls	r2, r3, #22
 8008342:	d402      	bmi.n	800834a <_vfiprintf_r+0x32>
 8008344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008346:	f7ff fac6 	bl	80078d6 <__retarget_lock_acquire_recursive>
 800834a:	89ab      	ldrh	r3, [r5, #12]
 800834c:	071b      	lsls	r3, r3, #28
 800834e:	d501      	bpl.n	8008354 <_vfiprintf_r+0x3c>
 8008350:	692b      	ldr	r3, [r5, #16]
 8008352:	b9eb      	cbnz	r3, 8008390 <_vfiprintf_r+0x78>
 8008354:	4629      	mov	r1, r5
 8008356:	4630      	mov	r0, r6
 8008358:	f7fe fa16 	bl	8006788 <__swsetup_r>
 800835c:	b1c0      	cbz	r0, 8008390 <_vfiprintf_r+0x78>
 800835e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008360:	07dc      	lsls	r4, r3, #31
 8008362:	d50e      	bpl.n	8008382 <_vfiprintf_r+0x6a>
 8008364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008368:	b01d      	add	sp, #116	; 0x74
 800836a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836e:	4b7b      	ldr	r3, [pc, #492]	; (800855c <_vfiprintf_r+0x244>)
 8008370:	429d      	cmp	r5, r3
 8008372:	d101      	bne.n	8008378 <_vfiprintf_r+0x60>
 8008374:	68b5      	ldr	r5, [r6, #8]
 8008376:	e7df      	b.n	8008338 <_vfiprintf_r+0x20>
 8008378:	4b79      	ldr	r3, [pc, #484]	; (8008560 <_vfiprintf_r+0x248>)
 800837a:	429d      	cmp	r5, r3
 800837c:	bf08      	it	eq
 800837e:	68f5      	ldreq	r5, [r6, #12]
 8008380:	e7da      	b.n	8008338 <_vfiprintf_r+0x20>
 8008382:	89ab      	ldrh	r3, [r5, #12]
 8008384:	0598      	lsls	r0, r3, #22
 8008386:	d4ed      	bmi.n	8008364 <_vfiprintf_r+0x4c>
 8008388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800838a:	f7ff faa5 	bl	80078d8 <__retarget_lock_release_recursive>
 800838e:	e7e9      	b.n	8008364 <_vfiprintf_r+0x4c>
 8008390:	2300      	movs	r3, #0
 8008392:	9309      	str	r3, [sp, #36]	; 0x24
 8008394:	2320      	movs	r3, #32
 8008396:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800839a:	f8cd 800c 	str.w	r8, [sp, #12]
 800839e:	2330      	movs	r3, #48	; 0x30
 80083a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008564 <_vfiprintf_r+0x24c>
 80083a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083a8:	f04f 0901 	mov.w	r9, #1
 80083ac:	4623      	mov	r3, r4
 80083ae:	469a      	mov	sl, r3
 80083b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083b4:	b10a      	cbz	r2, 80083ba <_vfiprintf_r+0xa2>
 80083b6:	2a25      	cmp	r2, #37	; 0x25
 80083b8:	d1f9      	bne.n	80083ae <_vfiprintf_r+0x96>
 80083ba:	ebba 0b04 	subs.w	fp, sl, r4
 80083be:	d00b      	beq.n	80083d8 <_vfiprintf_r+0xc0>
 80083c0:	465b      	mov	r3, fp
 80083c2:	4622      	mov	r2, r4
 80083c4:	4629      	mov	r1, r5
 80083c6:	4630      	mov	r0, r6
 80083c8:	f7ff ff93 	bl	80082f2 <__sfputs_r>
 80083cc:	3001      	adds	r0, #1
 80083ce:	f000 80aa 	beq.w	8008526 <_vfiprintf_r+0x20e>
 80083d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083d4:	445a      	add	r2, fp
 80083d6:	9209      	str	r2, [sp, #36]	; 0x24
 80083d8:	f89a 3000 	ldrb.w	r3, [sl]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 80a2 	beq.w	8008526 <_vfiprintf_r+0x20e>
 80083e2:	2300      	movs	r3, #0
 80083e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083ec:	f10a 0a01 	add.w	sl, sl, #1
 80083f0:	9304      	str	r3, [sp, #16]
 80083f2:	9307      	str	r3, [sp, #28]
 80083f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083f8:	931a      	str	r3, [sp, #104]	; 0x68
 80083fa:	4654      	mov	r4, sl
 80083fc:	2205      	movs	r2, #5
 80083fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008402:	4858      	ldr	r0, [pc, #352]	; (8008564 <_vfiprintf_r+0x24c>)
 8008404:	f7f7 feec 	bl	80001e0 <memchr>
 8008408:	9a04      	ldr	r2, [sp, #16]
 800840a:	b9d8      	cbnz	r0, 8008444 <_vfiprintf_r+0x12c>
 800840c:	06d1      	lsls	r1, r2, #27
 800840e:	bf44      	itt	mi
 8008410:	2320      	movmi	r3, #32
 8008412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008416:	0713      	lsls	r3, r2, #28
 8008418:	bf44      	itt	mi
 800841a:	232b      	movmi	r3, #43	; 0x2b
 800841c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008420:	f89a 3000 	ldrb.w	r3, [sl]
 8008424:	2b2a      	cmp	r3, #42	; 0x2a
 8008426:	d015      	beq.n	8008454 <_vfiprintf_r+0x13c>
 8008428:	9a07      	ldr	r2, [sp, #28]
 800842a:	4654      	mov	r4, sl
 800842c:	2000      	movs	r0, #0
 800842e:	f04f 0c0a 	mov.w	ip, #10
 8008432:	4621      	mov	r1, r4
 8008434:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008438:	3b30      	subs	r3, #48	; 0x30
 800843a:	2b09      	cmp	r3, #9
 800843c:	d94e      	bls.n	80084dc <_vfiprintf_r+0x1c4>
 800843e:	b1b0      	cbz	r0, 800846e <_vfiprintf_r+0x156>
 8008440:	9207      	str	r2, [sp, #28]
 8008442:	e014      	b.n	800846e <_vfiprintf_r+0x156>
 8008444:	eba0 0308 	sub.w	r3, r0, r8
 8008448:	fa09 f303 	lsl.w	r3, r9, r3
 800844c:	4313      	orrs	r3, r2
 800844e:	9304      	str	r3, [sp, #16]
 8008450:	46a2      	mov	sl, r4
 8008452:	e7d2      	b.n	80083fa <_vfiprintf_r+0xe2>
 8008454:	9b03      	ldr	r3, [sp, #12]
 8008456:	1d19      	adds	r1, r3, #4
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	9103      	str	r1, [sp, #12]
 800845c:	2b00      	cmp	r3, #0
 800845e:	bfbb      	ittet	lt
 8008460:	425b      	neglt	r3, r3
 8008462:	f042 0202 	orrlt.w	r2, r2, #2
 8008466:	9307      	strge	r3, [sp, #28]
 8008468:	9307      	strlt	r3, [sp, #28]
 800846a:	bfb8      	it	lt
 800846c:	9204      	strlt	r2, [sp, #16]
 800846e:	7823      	ldrb	r3, [r4, #0]
 8008470:	2b2e      	cmp	r3, #46	; 0x2e
 8008472:	d10c      	bne.n	800848e <_vfiprintf_r+0x176>
 8008474:	7863      	ldrb	r3, [r4, #1]
 8008476:	2b2a      	cmp	r3, #42	; 0x2a
 8008478:	d135      	bne.n	80084e6 <_vfiprintf_r+0x1ce>
 800847a:	9b03      	ldr	r3, [sp, #12]
 800847c:	1d1a      	adds	r2, r3, #4
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	9203      	str	r2, [sp, #12]
 8008482:	2b00      	cmp	r3, #0
 8008484:	bfb8      	it	lt
 8008486:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800848a:	3402      	adds	r4, #2
 800848c:	9305      	str	r3, [sp, #20]
 800848e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008574 <_vfiprintf_r+0x25c>
 8008492:	7821      	ldrb	r1, [r4, #0]
 8008494:	2203      	movs	r2, #3
 8008496:	4650      	mov	r0, sl
 8008498:	f7f7 fea2 	bl	80001e0 <memchr>
 800849c:	b140      	cbz	r0, 80084b0 <_vfiprintf_r+0x198>
 800849e:	2340      	movs	r3, #64	; 0x40
 80084a0:	eba0 000a 	sub.w	r0, r0, sl
 80084a4:	fa03 f000 	lsl.w	r0, r3, r0
 80084a8:	9b04      	ldr	r3, [sp, #16]
 80084aa:	4303      	orrs	r3, r0
 80084ac:	3401      	adds	r4, #1
 80084ae:	9304      	str	r3, [sp, #16]
 80084b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084b4:	482c      	ldr	r0, [pc, #176]	; (8008568 <_vfiprintf_r+0x250>)
 80084b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084ba:	2206      	movs	r2, #6
 80084bc:	f7f7 fe90 	bl	80001e0 <memchr>
 80084c0:	2800      	cmp	r0, #0
 80084c2:	d03f      	beq.n	8008544 <_vfiprintf_r+0x22c>
 80084c4:	4b29      	ldr	r3, [pc, #164]	; (800856c <_vfiprintf_r+0x254>)
 80084c6:	bb1b      	cbnz	r3, 8008510 <_vfiprintf_r+0x1f8>
 80084c8:	9b03      	ldr	r3, [sp, #12]
 80084ca:	3307      	adds	r3, #7
 80084cc:	f023 0307 	bic.w	r3, r3, #7
 80084d0:	3308      	adds	r3, #8
 80084d2:	9303      	str	r3, [sp, #12]
 80084d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084d6:	443b      	add	r3, r7
 80084d8:	9309      	str	r3, [sp, #36]	; 0x24
 80084da:	e767      	b.n	80083ac <_vfiprintf_r+0x94>
 80084dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80084e0:	460c      	mov	r4, r1
 80084e2:	2001      	movs	r0, #1
 80084e4:	e7a5      	b.n	8008432 <_vfiprintf_r+0x11a>
 80084e6:	2300      	movs	r3, #0
 80084e8:	3401      	adds	r4, #1
 80084ea:	9305      	str	r3, [sp, #20]
 80084ec:	4619      	mov	r1, r3
 80084ee:	f04f 0c0a 	mov.w	ip, #10
 80084f2:	4620      	mov	r0, r4
 80084f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084f8:	3a30      	subs	r2, #48	; 0x30
 80084fa:	2a09      	cmp	r2, #9
 80084fc:	d903      	bls.n	8008506 <_vfiprintf_r+0x1ee>
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d0c5      	beq.n	800848e <_vfiprintf_r+0x176>
 8008502:	9105      	str	r1, [sp, #20]
 8008504:	e7c3      	b.n	800848e <_vfiprintf_r+0x176>
 8008506:	fb0c 2101 	mla	r1, ip, r1, r2
 800850a:	4604      	mov	r4, r0
 800850c:	2301      	movs	r3, #1
 800850e:	e7f0      	b.n	80084f2 <_vfiprintf_r+0x1da>
 8008510:	ab03      	add	r3, sp, #12
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	462a      	mov	r2, r5
 8008516:	4b16      	ldr	r3, [pc, #88]	; (8008570 <_vfiprintf_r+0x258>)
 8008518:	a904      	add	r1, sp, #16
 800851a:	4630      	mov	r0, r6
 800851c:	f7fd fc8a 	bl	8005e34 <_printf_float>
 8008520:	4607      	mov	r7, r0
 8008522:	1c78      	adds	r0, r7, #1
 8008524:	d1d6      	bne.n	80084d4 <_vfiprintf_r+0x1bc>
 8008526:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008528:	07d9      	lsls	r1, r3, #31
 800852a:	d405      	bmi.n	8008538 <_vfiprintf_r+0x220>
 800852c:	89ab      	ldrh	r3, [r5, #12]
 800852e:	059a      	lsls	r2, r3, #22
 8008530:	d402      	bmi.n	8008538 <_vfiprintf_r+0x220>
 8008532:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008534:	f7ff f9d0 	bl	80078d8 <__retarget_lock_release_recursive>
 8008538:	89ab      	ldrh	r3, [r5, #12]
 800853a:	065b      	lsls	r3, r3, #25
 800853c:	f53f af12 	bmi.w	8008364 <_vfiprintf_r+0x4c>
 8008540:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008542:	e711      	b.n	8008368 <_vfiprintf_r+0x50>
 8008544:	ab03      	add	r3, sp, #12
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	462a      	mov	r2, r5
 800854a:	4b09      	ldr	r3, [pc, #36]	; (8008570 <_vfiprintf_r+0x258>)
 800854c:	a904      	add	r1, sp, #16
 800854e:	4630      	mov	r0, r6
 8008550:	f7fd ff14 	bl	800637c <_printf_i>
 8008554:	e7e4      	b.n	8008520 <_vfiprintf_r+0x208>
 8008556:	bf00      	nop
 8008558:	08008a7c 	.word	0x08008a7c
 800855c:	08008a9c 	.word	0x08008a9c
 8008560:	08008a5c 	.word	0x08008a5c
 8008564:	08008c14 	.word	0x08008c14
 8008568:	08008c1e 	.word	0x08008c1e
 800856c:	08005e35 	.word	0x08005e35
 8008570:	080082f3 	.word	0x080082f3
 8008574:	08008c1a 	.word	0x08008c1a

08008578 <_sbrk_r>:
 8008578:	b538      	push	{r3, r4, r5, lr}
 800857a:	4d06      	ldr	r5, [pc, #24]	; (8008594 <_sbrk_r+0x1c>)
 800857c:	2300      	movs	r3, #0
 800857e:	4604      	mov	r4, r0
 8008580:	4608      	mov	r0, r1
 8008582:	602b      	str	r3, [r5, #0]
 8008584:	f7f9 f9e0 	bl	8001948 <_sbrk>
 8008588:	1c43      	adds	r3, r0, #1
 800858a:	d102      	bne.n	8008592 <_sbrk_r+0x1a>
 800858c:	682b      	ldr	r3, [r5, #0]
 800858e:	b103      	cbz	r3, 8008592 <_sbrk_r+0x1a>
 8008590:	6023      	str	r3, [r4, #0]
 8008592:	bd38      	pop	{r3, r4, r5, pc}
 8008594:	200003bc 	.word	0x200003bc

08008598 <__sread>:
 8008598:	b510      	push	{r4, lr}
 800859a:	460c      	mov	r4, r1
 800859c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a0:	f000 f8e2 	bl	8008768 <_read_r>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	bfab      	itete	ge
 80085a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085aa:	89a3      	ldrhlt	r3, [r4, #12]
 80085ac:	181b      	addge	r3, r3, r0
 80085ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085b2:	bfac      	ite	ge
 80085b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80085b6:	81a3      	strhlt	r3, [r4, #12]
 80085b8:	bd10      	pop	{r4, pc}

080085ba <__swrite>:
 80085ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085be:	461f      	mov	r7, r3
 80085c0:	898b      	ldrh	r3, [r1, #12]
 80085c2:	05db      	lsls	r3, r3, #23
 80085c4:	4605      	mov	r5, r0
 80085c6:	460c      	mov	r4, r1
 80085c8:	4616      	mov	r6, r2
 80085ca:	d505      	bpl.n	80085d8 <__swrite+0x1e>
 80085cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d0:	2302      	movs	r3, #2
 80085d2:	2200      	movs	r2, #0
 80085d4:	f000 f898 	bl	8008708 <_lseek_r>
 80085d8:	89a3      	ldrh	r3, [r4, #12]
 80085da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085e2:	81a3      	strh	r3, [r4, #12]
 80085e4:	4632      	mov	r2, r6
 80085e6:	463b      	mov	r3, r7
 80085e8:	4628      	mov	r0, r5
 80085ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085ee:	f000 b817 	b.w	8008620 <_write_r>

080085f2 <__sseek>:
 80085f2:	b510      	push	{r4, lr}
 80085f4:	460c      	mov	r4, r1
 80085f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085fa:	f000 f885 	bl	8008708 <_lseek_r>
 80085fe:	1c43      	adds	r3, r0, #1
 8008600:	89a3      	ldrh	r3, [r4, #12]
 8008602:	bf15      	itete	ne
 8008604:	6560      	strne	r0, [r4, #84]	; 0x54
 8008606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800860a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800860e:	81a3      	strheq	r3, [r4, #12]
 8008610:	bf18      	it	ne
 8008612:	81a3      	strhne	r3, [r4, #12]
 8008614:	bd10      	pop	{r4, pc}

08008616 <__sclose>:
 8008616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800861a:	f000 b831 	b.w	8008680 <_close_r>
	...

08008620 <_write_r>:
 8008620:	b538      	push	{r3, r4, r5, lr}
 8008622:	4d07      	ldr	r5, [pc, #28]	; (8008640 <_write_r+0x20>)
 8008624:	4604      	mov	r4, r0
 8008626:	4608      	mov	r0, r1
 8008628:	4611      	mov	r1, r2
 800862a:	2200      	movs	r2, #0
 800862c:	602a      	str	r2, [r5, #0]
 800862e:	461a      	mov	r2, r3
 8008630:	f7f9 f93a 	bl	80018a8 <_write>
 8008634:	1c43      	adds	r3, r0, #1
 8008636:	d102      	bne.n	800863e <_write_r+0x1e>
 8008638:	682b      	ldr	r3, [r5, #0]
 800863a:	b103      	cbz	r3, 800863e <_write_r+0x1e>
 800863c:	6023      	str	r3, [r4, #0]
 800863e:	bd38      	pop	{r3, r4, r5, pc}
 8008640:	200003bc 	.word	0x200003bc

08008644 <__assert_func>:
 8008644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008646:	4614      	mov	r4, r2
 8008648:	461a      	mov	r2, r3
 800864a:	4b09      	ldr	r3, [pc, #36]	; (8008670 <__assert_func+0x2c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4605      	mov	r5, r0
 8008650:	68d8      	ldr	r0, [r3, #12]
 8008652:	b14c      	cbz	r4, 8008668 <__assert_func+0x24>
 8008654:	4b07      	ldr	r3, [pc, #28]	; (8008674 <__assert_func+0x30>)
 8008656:	9100      	str	r1, [sp, #0]
 8008658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800865c:	4906      	ldr	r1, [pc, #24]	; (8008678 <__assert_func+0x34>)
 800865e:	462b      	mov	r3, r5
 8008660:	f000 f81e 	bl	80086a0 <fiprintf>
 8008664:	f000 f89f 	bl	80087a6 <abort>
 8008668:	4b04      	ldr	r3, [pc, #16]	; (800867c <__assert_func+0x38>)
 800866a:	461c      	mov	r4, r3
 800866c:	e7f3      	b.n	8008656 <__assert_func+0x12>
 800866e:	bf00      	nop
 8008670:	2000000c 	.word	0x2000000c
 8008674:	08008c25 	.word	0x08008c25
 8008678:	08008c32 	.word	0x08008c32
 800867c:	08008c60 	.word	0x08008c60

08008680 <_close_r>:
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	4d06      	ldr	r5, [pc, #24]	; (800869c <_close_r+0x1c>)
 8008684:	2300      	movs	r3, #0
 8008686:	4604      	mov	r4, r0
 8008688:	4608      	mov	r0, r1
 800868a:	602b      	str	r3, [r5, #0]
 800868c:	f7f9 f928 	bl	80018e0 <_close>
 8008690:	1c43      	adds	r3, r0, #1
 8008692:	d102      	bne.n	800869a <_close_r+0x1a>
 8008694:	682b      	ldr	r3, [r5, #0]
 8008696:	b103      	cbz	r3, 800869a <_close_r+0x1a>
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	bd38      	pop	{r3, r4, r5, pc}
 800869c:	200003bc 	.word	0x200003bc

080086a0 <fiprintf>:
 80086a0:	b40e      	push	{r1, r2, r3}
 80086a2:	b503      	push	{r0, r1, lr}
 80086a4:	4601      	mov	r1, r0
 80086a6:	ab03      	add	r3, sp, #12
 80086a8:	4805      	ldr	r0, [pc, #20]	; (80086c0 <fiprintf+0x20>)
 80086aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80086ae:	6800      	ldr	r0, [r0, #0]
 80086b0:	9301      	str	r3, [sp, #4]
 80086b2:	f7ff fe31 	bl	8008318 <_vfiprintf_r>
 80086b6:	b002      	add	sp, #8
 80086b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80086bc:	b003      	add	sp, #12
 80086be:	4770      	bx	lr
 80086c0:	2000000c 	.word	0x2000000c

080086c4 <_fstat_r>:
 80086c4:	b538      	push	{r3, r4, r5, lr}
 80086c6:	4d07      	ldr	r5, [pc, #28]	; (80086e4 <_fstat_r+0x20>)
 80086c8:	2300      	movs	r3, #0
 80086ca:	4604      	mov	r4, r0
 80086cc:	4608      	mov	r0, r1
 80086ce:	4611      	mov	r1, r2
 80086d0:	602b      	str	r3, [r5, #0]
 80086d2:	f7f9 f911 	bl	80018f8 <_fstat>
 80086d6:	1c43      	adds	r3, r0, #1
 80086d8:	d102      	bne.n	80086e0 <_fstat_r+0x1c>
 80086da:	682b      	ldr	r3, [r5, #0]
 80086dc:	b103      	cbz	r3, 80086e0 <_fstat_r+0x1c>
 80086de:	6023      	str	r3, [r4, #0]
 80086e0:	bd38      	pop	{r3, r4, r5, pc}
 80086e2:	bf00      	nop
 80086e4:	200003bc 	.word	0x200003bc

080086e8 <_isatty_r>:
 80086e8:	b538      	push	{r3, r4, r5, lr}
 80086ea:	4d06      	ldr	r5, [pc, #24]	; (8008704 <_isatty_r+0x1c>)
 80086ec:	2300      	movs	r3, #0
 80086ee:	4604      	mov	r4, r0
 80086f0:	4608      	mov	r0, r1
 80086f2:	602b      	str	r3, [r5, #0]
 80086f4:	f7f9 f910 	bl	8001918 <_isatty>
 80086f8:	1c43      	adds	r3, r0, #1
 80086fa:	d102      	bne.n	8008702 <_isatty_r+0x1a>
 80086fc:	682b      	ldr	r3, [r5, #0]
 80086fe:	b103      	cbz	r3, 8008702 <_isatty_r+0x1a>
 8008700:	6023      	str	r3, [r4, #0]
 8008702:	bd38      	pop	{r3, r4, r5, pc}
 8008704:	200003bc 	.word	0x200003bc

08008708 <_lseek_r>:
 8008708:	b538      	push	{r3, r4, r5, lr}
 800870a:	4d07      	ldr	r5, [pc, #28]	; (8008728 <_lseek_r+0x20>)
 800870c:	4604      	mov	r4, r0
 800870e:	4608      	mov	r0, r1
 8008710:	4611      	mov	r1, r2
 8008712:	2200      	movs	r2, #0
 8008714:	602a      	str	r2, [r5, #0]
 8008716:	461a      	mov	r2, r3
 8008718:	f7f9 f909 	bl	800192e <_lseek>
 800871c:	1c43      	adds	r3, r0, #1
 800871e:	d102      	bne.n	8008726 <_lseek_r+0x1e>
 8008720:	682b      	ldr	r3, [r5, #0]
 8008722:	b103      	cbz	r3, 8008726 <_lseek_r+0x1e>
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	bd38      	pop	{r3, r4, r5, pc}
 8008728:	200003bc 	.word	0x200003bc

0800872c <__ascii_mbtowc>:
 800872c:	b082      	sub	sp, #8
 800872e:	b901      	cbnz	r1, 8008732 <__ascii_mbtowc+0x6>
 8008730:	a901      	add	r1, sp, #4
 8008732:	b142      	cbz	r2, 8008746 <__ascii_mbtowc+0x1a>
 8008734:	b14b      	cbz	r3, 800874a <__ascii_mbtowc+0x1e>
 8008736:	7813      	ldrb	r3, [r2, #0]
 8008738:	600b      	str	r3, [r1, #0]
 800873a:	7812      	ldrb	r2, [r2, #0]
 800873c:	1e10      	subs	r0, r2, #0
 800873e:	bf18      	it	ne
 8008740:	2001      	movne	r0, #1
 8008742:	b002      	add	sp, #8
 8008744:	4770      	bx	lr
 8008746:	4610      	mov	r0, r2
 8008748:	e7fb      	b.n	8008742 <__ascii_mbtowc+0x16>
 800874a:	f06f 0001 	mvn.w	r0, #1
 800874e:	e7f8      	b.n	8008742 <__ascii_mbtowc+0x16>

08008750 <__malloc_lock>:
 8008750:	4801      	ldr	r0, [pc, #4]	; (8008758 <__malloc_lock+0x8>)
 8008752:	f7ff b8c0 	b.w	80078d6 <__retarget_lock_acquire_recursive>
 8008756:	bf00      	nop
 8008758:	200003b0 	.word	0x200003b0

0800875c <__malloc_unlock>:
 800875c:	4801      	ldr	r0, [pc, #4]	; (8008764 <__malloc_unlock+0x8>)
 800875e:	f7ff b8bb 	b.w	80078d8 <__retarget_lock_release_recursive>
 8008762:	bf00      	nop
 8008764:	200003b0 	.word	0x200003b0

08008768 <_read_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4d07      	ldr	r5, [pc, #28]	; (8008788 <_read_r+0x20>)
 800876c:	4604      	mov	r4, r0
 800876e:	4608      	mov	r0, r1
 8008770:	4611      	mov	r1, r2
 8008772:	2200      	movs	r2, #0
 8008774:	602a      	str	r2, [r5, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	f7f9 f879 	bl	800186e <_read>
 800877c:	1c43      	adds	r3, r0, #1
 800877e:	d102      	bne.n	8008786 <_read_r+0x1e>
 8008780:	682b      	ldr	r3, [r5, #0]
 8008782:	b103      	cbz	r3, 8008786 <_read_r+0x1e>
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	bd38      	pop	{r3, r4, r5, pc}
 8008788:	200003bc 	.word	0x200003bc

0800878c <__ascii_wctomb>:
 800878c:	b149      	cbz	r1, 80087a2 <__ascii_wctomb+0x16>
 800878e:	2aff      	cmp	r2, #255	; 0xff
 8008790:	bf85      	ittet	hi
 8008792:	238a      	movhi	r3, #138	; 0x8a
 8008794:	6003      	strhi	r3, [r0, #0]
 8008796:	700a      	strbls	r2, [r1, #0]
 8008798:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800879c:	bf98      	it	ls
 800879e:	2001      	movls	r0, #1
 80087a0:	4770      	bx	lr
 80087a2:	4608      	mov	r0, r1
 80087a4:	4770      	bx	lr

080087a6 <abort>:
 80087a6:	b508      	push	{r3, lr}
 80087a8:	2006      	movs	r0, #6
 80087aa:	f000 f82b 	bl	8008804 <raise>
 80087ae:	2001      	movs	r0, #1
 80087b0:	f7f9 f853 	bl	800185a <_exit>

080087b4 <_raise_r>:
 80087b4:	291f      	cmp	r1, #31
 80087b6:	b538      	push	{r3, r4, r5, lr}
 80087b8:	4604      	mov	r4, r0
 80087ba:	460d      	mov	r5, r1
 80087bc:	d904      	bls.n	80087c8 <_raise_r+0x14>
 80087be:	2316      	movs	r3, #22
 80087c0:	6003      	str	r3, [r0, #0]
 80087c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80087ca:	b112      	cbz	r2, 80087d2 <_raise_r+0x1e>
 80087cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087d0:	b94b      	cbnz	r3, 80087e6 <_raise_r+0x32>
 80087d2:	4620      	mov	r0, r4
 80087d4:	f000 f830 	bl	8008838 <_getpid_r>
 80087d8:	462a      	mov	r2, r5
 80087da:	4601      	mov	r1, r0
 80087dc:	4620      	mov	r0, r4
 80087de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087e2:	f000 b817 	b.w	8008814 <_kill_r>
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d00a      	beq.n	8008800 <_raise_r+0x4c>
 80087ea:	1c59      	adds	r1, r3, #1
 80087ec:	d103      	bne.n	80087f6 <_raise_r+0x42>
 80087ee:	2316      	movs	r3, #22
 80087f0:	6003      	str	r3, [r0, #0]
 80087f2:	2001      	movs	r0, #1
 80087f4:	e7e7      	b.n	80087c6 <_raise_r+0x12>
 80087f6:	2400      	movs	r4, #0
 80087f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80087fc:	4628      	mov	r0, r5
 80087fe:	4798      	blx	r3
 8008800:	2000      	movs	r0, #0
 8008802:	e7e0      	b.n	80087c6 <_raise_r+0x12>

08008804 <raise>:
 8008804:	4b02      	ldr	r3, [pc, #8]	; (8008810 <raise+0xc>)
 8008806:	4601      	mov	r1, r0
 8008808:	6818      	ldr	r0, [r3, #0]
 800880a:	f7ff bfd3 	b.w	80087b4 <_raise_r>
 800880e:	bf00      	nop
 8008810:	2000000c 	.word	0x2000000c

08008814 <_kill_r>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	4d07      	ldr	r5, [pc, #28]	; (8008834 <_kill_r+0x20>)
 8008818:	2300      	movs	r3, #0
 800881a:	4604      	mov	r4, r0
 800881c:	4608      	mov	r0, r1
 800881e:	4611      	mov	r1, r2
 8008820:	602b      	str	r3, [r5, #0]
 8008822:	f7f9 f80a 	bl	800183a <_kill>
 8008826:	1c43      	adds	r3, r0, #1
 8008828:	d102      	bne.n	8008830 <_kill_r+0x1c>
 800882a:	682b      	ldr	r3, [r5, #0]
 800882c:	b103      	cbz	r3, 8008830 <_kill_r+0x1c>
 800882e:	6023      	str	r3, [r4, #0]
 8008830:	bd38      	pop	{r3, r4, r5, pc}
 8008832:	bf00      	nop
 8008834:	200003bc 	.word	0x200003bc

08008838 <_getpid_r>:
 8008838:	f7f8 bff7 	b.w	800182a <_getpid>

0800883c <_init>:
 800883c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883e:	bf00      	nop
 8008840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008842:	bc08      	pop	{r3}
 8008844:	469e      	mov	lr, r3
 8008846:	4770      	bx	lr

08008848 <_fini>:
 8008848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884a:	bf00      	nop
 800884c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800884e:	bc08      	pop	{r3}
 8008850:	469e      	mov	lr, r3
 8008852:	4770      	bx	lr
