
Clock_weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08008020  08008020  00018020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084bc  080084bc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080084bc  080084bc  000184bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084c4  080084c4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084c4  080084c4  000184c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084c8  080084c8  000184c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080084cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  200001dc  080086a8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  080086a8  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157c8  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f2f  00000000  00000000  000359d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  00038908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  00039b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000290a1  00000000  00000000  0003abc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e5f  00000000  00000000  00063c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4aca  00000000  00000000  0007aac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016f58a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a78  00000000  00000000  0016f5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008004 	.word	0x08008004

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008004 	.word	0x08008004

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <MX_GPIO_Init+0x5c>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <MX_GPIO_Init+0x5c>)
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <MX_GPIO_Init+0x5c>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_GPIO_Init+0x5c>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <MX_GPIO_Init+0x5c>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <MX_GPIO_Init+0x5c>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <MX_GPIO_Init+0x5c>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <MX_GPIO_Init+0x5c>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <MX_GPIO_Init+0x5c>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]

}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000

08000f0c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f12:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <MX_I2C1_Init+0x78>)
 8000f14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f18:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <MX_I2C1_Init+0x7c>)
 8000f1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f28:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f46:	480e      	ldr	r0, [pc, #56]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f48:	f001 f874 	bl	8002034 <HAL_I2C_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f52:	f000 fa47 	bl	80013e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f56:	2100      	movs	r1, #0
 8000f58:	4809      	ldr	r0, [pc, #36]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f5a:	f001 fdcf 	bl	8002afc <HAL_I2CEx_ConfigAnalogFilter>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f64:	f000 fa3e 	bl	80013e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_I2C1_Init+0x74>)
 8000f6c:	f001 fe11 	bl	8002b92 <HAL_I2CEx_ConfigDigitalFilter>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f76:	f000 fa35 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200001f8 	.word	0x200001f8
 8000f84:	40005400 	.word	0x40005400
 8000f88:	2000090e 	.word	0x2000090e

08000f8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b0ac      	sub	sp, #176	; 0xb0
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2288      	movs	r2, #136	; 0x88
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f004 fa7f 	bl	80054b0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a21      	ldr	r2, [pc, #132]	; (800103c <HAL_I2C_MspInit+0xb0>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d13a      	bne.n	8001032 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fbc:	2340      	movs	r3, #64	; 0x40
 8000fbe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f002 fcf3 	bl	80039b4 <HAL_RCCEx_PeriphCLKConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fd4:	f000 fa06 	bl	80013e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <HAL_I2C_MspInit+0xb4>)
 8000fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fdc:	4a18      	ldr	r2, [pc, #96]	; (8001040 <HAL_I2C_MspInit+0xb4>)
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <HAL_I2C_MspInit+0xb4>)
 8000fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ff0:	23c0      	movs	r3, #192	; 0xc0
 8000ff2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff6:	2312      	movs	r3, #18
 8000ff8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001008:	2304      	movs	r3, #4
 800100a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001012:	4619      	mov	r1, r3
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <HAL_I2C_MspInit+0xb8>)
 8001016:	f000 fe63 	bl	8001ce0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <HAL_I2C_MspInit+0xb4>)
 800101c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101e:	4a08      	ldr	r2, [pc, #32]	; (8001040 <HAL_I2C_MspInit+0xb4>)
 8001020:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001024:	6593      	str	r3, [r2, #88]	; 0x58
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_I2C_MspInit+0xb4>)
 8001028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001032:	bf00      	nop
 8001034:	37b0      	adds	r7, #176	; 0xb0
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40005400 	.word	0x40005400
 8001040:	40021000 	.word	0x40021000
 8001044:	48000400 	.word	0x48000400

08001048 <lps_read_reg>:
#define LPS25HB_TEMP_OUT_H 		0x2C

#define TIMEOUT                 100

static uint8_t lps_read_reg(uint8_t reg)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af04      	add	r7, sp, #16
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	b29a      	uxth	r2, r3
 800105a:	2364      	movs	r3, #100	; 0x64
 800105c:	9302      	str	r3, [sp, #8]
 800105e:	2301      	movs	r3, #1
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	f107 030f 	add.w	r3, r7, #15
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2301      	movs	r3, #1
 800106a:	21ba      	movs	r1, #186	; 0xba
 800106c:	4803      	ldr	r0, [pc, #12]	; (800107c <lps_read_reg+0x34>)
 800106e:	f001 f985 	bl	800237c <HAL_I2C_Mem_Read>

    return value;
 8001072:	7bfb      	ldrb	r3, [r7, #15]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200001f8 	.word	0x200001f8

08001080 <lps_write_reg>:

static void lps_write_reg(uint8_t reg, uint8_t value)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af04      	add	r7, sp, #16
 8001086:	4603      	mov	r3, r0
 8001088:	460a      	mov	r2, r1
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	4613      	mov	r3, r2
 800108e:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	b29a      	uxth	r2, r3
 8001094:	2364      	movs	r3, #100	; 0x64
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	2301      	movs	r3, #1
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	1dbb      	adds	r3, r7, #6
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2301      	movs	r3, #1
 80010a2:	21ba      	movs	r1, #186	; 0xba
 80010a4:	4803      	ldr	r0, [pc, #12]	; (80010b4 <lps_write_reg+0x34>)
 80010a6:	f001 f855 	bl	8002154 <HAL_I2C_Mem_Write>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200001f8 	.word	0x200001f8

080010b8 <lps25hb_init>:

HAL_StatusTypeDef lps25hb_init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
    if (lps_read_reg(LPS25HB_WHO_AM_I) != 0xBD)
 80010bc:	200f      	movs	r0, #15
 80010be:	f7ff ffc3 	bl	8001048 <lps_read_reg>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2bbd      	cmp	r3, #189	; 0xbd
 80010c6:	d001      	beq.n	80010cc <lps25hb_init+0x14>
         return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e004      	b.n	80010d6 <lps25hb_init+0x1e>

    lps_write_reg(LPS25HB_CTRL_REG1,  0x80); //wake up sensor
 80010cc:	2180      	movs	r1, #128	; 0x80
 80010ce:	2020      	movs	r0, #32
 80010d0:	f7ff ffd6 	bl	8001080 <lps_write_reg>
    return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd80      	pop	{r7, pc}

080010da <lps25hb_one_shot>:
    lps_write_reg(LPS25HB_CTRL_REG1,  0xC0);
        return HAL_OK;
}

HAL_StatusTypeDef lps25hb_one_shot(void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0
    lps_write_reg(LPS25HB_CTRL_REG2, 0x01);
 80010de:	2101      	movs	r1, #1
 80010e0:	2021      	movs	r0, #33	; 0x21
 80010e2:	f7ff ffcd 	bl	8001080 <lps_write_reg>
    return HAL_OK;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	bd80      	pop	{r7, pc}

080010ec <lps25hb_read_temp>:
	  lps_write_reg(LPS25HB_CTRL_REG1, 0);
    return HAL_OK;
}

float lps25hb_read_temp(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af04      	add	r7, sp, #16
     int16_t temp;

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_TEMP_OUT_L | 0x80, 1, (uint8_t*)&temp, sizeof(temp), TIMEOUT) != HAL_OK)
 80010f2:	2364      	movs	r3, #100	; 0x64
 80010f4:	9302      	str	r3, [sp, #8]
 80010f6:	2302      	movs	r3, #2
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	1dbb      	adds	r3, r7, #6
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2301      	movs	r3, #1
 8001100:	22ab      	movs	r2, #171	; 0xab
 8001102:	21ba      	movs	r1, #186	; 0xba
 8001104:	480d      	ldr	r0, [pc, #52]	; (800113c <lps25hb_read_temp+0x50>)
 8001106:	f001 f939 	bl	800237c <HAL_I2C_Mem_Read>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <lps25hb_read_temp+0x28>
         Error_Handler();
 8001110:	f000 f968 	bl	80013e4 <Error_Handler>

     return 42.5f + temp / 480.0f;
 8001114:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001118:	ee07 3a90 	vmov	s15, r3
 800111c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001120:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001140 <lps25hb_read_temp+0x54>
 8001124:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001128:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001144 <lps25hb_read_temp+0x58>
 800112c:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001130:	eeb0 0a67 	vmov.f32	s0, s15
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200001f8 	.word	0x200001f8
 8001140:	43f00000 	.word	0x43f00000
 8001144:	422a0000 	.word	0x422a0000

08001148 <lps25hb_read_pressure>:

float lps25hb_read_pressure(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af04      	add	r7, sp, #16
     int32_t pressure = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_PRESS_OUT_XL | 0x80, 1, (uint8_t*)&pressure, 3, TIMEOUT) != HAL_OK)
 8001152:	2364      	movs	r3, #100	; 0x64
 8001154:	9302      	str	r3, [sp, #8]
 8001156:	2303      	movs	r3, #3
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2301      	movs	r3, #1
 8001160:	22a8      	movs	r2, #168	; 0xa8
 8001162:	21ba      	movs	r1, #186	; 0xba
 8001164:	480b      	ldr	r0, [pc, #44]	; (8001194 <lps25hb_read_pressure+0x4c>)
 8001166:	f001 f909 	bl	800237c <HAL_I2C_Mem_Read>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <lps25hb_read_pressure+0x2c>
         Error_Handler();
 8001170:	f000 f938 	bl	80013e4 <Error_Handler>

     return pressure / 4096.0f;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001198 <lps25hb_read_pressure+0x50>
 8001182:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001186:	eef0 7a66 	vmov.f32	s15, s13
}
 800118a:	eeb0 0a67 	vmov.f32	s0, s15
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200001f8 	.word	0x200001f8
 8001198:	45800000 	.word	0x45800000

0800119c <HAL_Delay>:
/* USER CODE BEGIN 0 */


//Add __WFI() -> sleep (wait for interrupt)
void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f000 fc7e 	bl	8001aa4 <HAL_GetTick>
 80011a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011b4:	d007      	beq.n	80011c6 <HAL_Delay+0x2a>
  {
    wait += (uint32_t)uwTickFreq;
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011c2:	e000      	b.n	80011c6 <HAL_Delay+0x2a>
  {
	  __WFI();
 80011c4:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80011c6:	f000 fc6d 	bl	8001aa4 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d8f6      	bhi.n	80011c4 <HAL_Delay+0x28>
  }
}
 80011d6:	bf00      	nop
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000008 	.word	0x20000008

080011e4 <__io_putchar>:

int __io_putchar(int ch)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b0a      	cmp	r3, #10
 80011f0:	d102      	bne.n	80011f8 <__io_putchar+0x14>
    __io_putchar('\r');
 80011f2:	200d      	movs	r0, #13
 80011f4:	f7ff fff6 	bl	80011e4 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80011f8:	1d39      	adds	r1, r7, #4
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011fe:	2201      	movs	r2, #1
 8001200:	4803      	ldr	r0, [pc, #12]	; (8001210 <__io_putchar+0x2c>)
 8001202:	f003 fc2e 	bl	8004a62 <HAL_UART_Transmit>

  return 1;
 8001206:	2301      	movs	r3, #1
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200002d8 	.word	0x200002d8

08001214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121a:	f000 fbda 	bl	80019d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121e:	f000 f88b 	bl	8001338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001222:	f7ff fe43 	bl	8000eac <MX_GPIO_Init>
  MX_RTC_Init();
 8001226:	f000 f8e3 	bl	80013f0 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800122a:	f000 fb1d 	bl	8001868 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800122e:	f7ff fe6d 	bl	8000f0c <MX_I2C1_Init>
  MX_SPI2_Init();
 8001232:	f000 f949 	bl	80014c8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */


  /*** check if the SB flag i set ***/
  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8001236:	4b37      	ldr	r3, [pc, #220]	; (8001314 <main+0x100>)
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123e:	2b00      	cmp	r3, #0
 8001240:	d05b      	beq.n	80012fa <main+0xe6>
  {
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB); //clear the flag (flag of low power mode)
 8001242:	4b34      	ldr	r3, [pc, #208]	; (8001314 <main+0x100>)
 8001244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001248:	619a      	str	r2, [r3, #24]
	  printf("Searching...\n");
 800124a:	4833      	ldr	r0, [pc, #204]	; (8001318 <main+0x104>)
 800124c:	f004 fe28 	bl	8005ea0 <puts>
	  if (lps25hb_init() == HAL_OK) {
 8001250:	f7ff ff32 	bl	80010b8 <lps25hb_init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d14a      	bne.n	80012f0 <main+0xdc>
	    printf("OK: LPS25HB\n");
 800125a:	4830      	ldr	r0, [pc, #192]	; (800131c <main+0x108>)
 800125c:	f004 fe20 	bl	8005ea0 <puts>
	    lps25hb_one_shot();
 8001260:	f7ff ff3b 	bl	80010da <lps25hb_one_shot>
	    HAL_Delay(100);
 8001264:	2064      	movs	r0, #100	; 0x64
 8001266:	f7ff ff99 	bl	800119c <HAL_Delay>
	    printf("T = %.1f*C\n", lps25hb_read_temp());
 800126a:	f7ff ff3f 	bl	80010ec <lps25hb_read_temp>
 800126e:	ee10 3a10 	vmov	r3, s0
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f968 	bl	8000548 <__aeabi_f2d>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4828      	ldr	r0, [pc, #160]	; (8001320 <main+0x10c>)
 800127e:	f004 fd89 	bl	8005d94 <iprintf>
	    printf("p = %.1f hPa\n", lps25hb_read_pressure()+14);
 8001282:	f7ff ff61 	bl	8001148 <lps25hb_read_pressure>
 8001286:	eef0 7a40 	vmov.f32	s15, s0
 800128a:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 800128e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001292:	ee17 0a90 	vmov	r0, s15
 8001296:	f7ff f957 	bl	8000548 <__aeabi_f2d>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	4821      	ldr	r0, [pc, #132]	; (8001324 <main+0x110>)
 80012a0:	f004 fd78 	bl	8005d94 <iprintf>

	    RTC_TimeTypeDef time;
	    RTC_DateTypeDef date;
	    for(int i=0;i<5;i++){
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	e01b      	b.n	80012e2 <main+0xce>
	  	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80012aa:	f107 0308 	add.w	r3, r7, #8
 80012ae:	2200      	movs	r2, #0
 80012b0:	4619      	mov	r1, r3
 80012b2:	481d      	ldr	r0, [pc, #116]	; (8001328 <main+0x114>)
 80012b4:	f003 f8c5 	bl	8004442 <HAL_RTC_GetTime>
	  	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2200      	movs	r2, #0
 80012bc:	4619      	mov	r1, r3
 80012be:	481a      	ldr	r0, [pc, #104]	; (8001328 <main+0x114>)
 80012c0:	f003 f91b 	bl	80044fa <HAL_RTC_GetDate>
	  	  printf("Aktualny czas: %02d:%02d:%02d\n", time.Hours, time.Minutes, time.Seconds);
 80012c4:	7a3b      	ldrb	r3, [r7, #8]
 80012c6:	4619      	mov	r1, r3
 80012c8:	7a7b      	ldrb	r3, [r7, #9]
 80012ca:	461a      	mov	r2, r3
 80012cc:	7abb      	ldrb	r3, [r7, #10]
 80012ce:	4817      	ldr	r0, [pc, #92]	; (800132c <main+0x118>)
 80012d0:	f004 fd60 	bl	8005d94 <iprintf>
	  	  HAL_Delay(1000);
 80012d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d8:	f7ff ff60 	bl	800119c <HAL_Delay>
	    for(int i=0;i<5;i++){
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	3301      	adds	r3, #1
 80012e0:	61fb      	str	r3, [r7, #28]
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	dde0      	ble.n	80012aa <main+0x96>
	    }

	    HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);   //disable PA0
 80012e8:	2001      	movs	r0, #1
 80012ea:	f001 fccf 	bl	8002c8c <HAL_PWR_DisableWakeUpPin>
 80012ee:	e004      	b.n	80012fa <main+0xe6>
	  } else {
	    printf("Error: LPS25HB not found\n");
 80012f0:	480f      	ldr	r0, [pc, #60]	; (8001330 <main+0x11c>)
 80012f2:	f004 fdd5 	bl	8005ea0 <puts>
	    Error_Handler();
 80012f6:	f000 f875 	bl	80013e4 <Error_Handler>
	  }
  }
  if(PWR_WAKEUP_PIN1==SET){
	  printf("PA0 SET\n");
 80012fa:	480e      	ldr	r0, [pc, #56]	; (8001334 <main+0x120>)
 80012fc:	f004 fdd0 	bl	8005ea0 <puts>
  }
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU); //clear wake-up flag before entry standby mode
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <main+0x100>)
 8001302:	221f      	movs	r2, #31
 8001304:	619a      	str	r2, [r3, #24]

  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8001306:	2001      	movs	r0, #1
 8001308:	f001 fca0 	bl	8002c4c <HAL_PWR_EnableWakeUpPin>

  HAL_PWR_EnterSTANDBYMode();
 800130c:	f001 fcd4 	bl	8002cb8 <HAL_PWR_EnterSTANDBYMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001310:	e7fe      	b.n	8001310 <main+0xfc>
 8001312:	bf00      	nop
 8001314:	40007000 	.word	0x40007000
 8001318:	08008020 	.word	0x08008020
 800131c:	08008030 	.word	0x08008030
 8001320:	0800803c 	.word	0x0800803c
 8001324:	08008048 	.word	0x08008048
 8001328:	2000024c 	.word	0x2000024c
 800132c:	08008058 	.word	0x08008058
 8001330:	08008078 	.word	0x08008078
 8001334:	08008094 	.word	0x08008094

08001338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b096      	sub	sp, #88	; 0x58
 800133c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	2244      	movs	r2, #68	; 0x44
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f004 f8b2 	bl	80054b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800135a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800135e:	f001 fcd3 	bl	8002d08 <HAL_PWREx_ControlVoltageScaling>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001368:	f000 f83c 	bl	80013e4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800136c:	f001 fc5e 	bl	8002c2c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001370:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <SystemClock_Config+0xa8>)
 8001372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001376:	4a1a      	ldr	r2, [pc, #104]	; (80013e0 <SystemClock_Config+0xa8>)
 8001378:	f023 0318 	bic.w	r3, r3, #24
 800137c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001380:	2314      	movs	r3, #20
 8001382:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001384:	2301      	movs	r3, #1
 8001386:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001388:	2301      	movs	r3, #1
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001390:	2370      	movs	r3, #112	; 0x70
 8001392:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001394:	2300      	movs	r3, #0
 8001396:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4618      	mov	r0, r3
 800139e:	f001 fd09 	bl	8002db4 <HAL_RCC_OscConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <SystemClock_Config+0x74>
  {
    Error_Handler();
 80013a8:	f000 f81c 	bl	80013e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ac:	230f      	movs	r3, #15
 80013ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80013b0:	2300      	movs	r3, #0
 80013b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f002 f8d1 	bl	800356c <HAL_RCC_ClockConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013d0:	f000 f808 	bl	80013e4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80013d4:	f002 fdd8 	bl	8003f88 <HAL_RCCEx_EnableMSIPLLMode>
}
 80013d8:	bf00      	nop
 80013da:	3758      	adds	r7, #88	; 0x58
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40021000 	.word	0x40021000

080013e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e8:	b672      	cpsid	i
}
 80013ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ec:	e7fe      	b.n	80013ec <Error_Handler+0x8>
	...

080013f0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <MX_RTC_Init+0x5c>)
 80013f6:	4a16      	ldr	r2, [pc, #88]	; (8001450 <MX_RTC_Init+0x60>)
 80013f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_RTC_Init+0x5c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <MX_RTC_Init+0x5c>)
 8001402:	227f      	movs	r2, #127	; 0x7f
 8001404:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_RTC_Init+0x5c>)
 8001408:	22ff      	movs	r2, #255	; 0xff
 800140a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_RTC_Init+0x5c>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_RTC_Init+0x5c>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_RTC_Init+0x5c>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <MX_RTC_Init+0x5c>)
 8001420:	2200      	movs	r2, #0
 8001422:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001424:	4809      	ldr	r0, [pc, #36]	; (800144c <MX_RTC_Init+0x5c>)
 8001426:	f002 ff91 	bl	800434c <HAL_RTC_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001430:	f7ff ffd8 	bl	80013e4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 4, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8001434:	2204      	movs	r2, #4
 8001436:	2104      	movs	r1, #4
 8001438:	4804      	ldr	r0, [pc, #16]	; (800144c <MX_RTC_Init+0x5c>)
 800143a:	f003 f95d 	bl	80046f8 <HAL_RTCEx_SetWakeUpTimer_IT>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001444:	f7ff ffce 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2000024c 	.word	0x2000024c
 8001450:	40002800 	.word	0x40002800

08001454 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b0a4      	sub	sp, #144	; 0x90
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800145c:	f107 0308 	add.w	r3, r7, #8
 8001460:	2288      	movs	r2, #136	; 0x88
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f004 f823 	bl	80054b0 <memset>
  if(rtcHandle->Instance==RTC)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <HAL_RTC_MspInit+0x6c>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d120      	bne.n	80014b6 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001474:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001478:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800147a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800147e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001482:	f107 0308 	add.w	r3, r7, #8
 8001486:	4618      	mov	r0, r3
 8001488:	f002 fa94 	bl	80039b4 <HAL_RCCEx_PeriphCLKConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001492:	f7ff ffa7 	bl	80013e4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_RTC_MspInit+0x70>)
 8001498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800149c:	4a09      	ldr	r2, [pc, #36]	; (80014c4 <HAL_RTC_MspInit+0x70>)
 800149e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2003      	movs	r0, #3
 80014ac:	f000 fbe1 	bl	8001c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f000 fbfa 	bl	8001caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80014b6:	bf00      	nop
 80014b8:	3790      	adds	r7, #144	; 0x90
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40002800 	.word	0x40002800
 80014c4:	40021000 	.word	0x40021000

080014c8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80014cc:	4b1b      	ldr	r3, [pc, #108]	; (800153c <MX_SPI2_Init+0x74>)
 80014ce:	4a1c      	ldr	r2, [pc, #112]	; (8001540 <MX_SPI2_Init+0x78>)
 80014d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014d2:	4b1a      	ldr	r3, [pc, #104]	; (800153c <MX_SPI2_Init+0x74>)
 80014d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <MX_SPI2_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80014e0:	4b16      	ldr	r3, [pc, #88]	; (800153c <MX_SPI2_Init+0x74>)
 80014e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80014e6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <MX_SPI2_Init+0x74>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <MX_SPI2_Init+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_SPI2_Init+0x74>)
 80014f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <MX_SPI2_Init+0x74>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_SPI2_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_SPI2_Init+0x74>)
 800150a:	2200      	movs	r2, #0
 800150c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <MX_SPI2_Init+0x74>)
 8001510:	2200      	movs	r2, #0
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_SPI2_Init+0x74>)
 8001516:	2207      	movs	r2, #7
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <MX_SPI2_Init+0x74>)
 800151c:	2200      	movs	r2, #0
 800151e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_SPI2_Init+0x74>)
 8001522:	2208      	movs	r2, #8
 8001524:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_SPI2_Init+0x74>)
 8001528:	f003 f9aa 	bl	8004880 <HAL_SPI_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001532:	f7ff ff57 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000270 	.word	0x20000270
 8001540:	40003800 	.word	0x40003800

08001544 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a25      	ldr	r2, [pc, #148]	; (80015f8 <HAL_SPI_MspInit+0xb4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d144      	bne.n	80015f0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001566:	4b25      	ldr	r3, [pc, #148]	; (80015fc <HAL_SPI_MspInit+0xb8>)
 8001568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156a:	4a24      	ldr	r2, [pc, #144]	; (80015fc <HAL_SPI_MspInit+0xb8>)
 800156c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001570:	6593      	str	r3, [r2, #88]	; 0x58
 8001572:	4b22      	ldr	r3, [pc, #136]	; (80015fc <HAL_SPI_MspInit+0xb8>)
 8001574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800157e:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <HAL_SPI_MspInit+0xb8>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <HAL_SPI_MspInit+0xb8>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <HAL_SPI_MspInit+0xb8>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_SPI_MspInit+0xb8>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	4a18      	ldr	r2, [pc, #96]	; (80015fc <HAL_SPI_MspInit+0xb8>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a2:	4b16      	ldr	r3, [pc, #88]	; (80015fc <HAL_SPI_MspInit+0xb8>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015ae:	2308      	movs	r3, #8
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015be:	2305      	movs	r3, #5
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	480d      	ldr	r0, [pc, #52]	; (8001600 <HAL_SPI_MspInit+0xbc>)
 80015ca:	f000 fb89 	bl	8001ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015dc:	2303      	movs	r3, #3
 80015de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015e0:	2305      	movs	r3, #5
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	4806      	ldr	r0, [pc, #24]	; (8001604 <HAL_SPI_MspInit+0xc0>)
 80015ec:	f000 fb78 	bl	8001ce0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80015f0:	bf00      	nop
 80015f2:	3728      	adds	r7, #40	; 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40003800 	.word	0x40003800
 80015fc:	40021000 	.word	0x40021000
 8001600:	48000800 	.word	0x48000800
 8001604:	48000400 	.word	0x48000400

08001608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_MspInit+0x44>)
 8001610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001612:	4a0e      	ldr	r2, [pc, #56]	; (800164c <HAL_MspInit+0x44>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6613      	str	r3, [r2, #96]	; 0x60
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_MspInit+0x44>)
 800161c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_MspInit+0x44>)
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	4a08      	ldr	r2, [pc, #32]	; (800164c <HAL_MspInit+0x44>)
 800162c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001630:	6593      	str	r3, [r2, #88]	; 0x58
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_MspInit+0x44>)
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <NMI_Handler+0x4>

08001656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <MemManage_Handler+0x4>

08001662 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <BusFault_Handler+0x4>

08001668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <UsageFault_Handler+0x4>

0800166e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169c:	f000 f9ee 	bl	8001a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <RTC_WKUP_IRQHandler+0x10>)
 80016aa:	f003 f8b9 	bl	8004820 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000024c 	.word	0x2000024c

080016b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return 1;
 80016bc:	2301      	movs	r3, #1
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <_kill>:

int _kill(int pid, int sig)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016d2:	f003 fec3 	bl	800545c <__errno>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2216      	movs	r2, #22
 80016da:	601a      	str	r2, [r3, #0]
  return -1;
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <_exit>:

void _exit (int status)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ffe7 	bl	80016c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016fa:	e7fe      	b.n	80016fa <_exit+0x12>

080016fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	e00a      	b.n	8001724 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800170e:	f3af 8000 	nop.w
 8001712:	4601      	mov	r1, r0
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	60ba      	str	r2, [r7, #8]
 800171a:	b2ca      	uxtb	r2, r1
 800171c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3301      	adds	r3, #1
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	429a      	cmp	r2, r3
 800172a:	dbf0      	blt.n	800170e <_read+0x12>
  }

  return len;
 800172c:	687b      	ldr	r3, [r7, #4]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b086      	sub	sp, #24
 800173a:	af00      	add	r7, sp, #0
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	e009      	b.n	800175c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	60ba      	str	r2, [r7, #8]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fd47 	bl	80011e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	3301      	adds	r3, #1
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	429a      	cmp	r2, r3
 8001762:	dbf1      	blt.n	8001748 <_write+0x12>
  }
  return len;
 8001764:	687b      	ldr	r3, [r7, #4]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <_close>:

int _close(int file)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001796:	605a      	str	r2, [r3, #4]
  return 0;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <_isatty>:

int _isatty(int file)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ae:	2301      	movs	r3, #1
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e0:	4a14      	ldr	r2, [pc, #80]	; (8001834 <_sbrk+0x5c>)
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <_sbrk+0x60>)
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <_sbrk+0x64>)
 80017f6:	4a12      	ldr	r2, [pc, #72]	; (8001840 <_sbrk+0x68>)
 80017f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <_sbrk+0x64>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	429a      	cmp	r2, r3
 8001806:	d207      	bcs.n	8001818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001808:	f003 fe28 	bl	800545c <__errno>
 800180c:	4603      	mov	r3, r0
 800180e:	220c      	movs	r2, #12
 8001810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001816:	e009      	b.n	800182c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181e:	4b07      	ldr	r3, [pc, #28]	; (800183c <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	4a05      	ldr	r2, [pc, #20]	; (800183c <_sbrk+0x64>)
 8001828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800182a:	68fb      	ldr	r3, [r7, #12]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20018000 	.word	0x20018000
 8001838:	00000400 	.word	0x00000400
 800183c:	200002d4 	.word	0x200002d4
 8001840:	20000370 	.word	0x20000370

08001844 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <SystemInit+0x20>)
 800184a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <SystemInit+0x20>)
 8001850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800186c:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <MX_USART2_UART_Init+0x58>)
 800186e:	4a15      	ldr	r2, [pc, #84]	; (80018c4 <MX_USART2_UART_Init+0x5c>)
 8001870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001872:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <MX_USART2_UART_Init+0x58>)
 8001874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <MX_USART2_UART_Init+0x58>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <MX_USART2_UART_Init+0x58>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <MX_USART2_UART_Init+0x58>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <MX_USART2_UART_Init+0x58>)
 800188e:	220c      	movs	r2, #12
 8001890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <MX_USART2_UART_Init+0x58>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <MX_USART2_UART_Init+0x58>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <MX_USART2_UART_Init+0x58>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <MX_USART2_UART_Init+0x58>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018aa:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_USART2_UART_Init+0x58>)
 80018ac:	f003 f88b 	bl	80049c6 <HAL_UART_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018b6:	f7ff fd95 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200002d8 	.word	0x200002d8
 80018c4:	40004400 	.word	0x40004400

080018c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b0ac      	sub	sp, #176	; 0xb0
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2288      	movs	r2, #136	; 0x88
 80018e6:	2100      	movs	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f003 fde1 	bl	80054b0 <memset>
  if(uartHandle->Instance==USART2)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a21      	ldr	r2, [pc, #132]	; (8001978 <HAL_UART_MspInit+0xb0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d13b      	bne.n	8001970 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018f8:	2302      	movs	r3, #2
 80018fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018fc:	2300      	movs	r3, #0
 80018fe:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4618      	mov	r0, r3
 8001906:	f002 f855 	bl	80039b4 <HAL_RCCEx_PeriphCLKConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001910:	f7ff fd68 	bl	80013e4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <HAL_UART_MspInit+0xb4>)
 8001916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001918:	4a18      	ldr	r2, [pc, #96]	; (800197c <HAL_UART_MspInit+0xb4>)
 800191a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800191e:	6593      	str	r3, [r2, #88]	; 0x58
 8001920:	4b16      	ldr	r3, [pc, #88]	; (800197c <HAL_UART_MspInit+0xb4>)
 8001922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <HAL_UART_MspInit+0xb4>)
 800192e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001930:	4a12      	ldr	r2, [pc, #72]	; (800197c <HAL_UART_MspInit+0xb4>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <HAL_UART_MspInit+0xb4>)
 800193a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001944:	230c      	movs	r3, #12
 8001946:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001956:	2303      	movs	r3, #3
 8001958:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800195c:	2307      	movs	r3, #7
 800195e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001966:	4619      	mov	r1, r3
 8001968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196c:	f000 f9b8 	bl	8001ce0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001970:	bf00      	nop
 8001972:	37b0      	adds	r7, #176	; 0xb0
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40004400 	.word	0x40004400
 800197c:	40021000 	.word	0x40021000

08001980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001984:	f7ff ff5e 	bl	8001844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001988:	480c      	ldr	r0, [pc, #48]	; (80019bc <LoopForever+0x6>)
  ldr r1, =_edata
 800198a:	490d      	ldr	r1, [pc, #52]	; (80019c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800198c:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <LoopForever+0xe>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001990:	e002      	b.n	8001998 <LoopCopyDataInit>

08001992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001996:	3304      	adds	r3, #4

08001998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800199c:	d3f9      	bcc.n	8001992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019a0:	4c0a      	ldr	r4, [pc, #40]	; (80019cc <LoopForever+0x16>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a4:	e001      	b.n	80019aa <LoopFillZerobss>

080019a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a8:	3204      	adds	r2, #4

080019aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ac:	d3fb      	bcc.n	80019a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ae:	f003 fd5b 	bl	8005468 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019b2:	f7ff fc2f 	bl	8001214 <main>

080019b6 <LoopForever>:

LoopForever:
    b LoopForever
 80019b6:	e7fe      	b.n	80019b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80019c4:	080084cc 	.word	0x080084cc
  ldr r2, =_sbss
 80019c8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80019cc:	20000370 	.word	0x20000370

080019d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC1_2_IRQHandler>

080019d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019dc:	2003      	movs	r0, #3
 80019de:	f000 f93d 	bl	8001c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019e2:	2001      	movs	r0, #1
 80019e4:	f000 f80e 	bl	8001a04 <HAL_InitTick>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	71fb      	strb	r3, [r7, #7]
 80019f2:	e001      	b.n	80019f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019f4:	f7ff fe08 	bl	8001608 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019f8:	79fb      	ldrb	r3, [r7, #7]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a10:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <HAL_InitTick+0x6c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d023      	beq.n	8001a60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <HAL_InitTick+0x70>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <HAL_InitTick+0x6c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 f949 	bl	8001cc6 <HAL_SYSTICK_Config>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10f      	bne.n	8001a5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b0f      	cmp	r3, #15
 8001a3e:	d809      	bhi.n	8001a54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a40:	2200      	movs	r2, #0
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a48:	f000 f913 	bl	8001c72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_InitTick+0x74>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e007      	b.n	8001a64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	e004      	b.n	8001a64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
 8001a5e:	e001      	b.n	8001a64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000008 	.word	0x20000008
 8001a74:	20000000 	.word	0x20000000
 8001a78:	20000004 	.word	0x20000004

08001a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x20>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	2000035c 	.word	0x2000035c

08001aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_GetTick+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	2000035c 	.word	0x2000035c

08001abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aee:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	60d3      	str	r3, [r2, #12]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b08:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <__NVIC_GetPriorityGrouping+0x18>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	f003 0307 	and.w	r3, r3, #7
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	db0b      	blt.n	8001b4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	f003 021f 	and.w	r2, r3, #31
 8001b38:	4907      	ldr	r1, [pc, #28]	; (8001b58 <__NVIC_EnableIRQ+0x38>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	095b      	lsrs	r3, r3, #5
 8001b40:	2001      	movs	r0, #1
 8001b42:	fa00 f202 	lsl.w	r2, r0, r2
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000e100 	.word	0xe000e100

08001b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	6039      	str	r1, [r7, #0]
 8001b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	db0a      	blt.n	8001b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	490c      	ldr	r1, [pc, #48]	; (8001ba8 <__NVIC_SetPriority+0x4c>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	0112      	lsls	r2, r2, #4
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	440b      	add	r3, r1
 8001b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b84:	e00a      	b.n	8001b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4908      	ldr	r1, [pc, #32]	; (8001bac <__NVIC_SetPriority+0x50>)
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	3b04      	subs	r3, #4
 8001b94:	0112      	lsls	r2, r2, #4
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	440b      	add	r3, r1
 8001b9a:	761a      	strb	r2, [r3, #24]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000e100 	.word	0xe000e100
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f1c3 0307 	rsb	r3, r3, #7
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	bf28      	it	cs
 8001bce:	2304      	movcs	r3, #4
 8001bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d902      	bls.n	8001be0 <NVIC_EncodePriority+0x30>
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3b03      	subs	r3, #3
 8001bde:	e000      	b.n	8001be2 <NVIC_EncodePriority+0x32>
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	43d9      	mvns	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	4313      	orrs	r3, r2
         );
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3724      	adds	r7, #36	; 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c28:	d301      	bcc.n	8001c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00f      	b.n	8001c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <SysTick_Config+0x40>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c36:	210f      	movs	r1, #15
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c3c:	f7ff ff8e 	bl	8001b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <SysTick_Config+0x40>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c46:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <SysTick_Config+0x40>)
 8001c48:	2207      	movs	r2, #7
 8001c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	e000e010 	.word	0xe000e010

08001c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ff29 	bl	8001abc <__NVIC_SetPriorityGrouping>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	4603      	mov	r3, r0
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
 8001c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c84:	f7ff ff3e 	bl	8001b04 <__NVIC_GetPriorityGrouping>
 8001c88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	6978      	ldr	r0, [r7, #20]
 8001c90:	f7ff ff8e 	bl	8001bb0 <NVIC_EncodePriority>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff5d 	bl	8001b5c <__NVIC_SetPriority>
}
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff31 	bl	8001b20 <__NVIC_EnableIRQ>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ffa2 	bl	8001c18 <SysTick_Config>
 8001cd4:	4603      	mov	r3, r0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cee:	e17f      	b.n	8001ff0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 8171 	beq.w	8001fea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d005      	beq.n	8001d20 <HAL_GPIO_Init+0x40>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d130      	bne.n	8001d82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d56:	2201      	movs	r2, #1
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	091b      	lsrs	r3, r3, #4
 8001d6c:	f003 0201 	and.w	r2, r3, #1
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d118      	bne.n	8001dc0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d94:	2201      	movs	r2, #1
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	08db      	lsrs	r3, r3, #3
 8001daa:	f003 0201 	and.w	r2, r3, #1
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d017      	beq.n	8001dfc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d123      	bne.n	8001e50 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	08da      	lsrs	r2, r3, #3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3208      	adds	r2, #8
 8001e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e14:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	220f      	movs	r2, #15
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	08da      	lsrs	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3208      	adds	r2, #8
 8001e4a:	6939      	ldr	r1, [r7, #16]
 8001e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0203 	and.w	r2, r3, #3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80ac 	beq.w	8001fea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e92:	4b5f      	ldr	r3, [pc, #380]	; (8002010 <HAL_GPIO_Init+0x330>)
 8001e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e96:	4a5e      	ldr	r2, [pc, #376]	; (8002010 <HAL_GPIO_Init+0x330>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e9e:	4b5c      	ldr	r3, [pc, #368]	; (8002010 <HAL_GPIO_Init+0x330>)
 8001ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001eaa:	4a5a      	ldr	r2, [pc, #360]	; (8002014 <HAL_GPIO_Init+0x334>)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ed4:	d025      	beq.n	8001f22 <HAL_GPIO_Init+0x242>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4f      	ldr	r2, [pc, #316]	; (8002018 <HAL_GPIO_Init+0x338>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d01f      	beq.n	8001f1e <HAL_GPIO_Init+0x23e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a4e      	ldr	r2, [pc, #312]	; (800201c <HAL_GPIO_Init+0x33c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d019      	beq.n	8001f1a <HAL_GPIO_Init+0x23a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a4d      	ldr	r2, [pc, #308]	; (8002020 <HAL_GPIO_Init+0x340>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_GPIO_Init+0x236>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4c      	ldr	r2, [pc, #304]	; (8002024 <HAL_GPIO_Init+0x344>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00d      	beq.n	8001f12 <HAL_GPIO_Init+0x232>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4b      	ldr	r2, [pc, #300]	; (8002028 <HAL_GPIO_Init+0x348>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d007      	beq.n	8001f0e <HAL_GPIO_Init+0x22e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4a      	ldr	r2, [pc, #296]	; (800202c <HAL_GPIO_Init+0x34c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d101      	bne.n	8001f0a <HAL_GPIO_Init+0x22a>
 8001f06:	2306      	movs	r3, #6
 8001f08:	e00c      	b.n	8001f24 <HAL_GPIO_Init+0x244>
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	e00a      	b.n	8001f24 <HAL_GPIO_Init+0x244>
 8001f0e:	2305      	movs	r3, #5
 8001f10:	e008      	b.n	8001f24 <HAL_GPIO_Init+0x244>
 8001f12:	2304      	movs	r3, #4
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x244>
 8001f16:	2303      	movs	r3, #3
 8001f18:	e004      	b.n	8001f24 <HAL_GPIO_Init+0x244>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e002      	b.n	8001f24 <HAL_GPIO_Init+0x244>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_GPIO_Init+0x244>
 8001f22:	2300      	movs	r3, #0
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	f002 0203 	and.w	r2, r2, #3
 8001f2a:	0092      	lsls	r2, r2, #2
 8001f2c:	4093      	lsls	r3, r2
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f34:	4937      	ldr	r1, [pc, #220]	; (8002014 <HAL_GPIO_Init+0x334>)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f42:	4b3b      	ldr	r3, [pc, #236]	; (8002030 <HAL_GPIO_Init+0x350>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f66:	4a32      	ldr	r2, [pc, #200]	; (8002030 <HAL_GPIO_Init+0x350>)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f6c:	4b30      	ldr	r3, [pc, #192]	; (8002030 <HAL_GPIO_Init+0x350>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f90:	4a27      	ldr	r2, [pc, #156]	; (8002030 <HAL_GPIO_Init+0x350>)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f96:	4b26      	ldr	r3, [pc, #152]	; (8002030 <HAL_GPIO_Init+0x350>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fba:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <HAL_GPIO_Init+0x350>)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_GPIO_Init+0x350>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fe4:	4a12      	ldr	r2, [pc, #72]	; (8002030 <HAL_GPIO_Init+0x350>)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3301      	adds	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f47f ae78 	bne.w	8001cf0 <HAL_GPIO_Init+0x10>
  }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	371c      	adds	r7, #28
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000
 8002014:	40010000 	.word	0x40010000
 8002018:	48000400 	.word	0x48000400
 800201c:	48000800 	.word	0x48000800
 8002020:	48000c00 	.word	0x48000c00
 8002024:	48001000 	.word	0x48001000
 8002028:	48001400 	.word	0x48001400
 800202c:	48001800 	.word	0x48001800
 8002030:	40010400 	.word	0x40010400

08002034 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e081      	b.n	800214a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d106      	bne.n	8002060 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7fe ff96 	bl	8000f8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2224      	movs	r2, #36	; 0x24
 8002064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002084:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002094:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d107      	bne.n	80020ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	e006      	b.n	80020bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d104      	bne.n	80020ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69d9      	ldr	r1, [r3, #28]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1a      	ldr	r2, [r3, #32]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2220      	movs	r2, #32
 8002136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af02      	add	r7, sp, #8
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	4608      	mov	r0, r1
 800215e:	4611      	mov	r1, r2
 8002160:	461a      	mov	r2, r3
 8002162:	4603      	mov	r3, r0
 8002164:	817b      	strh	r3, [r7, #10]
 8002166:	460b      	mov	r3, r1
 8002168:	813b      	strh	r3, [r7, #8]
 800216a:	4613      	mov	r3, r2
 800216c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b20      	cmp	r3, #32
 8002178:	f040 80f9 	bne.w	800236e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <HAL_I2C_Mem_Write+0x34>
 8002182:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002184:	2b00      	cmp	r3, #0
 8002186:	d105      	bne.n	8002194 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800218e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0ed      	b.n	8002370 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_I2C_Mem_Write+0x4e>
 800219e:	2302      	movs	r3, #2
 80021a0:	e0e6      	b.n	8002370 <HAL_I2C_Mem_Write+0x21c>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021aa:	f7ff fc7b 	bl	8001aa4 <HAL_GetTick>
 80021ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	2319      	movs	r3, #25
 80021b6:	2201      	movs	r2, #1
 80021b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 fac3 	bl	8002748 <I2C_WaitOnFlagUntilTimeout>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0d1      	b.n	8002370 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2221      	movs	r2, #33	; 0x21
 80021d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2240      	movs	r2, #64	; 0x40
 80021d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a3a      	ldr	r2, [r7, #32]
 80021e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021f4:	88f8      	ldrh	r0, [r7, #6]
 80021f6:	893a      	ldrh	r2, [r7, #8]
 80021f8:	8979      	ldrh	r1, [r7, #10]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	9301      	str	r3, [sp, #4]
 80021fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	4603      	mov	r3, r0
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 f9d3 	bl	80025b0 <I2C_RequestMemoryWrite>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0a9      	b.n	8002370 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002220:	b29b      	uxth	r3, r3
 8002222:	2bff      	cmp	r3, #255	; 0xff
 8002224:	d90e      	bls.n	8002244 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	22ff      	movs	r2, #255	; 0xff
 800222a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002230:	b2da      	uxtb	r2, r3
 8002232:	8979      	ldrh	r1, [r7, #10]
 8002234:	2300      	movs	r3, #0
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 fc2b 	bl	8002a98 <I2C_TransferConfig>
 8002242:	e00f      	b.n	8002264 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002248:	b29a      	uxth	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002252:	b2da      	uxtb	r2, r3
 8002254:	8979      	ldrh	r1, [r7, #10]
 8002256:	2300      	movs	r3, #0
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 fc1a 	bl	8002a98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 faad 	bl	80027c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e07b      	b.n	8002370 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	781a      	ldrb	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002292:	b29b      	uxth	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d034      	beq.n	800231c <HAL_I2C_Mem_Write+0x1c8>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d130      	bne.n	800231c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c0:	2200      	movs	r2, #0
 80022c2:	2180      	movs	r1, #128	; 0x80
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 fa3f 	bl	8002748 <I2C_WaitOnFlagUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e04d      	b.n	8002370 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2bff      	cmp	r3, #255	; 0xff
 80022dc:	d90e      	bls.n	80022fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	22ff      	movs	r2, #255	; 0xff
 80022e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	8979      	ldrh	r1, [r7, #10]
 80022ec:	2300      	movs	r3, #0
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 fbcf 	bl	8002a98 <I2C_TransferConfig>
 80022fa:	e00f      	b.n	800231c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230a:	b2da      	uxtb	r2, r3
 800230c:	8979      	ldrh	r1, [r7, #10]
 800230e:	2300      	movs	r3, #0
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fbbe 	bl	8002a98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002320:	b29b      	uxth	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d19e      	bne.n	8002264 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 fa8c 	bl	8002848 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e01a      	b.n	8002370 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2220      	movs	r2, #32
 8002340:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6859      	ldr	r1, [r3, #4]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_I2C_Mem_Write+0x224>)
 800234e:	400b      	ands	r3, r1
 8002350:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	e000      	b.n	8002370 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800236e:	2302      	movs	r3, #2
  }
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	fe00e800 	.word	0xfe00e800

0800237c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	4608      	mov	r0, r1
 8002386:	4611      	mov	r1, r2
 8002388:	461a      	mov	r2, r3
 800238a:	4603      	mov	r3, r0
 800238c:	817b      	strh	r3, [r7, #10]
 800238e:	460b      	mov	r3, r1
 8002390:	813b      	strh	r3, [r7, #8]
 8002392:	4613      	mov	r3, r2
 8002394:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b20      	cmp	r3, #32
 80023a0:	f040 80fd 	bne.w	800259e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <HAL_I2C_Mem_Read+0x34>
 80023aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d105      	bne.n	80023bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0f1      	b.n	80025a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_I2C_Mem_Read+0x4e>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e0ea      	b.n	80025a0 <HAL_I2C_Mem_Read+0x224>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023d2:	f7ff fb67 	bl	8001aa4 <HAL_GetTick>
 80023d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2319      	movs	r3, #25
 80023de:	2201      	movs	r2, #1
 80023e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f9af 	bl	8002748 <I2C_WaitOnFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0d5      	b.n	80025a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2222      	movs	r2, #34	; 0x22
 80023f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2240      	movs	r2, #64	; 0x40
 8002400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a3a      	ldr	r2, [r7, #32]
 800240e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002414:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800241c:	88f8      	ldrh	r0, [r7, #6]
 800241e:	893a      	ldrh	r2, [r7, #8]
 8002420:	8979      	ldrh	r1, [r7, #10]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	4603      	mov	r3, r0
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f913 	bl	8002658 <I2C_RequestMemoryRead>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0ad      	b.n	80025a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002448:	b29b      	uxth	r3, r3
 800244a:	2bff      	cmp	r3, #255	; 0xff
 800244c:	d90e      	bls.n	800246c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	22ff      	movs	r2, #255	; 0xff
 8002452:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002458:	b2da      	uxtb	r2, r3
 800245a:	8979      	ldrh	r1, [r7, #10]
 800245c:	4b52      	ldr	r3, [pc, #328]	; (80025a8 <HAL_I2C_Mem_Read+0x22c>)
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 fb17 	bl	8002a98 <I2C_TransferConfig>
 800246a:	e00f      	b.n	800248c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247a:	b2da      	uxtb	r2, r3
 800247c:	8979      	ldrh	r1, [r7, #10]
 800247e:	4b4a      	ldr	r3, [pc, #296]	; (80025a8 <HAL_I2C_Mem_Read+0x22c>)
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 fb06 	bl	8002a98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002492:	2200      	movs	r2, #0
 8002494:	2104      	movs	r1, #4
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 f956 	bl	8002748 <I2C_WaitOnFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e07c      	b.n	80025a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d034      	beq.n	800254c <HAL_I2C_Mem_Read+0x1d0>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d130      	bne.n	800254c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f0:	2200      	movs	r2, #0
 80024f2:	2180      	movs	r1, #128	; 0x80
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 f927 	bl	8002748 <I2C_WaitOnFlagUntilTimeout>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e04d      	b.n	80025a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002508:	b29b      	uxth	r3, r3
 800250a:	2bff      	cmp	r3, #255	; 0xff
 800250c:	d90e      	bls.n	800252c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	22ff      	movs	r2, #255	; 0xff
 8002512:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002518:	b2da      	uxtb	r2, r3
 800251a:	8979      	ldrh	r1, [r7, #10]
 800251c:	2300      	movs	r3, #0
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 fab7 	bl	8002a98 <I2C_TransferConfig>
 800252a:	e00f      	b.n	800254c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002530:	b29a      	uxth	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253a:	b2da      	uxtb	r2, r3
 800253c:	8979      	ldrh	r1, [r7, #10]
 800253e:	2300      	movs	r3, #0
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 faa6 	bl	8002a98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002550:	b29b      	uxth	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d19a      	bne.n	800248c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 f974 	bl	8002848 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e01a      	b.n	80025a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2220      	movs	r2, #32
 8002570:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6859      	ldr	r1, [r3, #4]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_I2C_Mem_Read+0x230>)
 800257e:	400b      	ands	r3, r1
 8002580:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	e000      	b.n	80025a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800259e:	2302      	movs	r3, #2
  }
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	80002400 	.word	0x80002400
 80025ac:	fe00e800 	.word	0xfe00e800

080025b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	4608      	mov	r0, r1
 80025ba:	4611      	mov	r1, r2
 80025bc:	461a      	mov	r2, r3
 80025be:	4603      	mov	r3, r0
 80025c0:	817b      	strh	r3, [r7, #10]
 80025c2:	460b      	mov	r3, r1
 80025c4:	813b      	strh	r3, [r7, #8]
 80025c6:	4613      	mov	r3, r2
 80025c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	8979      	ldrh	r1, [r7, #10]
 80025d0:	4b20      	ldr	r3, [pc, #128]	; (8002654 <I2C_RequestMemoryWrite+0xa4>)
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 fa5d 	bl	8002a98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	69b9      	ldr	r1, [r7, #24]
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 f8f0 	bl	80027c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e02c      	b.n	800264c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d105      	bne.n	8002604 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025f8:	893b      	ldrh	r3, [r7, #8]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	629a      	str	r2, [r3, #40]	; 0x28
 8002602:	e015      	b.n	8002630 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002604:	893b      	ldrh	r3, [r7, #8]
 8002606:	0a1b      	lsrs	r3, r3, #8
 8002608:	b29b      	uxth	r3, r3
 800260a:	b2da      	uxtb	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	69b9      	ldr	r1, [r7, #24]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f8d6 	bl	80027c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e012      	b.n	800264c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002626:	893b      	ldrh	r3, [r7, #8]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2200      	movs	r2, #0
 8002638:	2180      	movs	r1, #128	; 0x80
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 f884 	bl	8002748 <I2C_WaitOnFlagUntilTimeout>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	80002000 	.word	0x80002000

08002658 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af02      	add	r7, sp, #8
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	4608      	mov	r0, r1
 8002662:	4611      	mov	r1, r2
 8002664:	461a      	mov	r2, r3
 8002666:	4603      	mov	r3, r0
 8002668:	817b      	strh	r3, [r7, #10]
 800266a:	460b      	mov	r3, r1
 800266c:	813b      	strh	r3, [r7, #8]
 800266e:	4613      	mov	r3, r2
 8002670:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	b2da      	uxtb	r2, r3
 8002676:	8979      	ldrh	r1, [r7, #10]
 8002678:	4b20      	ldr	r3, [pc, #128]	; (80026fc <I2C_RequestMemoryRead+0xa4>)
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	2300      	movs	r3, #0
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fa0a 	bl	8002a98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	69b9      	ldr	r1, [r7, #24]
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f89d 	bl	80027c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e02c      	b.n	80026f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d105      	bne.n	80026aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800269e:	893b      	ldrh	r3, [r7, #8]
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	629a      	str	r2, [r3, #40]	; 0x28
 80026a8:	e015      	b.n	80026d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80026aa:	893b      	ldrh	r3, [r7, #8]
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	69b9      	ldr	r1, [r7, #24]
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f883 	bl	80027c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e012      	b.n	80026f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026cc:	893b      	ldrh	r3, [r7, #8]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	2200      	movs	r2, #0
 80026de:	2140      	movs	r1, #64	; 0x40
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 f831 	bl	8002748 <I2C_WaitOnFlagUntilTimeout>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e000      	b.n	80026f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	80002000 	.word	0x80002000

08002700 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b02      	cmp	r3, #2
 8002714:	d103      	bne.n	800271e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2200      	movs	r2, #0
 800271c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b01      	cmp	r3, #1
 800272a:	d007      	beq.n	800273c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	619a      	str	r2, [r3, #24]
  }
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	4613      	mov	r3, r2
 8002756:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002758:	e022      	b.n	80027a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002760:	d01e      	beq.n	80027a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002762:	f7ff f99f 	bl	8001aa4 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d302      	bcc.n	8002778 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d113      	bne.n	80027a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277c:	f043 0220 	orr.w	r2, r3, #32
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e00f      	b.n	80027c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699a      	ldr	r2, [r3, #24]
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	4013      	ands	r3, r2
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	bf0c      	ite	eq
 80027b0:	2301      	moveq	r3, #1
 80027b2:	2300      	movne	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	461a      	mov	r2, r3
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d0cd      	beq.n	800275a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027d4:	e02c      	b.n	8002830 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f870 	bl	80028c0 <I2C_IsErrorOccurred>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e02a      	b.n	8002840 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027f0:	d01e      	beq.n	8002830 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f2:	f7ff f957 	bl	8001aa4 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d302      	bcc.n	8002808 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d113      	bne.n	8002830 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280c:	f043 0220 	orr.w	r2, r3, #32
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e007      	b.n	8002840 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b02      	cmp	r3, #2
 800283c:	d1cb      	bne.n	80027d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002854:	e028      	b.n	80028a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f830 	bl	80028c0 <I2C_IsErrorOccurred>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e026      	b.n	80028b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800286a:	f7ff f91b 	bl	8001aa4 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	429a      	cmp	r2, r3
 8002878:	d302      	bcc.n	8002880 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d113      	bne.n	80028a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002884:	f043 0220 	orr.w	r2, r3, #32
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e007      	b.n	80028b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	f003 0320 	and.w	r3, r3, #32
 80028b2:	2b20      	cmp	r3, #32
 80028b4:	d1cf      	bne.n	8002856 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	; 0x28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	f003 0310 	and.w	r3, r3, #16
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d075      	beq.n	80029d8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2210      	movs	r2, #16
 80028f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028f4:	e056      	b.n	80029a4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028fc:	d052      	beq.n	80029a4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028fe:	f7ff f8d1 	bl	8001aa4 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	429a      	cmp	r2, r3
 800290c:	d302      	bcc.n	8002914 <I2C_IsErrorOccurred+0x54>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d147      	bne.n	80029a4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002926:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002936:	d12e      	bne.n	8002996 <I2C_IsErrorOccurred+0xd6>
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800293e:	d02a      	beq.n	8002996 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002940:	7cfb      	ldrb	r3, [r7, #19]
 8002942:	2b20      	cmp	r3, #32
 8002944:	d027      	beq.n	8002996 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002954:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002956:	f7ff f8a5 	bl	8001aa4 <HAL_GetTick>
 800295a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800295c:	e01b      	b.n	8002996 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800295e:	f7ff f8a1 	bl	8001aa4 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b19      	cmp	r3, #25
 800296a:	d914      	bls.n	8002996 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002970:	f043 0220 	orr.w	r2, r3, #32
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	f003 0320 	and.w	r3, r3, #32
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d1dc      	bne.n	800295e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d003      	beq.n	80029ba <I2C_IsErrorOccurred+0xfa>
 80029b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d09d      	beq.n	80028f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d103      	bne.n	80029ca <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2220      	movs	r2, #32
 80029c8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	f043 0304 	orr.w	r3, r3, #4
 80029d0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00b      	beq.n	8002a02 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00b      	beq.n	8002a24 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	f043 0308 	orr.w	r3, r3, #8
 8002a12:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00b      	beq.n	8002a46 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	f043 0302 	orr.w	r3, r3, #2
 8002a34:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002a46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d01c      	beq.n	8002a88 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f7ff fe56 	bl	8002700 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6859      	ldr	r1, [r3, #4]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <I2C_IsErrorOccurred+0x1d4>)
 8002a60:	400b      	ands	r3, r1
 8002a62:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3728      	adds	r7, #40	; 0x28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	fe00e800 	.word	0xfe00e800

08002a98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	607b      	str	r3, [r7, #4]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	817b      	strh	r3, [r7, #10]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aaa:	897b      	ldrh	r3, [r7, #10]
 8002aac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ab0:	7a7b      	ldrb	r3, [r7, #9]
 8002ab2:	041b      	lsls	r3, r3, #16
 8002ab4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ab8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ac6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	0d5b      	lsrs	r3, r3, #21
 8002ad2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ad6:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <I2C_TransferConfig+0x60>)
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	43db      	mvns	r3, r3
 8002adc:	ea02 0103 	and.w	r1, r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002aea:	bf00      	nop
 8002aec:	371c      	adds	r7, #28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	03ff63ff 	.word	0x03ff63ff

08002afc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b20      	cmp	r3, #32
 8002b10:	d138      	bne.n	8002b84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e032      	b.n	8002b86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2224      	movs	r2, #36	; 0x24
 8002b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6819      	ldr	r1, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	e000      	b.n	8002b86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b84:	2302      	movs	r3, #2
  }
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b085      	sub	sp, #20
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	d139      	bne.n	8002c1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e033      	b.n	8002c1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2224      	movs	r2, #36	; 0x24
 8002bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0201 	bic.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002be4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	021b      	lsls	r3, r3, #8
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	e000      	b.n	8002c1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c1c:	2302      	movs	r3, #2
  }
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3a:	6013      	str	r3, [r2, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40007000 	.word	0x40007000

08002c4c <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	401a      	ands	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	4908      	ldr	r1, [pc, #32]	; (8002c88 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	4904      	ldr	r1, [pc, #16]	; (8002c88 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	608b      	str	r3, [r1, #8]


}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	40007000 	.word	0x40007000

08002c8c <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8002c94:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <HAL_PWR_DisableWakeUpPin+0x28>)
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	4904      	ldr	r1, [pc, #16]	; (8002cb4 <HAL_PWR_DisableWakeUpPin+0x28>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	608b      	str	r3, [r1, #8]
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40007000 	.word	0x40007000

08002cb8 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f023 0307 	bic.w	r3, r3, #7
 8002cc4:	4a07      	ldr	r2, [pc, #28]	; (8002ce4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002cc6:	f043 0303 	orr.w	r3, r3, #3
 8002cca:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	4a05      	ldr	r2, [pc, #20]	; (8002ce8 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8002cd2:	f043 0304 	orr.w	r3, r3, #4
 8002cd6:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8002cd8:	bf30      	wfi
}
 8002cda:	bf00      	nop
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	40007000 	.word	0x40007000
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002cf0:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <HAL_PWREx_GetVoltageRange+0x18>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40007000 	.word	0x40007000

08002d08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d16:	d130      	bne.n	8002d7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d18:	4b23      	ldr	r3, [pc, #140]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d24:	d038      	beq.n	8002d98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d26:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d2e:	4a1e      	ldr	r2, [pc, #120]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d36:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2232      	movs	r2, #50	; 0x32
 8002d3c:	fb02 f303 	mul.w	r3, r2, r3
 8002d40:	4a1b      	ldr	r2, [pc, #108]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d42:	fba2 2303 	umull	r2, r3, r2, r3
 8002d46:	0c9b      	lsrs	r3, r3, #18
 8002d48:	3301      	adds	r3, #1
 8002d4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d4c:	e002      	b.n	8002d54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	3b01      	subs	r3, #1
 8002d52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d54:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d60:	d102      	bne.n	8002d68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f2      	bne.n	8002d4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d68:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d74:	d110      	bne.n	8002d98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e00f      	b.n	8002d9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d7a:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d86:	d007      	beq.n	8002d98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d88:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d90:	4a05      	ldr	r2, [pc, #20]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40007000 	.word	0x40007000
 8002dac:	20000000 	.word	0x20000000
 8002db0:	431bde83 	.word	0x431bde83

08002db4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e3ca      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dc6:	4b97      	ldr	r3, [pc, #604]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dd0:	4b94      	ldr	r3, [pc, #592]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 80e4 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <HAL_RCC_OscConfig+0x4a>
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	2b0c      	cmp	r3, #12
 8002df2:	f040 808b 	bne.w	8002f0c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	f040 8087 	bne.w	8002f0c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dfe:	4b89      	ldr	r3, [pc, #548]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <HAL_RCC_OscConfig+0x62>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e3a2      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1a      	ldr	r2, [r3, #32]
 8002e1a:	4b82      	ldr	r3, [pc, #520]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d004      	beq.n	8002e30 <HAL_RCC_OscConfig+0x7c>
 8002e26:	4b7f      	ldr	r3, [pc, #508]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e2e:	e005      	b.n	8002e3c <HAL_RCC_OscConfig+0x88>
 8002e30:	4b7c      	ldr	r3, [pc, #496]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e36:	091b      	lsrs	r3, r3, #4
 8002e38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d223      	bcs.n	8002e88 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 fd55 	bl	80038f4 <RCC_SetFlashLatencyFromMSIRange>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e383      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e54:	4b73      	ldr	r3, [pc, #460]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a72      	ldr	r2, [pc, #456]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002e5a:	f043 0308 	orr.w	r3, r3, #8
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	4b70      	ldr	r3, [pc, #448]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	496d      	ldr	r1, [pc, #436]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e72:	4b6c      	ldr	r3, [pc, #432]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	4968      	ldr	r1, [pc, #416]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	604b      	str	r3, [r1, #4]
 8002e86:	e025      	b.n	8002ed4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e88:	4b66      	ldr	r3, [pc, #408]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a65      	ldr	r2, [pc, #404]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002e8e:	f043 0308 	orr.w	r3, r3, #8
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	4b63      	ldr	r3, [pc, #396]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	4960      	ldr	r1, [pc, #384]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ea6:	4b5f      	ldr	r3, [pc, #380]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	495b      	ldr	r1, [pc, #364]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f000 fd15 	bl	80038f4 <RCC_SetFlashLatencyFromMSIRange>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e343      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ed4:	f000 fc4a 	bl	800376c <HAL_RCC_GetSysClockFreq>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b52      	ldr	r3, [pc, #328]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	091b      	lsrs	r3, r3, #4
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	4950      	ldr	r1, [pc, #320]	; (8003028 <HAL_RCC_OscConfig+0x274>)
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef0:	4a4e      	ldr	r2, [pc, #312]	; (800302c <HAL_RCC_OscConfig+0x278>)
 8002ef2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ef4:	4b4e      	ldr	r3, [pc, #312]	; (8003030 <HAL_RCC_OscConfig+0x27c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fe fd83 	bl	8001a04 <HAL_InitTick>
 8002efe:	4603      	mov	r3, r0
 8002f00:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d052      	beq.n	8002fae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	e327      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d032      	beq.n	8002f7a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f14:	4b43      	ldr	r3, [pc, #268]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a42      	ldr	r2, [pc, #264]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f20:	f7fe fdc0 	bl	8001aa4 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f28:	f7fe fdbc 	bl	8001aa4 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e310      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f3a:	4b3a      	ldr	r3, [pc, #232]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f46:	4b37      	ldr	r3, [pc, #220]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a36      	ldr	r2, [pc, #216]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002f4c:	f043 0308 	orr.w	r3, r3, #8
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	4b34      	ldr	r3, [pc, #208]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	4931      	ldr	r1, [pc, #196]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f64:	4b2f      	ldr	r3, [pc, #188]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	021b      	lsls	r3, r3, #8
 8002f72:	492c      	ldr	r1, [pc, #176]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]
 8002f78:	e01a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f7a:	4b2a      	ldr	r3, [pc, #168]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a29      	ldr	r2, [pc, #164]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002f80:	f023 0301 	bic.w	r3, r3, #1
 8002f84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f86:	f7fe fd8d 	bl	8001aa4 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f8e:	f7fe fd89 	bl	8001aa4 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e2dd      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fa0:	4b20      	ldr	r3, [pc, #128]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f0      	bne.n	8002f8e <HAL_RCC_OscConfig+0x1da>
 8002fac:	e000      	b.n	8002fb0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d074      	beq.n	80030a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d005      	beq.n	8002fce <HAL_RCC_OscConfig+0x21a>
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	2b0c      	cmp	r3, #12
 8002fc6:	d10e      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d10b      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fce:	4b15      	ldr	r3, [pc, #84]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d064      	beq.n	80030a4 <HAL_RCC_OscConfig+0x2f0>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d160      	bne.n	80030a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e2ba      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fee:	d106      	bne.n	8002ffe <HAL_RCC_OscConfig+0x24a>
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a0b      	ldr	r2, [pc, #44]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	e026      	b.n	800304c <HAL_RCC_OscConfig+0x298>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003006:	d115      	bne.n	8003034 <HAL_RCC_OscConfig+0x280>
 8003008:	4b06      	ldr	r3, [pc, #24]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a05      	ldr	r2, [pc, #20]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 800300e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	4b03      	ldr	r3, [pc, #12]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a02      	ldr	r2, [pc, #8]	; (8003024 <HAL_RCC_OscConfig+0x270>)
 800301a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	e014      	b.n	800304c <HAL_RCC_OscConfig+0x298>
 8003022:	bf00      	nop
 8003024:	40021000 	.word	0x40021000
 8003028:	0800809c 	.word	0x0800809c
 800302c:	20000000 	.word	0x20000000
 8003030:	20000004 	.word	0x20000004
 8003034:	4ba0      	ldr	r3, [pc, #640]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a9f      	ldr	r2, [pc, #636]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 800303a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	4b9d      	ldr	r3, [pc, #628]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a9c      	ldr	r2, [pc, #624]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 8003046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800304a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d013      	beq.n	800307c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fe fd26 	bl	8001aa4 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800305c:	f7fe fd22 	bl	8001aa4 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b64      	cmp	r3, #100	; 0x64
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e276      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800306e:	4b92      	ldr	r3, [pc, #584]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x2a8>
 800307a:	e014      	b.n	80030a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7fe fd12 	bl	8001aa4 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003084:	f7fe fd0e 	bl	8001aa4 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b64      	cmp	r3, #100	; 0x64
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e262      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003096:	4b88      	ldr	r3, [pc, #544]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x2d0>
 80030a2:	e000      	b.n	80030a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d060      	beq.n	8003174 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_OscConfig+0x310>
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	2b0c      	cmp	r3, #12
 80030bc:	d119      	bne.n	80030f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d116      	bne.n	80030f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030c4:	4b7c      	ldr	r3, [pc, #496]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_OscConfig+0x328>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e23f      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030dc:	4b76      	ldr	r3, [pc, #472]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	061b      	lsls	r3, r3, #24
 80030ea:	4973      	ldr	r1, [pc, #460]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030f0:	e040      	b.n	8003174 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d023      	beq.n	8003142 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030fa:	4b6f      	ldr	r3, [pc, #444]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a6e      	ldr	r2, [pc, #440]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 8003100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003106:	f7fe fccd 	bl	8001aa4 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800310e:	f7fe fcc9 	bl	8001aa4 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e21d      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003120:	4b65      	ldr	r3, [pc, #404]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f0      	beq.n	800310e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312c:	4b62      	ldr	r3, [pc, #392]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	061b      	lsls	r3, r3, #24
 800313a:	495f      	ldr	r1, [pc, #380]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 800313c:	4313      	orrs	r3, r2
 800313e:	604b      	str	r3, [r1, #4]
 8003140:	e018      	b.n	8003174 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003142:	4b5d      	ldr	r3, [pc, #372]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a5c      	ldr	r2, [pc, #368]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 8003148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800314c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314e:	f7fe fca9 	bl	8001aa4 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003156:	f7fe fca5 	bl	8001aa4 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e1f9      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003168:	4b53      	ldr	r3, [pc, #332]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f0      	bne.n	8003156 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b00      	cmp	r3, #0
 800317e:	d03c      	beq.n	80031fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01c      	beq.n	80031c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003188:	4b4b      	ldr	r3, [pc, #300]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 800318a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800318e:	4a4a      	ldr	r2, [pc, #296]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003198:	f7fe fc84 	bl	8001aa4 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a0:	f7fe fc80 	bl	8001aa4 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e1d4      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031b2:	4b41      	ldr	r3, [pc, #260]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 80031b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0ef      	beq.n	80031a0 <HAL_RCC_OscConfig+0x3ec>
 80031c0:	e01b      	b.n	80031fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c2:	4b3d      	ldr	r3, [pc, #244]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 80031c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c8:	4a3b      	ldr	r2, [pc, #236]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 80031ca:	f023 0301 	bic.w	r3, r3, #1
 80031ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d2:	f7fe fc67 	bl	8001aa4 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031da:	f7fe fc63 	bl	8001aa4 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e1b7      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031ec:	4b32      	ldr	r3, [pc, #200]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 80031ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1ef      	bne.n	80031da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 80a6 	beq.w	8003354 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003208:	2300      	movs	r3, #0
 800320a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800320c:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 800320e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10d      	bne.n	8003234 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003218:	4b27      	ldr	r3, [pc, #156]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 800321a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321c:	4a26      	ldr	r2, [pc, #152]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 800321e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003222:	6593      	str	r3, [r2, #88]	; 0x58
 8003224:	4b24      	ldr	r3, [pc, #144]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 8003226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003230:	2301      	movs	r3, #1
 8003232:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003234:	4b21      	ldr	r3, [pc, #132]	; (80032bc <HAL_RCC_OscConfig+0x508>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d118      	bne.n	8003272 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003240:	4b1e      	ldr	r3, [pc, #120]	; (80032bc <HAL_RCC_OscConfig+0x508>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1d      	ldr	r2, [pc, #116]	; (80032bc <HAL_RCC_OscConfig+0x508>)
 8003246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800324a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800324c:	f7fe fc2a 	bl	8001aa4 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003254:	f7fe fc26 	bl	8001aa4 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e17a      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003266:	4b15      	ldr	r3, [pc, #84]	; (80032bc <HAL_RCC_OscConfig+0x508>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f0      	beq.n	8003254 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d108      	bne.n	800328c <HAL_RCC_OscConfig+0x4d8>
 800327a:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 800327c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003280:	4a0d      	ldr	r2, [pc, #52]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800328a:	e029      	b.n	80032e0 <HAL_RCC_OscConfig+0x52c>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b05      	cmp	r3, #5
 8003292:	d115      	bne.n	80032c0 <HAL_RCC_OscConfig+0x50c>
 8003294:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329a:	4a07      	ldr	r2, [pc, #28]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 800329c:	f043 0304 	orr.w	r3, r3, #4
 80032a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032a4:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	4a03      	ldr	r2, [pc, #12]	; (80032b8 <HAL_RCC_OscConfig+0x504>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032b4:	e014      	b.n	80032e0 <HAL_RCC_OscConfig+0x52c>
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40007000 	.word	0x40007000
 80032c0:	4b9c      	ldr	r3, [pc, #624]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c6:	4a9b      	ldr	r2, [pc, #620]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 80032c8:	f023 0301 	bic.w	r3, r3, #1
 80032cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032d0:	4b98      	ldr	r3, [pc, #608]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d6:	4a97      	ldr	r2, [pc, #604]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 80032d8:	f023 0304 	bic.w	r3, r3, #4
 80032dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d016      	beq.n	8003316 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e8:	f7fe fbdc 	bl	8001aa4 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f0:	f7fe fbd8 	bl	8001aa4 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e12a      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003306:	4b8b      	ldr	r3, [pc, #556]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 8003308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0ed      	beq.n	80032f0 <HAL_RCC_OscConfig+0x53c>
 8003314:	e015      	b.n	8003342 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003316:	f7fe fbc5 	bl	8001aa4 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800331c:	e00a      	b.n	8003334 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331e:	f7fe fbc1 	bl	8001aa4 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	f241 3288 	movw	r2, #5000	; 0x1388
 800332c:	4293      	cmp	r3, r2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e113      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003334:	4b7f      	ldr	r3, [pc, #508]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1ed      	bne.n	800331e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003342:	7ffb      	ldrb	r3, [r7, #31]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d105      	bne.n	8003354 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003348:	4b7a      	ldr	r3, [pc, #488]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334c:	4a79      	ldr	r2, [pc, #484]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 800334e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003352:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80fe 	beq.w	800355a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	2b02      	cmp	r3, #2
 8003364:	f040 80d0 	bne.w	8003508 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003368:	4b72      	ldr	r3, [pc, #456]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f003 0203 	and.w	r2, r3, #3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	429a      	cmp	r2, r3
 800337a:	d130      	bne.n	80033de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	3b01      	subs	r3, #1
 8003388:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800338a:	429a      	cmp	r2, r3
 800338c:	d127      	bne.n	80033de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003398:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800339a:	429a      	cmp	r2, r3
 800339c:	d11f      	bne.n	80033de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033a8:	2a07      	cmp	r2, #7
 80033aa:	bf14      	ite	ne
 80033ac:	2201      	movne	r2, #1
 80033ae:	2200      	moveq	r2, #0
 80033b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d113      	bne.n	80033de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c0:	085b      	lsrs	r3, r3, #1
 80033c2:	3b01      	subs	r3, #1
 80033c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d109      	bne.n	80033de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	085b      	lsrs	r3, r3, #1
 80033d6:	3b01      	subs	r3, #1
 80033d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033da:	429a      	cmp	r2, r3
 80033dc:	d06e      	beq.n	80034bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	2b0c      	cmp	r3, #12
 80033e2:	d069      	beq.n	80034b8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033e4:	4b53      	ldr	r3, [pc, #332]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d105      	bne.n	80033fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033f0:	4b50      	ldr	r3, [pc, #320]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0ad      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003400:	4b4c      	ldr	r3, [pc, #304]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a4b      	ldr	r2, [pc, #300]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 8003406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800340a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800340c:	f7fe fb4a 	bl	8001aa4 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003414:	f7fe fb46 	bl	8001aa4 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e09a      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003426:	4b43      	ldr	r3, [pc, #268]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003432:	4b40      	ldr	r3, [pc, #256]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	4b40      	ldr	r3, [pc, #256]	; (8003538 <HAL_RCC_OscConfig+0x784>)
 8003438:	4013      	ands	r3, r2
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003442:	3a01      	subs	r2, #1
 8003444:	0112      	lsls	r2, r2, #4
 8003446:	4311      	orrs	r1, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800344c:	0212      	lsls	r2, r2, #8
 800344e:	4311      	orrs	r1, r2
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003454:	0852      	lsrs	r2, r2, #1
 8003456:	3a01      	subs	r2, #1
 8003458:	0552      	lsls	r2, r2, #21
 800345a:	4311      	orrs	r1, r2
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003460:	0852      	lsrs	r2, r2, #1
 8003462:	3a01      	subs	r2, #1
 8003464:	0652      	lsls	r2, r2, #25
 8003466:	4311      	orrs	r1, r2
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800346c:	0912      	lsrs	r2, r2, #4
 800346e:	0452      	lsls	r2, r2, #17
 8003470:	430a      	orrs	r2, r1
 8003472:	4930      	ldr	r1, [pc, #192]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 8003474:	4313      	orrs	r3, r2
 8003476:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003478:	4b2e      	ldr	r3, [pc, #184]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a2d      	ldr	r2, [pc, #180]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 800347e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003482:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003484:	4b2b      	ldr	r3, [pc, #172]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4a2a      	ldr	r2, [pc, #168]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 800348a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800348e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003490:	f7fe fb08 	bl	8001aa4 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003498:	f7fe fb04 	bl	8001aa4 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e058      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034aa:	4b22      	ldr	r3, [pc, #136]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034b6:	e050      	b.n	800355a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e04f      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034bc:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d148      	bne.n	800355a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034c8:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a19      	ldr	r2, [pc, #100]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 80034ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034d4:	4b17      	ldr	r3, [pc, #92]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4a16      	ldr	r2, [pc, #88]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 80034da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034e0:	f7fe fae0 	bl	8001aa4 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e8:	f7fe fadc 	bl	8001aa4 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e030      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034fa:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0x734>
 8003506:	e028      	b.n	800355a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	2b0c      	cmp	r3, #12
 800350c:	d023      	beq.n	8003556 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350e:	4b09      	ldr	r3, [pc, #36]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a08      	ldr	r2, [pc, #32]	; (8003534 <HAL_RCC_OscConfig+0x780>)
 8003514:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351a:	f7fe fac3 	bl	8001aa4 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003520:	e00c      	b.n	800353c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003522:	f7fe fabf 	bl	8001aa4 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d905      	bls.n	800353c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e013      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
 8003534:	40021000 	.word	0x40021000
 8003538:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800353c:	4b09      	ldr	r3, [pc, #36]	; (8003564 <HAL_RCC_OscConfig+0x7b0>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1ec      	bne.n	8003522 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <HAL_RCC_OscConfig+0x7b0>)
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	4905      	ldr	r1, [pc, #20]	; (8003564 <HAL_RCC_OscConfig+0x7b0>)
 800354e:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_RCC_OscConfig+0x7b4>)
 8003550:	4013      	ands	r3, r2
 8003552:	60cb      	str	r3, [r1, #12]
 8003554:	e001      	b.n	800355a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3720      	adds	r7, #32
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40021000 	.word	0x40021000
 8003568:	feeefffc 	.word	0xfeeefffc

0800356c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0e7      	b.n	8003750 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003580:	4b75      	ldr	r3, [pc, #468]	; (8003758 <HAL_RCC_ClockConfig+0x1ec>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d910      	bls.n	80035b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358e:	4b72      	ldr	r3, [pc, #456]	; (8003758 <HAL_RCC_ClockConfig+0x1ec>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f023 0207 	bic.w	r2, r3, #7
 8003596:	4970      	ldr	r1, [pc, #448]	; (8003758 <HAL_RCC_ClockConfig+0x1ec>)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	4313      	orrs	r3, r2
 800359c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800359e:	4b6e      	ldr	r3, [pc, #440]	; (8003758 <HAL_RCC_ClockConfig+0x1ec>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d001      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0cf      	b.n	8003750 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d010      	beq.n	80035de <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	4b66      	ldr	r3, [pc, #408]	; (800375c <HAL_RCC_ClockConfig+0x1f0>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d908      	bls.n	80035de <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035cc:	4b63      	ldr	r3, [pc, #396]	; (800375c <HAL_RCC_ClockConfig+0x1f0>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4960      	ldr	r1, [pc, #384]	; (800375c <HAL_RCC_ClockConfig+0x1f0>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d04c      	beq.n	8003684 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b03      	cmp	r3, #3
 80035f0:	d107      	bne.n	8003602 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035f2:	4b5a      	ldr	r3, [pc, #360]	; (800375c <HAL_RCC_ClockConfig+0x1f0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d121      	bne.n	8003642 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e0a6      	b.n	8003750 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d107      	bne.n	800361a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800360a:	4b54      	ldr	r3, [pc, #336]	; (800375c <HAL_RCC_ClockConfig+0x1f0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d115      	bne.n	8003642 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e09a      	b.n	8003750 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d107      	bne.n	8003632 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003622:	4b4e      	ldr	r3, [pc, #312]	; (800375c <HAL_RCC_ClockConfig+0x1f0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d109      	bne.n	8003642 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e08e      	b.n	8003750 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003632:	4b4a      	ldr	r3, [pc, #296]	; (800375c <HAL_RCC_ClockConfig+0x1f0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e086      	b.n	8003750 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003642:	4b46      	ldr	r3, [pc, #280]	; (800375c <HAL_RCC_ClockConfig+0x1f0>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f023 0203 	bic.w	r2, r3, #3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	4943      	ldr	r1, [pc, #268]	; (800375c <HAL_RCC_ClockConfig+0x1f0>)
 8003650:	4313      	orrs	r3, r2
 8003652:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003654:	f7fe fa26 	bl	8001aa4 <HAL_GetTick>
 8003658:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365a:	e00a      	b.n	8003672 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800365c:	f7fe fa22 	bl	8001aa4 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	; 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e06e      	b.n	8003750 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003672:	4b3a      	ldr	r3, [pc, #232]	; (800375c <HAL_RCC_ClockConfig+0x1f0>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 020c 	and.w	r2, r3, #12
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	429a      	cmp	r2, r3
 8003682:	d1eb      	bne.n	800365c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d010      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	4b31      	ldr	r3, [pc, #196]	; (800375c <HAL_RCC_ClockConfig+0x1f0>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800369c:	429a      	cmp	r2, r3
 800369e:	d208      	bcs.n	80036b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a0:	4b2e      	ldr	r3, [pc, #184]	; (800375c <HAL_RCC_ClockConfig+0x1f0>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	492b      	ldr	r1, [pc, #172]	; (800375c <HAL_RCC_ClockConfig+0x1f0>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036b2:	4b29      	ldr	r3, [pc, #164]	; (8003758 <HAL_RCC_ClockConfig+0x1ec>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d210      	bcs.n	80036e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c0:	4b25      	ldr	r3, [pc, #148]	; (8003758 <HAL_RCC_ClockConfig+0x1ec>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f023 0207 	bic.w	r2, r3, #7
 80036c8:	4923      	ldr	r1, [pc, #140]	; (8003758 <HAL_RCC_ClockConfig+0x1ec>)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d0:	4b21      	ldr	r3, [pc, #132]	; (8003758 <HAL_RCC_ClockConfig+0x1ec>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d001      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e036      	b.n	8003750 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d008      	beq.n	8003700 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ee:	4b1b      	ldr	r3, [pc, #108]	; (800375c <HAL_RCC_ClockConfig+0x1f0>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	4918      	ldr	r1, [pc, #96]	; (800375c <HAL_RCC_ClockConfig+0x1f0>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b00      	cmp	r3, #0
 800370a:	d009      	beq.n	8003720 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800370c:	4b13      	ldr	r3, [pc, #76]	; (800375c <HAL_RCC_ClockConfig+0x1f0>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4910      	ldr	r1, [pc, #64]	; (800375c <HAL_RCC_ClockConfig+0x1f0>)
 800371c:	4313      	orrs	r3, r2
 800371e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003720:	f000 f824 	bl	800376c <HAL_RCC_GetSysClockFreq>
 8003724:	4602      	mov	r2, r0
 8003726:	4b0d      	ldr	r3, [pc, #52]	; (800375c <HAL_RCC_ClockConfig+0x1f0>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	091b      	lsrs	r3, r3, #4
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	490b      	ldr	r1, [pc, #44]	; (8003760 <HAL_RCC_ClockConfig+0x1f4>)
 8003732:	5ccb      	ldrb	r3, [r1, r3]
 8003734:	f003 031f 	and.w	r3, r3, #31
 8003738:	fa22 f303 	lsr.w	r3, r2, r3
 800373c:	4a09      	ldr	r2, [pc, #36]	; (8003764 <HAL_RCC_ClockConfig+0x1f8>)
 800373e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003740:	4b09      	ldr	r3, [pc, #36]	; (8003768 <HAL_RCC_ClockConfig+0x1fc>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f7fe f95d 	bl	8001a04 <HAL_InitTick>
 800374a:	4603      	mov	r3, r0
 800374c:	72fb      	strb	r3, [r7, #11]

  return status;
 800374e:	7afb      	ldrb	r3, [r7, #11]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40022000 	.word	0x40022000
 800375c:	40021000 	.word	0x40021000
 8003760:	0800809c 	.word	0x0800809c
 8003764:	20000000 	.word	0x20000000
 8003768:	20000004 	.word	0x20000004

0800376c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800376c:	b480      	push	{r7}
 800376e:	b089      	sub	sp, #36	; 0x24
 8003770:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
 8003776:	2300      	movs	r3, #0
 8003778:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800377a:	4b3e      	ldr	r3, [pc, #248]	; (8003874 <HAL_RCC_GetSysClockFreq+0x108>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003784:	4b3b      	ldr	r3, [pc, #236]	; (8003874 <HAL_RCC_GetSysClockFreq+0x108>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0x34>
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	2b0c      	cmp	r3, #12
 8003798:	d121      	bne.n	80037de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d11e      	bne.n	80037de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037a0:	4b34      	ldr	r3, [pc, #208]	; (8003874 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d107      	bne.n	80037bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037ac:	4b31      	ldr	r3, [pc, #196]	; (8003874 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037b2:	0a1b      	lsrs	r3, r3, #8
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	e005      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037bc:	4b2d      	ldr	r3, [pc, #180]	; (8003874 <HAL_RCC_GetSysClockFreq+0x108>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037c8:	4a2b      	ldr	r2, [pc, #172]	; (8003878 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10d      	bne.n	80037f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037dc:	e00a      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d102      	bne.n	80037ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037e4:	4b25      	ldr	r3, [pc, #148]	; (800387c <HAL_RCC_GetSysClockFreq+0x110>)
 80037e6:	61bb      	str	r3, [r7, #24]
 80037e8:	e004      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d101      	bne.n	80037f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037f0:	4b23      	ldr	r3, [pc, #140]	; (8003880 <HAL_RCC_GetSysClockFreq+0x114>)
 80037f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	2b0c      	cmp	r3, #12
 80037f8:	d134      	bne.n	8003864 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037fa:	4b1e      	ldr	r3, [pc, #120]	; (8003874 <HAL_RCC_GetSysClockFreq+0x108>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d003      	beq.n	8003812 <HAL_RCC_GetSysClockFreq+0xa6>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b03      	cmp	r3, #3
 800380e:	d003      	beq.n	8003818 <HAL_RCC_GetSysClockFreq+0xac>
 8003810:	e005      	b.n	800381e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003812:	4b1a      	ldr	r3, [pc, #104]	; (800387c <HAL_RCC_GetSysClockFreq+0x110>)
 8003814:	617b      	str	r3, [r7, #20]
      break;
 8003816:	e005      	b.n	8003824 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003818:	4b19      	ldr	r3, [pc, #100]	; (8003880 <HAL_RCC_GetSysClockFreq+0x114>)
 800381a:	617b      	str	r3, [r7, #20]
      break;
 800381c:	e002      	b.n	8003824 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	617b      	str	r3, [r7, #20]
      break;
 8003822:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003824:	4b13      	ldr	r3, [pc, #76]	; (8003874 <HAL_RCC_GetSysClockFreq+0x108>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	3301      	adds	r3, #1
 8003830:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003832:	4b10      	ldr	r3, [pc, #64]	; (8003874 <HAL_RCC_GetSysClockFreq+0x108>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	0a1b      	lsrs	r3, r3, #8
 8003838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	fb03 f202 	mul.w	r2, r3, r2
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	fbb2 f3f3 	udiv	r3, r2, r3
 8003848:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800384a:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <HAL_RCC_GetSysClockFreq+0x108>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	0e5b      	lsrs	r3, r3, #25
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	3301      	adds	r3, #1
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003862:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003864:	69bb      	ldr	r3, [r7, #24]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3724      	adds	r7, #36	; 0x24
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000
 8003878:	080080b4 	.word	0x080080b4
 800387c:	00f42400 	.word	0x00f42400
 8003880:	007a1200 	.word	0x007a1200

08003884 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003888:	4b03      	ldr	r3, [pc, #12]	; (8003898 <HAL_RCC_GetHCLKFreq+0x14>)
 800388a:	681b      	ldr	r3, [r3, #0]
}
 800388c:	4618      	mov	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	20000000 	.word	0x20000000

0800389c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038a0:	f7ff fff0 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 80038a4:	4602      	mov	r2, r0
 80038a6:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	0a1b      	lsrs	r3, r3, #8
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	4904      	ldr	r1, [pc, #16]	; (80038c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038b2:	5ccb      	ldrb	r3, [r1, r3]
 80038b4:	f003 031f 	and.w	r3, r3, #31
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038bc:	4618      	mov	r0, r3
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40021000 	.word	0x40021000
 80038c4:	080080ac 	.word	0x080080ac

080038c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038cc:	f7ff ffda 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b06      	ldr	r3, [pc, #24]	; (80038ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	0adb      	lsrs	r3, r3, #11
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	4904      	ldr	r1, [pc, #16]	; (80038f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	f003 031f 	and.w	r3, r3, #31
 80038e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40021000 	.word	0x40021000
 80038f0:	080080ac 	.word	0x080080ac

080038f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038fc:	2300      	movs	r3, #0
 80038fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003900:	4b2a      	ldr	r3, [pc, #168]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800390c:	f7ff f9ee 	bl	8002cec <HAL_PWREx_GetVoltageRange>
 8003910:	6178      	str	r0, [r7, #20]
 8003912:	e014      	b.n	800393e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003914:	4b25      	ldr	r3, [pc, #148]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003918:	4a24      	ldr	r2, [pc, #144]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800391a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391e:	6593      	str	r3, [r2, #88]	; 0x58
 8003920:	4b22      	ldr	r3, [pc, #136]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800392c:	f7ff f9de 	bl	8002cec <HAL_PWREx_GetVoltageRange>
 8003930:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003932:	4b1e      	ldr	r3, [pc, #120]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003936:	4a1d      	ldr	r2, [pc, #116]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003944:	d10b      	bne.n	800395e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b80      	cmp	r3, #128	; 0x80
 800394a:	d919      	bls.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2ba0      	cmp	r3, #160	; 0xa0
 8003950:	d902      	bls.n	8003958 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003952:	2302      	movs	r3, #2
 8003954:	613b      	str	r3, [r7, #16]
 8003956:	e013      	b.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003958:	2301      	movs	r3, #1
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	e010      	b.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b80      	cmp	r3, #128	; 0x80
 8003962:	d902      	bls.n	800396a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003964:	2303      	movs	r3, #3
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	e00a      	b.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b80      	cmp	r3, #128	; 0x80
 800396e:	d102      	bne.n	8003976 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003970:	2302      	movs	r3, #2
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	e004      	b.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b70      	cmp	r3, #112	; 0x70
 800397a:	d101      	bne.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800397c:	2301      	movs	r3, #1
 800397e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f023 0207 	bic.w	r2, r3, #7
 8003988:	4909      	ldr	r1, [pc, #36]	; (80039b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003990:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	429a      	cmp	r2, r3
 800399c:	d001      	beq.n	80039a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40022000 	.word	0x40022000

080039b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039bc:	2300      	movs	r3, #0
 80039be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039c0:	2300      	movs	r3, #0
 80039c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d041      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039d8:	d02a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039de:	d824      	bhi.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039e4:	d008      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039ea:	d81e      	bhi.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039f4:	d010      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039f6:	e018      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039f8:	4b86      	ldr	r3, [pc, #536]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	4a85      	ldr	r2, [pc, #532]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a02:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a04:	e015      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 facb 	bl	8003fa8 <RCCEx_PLLSAI1_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a16:	e00c      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3320      	adds	r3, #32
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fbb6 	bl	8004190 <RCCEx_PLLSAI2_Config>
 8003a24:	4603      	mov	r3, r0
 8003a26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a28:	e003      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	74fb      	strb	r3, [r7, #19]
      break;
 8003a2e:	e000      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a32:	7cfb      	ldrb	r3, [r7, #19]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10b      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a38:	4b76      	ldr	r3, [pc, #472]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a46:	4973      	ldr	r1, [pc, #460]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a4e:	e001      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a50:	7cfb      	ldrb	r3, [r7, #19]
 8003a52:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d041      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a68:	d02a      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a6e:	d824      	bhi.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a74:	d008      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a7a:	d81e      	bhi.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a84:	d010      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a86:	e018      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a88:	4b62      	ldr	r3, [pc, #392]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	4a61      	ldr	r2, [pc, #388]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a92:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a94:	e015      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fa83 	bl	8003fa8 <RCCEx_PLLSAI1_Config>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003aa6:	e00c      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3320      	adds	r3, #32
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fb6e 	bl	8004190 <RCCEx_PLLSAI2_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ab8:	e003      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	74fb      	strb	r3, [r7, #19]
      break;
 8003abe:	e000      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ac0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ac2:	7cfb      	ldrb	r3, [r7, #19]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10b      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ac8:	4b52      	ldr	r3, [pc, #328]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ace:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad6:	494f      	ldr	r1, [pc, #316]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ade:	e001      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae0:	7cfb      	ldrb	r3, [r7, #19]
 8003ae2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 80a0 	beq.w	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003af2:	2300      	movs	r3, #0
 8003af4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003af6:	4b47      	ldr	r3, [pc, #284]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b06:	2300      	movs	r3, #0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00d      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0c:	4b41      	ldr	r3, [pc, #260]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b10:	4a40      	ldr	r2, [pc, #256]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b16:	6593      	str	r3, [r2, #88]	; 0x58
 8003b18:	4b3e      	ldr	r3, [pc, #248]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b24:	2301      	movs	r3, #1
 8003b26:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b28:	4b3b      	ldr	r3, [pc, #236]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a3a      	ldr	r2, [pc, #232]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b34:	f7fd ffb6 	bl	8001aa4 <HAL_GetTick>
 8003b38:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b3a:	e009      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3c:	f7fd ffb2 	bl	8001aa4 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d902      	bls.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	74fb      	strb	r3, [r7, #19]
        break;
 8003b4e:	e005      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b50:	4b31      	ldr	r3, [pc, #196]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0ef      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b5c:	7cfb      	ldrb	r3, [r7, #19]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d15c      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b62:	4b2c      	ldr	r3, [pc, #176]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b6c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01f      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d019      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b80:	4b24      	ldr	r3, [pc, #144]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b8c:	4b21      	ldr	r3, [pc, #132]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b92:	4a20      	ldr	r2, [pc, #128]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b9c:	4b1d      	ldr	r3, [pc, #116]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba2:	4a1c      	ldr	r2, [pc, #112]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bac:	4a19      	ldr	r2, [pc, #100]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d016      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbe:	f7fd ff71 	bl	8001aa4 <HAL_GetTick>
 8003bc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bc4:	e00b      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc6:	f7fd ff6d 	bl	8001aa4 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d902      	bls.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	74fb      	strb	r3, [r7, #19]
            break;
 8003bdc:	e006      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bde:	4b0d      	ldr	r3, [pc, #52]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0ec      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003bec:	7cfb      	ldrb	r3, [r7, #19]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bf2:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c02:	4904      	ldr	r1, [pc, #16]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c0a:	e009      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c0c:	7cfb      	ldrb	r3, [r7, #19]
 8003c0e:	74bb      	strb	r3, [r7, #18]
 8003c10:	e006      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c12:	bf00      	nop
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1c:	7cfb      	ldrb	r3, [r7, #19]
 8003c1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c20:	7c7b      	ldrb	r3, [r7, #17]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d105      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c26:	4b9e      	ldr	r3, [pc, #632]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2a:	4a9d      	ldr	r2, [pc, #628]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c3e:	4b98      	ldr	r3, [pc, #608]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c44:	f023 0203 	bic.w	r2, r3, #3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	4994      	ldr	r1, [pc, #592]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c60:	4b8f      	ldr	r3, [pc, #572]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	f023 020c 	bic.w	r2, r3, #12
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6e:	498c      	ldr	r1, [pc, #560]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c82:	4b87      	ldr	r3, [pc, #540]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	4983      	ldr	r1, [pc, #524]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ca4:	4b7e      	ldr	r3, [pc, #504]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	497b      	ldr	r1, [pc, #492]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cc6:	4b76      	ldr	r3, [pc, #472]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ccc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd4:	4972      	ldr	r1, [pc, #456]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ce8:	4b6d      	ldr	r3, [pc, #436]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf6:	496a      	ldr	r1, [pc, #424]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d0a:	4b65      	ldr	r3, [pc, #404]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d18:	4961      	ldr	r1, [pc, #388]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d2c:	4b5c      	ldr	r3, [pc, #368]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3a:	4959      	ldr	r1, [pc, #356]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d4e:	4b54      	ldr	r3, [pc, #336]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5c:	4950      	ldr	r1, [pc, #320]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d70:	4b4b      	ldr	r3, [pc, #300]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7e:	4948      	ldr	r1, [pc, #288]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d92:	4b43      	ldr	r3, [pc, #268]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da0:	493f      	ldr	r1, [pc, #252]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d028      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003db4:	4b3a      	ldr	r3, [pc, #232]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dc2:	4937      	ldr	r1, [pc, #220]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dd2:	d106      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dd4:	4b32      	ldr	r3, [pc, #200]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4a31      	ldr	r2, [pc, #196]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dde:	60d3      	str	r3, [r2, #12]
 8003de0:	e011      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dea:	d10c      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3304      	adds	r3, #4
 8003df0:	2101      	movs	r1, #1
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 f8d8 	bl	8003fa8 <RCCEx_PLLSAI1_Config>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003dfc:	7cfb      	ldrb	r3, [r7, #19]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003e02:	7cfb      	ldrb	r3, [r7, #19]
 8003e04:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d028      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e12:	4b23      	ldr	r3, [pc, #140]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e20:	491f      	ldr	r1, [pc, #124]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e30:	d106      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e32:	4b1b      	ldr	r3, [pc, #108]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	4a1a      	ldr	r2, [pc, #104]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e3c:	60d3      	str	r3, [r2, #12]
 8003e3e:	e011      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e48:	d10c      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	2101      	movs	r1, #1
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 f8a9 	bl	8003fa8 <RCCEx_PLLSAI1_Config>
 8003e56:	4603      	mov	r3, r0
 8003e58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e5a:	7cfb      	ldrb	r3, [r7, #19]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e60:	7cfb      	ldrb	r3, [r7, #19]
 8003e62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d02b      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e70:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7e:	4908      	ldr	r1, [pc, #32]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e8e:	d109      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e90:	4b03      	ldr	r3, [pc, #12]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4a02      	ldr	r2, [pc, #8]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e9a:	60d3      	str	r3, [r2, #12]
 8003e9c:	e014      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e9e:	bf00      	nop
 8003ea0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 f877 	bl	8003fa8 <RCCEx_PLLSAI1_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ebe:	7cfb      	ldrb	r3, [r7, #19]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ec4:	7cfb      	ldrb	r3, [r7, #19]
 8003ec6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d02f      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ed4:	4b2b      	ldr	r3, [pc, #172]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ee2:	4928      	ldr	r1, [pc, #160]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ef2:	d10d      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	2102      	movs	r1, #2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 f854 	bl	8003fa8 <RCCEx_PLLSAI1_Config>
 8003f00:	4603      	mov	r3, r0
 8003f02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f04:	7cfb      	ldrb	r3, [r7, #19]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d014      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f0a:	7cfb      	ldrb	r3, [r7, #19]
 8003f0c:	74bb      	strb	r3, [r7, #18]
 8003f0e:	e011      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f18:	d10c      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3320      	adds	r3, #32
 8003f1e:	2102      	movs	r1, #2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 f935 	bl	8004190 <RCCEx_PLLSAI2_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f2a:	7cfb      	ldrb	r3, [r7, #19]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f30:	7cfb      	ldrb	r3, [r7, #19]
 8003f32:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f40:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f46:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f4e:	490d      	ldr	r1, [pc, #52]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00b      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f62:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f72:	4904      	ldr	r1, [pc, #16]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f7a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40021000 	.word	0x40021000

08003f88 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a04      	ldr	r2, [pc, #16]	; (8003fa4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f92:	f043 0304 	orr.w	r3, r3, #4
 8003f96:	6013      	str	r3, [r2, #0]
}
 8003f98:	bf00      	nop
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000

08003fa8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fb6:	4b75      	ldr	r3, [pc, #468]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d018      	beq.n	8003ff4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003fc2:	4b72      	ldr	r3, [pc, #456]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f003 0203 	and.w	r2, r3, #3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d10d      	bne.n	8003fee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
       ||
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003fda:	4b6c      	ldr	r3, [pc, #432]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	091b      	lsrs	r3, r3, #4
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
       ||
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d047      	beq.n	800407e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	73fb      	strb	r3, [r7, #15]
 8003ff2:	e044      	b.n	800407e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d018      	beq.n	800402e <RCCEx_PLLSAI1_Config+0x86>
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d825      	bhi.n	800404c <RCCEx_PLLSAI1_Config+0xa4>
 8004000:	2b01      	cmp	r3, #1
 8004002:	d002      	beq.n	800400a <RCCEx_PLLSAI1_Config+0x62>
 8004004:	2b02      	cmp	r3, #2
 8004006:	d009      	beq.n	800401c <RCCEx_PLLSAI1_Config+0x74>
 8004008:	e020      	b.n	800404c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800400a:	4b60      	ldr	r3, [pc, #384]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d11d      	bne.n	8004052 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800401a:	e01a      	b.n	8004052 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800401c:	4b5b      	ldr	r3, [pc, #364]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004024:	2b00      	cmp	r3, #0
 8004026:	d116      	bne.n	8004056 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800402c:	e013      	b.n	8004056 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800402e:	4b57      	ldr	r3, [pc, #348]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10f      	bne.n	800405a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800403a:	4b54      	ldr	r3, [pc, #336]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d109      	bne.n	800405a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800404a:	e006      	b.n	800405a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
      break;
 8004050:	e004      	b.n	800405c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004052:	bf00      	nop
 8004054:	e002      	b.n	800405c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004056:	bf00      	nop
 8004058:	e000      	b.n	800405c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800405a:	bf00      	nop
    }

    if(status == HAL_OK)
 800405c:	7bfb      	ldrb	r3, [r7, #15]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10d      	bne.n	800407e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004062:	4b4a      	ldr	r3, [pc, #296]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6819      	ldr	r1, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	3b01      	subs	r3, #1
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	430b      	orrs	r3, r1
 8004078:	4944      	ldr	r1, [pc, #272]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 800407a:	4313      	orrs	r3, r2
 800407c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d17d      	bne.n	8004180 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004084:	4b41      	ldr	r3, [pc, #260]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a40      	ldr	r2, [pc, #256]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 800408a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800408e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004090:	f7fd fd08 	bl	8001aa4 <HAL_GetTick>
 8004094:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004096:	e009      	b.n	80040ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004098:	f7fd fd04 	bl	8001aa4 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d902      	bls.n	80040ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	73fb      	strb	r3, [r7, #15]
        break;
 80040aa:	e005      	b.n	80040b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040ac:	4b37      	ldr	r3, [pc, #220]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1ef      	bne.n	8004098 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d160      	bne.n	8004180 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d111      	bne.n	80040e8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040c4:	4b31      	ldr	r3, [pc, #196]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80040cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6892      	ldr	r2, [r2, #8]
 80040d4:	0211      	lsls	r1, r2, #8
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	68d2      	ldr	r2, [r2, #12]
 80040da:	0912      	lsrs	r2, r2, #4
 80040dc:	0452      	lsls	r2, r2, #17
 80040de:	430a      	orrs	r2, r1
 80040e0:	492a      	ldr	r1, [pc, #168]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	610b      	str	r3, [r1, #16]
 80040e6:	e027      	b.n	8004138 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d112      	bne.n	8004114 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040ee:	4b27      	ldr	r3, [pc, #156]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80040f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6892      	ldr	r2, [r2, #8]
 80040fe:	0211      	lsls	r1, r2, #8
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6912      	ldr	r2, [r2, #16]
 8004104:	0852      	lsrs	r2, r2, #1
 8004106:	3a01      	subs	r2, #1
 8004108:	0552      	lsls	r2, r2, #21
 800410a:	430a      	orrs	r2, r1
 800410c:	491f      	ldr	r1, [pc, #124]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 800410e:	4313      	orrs	r3, r2
 8004110:	610b      	str	r3, [r1, #16]
 8004112:	e011      	b.n	8004138 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004114:	4b1d      	ldr	r3, [pc, #116]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800411c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6892      	ldr	r2, [r2, #8]
 8004124:	0211      	lsls	r1, r2, #8
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6952      	ldr	r2, [r2, #20]
 800412a:	0852      	lsrs	r2, r2, #1
 800412c:	3a01      	subs	r2, #1
 800412e:	0652      	lsls	r2, r2, #25
 8004130:	430a      	orrs	r2, r1
 8004132:	4916      	ldr	r1, [pc, #88]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004134:	4313      	orrs	r3, r2
 8004136:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004138:	4b14      	ldr	r3, [pc, #80]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a13      	ldr	r2, [pc, #76]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 800413e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004142:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004144:	f7fd fcae 	bl	8001aa4 <HAL_GetTick>
 8004148:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800414a:	e009      	b.n	8004160 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800414c:	f7fd fcaa 	bl	8001aa4 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d902      	bls.n	8004160 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	73fb      	strb	r3, [r7, #15]
          break;
 800415e:	e005      	b.n	800416c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004160:	4b0a      	ldr	r3, [pc, #40]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0ef      	beq.n	800414c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004172:	4b06      	ldr	r3, [pc, #24]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004174:	691a      	ldr	r2, [r3, #16]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	4904      	ldr	r1, [pc, #16]	; (800418c <RCCEx_PLLSAI1_Config+0x1e4>)
 800417c:	4313      	orrs	r3, r2
 800417e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004180:	7bfb      	ldrb	r3, [r7, #15]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40021000 	.word	0x40021000

08004190 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800419e:	4b6a      	ldr	r3, [pc, #424]	; (8004348 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d018      	beq.n	80041dc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80041aa:	4b67      	ldr	r3, [pc, #412]	; (8004348 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f003 0203 	and.w	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d10d      	bne.n	80041d6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
       ||
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d009      	beq.n	80041d6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80041c2:	4b61      	ldr	r3, [pc, #388]	; (8004348 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	091b      	lsrs	r3, r3, #4
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
       ||
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d047      	beq.n	8004266 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	73fb      	strb	r3, [r7, #15]
 80041da:	e044      	b.n	8004266 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d018      	beq.n	8004216 <RCCEx_PLLSAI2_Config+0x86>
 80041e4:	2b03      	cmp	r3, #3
 80041e6:	d825      	bhi.n	8004234 <RCCEx_PLLSAI2_Config+0xa4>
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d002      	beq.n	80041f2 <RCCEx_PLLSAI2_Config+0x62>
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d009      	beq.n	8004204 <RCCEx_PLLSAI2_Config+0x74>
 80041f0:	e020      	b.n	8004234 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041f2:	4b55      	ldr	r3, [pc, #340]	; (8004348 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d11d      	bne.n	800423a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004202:	e01a      	b.n	800423a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004204:	4b50      	ldr	r3, [pc, #320]	; (8004348 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800420c:	2b00      	cmp	r3, #0
 800420e:	d116      	bne.n	800423e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004214:	e013      	b.n	800423e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004216:	4b4c      	ldr	r3, [pc, #304]	; (8004348 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10f      	bne.n	8004242 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004222:	4b49      	ldr	r3, [pc, #292]	; (8004348 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004232:	e006      	b.n	8004242 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	73fb      	strb	r3, [r7, #15]
      break;
 8004238:	e004      	b.n	8004244 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800423a:	bf00      	nop
 800423c:	e002      	b.n	8004244 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800423e:	bf00      	nop
 8004240:	e000      	b.n	8004244 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004242:	bf00      	nop
    }

    if(status == HAL_OK)
 8004244:	7bfb      	ldrb	r3, [r7, #15]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10d      	bne.n	8004266 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800424a:	4b3f      	ldr	r3, [pc, #252]	; (8004348 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6819      	ldr	r1, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	3b01      	subs	r3, #1
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	430b      	orrs	r3, r1
 8004260:	4939      	ldr	r1, [pc, #228]	; (8004348 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004262:	4313      	orrs	r3, r2
 8004264:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004266:	7bfb      	ldrb	r3, [r7, #15]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d167      	bne.n	800433c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800426c:	4b36      	ldr	r3, [pc, #216]	; (8004348 <RCCEx_PLLSAI2_Config+0x1b8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a35      	ldr	r2, [pc, #212]	; (8004348 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004276:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004278:	f7fd fc14 	bl	8001aa4 <HAL_GetTick>
 800427c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800427e:	e009      	b.n	8004294 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004280:	f7fd fc10 	bl	8001aa4 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d902      	bls.n	8004294 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	73fb      	strb	r3, [r7, #15]
        break;
 8004292:	e005      	b.n	80042a0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004294:	4b2c      	ldr	r3, [pc, #176]	; (8004348 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1ef      	bne.n	8004280 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d14a      	bne.n	800433c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d111      	bne.n	80042d0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042ac:	4b26      	ldr	r3, [pc, #152]	; (8004348 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80042b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6892      	ldr	r2, [r2, #8]
 80042bc:	0211      	lsls	r1, r2, #8
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	68d2      	ldr	r2, [r2, #12]
 80042c2:	0912      	lsrs	r2, r2, #4
 80042c4:	0452      	lsls	r2, r2, #17
 80042c6:	430a      	orrs	r2, r1
 80042c8:	491f      	ldr	r1, [pc, #124]	; (8004348 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	614b      	str	r3, [r1, #20]
 80042ce:	e011      	b.n	80042f4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042d0:	4b1d      	ldr	r3, [pc, #116]	; (8004348 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6892      	ldr	r2, [r2, #8]
 80042e0:	0211      	lsls	r1, r2, #8
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6912      	ldr	r2, [r2, #16]
 80042e6:	0852      	lsrs	r2, r2, #1
 80042e8:	3a01      	subs	r2, #1
 80042ea:	0652      	lsls	r2, r2, #25
 80042ec:	430a      	orrs	r2, r1
 80042ee:	4916      	ldr	r1, [pc, #88]	; (8004348 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042f4:	4b14      	ldr	r3, [pc, #80]	; (8004348 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a13      	ldr	r2, [pc, #76]	; (8004348 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004300:	f7fd fbd0 	bl	8001aa4 <HAL_GetTick>
 8004304:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004306:	e009      	b.n	800431c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004308:	f7fd fbcc 	bl	8001aa4 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d902      	bls.n	800431c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	73fb      	strb	r3, [r7, #15]
          break;
 800431a:	e005      	b.n	8004328 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800431c:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <RCCEx_PLLSAI2_Config+0x1b8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0ef      	beq.n	8004308 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004328:	7bfb      	ldrb	r3, [r7, #15]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800432e:	4b06      	ldr	r3, [pc, #24]	; (8004348 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004330:	695a      	ldr	r2, [r3, #20]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	4904      	ldr	r1, [pc, #16]	; (8004348 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004338:	4313      	orrs	r3, r2
 800433a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800433c:	7bfb      	ldrb	r3, [r7, #15]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40021000 	.word	0x40021000

0800434c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d06c      	beq.n	8004438 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fd f86e 	bl	8001454 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	22ca      	movs	r2, #202	; 0xca
 8004386:	625a      	str	r2, [r3, #36]	; 0x24
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2253      	movs	r2, #83	; 0x53
 800438e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f925 	bl	80045e0 <RTC_EnterInitMode>
 8004396:	4603      	mov	r3, r0
 8004398:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d14b      	bne.n	8004438 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80043ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043b2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6899      	ldr	r1, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	68d2      	ldr	r2, [r2, #12]
 80043da:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6919      	ldr	r1, [r3, #16]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	041a      	lsls	r2, r3, #16
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f929 	bl	8004648 <RTC_ExitInitMode>
 80043f6:	4603      	mov	r3, r0
 80043f8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d11b      	bne.n	8004438 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0203 	bic.w	r2, r2, #3
 800440e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	22ff      	movs	r2, #255	; 0xff
 800442e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004438:	7bfb      	ldrb	r3, [r7, #15]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b086      	sub	sp, #24
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004470:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004474:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	0c1b      	lsrs	r3, r3, #16
 800447a:	b2db      	uxtb	r3, r3
 800447c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004480:	b2da      	uxtb	r2, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	0a1b      	lsrs	r3, r3, #8
 800448a:	b2db      	uxtb	r3, r3
 800448c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004490:	b2da      	uxtb	r2, r3
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	0d9b      	lsrs	r3, r3, #22
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d11a      	bne.n	80044f0 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 f900 	bl	80046c4 <RTC_Bcd2ToByte>
 80044c4:	4603      	mov	r3, r0
 80044c6:	461a      	mov	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	785b      	ldrb	r3, [r3, #1]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 f8f7 	bl	80046c4 <RTC_Bcd2ToByte>
 80044d6:	4603      	mov	r3, r0
 80044d8:	461a      	mov	r2, r3
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	789b      	ldrb	r3, [r3, #2]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 f8ee 	bl	80046c4 <RTC_Bcd2ToByte>
 80044e8:	4603      	mov	r3, r0
 80044ea:	461a      	mov	r2, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b086      	sub	sp, #24
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004510:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004514:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	0c1b      	lsrs	r3, r3, #16
 800451a:	b2da      	uxtb	r2, r3
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	0a1b      	lsrs	r3, r3, #8
 8004524:	b2db      	uxtb	r3, r3
 8004526:	f003 031f 	and.w	r3, r3, #31
 800452a:	b2da      	uxtb	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004538:	b2da      	uxtb	r2, r3
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	0b5b      	lsrs	r3, r3, #13
 8004542:	b2db      	uxtb	r3, r3
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	b2da      	uxtb	r2, r3
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d11a      	bne.n	800458a <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	78db      	ldrb	r3, [r3, #3]
 8004558:	4618      	mov	r0, r3
 800455a:	f000 f8b3 	bl	80046c4 <RTC_Bcd2ToByte>
 800455e:	4603      	mov	r3, r0
 8004560:	461a      	mov	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	785b      	ldrb	r3, [r3, #1]
 800456a:	4618      	mov	r0, r3
 800456c:	f000 f8aa 	bl	80046c4 <RTC_Bcd2ToByte>
 8004570:	4603      	mov	r3, r0
 8004572:	461a      	mov	r2, r3
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	789b      	ldrb	r3, [r3, #2]
 800457c:	4618      	mov	r0, r3
 800457e:	f000 f8a1 	bl	80046c4 <RTC_Bcd2ToByte>
 8004582:	4603      	mov	r3, r0
 8004584:	461a      	mov	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045aa:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80045ac:	f7fd fa7a 	bl	8001aa4 <HAL_GetTick>
 80045b0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045b2:	e009      	b.n	80045c8 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045b4:	f7fd fa76 	bl	8001aa4 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045c2:	d901      	bls.n	80045c8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e007      	b.n	80045d8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0ee      	beq.n	80045b4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d120      	bne.n	800463c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004602:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004604:	f7fd fa4e 	bl	8001aa4 <HAL_GetTick>
 8004608:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800460a:	e00d      	b.n	8004628 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800460c:	f7fd fa4a 	bl	8001aa4 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800461a:	d905      	bls.n	8004628 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2203      	movs	r2, #3
 8004624:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <RTC_EnterInitMode+0x5c>
 8004636:	7bfb      	ldrb	r3, [r7, #15]
 8004638:	2b03      	cmp	r3, #3
 800463a:	d1e7      	bne.n	800460c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800463c:	7bfb      	ldrb	r3, [r7, #15]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004654:	4b1a      	ldr	r3, [pc, #104]	; (80046c0 <RTC_ExitInitMode+0x78>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4a19      	ldr	r2, [pc, #100]	; (80046c0 <RTC_ExitInitMode+0x78>)
 800465a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800465e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004660:	4b17      	ldr	r3, [pc, #92]	; (80046c0 <RTC_ExitInitMode+0x78>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10c      	bne.n	8004686 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff ff91 	bl	8004594 <HAL_RTC_WaitForSynchro>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01e      	beq.n	80046b6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2203      	movs	r2, #3
 800467c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	73fb      	strb	r3, [r7, #15]
 8004684:	e017      	b.n	80046b6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004686:	4b0e      	ldr	r3, [pc, #56]	; (80046c0 <RTC_ExitInitMode+0x78>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	4a0d      	ldr	r2, [pc, #52]	; (80046c0 <RTC_ExitInitMode+0x78>)
 800468c:	f023 0320 	bic.w	r3, r3, #32
 8004690:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7ff ff7e 	bl	8004594 <HAL_RTC_WaitForSynchro>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d005      	beq.n	80046aa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2203      	movs	r2, #3
 80046a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80046aa:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <RTC_ExitInitMode+0x78>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	4a04      	ldr	r2, [pc, #16]	; (80046c0 <RTC_ExitInitMode+0x78>)
 80046b0:	f043 0320 	orr.w	r3, r3, #32
 80046b4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40002800 	.word	0x40002800

080046c4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	091b      	lsrs	r3, r3, #4
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	461a      	mov	r2, r3
 80046d6:	0092      	lsls	r2, r2, #2
 80046d8:	4413      	add	r3, r2
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	4413      	add	r3, r2
 80046ea:	b2db      	uxtb	r3, r3
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 3020 	ldrb.w	r3, [r3, #32]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800470e:	2302      	movs	r3, #2
 8004710:	e07f      	b.n	8004812 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2202      	movs	r2, #2
 800471e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	22ca      	movs	r2, #202	; 0xca
 8004728:	625a      	str	r2, [r3, #36]	; 0x24
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2253      	movs	r2, #83	; 0x53
 8004730:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004740:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	b2da      	uxtb	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004752:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	d120      	bne.n	80047a4 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8004762:	f7fd f99f 	bl	8001aa4 <HAL_GetTick>
 8004766:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8004768:	e015      	b.n	8004796 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800476a:	f7fd f99b 	bl	8001aa4 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004778:	d90d      	bls.n	8004796 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	22ff      	movs	r2, #255	; 0xff
 8004780:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2203      	movs	r2, #3
 8004786:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e03d      	b.n	8004812 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0e2      	beq.n	800476a <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f023 0107 	bic.w	r1, r3, #7
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	430a      	orrs	r2, r1
 80047be:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80047c0:	4b16      	ldr	r3, [pc, #88]	; (800481c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a15      	ldr	r2, [pc, #84]	; (800481c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80047c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ca:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80047cc:	4b13      	ldr	r3, [pc, #76]	; (800481c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4a12      	ldr	r2, [pc, #72]	; (800481c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80047d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047d6:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047e6:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047f6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	22ff      	movs	r2, #255	; 0xff
 80047fe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3718      	adds	r7, #24
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40010400 	.word	0x40010400

08004820 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004828:	4b0f      	ldr	r3, [pc, #60]	; (8004868 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800482a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800482e:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	b2da      	uxtb	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800484e:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f80b 	bl	800486c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800485e:	bf00      	nop
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40010400 	.word	0x40010400

0800486c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e095      	b.n	80049be <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	2b00      	cmp	r3, #0
 8004898:	d108      	bne.n	80048ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048a2:	d009      	beq.n	80048b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	61da      	str	r2, [r3, #28]
 80048aa:	e005      	b.n	80048b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fc fe36 	bl	8001544 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048f8:	d902      	bls.n	8004900 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	e002      	b.n	8004906 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004904:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800490e:	d007      	beq.n	8004920 <HAL_SPI_Init+0xa0>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004918:	d002      	beq.n	8004920 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004962:	ea42 0103 	orr.w	r1, r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	0c1b      	lsrs	r3, r3, #16
 800497c:	f003 0204 	and.w	r2, r3, #4
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	f003 0310 	and.w	r3, r3, #16
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800499c:	ea42 0103 	orr.w	r1, r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e040      	b.n	8004a5a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d106      	bne.n	80049ee <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7fc ff6d 	bl	80018c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2224      	movs	r2, #36	; 0x24
 80049f2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0201 	bic.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f8c1 	bl	8004b8c <UART_SetConfig>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e022      	b.n	8004a5a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fb6d 	bl	80050fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f042 0201 	orr.w	r2, r2, #1
 8004a50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fbf4 	bl	8005240 <UART_CheckIdleState>
 8004a58:	4603      	mov	r3, r0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b08a      	sub	sp, #40	; 0x28
 8004a66:	af02      	add	r7, sp, #8
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	603b      	str	r3, [r7, #0]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a76:	2b20      	cmp	r3, #32
 8004a78:	f040 8082 	bne.w	8004b80 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <HAL_UART_Transmit+0x26>
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e07a      	b.n	8004b82 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_UART_Transmit+0x38>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e073      	b.n	8004b82 <HAL_UART_Transmit+0x120>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2221      	movs	r2, #33	; 0x21
 8004aae:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ab0:	f7fc fff8 	bl	8001aa4 <HAL_GetTick>
 8004ab4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	88fa      	ldrh	r2, [r7, #6]
 8004aba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	88fa      	ldrh	r2, [r7, #6]
 8004ac2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ace:	d108      	bne.n	8004ae2 <HAL_UART_Transmit+0x80>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d104      	bne.n	8004ae2 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	61bb      	str	r3, [r7, #24]
 8004ae0:	e003      	b.n	8004aea <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004af2:	e02d      	b.n	8004b50 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	2200      	movs	r2, #0
 8004afc:	2180      	movs	r1, #128	; 0x80
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 fbe7 	bl	80052d2 <UART_WaitOnFlagUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e039      	b.n	8004b82 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10b      	bne.n	8004b2c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	881a      	ldrh	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b20:	b292      	uxth	r2, r2
 8004b22:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	3302      	adds	r3, #2
 8004b28:	61bb      	str	r3, [r7, #24]
 8004b2a:	e008      	b.n	8004b3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	781a      	ldrb	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	b292      	uxth	r2, r2
 8004b36:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1cb      	bne.n	8004af4 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2200      	movs	r2, #0
 8004b64:	2140      	movs	r1, #64	; 0x40
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 fbb3 	bl	80052d2 <UART_WaitOnFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e005      	b.n	8004b82 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	e000      	b.n	8004b82 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004b80:	2302      	movs	r3, #2
  }
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3720      	adds	r7, #32
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b90:	b08a      	sub	sp, #40	; 0x28
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	431a      	orrs	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	4ba4      	ldr	r3, [pc, #656]	; (8004e4c <UART_SetConfig+0x2c0>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	6812      	ldr	r2, [r2, #0]
 8004bc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	68da      	ldr	r2, [r3, #12]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a99      	ldr	r2, [pc, #612]	; (8004e50 <UART_SetConfig+0x2c4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d004      	beq.n	8004bf8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a90      	ldr	r2, [pc, #576]	; (8004e54 <UART_SetConfig+0x2c8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d126      	bne.n	8004c64 <UART_SetConfig+0xd8>
 8004c16:	4b90      	ldr	r3, [pc, #576]	; (8004e58 <UART_SetConfig+0x2cc>)
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	2b03      	cmp	r3, #3
 8004c22:	d81b      	bhi.n	8004c5c <UART_SetConfig+0xd0>
 8004c24:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <UART_SetConfig+0xa0>)
 8004c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2a:	bf00      	nop
 8004c2c:	08004c3d 	.word	0x08004c3d
 8004c30:	08004c4d 	.word	0x08004c4d
 8004c34:	08004c45 	.word	0x08004c45
 8004c38:	08004c55 	.word	0x08004c55
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c42:	e116      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004c44:	2302      	movs	r3, #2
 8004c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c4a:	e112      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004c4c:	2304      	movs	r3, #4
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c52:	e10e      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004c54:	2308      	movs	r3, #8
 8004c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c5a:	e10a      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004c5c:	2310      	movs	r3, #16
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c62:	e106      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a7c      	ldr	r2, [pc, #496]	; (8004e5c <UART_SetConfig+0x2d0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d138      	bne.n	8004ce0 <UART_SetConfig+0x154>
 8004c6e:	4b7a      	ldr	r3, [pc, #488]	; (8004e58 <UART_SetConfig+0x2cc>)
 8004c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c74:	f003 030c 	and.w	r3, r3, #12
 8004c78:	2b0c      	cmp	r3, #12
 8004c7a:	d82d      	bhi.n	8004cd8 <UART_SetConfig+0x14c>
 8004c7c:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <UART_SetConfig+0xf8>)
 8004c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c82:	bf00      	nop
 8004c84:	08004cb9 	.word	0x08004cb9
 8004c88:	08004cd9 	.word	0x08004cd9
 8004c8c:	08004cd9 	.word	0x08004cd9
 8004c90:	08004cd9 	.word	0x08004cd9
 8004c94:	08004cc9 	.word	0x08004cc9
 8004c98:	08004cd9 	.word	0x08004cd9
 8004c9c:	08004cd9 	.word	0x08004cd9
 8004ca0:	08004cd9 	.word	0x08004cd9
 8004ca4:	08004cc1 	.word	0x08004cc1
 8004ca8:	08004cd9 	.word	0x08004cd9
 8004cac:	08004cd9 	.word	0x08004cd9
 8004cb0:	08004cd9 	.word	0x08004cd9
 8004cb4:	08004cd1 	.word	0x08004cd1
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cbe:	e0d8      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc6:	e0d4      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004cc8:	2304      	movs	r3, #4
 8004cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cce:	e0d0      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004cd0:	2308      	movs	r3, #8
 8004cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd6:	e0cc      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004cd8:	2310      	movs	r3, #16
 8004cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cde:	e0c8      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a5e      	ldr	r2, [pc, #376]	; (8004e60 <UART_SetConfig+0x2d4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d125      	bne.n	8004d36 <UART_SetConfig+0x1aa>
 8004cea:	4b5b      	ldr	r3, [pc, #364]	; (8004e58 <UART_SetConfig+0x2cc>)
 8004cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cf4:	2b30      	cmp	r3, #48	; 0x30
 8004cf6:	d016      	beq.n	8004d26 <UART_SetConfig+0x19a>
 8004cf8:	2b30      	cmp	r3, #48	; 0x30
 8004cfa:	d818      	bhi.n	8004d2e <UART_SetConfig+0x1a2>
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	d00a      	beq.n	8004d16 <UART_SetConfig+0x18a>
 8004d00:	2b20      	cmp	r3, #32
 8004d02:	d814      	bhi.n	8004d2e <UART_SetConfig+0x1a2>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <UART_SetConfig+0x182>
 8004d08:	2b10      	cmp	r3, #16
 8004d0a:	d008      	beq.n	8004d1e <UART_SetConfig+0x192>
 8004d0c:	e00f      	b.n	8004d2e <UART_SetConfig+0x1a2>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d14:	e0ad      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004d16:	2302      	movs	r3, #2
 8004d18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1c:	e0a9      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004d1e:	2304      	movs	r3, #4
 8004d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d24:	e0a5      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004d26:	2308      	movs	r3, #8
 8004d28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2c:	e0a1      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004d2e:	2310      	movs	r3, #16
 8004d30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d34:	e09d      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a4a      	ldr	r2, [pc, #296]	; (8004e64 <UART_SetConfig+0x2d8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d125      	bne.n	8004d8c <UART_SetConfig+0x200>
 8004d40:	4b45      	ldr	r3, [pc, #276]	; (8004e58 <UART_SetConfig+0x2cc>)
 8004d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d4a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d4c:	d016      	beq.n	8004d7c <UART_SetConfig+0x1f0>
 8004d4e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d50:	d818      	bhi.n	8004d84 <UART_SetConfig+0x1f8>
 8004d52:	2b80      	cmp	r3, #128	; 0x80
 8004d54:	d00a      	beq.n	8004d6c <UART_SetConfig+0x1e0>
 8004d56:	2b80      	cmp	r3, #128	; 0x80
 8004d58:	d814      	bhi.n	8004d84 <UART_SetConfig+0x1f8>
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <UART_SetConfig+0x1d8>
 8004d5e:	2b40      	cmp	r3, #64	; 0x40
 8004d60:	d008      	beq.n	8004d74 <UART_SetConfig+0x1e8>
 8004d62:	e00f      	b.n	8004d84 <UART_SetConfig+0x1f8>
 8004d64:	2300      	movs	r3, #0
 8004d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d6a:	e082      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d72:	e07e      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004d74:	2304      	movs	r3, #4
 8004d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7a:	e07a      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004d7c:	2308      	movs	r3, #8
 8004d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d82:	e076      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004d84:	2310      	movs	r3, #16
 8004d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8a:	e072      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a35      	ldr	r2, [pc, #212]	; (8004e68 <UART_SetConfig+0x2dc>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d12a      	bne.n	8004dec <UART_SetConfig+0x260>
 8004d96:	4b30      	ldr	r3, [pc, #192]	; (8004e58 <UART_SetConfig+0x2cc>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004da4:	d01a      	beq.n	8004ddc <UART_SetConfig+0x250>
 8004da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004daa:	d81b      	bhi.n	8004de4 <UART_SetConfig+0x258>
 8004dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db0:	d00c      	beq.n	8004dcc <UART_SetConfig+0x240>
 8004db2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db6:	d815      	bhi.n	8004de4 <UART_SetConfig+0x258>
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <UART_SetConfig+0x238>
 8004dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dc0:	d008      	beq.n	8004dd4 <UART_SetConfig+0x248>
 8004dc2:	e00f      	b.n	8004de4 <UART_SetConfig+0x258>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dca:	e052      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd2:	e04e      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004dd4:	2304      	movs	r3, #4
 8004dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dda:	e04a      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004ddc:	2308      	movs	r3, #8
 8004dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de2:	e046      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004de4:	2310      	movs	r3, #16
 8004de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dea:	e042      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a17      	ldr	r2, [pc, #92]	; (8004e50 <UART_SetConfig+0x2c4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d13a      	bne.n	8004e6c <UART_SetConfig+0x2e0>
 8004df6:	4b18      	ldr	r3, [pc, #96]	; (8004e58 <UART_SetConfig+0x2cc>)
 8004df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e04:	d01a      	beq.n	8004e3c <UART_SetConfig+0x2b0>
 8004e06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e0a:	d81b      	bhi.n	8004e44 <UART_SetConfig+0x2b8>
 8004e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e10:	d00c      	beq.n	8004e2c <UART_SetConfig+0x2a0>
 8004e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e16:	d815      	bhi.n	8004e44 <UART_SetConfig+0x2b8>
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <UART_SetConfig+0x298>
 8004e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e20:	d008      	beq.n	8004e34 <UART_SetConfig+0x2a8>
 8004e22:	e00f      	b.n	8004e44 <UART_SetConfig+0x2b8>
 8004e24:	2300      	movs	r3, #0
 8004e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e2a:	e022      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e32:	e01e      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004e34:	2304      	movs	r3, #4
 8004e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3a:	e01a      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004e3c:	2308      	movs	r3, #8
 8004e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e42:	e016      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004e44:	2310      	movs	r3, #16
 8004e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4a:	e012      	b.n	8004e72 <UART_SetConfig+0x2e6>
 8004e4c:	efff69f3 	.word	0xefff69f3
 8004e50:	40008000 	.word	0x40008000
 8004e54:	40013800 	.word	0x40013800
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	40004400 	.word	0x40004400
 8004e60:	40004800 	.word	0x40004800
 8004e64:	40004c00 	.word	0x40004c00
 8004e68:	40005000 	.word	0x40005000
 8004e6c:	2310      	movs	r3, #16
 8004e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a9f      	ldr	r2, [pc, #636]	; (80050f4 <UART_SetConfig+0x568>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d17a      	bne.n	8004f72 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d824      	bhi.n	8004ece <UART_SetConfig+0x342>
 8004e84:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <UART_SetConfig+0x300>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004eb1 	.word	0x08004eb1
 8004e90:	08004ecf 	.word	0x08004ecf
 8004e94:	08004eb9 	.word	0x08004eb9
 8004e98:	08004ecf 	.word	0x08004ecf
 8004e9c:	08004ebf 	.word	0x08004ebf
 8004ea0:	08004ecf 	.word	0x08004ecf
 8004ea4:	08004ecf 	.word	0x08004ecf
 8004ea8:	08004ecf 	.word	0x08004ecf
 8004eac:	08004ec7 	.word	0x08004ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eb0:	f7fe fcf4 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 8004eb4:	61f8      	str	r0, [r7, #28]
        break;
 8004eb6:	e010      	b.n	8004eda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eb8:	4b8f      	ldr	r3, [pc, #572]	; (80050f8 <UART_SetConfig+0x56c>)
 8004eba:	61fb      	str	r3, [r7, #28]
        break;
 8004ebc:	e00d      	b.n	8004eda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ebe:	f7fe fc55 	bl	800376c <HAL_RCC_GetSysClockFreq>
 8004ec2:	61f8      	str	r0, [r7, #28]
        break;
 8004ec4:	e009      	b.n	8004eda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eca:	61fb      	str	r3, [r7, #28]
        break;
 8004ecc:	e005      	b.n	8004eda <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ed8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 80fb 	beq.w	80050d8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	4413      	add	r3, r2
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d305      	bcc.n	8004efe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d903      	bls.n	8004f06 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f04:	e0e8      	b.n	80050d8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	461c      	mov	r4, r3
 8004f0c:	4615      	mov	r5, r2
 8004f0e:	f04f 0200 	mov.w	r2, #0
 8004f12:	f04f 0300 	mov.w	r3, #0
 8004f16:	022b      	lsls	r3, r5, #8
 8004f18:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f1c:	0222      	lsls	r2, r4, #8
 8004f1e:	68f9      	ldr	r1, [r7, #12]
 8004f20:	6849      	ldr	r1, [r1, #4]
 8004f22:	0849      	lsrs	r1, r1, #1
 8004f24:	2000      	movs	r0, #0
 8004f26:	4688      	mov	r8, r1
 8004f28:	4681      	mov	r9, r0
 8004f2a:	eb12 0a08 	adds.w	sl, r2, r8
 8004f2e:	eb43 0b09 	adc.w	fp, r3, r9
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	603b      	str	r3, [r7, #0]
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f40:	4650      	mov	r0, sl
 8004f42:	4659      	mov	r1, fp
 8004f44:	f7fb fe30 	bl	8000ba8 <__aeabi_uldivmod>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f56:	d308      	bcc.n	8004f6a <UART_SetConfig+0x3de>
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f5e:	d204      	bcs.n	8004f6a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	60da      	str	r2, [r3, #12]
 8004f68:	e0b6      	b.n	80050d8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f70:	e0b2      	b.n	80050d8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f7a:	d15e      	bne.n	800503a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004f7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d828      	bhi.n	8004fd6 <UART_SetConfig+0x44a>
 8004f84:	a201      	add	r2, pc, #4	; (adr r2, 8004f8c <UART_SetConfig+0x400>)
 8004f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8a:	bf00      	nop
 8004f8c:	08004fb1 	.word	0x08004fb1
 8004f90:	08004fb9 	.word	0x08004fb9
 8004f94:	08004fc1 	.word	0x08004fc1
 8004f98:	08004fd7 	.word	0x08004fd7
 8004f9c:	08004fc7 	.word	0x08004fc7
 8004fa0:	08004fd7 	.word	0x08004fd7
 8004fa4:	08004fd7 	.word	0x08004fd7
 8004fa8:	08004fd7 	.word	0x08004fd7
 8004fac:	08004fcf 	.word	0x08004fcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fb0:	f7fe fc74 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 8004fb4:	61f8      	str	r0, [r7, #28]
        break;
 8004fb6:	e014      	b.n	8004fe2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fb8:	f7fe fc86 	bl	80038c8 <HAL_RCC_GetPCLK2Freq>
 8004fbc:	61f8      	str	r0, [r7, #28]
        break;
 8004fbe:	e010      	b.n	8004fe2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fc0:	4b4d      	ldr	r3, [pc, #308]	; (80050f8 <UART_SetConfig+0x56c>)
 8004fc2:	61fb      	str	r3, [r7, #28]
        break;
 8004fc4:	e00d      	b.n	8004fe2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fc6:	f7fe fbd1 	bl	800376c <HAL_RCC_GetSysClockFreq>
 8004fca:	61f8      	str	r0, [r7, #28]
        break;
 8004fcc:	e009      	b.n	8004fe2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fd2:	61fb      	str	r3, [r7, #28]
        break;
 8004fd4:	e005      	b.n	8004fe2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004fe0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d077      	beq.n	80050d8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	005a      	lsls	r2, r3, #1
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	085b      	lsrs	r3, r3, #1
 8004ff2:	441a      	add	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	2b0f      	cmp	r3, #15
 8005002:	d916      	bls.n	8005032 <UART_SetConfig+0x4a6>
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800500a:	d212      	bcs.n	8005032 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	b29b      	uxth	r3, r3
 8005010:	f023 030f 	bic.w	r3, r3, #15
 8005014:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	085b      	lsrs	r3, r3, #1
 800501a:	b29b      	uxth	r3, r3
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	b29a      	uxth	r2, r3
 8005022:	8afb      	ldrh	r3, [r7, #22]
 8005024:	4313      	orrs	r3, r2
 8005026:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	8afa      	ldrh	r2, [r7, #22]
 800502e:	60da      	str	r2, [r3, #12]
 8005030:	e052      	b.n	80050d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005038:	e04e      	b.n	80050d8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800503a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800503e:	2b08      	cmp	r3, #8
 8005040:	d827      	bhi.n	8005092 <UART_SetConfig+0x506>
 8005042:	a201      	add	r2, pc, #4	; (adr r2, 8005048 <UART_SetConfig+0x4bc>)
 8005044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005048:	0800506d 	.word	0x0800506d
 800504c:	08005075 	.word	0x08005075
 8005050:	0800507d 	.word	0x0800507d
 8005054:	08005093 	.word	0x08005093
 8005058:	08005083 	.word	0x08005083
 800505c:	08005093 	.word	0x08005093
 8005060:	08005093 	.word	0x08005093
 8005064:	08005093 	.word	0x08005093
 8005068:	0800508b 	.word	0x0800508b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800506c:	f7fe fc16 	bl	800389c <HAL_RCC_GetPCLK1Freq>
 8005070:	61f8      	str	r0, [r7, #28]
        break;
 8005072:	e014      	b.n	800509e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005074:	f7fe fc28 	bl	80038c8 <HAL_RCC_GetPCLK2Freq>
 8005078:	61f8      	str	r0, [r7, #28]
        break;
 800507a:	e010      	b.n	800509e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800507c:	4b1e      	ldr	r3, [pc, #120]	; (80050f8 <UART_SetConfig+0x56c>)
 800507e:	61fb      	str	r3, [r7, #28]
        break;
 8005080:	e00d      	b.n	800509e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005082:	f7fe fb73 	bl	800376c <HAL_RCC_GetSysClockFreq>
 8005086:	61f8      	str	r0, [r7, #28]
        break;
 8005088:	e009      	b.n	800509e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800508a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800508e:	61fb      	str	r3, [r7, #28]
        break;
 8005090:	e005      	b.n	800509e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800509c:	bf00      	nop
    }

    if (pclk != 0U)
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d019      	beq.n	80050d8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	085a      	lsrs	r2, r3, #1
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	441a      	add	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	2b0f      	cmp	r3, #15
 80050bc:	d909      	bls.n	80050d2 <UART_SetConfig+0x546>
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c4:	d205      	bcs.n	80050d2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	60da      	str	r2, [r3, #12]
 80050d0:	e002      	b.n	80050d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80050e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3728      	adds	r7, #40	; 0x28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050f2:	bf00      	nop
 80050f4:	40008000 	.word	0x40008000
 80050f8:	00f42400 	.word	0x00f42400

080050fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	f003 0310 	and.w	r3, r3, #16
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d01a      	beq.n	8005212 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051fa:	d10a      	bne.n	8005212 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	605a      	str	r2, [r3, #4]
  }
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af02      	add	r7, sp, #8
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005250:	f7fc fc28 	bl	8001aa4 <HAL_GetTick>
 8005254:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b08      	cmp	r3, #8
 8005262:	d10e      	bne.n	8005282 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005264:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f82d 	bl	80052d2 <UART_WaitOnFlagUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e023      	b.n	80052ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b04      	cmp	r3, #4
 800528e:	d10e      	bne.n	80052ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005290:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f817 	bl	80052d2 <UART_WaitOnFlagUntilTimeout>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e00d      	b.n	80052ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2220      	movs	r2, #32
 80052b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b09c      	sub	sp, #112	; 0x70
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	603b      	str	r3, [r7, #0]
 80052de:	4613      	mov	r3, r2
 80052e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e2:	e0a5      	b.n	8005430 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052ea:	f000 80a1 	beq.w	8005430 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ee:	f7fc fbd9 	bl	8001aa4 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d302      	bcc.n	8005304 <UART_WaitOnFlagUntilTimeout+0x32>
 80052fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005300:	2b00      	cmp	r3, #0
 8005302:	d13e      	bne.n	8005382 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005314:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005318:	667b      	str	r3, [r7, #100]	; 0x64
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005322:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005324:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005328:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e6      	bne.n	8005304 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3308      	adds	r3, #8
 800533c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005340:	e853 3f00 	ldrex	r3, [r3]
 8005344:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005348:	f023 0301 	bic.w	r3, r3, #1
 800534c:	663b      	str	r3, [r7, #96]	; 0x60
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3308      	adds	r3, #8
 8005354:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005356:	64ba      	str	r2, [r7, #72]	; 0x48
 8005358:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800535c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1e5      	bne.n	8005336 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2220      	movs	r2, #32
 800536e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2220      	movs	r2, #32
 8005374:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e067      	b.n	8005452 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d04f      	beq.n	8005430 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800539a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800539e:	d147      	bne.n	8005430 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053a8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	e853 3f00 	ldrex	r3, [r3]
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	461a      	mov	r2, r3
 80053c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c8:	637b      	str	r3, [r7, #52]	; 0x34
 80053ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053d0:	e841 2300 	strex	r3, r2, [r1]
 80053d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1e6      	bne.n	80053aa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3308      	adds	r3, #8
 80053e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	e853 3f00 	ldrex	r3, [r3]
 80053ea:	613b      	str	r3, [r7, #16]
   return(result);
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f023 0301 	bic.w	r3, r3, #1
 80053f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3308      	adds	r3, #8
 80053fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053fc:	623a      	str	r2, [r7, #32]
 80053fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005400:	69f9      	ldr	r1, [r7, #28]
 8005402:	6a3a      	ldr	r2, [r7, #32]
 8005404:	e841 2300 	strex	r3, r2, [r1]
 8005408:	61bb      	str	r3, [r7, #24]
   return(result);
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1e5      	bne.n	80053dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2220      	movs	r2, #32
 8005414:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2220      	movs	r2, #32
 800541a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2220      	movs	r2, #32
 8005420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e010      	b.n	8005452 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	69da      	ldr	r2, [r3, #28]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	4013      	ands	r3, r2
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	429a      	cmp	r2, r3
 800543e:	bf0c      	ite	eq
 8005440:	2301      	moveq	r3, #1
 8005442:	2300      	movne	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	461a      	mov	r2, r3
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	429a      	cmp	r2, r3
 800544c:	f43f af4a 	beq.w	80052e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3770      	adds	r7, #112	; 0x70
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <__errno>:
 800545c:	4b01      	ldr	r3, [pc, #4]	; (8005464 <__errno+0x8>)
 800545e:	6818      	ldr	r0, [r3, #0]
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	2000000c 	.word	0x2000000c

08005468 <__libc_init_array>:
 8005468:	b570      	push	{r4, r5, r6, lr}
 800546a:	4d0d      	ldr	r5, [pc, #52]	; (80054a0 <__libc_init_array+0x38>)
 800546c:	4c0d      	ldr	r4, [pc, #52]	; (80054a4 <__libc_init_array+0x3c>)
 800546e:	1b64      	subs	r4, r4, r5
 8005470:	10a4      	asrs	r4, r4, #2
 8005472:	2600      	movs	r6, #0
 8005474:	42a6      	cmp	r6, r4
 8005476:	d109      	bne.n	800548c <__libc_init_array+0x24>
 8005478:	4d0b      	ldr	r5, [pc, #44]	; (80054a8 <__libc_init_array+0x40>)
 800547a:	4c0c      	ldr	r4, [pc, #48]	; (80054ac <__libc_init_array+0x44>)
 800547c:	f002 fdc2 	bl	8008004 <_init>
 8005480:	1b64      	subs	r4, r4, r5
 8005482:	10a4      	asrs	r4, r4, #2
 8005484:	2600      	movs	r6, #0
 8005486:	42a6      	cmp	r6, r4
 8005488:	d105      	bne.n	8005496 <__libc_init_array+0x2e>
 800548a:	bd70      	pop	{r4, r5, r6, pc}
 800548c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005490:	4798      	blx	r3
 8005492:	3601      	adds	r6, #1
 8005494:	e7ee      	b.n	8005474 <__libc_init_array+0xc>
 8005496:	f855 3b04 	ldr.w	r3, [r5], #4
 800549a:	4798      	blx	r3
 800549c:	3601      	adds	r6, #1
 800549e:	e7f2      	b.n	8005486 <__libc_init_array+0x1e>
 80054a0:	080084c4 	.word	0x080084c4
 80054a4:	080084c4 	.word	0x080084c4
 80054a8:	080084c4 	.word	0x080084c4
 80054ac:	080084c8 	.word	0x080084c8

080054b0 <memset>:
 80054b0:	4402      	add	r2, r0
 80054b2:	4603      	mov	r3, r0
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d100      	bne.n	80054ba <memset+0xa>
 80054b8:	4770      	bx	lr
 80054ba:	f803 1b01 	strb.w	r1, [r3], #1
 80054be:	e7f9      	b.n	80054b4 <memset+0x4>

080054c0 <__cvt>:
 80054c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054c4:	ec55 4b10 	vmov	r4, r5, d0
 80054c8:	2d00      	cmp	r5, #0
 80054ca:	460e      	mov	r6, r1
 80054cc:	4619      	mov	r1, r3
 80054ce:	462b      	mov	r3, r5
 80054d0:	bfbb      	ittet	lt
 80054d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80054d6:	461d      	movlt	r5, r3
 80054d8:	2300      	movge	r3, #0
 80054da:	232d      	movlt	r3, #45	; 0x2d
 80054dc:	700b      	strb	r3, [r1, #0]
 80054de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80054e4:	4691      	mov	r9, r2
 80054e6:	f023 0820 	bic.w	r8, r3, #32
 80054ea:	bfbc      	itt	lt
 80054ec:	4622      	movlt	r2, r4
 80054ee:	4614      	movlt	r4, r2
 80054f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054f4:	d005      	beq.n	8005502 <__cvt+0x42>
 80054f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80054fa:	d100      	bne.n	80054fe <__cvt+0x3e>
 80054fc:	3601      	adds	r6, #1
 80054fe:	2102      	movs	r1, #2
 8005500:	e000      	b.n	8005504 <__cvt+0x44>
 8005502:	2103      	movs	r1, #3
 8005504:	ab03      	add	r3, sp, #12
 8005506:	9301      	str	r3, [sp, #4]
 8005508:	ab02      	add	r3, sp, #8
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	ec45 4b10 	vmov	d0, r4, r5
 8005510:	4653      	mov	r3, sl
 8005512:	4632      	mov	r2, r6
 8005514:	f000 fe18 	bl	8006148 <_dtoa_r>
 8005518:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800551c:	4607      	mov	r7, r0
 800551e:	d102      	bne.n	8005526 <__cvt+0x66>
 8005520:	f019 0f01 	tst.w	r9, #1
 8005524:	d022      	beq.n	800556c <__cvt+0xac>
 8005526:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800552a:	eb07 0906 	add.w	r9, r7, r6
 800552e:	d110      	bne.n	8005552 <__cvt+0x92>
 8005530:	783b      	ldrb	r3, [r7, #0]
 8005532:	2b30      	cmp	r3, #48	; 0x30
 8005534:	d10a      	bne.n	800554c <__cvt+0x8c>
 8005536:	2200      	movs	r2, #0
 8005538:	2300      	movs	r3, #0
 800553a:	4620      	mov	r0, r4
 800553c:	4629      	mov	r1, r5
 800553e:	f7fb fac3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005542:	b918      	cbnz	r0, 800554c <__cvt+0x8c>
 8005544:	f1c6 0601 	rsb	r6, r6, #1
 8005548:	f8ca 6000 	str.w	r6, [sl]
 800554c:	f8da 3000 	ldr.w	r3, [sl]
 8005550:	4499      	add	r9, r3
 8005552:	2200      	movs	r2, #0
 8005554:	2300      	movs	r3, #0
 8005556:	4620      	mov	r0, r4
 8005558:	4629      	mov	r1, r5
 800555a:	f7fb fab5 	bl	8000ac8 <__aeabi_dcmpeq>
 800555e:	b108      	cbz	r0, 8005564 <__cvt+0xa4>
 8005560:	f8cd 900c 	str.w	r9, [sp, #12]
 8005564:	2230      	movs	r2, #48	; 0x30
 8005566:	9b03      	ldr	r3, [sp, #12]
 8005568:	454b      	cmp	r3, r9
 800556a:	d307      	bcc.n	800557c <__cvt+0xbc>
 800556c:	9b03      	ldr	r3, [sp, #12]
 800556e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005570:	1bdb      	subs	r3, r3, r7
 8005572:	4638      	mov	r0, r7
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	b004      	add	sp, #16
 8005578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800557c:	1c59      	adds	r1, r3, #1
 800557e:	9103      	str	r1, [sp, #12]
 8005580:	701a      	strb	r2, [r3, #0]
 8005582:	e7f0      	b.n	8005566 <__cvt+0xa6>

08005584 <__exponent>:
 8005584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005586:	4603      	mov	r3, r0
 8005588:	2900      	cmp	r1, #0
 800558a:	bfb8      	it	lt
 800558c:	4249      	neglt	r1, r1
 800558e:	f803 2b02 	strb.w	r2, [r3], #2
 8005592:	bfb4      	ite	lt
 8005594:	222d      	movlt	r2, #45	; 0x2d
 8005596:	222b      	movge	r2, #43	; 0x2b
 8005598:	2909      	cmp	r1, #9
 800559a:	7042      	strb	r2, [r0, #1]
 800559c:	dd2a      	ble.n	80055f4 <__exponent+0x70>
 800559e:	f10d 0407 	add.w	r4, sp, #7
 80055a2:	46a4      	mov	ip, r4
 80055a4:	270a      	movs	r7, #10
 80055a6:	46a6      	mov	lr, r4
 80055a8:	460a      	mov	r2, r1
 80055aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80055ae:	fb07 1516 	mls	r5, r7, r6, r1
 80055b2:	3530      	adds	r5, #48	; 0x30
 80055b4:	2a63      	cmp	r2, #99	; 0x63
 80055b6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80055ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80055be:	4631      	mov	r1, r6
 80055c0:	dcf1      	bgt.n	80055a6 <__exponent+0x22>
 80055c2:	3130      	adds	r1, #48	; 0x30
 80055c4:	f1ae 0502 	sub.w	r5, lr, #2
 80055c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80055cc:	1c44      	adds	r4, r0, #1
 80055ce:	4629      	mov	r1, r5
 80055d0:	4561      	cmp	r1, ip
 80055d2:	d30a      	bcc.n	80055ea <__exponent+0x66>
 80055d4:	f10d 0209 	add.w	r2, sp, #9
 80055d8:	eba2 020e 	sub.w	r2, r2, lr
 80055dc:	4565      	cmp	r5, ip
 80055de:	bf88      	it	hi
 80055e0:	2200      	movhi	r2, #0
 80055e2:	4413      	add	r3, r2
 80055e4:	1a18      	subs	r0, r3, r0
 80055e6:	b003      	add	sp, #12
 80055e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80055f2:	e7ed      	b.n	80055d0 <__exponent+0x4c>
 80055f4:	2330      	movs	r3, #48	; 0x30
 80055f6:	3130      	adds	r1, #48	; 0x30
 80055f8:	7083      	strb	r3, [r0, #2]
 80055fa:	70c1      	strb	r1, [r0, #3]
 80055fc:	1d03      	adds	r3, r0, #4
 80055fe:	e7f1      	b.n	80055e4 <__exponent+0x60>

08005600 <_printf_float>:
 8005600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005604:	ed2d 8b02 	vpush	{d8}
 8005608:	b08d      	sub	sp, #52	; 0x34
 800560a:	460c      	mov	r4, r1
 800560c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005610:	4616      	mov	r6, r2
 8005612:	461f      	mov	r7, r3
 8005614:	4605      	mov	r5, r0
 8005616:	f001 fd3d 	bl	8007094 <_localeconv_r>
 800561a:	f8d0 a000 	ldr.w	sl, [r0]
 800561e:	4650      	mov	r0, sl
 8005620:	f7fa fdd6 	bl	80001d0 <strlen>
 8005624:	2300      	movs	r3, #0
 8005626:	930a      	str	r3, [sp, #40]	; 0x28
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	9305      	str	r3, [sp, #20]
 800562c:	f8d8 3000 	ldr.w	r3, [r8]
 8005630:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005634:	3307      	adds	r3, #7
 8005636:	f023 0307 	bic.w	r3, r3, #7
 800563a:	f103 0208 	add.w	r2, r3, #8
 800563e:	f8c8 2000 	str.w	r2, [r8]
 8005642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005646:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800564a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800564e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005652:	9307      	str	r3, [sp, #28]
 8005654:	f8cd 8018 	str.w	r8, [sp, #24]
 8005658:	ee08 0a10 	vmov	s16, r0
 800565c:	4b9f      	ldr	r3, [pc, #636]	; (80058dc <_printf_float+0x2dc>)
 800565e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005662:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005666:	f7fb fa61 	bl	8000b2c <__aeabi_dcmpun>
 800566a:	bb88      	cbnz	r0, 80056d0 <_printf_float+0xd0>
 800566c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005670:	4b9a      	ldr	r3, [pc, #616]	; (80058dc <_printf_float+0x2dc>)
 8005672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005676:	f7fb fa3b 	bl	8000af0 <__aeabi_dcmple>
 800567a:	bb48      	cbnz	r0, 80056d0 <_printf_float+0xd0>
 800567c:	2200      	movs	r2, #0
 800567e:	2300      	movs	r3, #0
 8005680:	4640      	mov	r0, r8
 8005682:	4649      	mov	r1, r9
 8005684:	f7fb fa2a 	bl	8000adc <__aeabi_dcmplt>
 8005688:	b110      	cbz	r0, 8005690 <_printf_float+0x90>
 800568a:	232d      	movs	r3, #45	; 0x2d
 800568c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005690:	4b93      	ldr	r3, [pc, #588]	; (80058e0 <_printf_float+0x2e0>)
 8005692:	4894      	ldr	r0, [pc, #592]	; (80058e4 <_printf_float+0x2e4>)
 8005694:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005698:	bf94      	ite	ls
 800569a:	4698      	movls	r8, r3
 800569c:	4680      	movhi	r8, r0
 800569e:	2303      	movs	r3, #3
 80056a0:	6123      	str	r3, [r4, #16]
 80056a2:	9b05      	ldr	r3, [sp, #20]
 80056a4:	f023 0204 	bic.w	r2, r3, #4
 80056a8:	6022      	str	r2, [r4, #0]
 80056aa:	f04f 0900 	mov.w	r9, #0
 80056ae:	9700      	str	r7, [sp, #0]
 80056b0:	4633      	mov	r3, r6
 80056b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80056b4:	4621      	mov	r1, r4
 80056b6:	4628      	mov	r0, r5
 80056b8:	f000 f9d8 	bl	8005a6c <_printf_common>
 80056bc:	3001      	adds	r0, #1
 80056be:	f040 8090 	bne.w	80057e2 <_printf_float+0x1e2>
 80056c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056c6:	b00d      	add	sp, #52	; 0x34
 80056c8:	ecbd 8b02 	vpop	{d8}
 80056cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d0:	4642      	mov	r2, r8
 80056d2:	464b      	mov	r3, r9
 80056d4:	4640      	mov	r0, r8
 80056d6:	4649      	mov	r1, r9
 80056d8:	f7fb fa28 	bl	8000b2c <__aeabi_dcmpun>
 80056dc:	b140      	cbz	r0, 80056f0 <_printf_float+0xf0>
 80056de:	464b      	mov	r3, r9
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	bfbc      	itt	lt
 80056e4:	232d      	movlt	r3, #45	; 0x2d
 80056e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80056ea:	487f      	ldr	r0, [pc, #508]	; (80058e8 <_printf_float+0x2e8>)
 80056ec:	4b7f      	ldr	r3, [pc, #508]	; (80058ec <_printf_float+0x2ec>)
 80056ee:	e7d1      	b.n	8005694 <_printf_float+0x94>
 80056f0:	6863      	ldr	r3, [r4, #4]
 80056f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80056f6:	9206      	str	r2, [sp, #24]
 80056f8:	1c5a      	adds	r2, r3, #1
 80056fa:	d13f      	bne.n	800577c <_printf_float+0x17c>
 80056fc:	2306      	movs	r3, #6
 80056fe:	6063      	str	r3, [r4, #4]
 8005700:	9b05      	ldr	r3, [sp, #20]
 8005702:	6861      	ldr	r1, [r4, #4]
 8005704:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005708:	2300      	movs	r3, #0
 800570a:	9303      	str	r3, [sp, #12]
 800570c:	ab0a      	add	r3, sp, #40	; 0x28
 800570e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005712:	ab09      	add	r3, sp, #36	; 0x24
 8005714:	ec49 8b10 	vmov	d0, r8, r9
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	6022      	str	r2, [r4, #0]
 800571c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005720:	4628      	mov	r0, r5
 8005722:	f7ff fecd 	bl	80054c0 <__cvt>
 8005726:	9b06      	ldr	r3, [sp, #24]
 8005728:	9909      	ldr	r1, [sp, #36]	; 0x24
 800572a:	2b47      	cmp	r3, #71	; 0x47
 800572c:	4680      	mov	r8, r0
 800572e:	d108      	bne.n	8005742 <_printf_float+0x142>
 8005730:	1cc8      	adds	r0, r1, #3
 8005732:	db02      	blt.n	800573a <_printf_float+0x13a>
 8005734:	6863      	ldr	r3, [r4, #4]
 8005736:	4299      	cmp	r1, r3
 8005738:	dd41      	ble.n	80057be <_printf_float+0x1be>
 800573a:	f1ab 0b02 	sub.w	fp, fp, #2
 800573e:	fa5f fb8b 	uxtb.w	fp, fp
 8005742:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005746:	d820      	bhi.n	800578a <_printf_float+0x18a>
 8005748:	3901      	subs	r1, #1
 800574a:	465a      	mov	r2, fp
 800574c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005750:	9109      	str	r1, [sp, #36]	; 0x24
 8005752:	f7ff ff17 	bl	8005584 <__exponent>
 8005756:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005758:	1813      	adds	r3, r2, r0
 800575a:	2a01      	cmp	r2, #1
 800575c:	4681      	mov	r9, r0
 800575e:	6123      	str	r3, [r4, #16]
 8005760:	dc02      	bgt.n	8005768 <_printf_float+0x168>
 8005762:	6822      	ldr	r2, [r4, #0]
 8005764:	07d2      	lsls	r2, r2, #31
 8005766:	d501      	bpl.n	800576c <_printf_float+0x16c>
 8005768:	3301      	adds	r3, #1
 800576a:	6123      	str	r3, [r4, #16]
 800576c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005770:	2b00      	cmp	r3, #0
 8005772:	d09c      	beq.n	80056ae <_printf_float+0xae>
 8005774:	232d      	movs	r3, #45	; 0x2d
 8005776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800577a:	e798      	b.n	80056ae <_printf_float+0xae>
 800577c:	9a06      	ldr	r2, [sp, #24]
 800577e:	2a47      	cmp	r2, #71	; 0x47
 8005780:	d1be      	bne.n	8005700 <_printf_float+0x100>
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1bc      	bne.n	8005700 <_printf_float+0x100>
 8005786:	2301      	movs	r3, #1
 8005788:	e7b9      	b.n	80056fe <_printf_float+0xfe>
 800578a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800578e:	d118      	bne.n	80057c2 <_printf_float+0x1c2>
 8005790:	2900      	cmp	r1, #0
 8005792:	6863      	ldr	r3, [r4, #4]
 8005794:	dd0b      	ble.n	80057ae <_printf_float+0x1ae>
 8005796:	6121      	str	r1, [r4, #16]
 8005798:	b913      	cbnz	r3, 80057a0 <_printf_float+0x1a0>
 800579a:	6822      	ldr	r2, [r4, #0]
 800579c:	07d0      	lsls	r0, r2, #31
 800579e:	d502      	bpl.n	80057a6 <_printf_float+0x1a6>
 80057a0:	3301      	adds	r3, #1
 80057a2:	440b      	add	r3, r1
 80057a4:	6123      	str	r3, [r4, #16]
 80057a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80057a8:	f04f 0900 	mov.w	r9, #0
 80057ac:	e7de      	b.n	800576c <_printf_float+0x16c>
 80057ae:	b913      	cbnz	r3, 80057b6 <_printf_float+0x1b6>
 80057b0:	6822      	ldr	r2, [r4, #0]
 80057b2:	07d2      	lsls	r2, r2, #31
 80057b4:	d501      	bpl.n	80057ba <_printf_float+0x1ba>
 80057b6:	3302      	adds	r3, #2
 80057b8:	e7f4      	b.n	80057a4 <_printf_float+0x1a4>
 80057ba:	2301      	movs	r3, #1
 80057bc:	e7f2      	b.n	80057a4 <_printf_float+0x1a4>
 80057be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80057c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057c4:	4299      	cmp	r1, r3
 80057c6:	db05      	blt.n	80057d4 <_printf_float+0x1d4>
 80057c8:	6823      	ldr	r3, [r4, #0]
 80057ca:	6121      	str	r1, [r4, #16]
 80057cc:	07d8      	lsls	r0, r3, #31
 80057ce:	d5ea      	bpl.n	80057a6 <_printf_float+0x1a6>
 80057d0:	1c4b      	adds	r3, r1, #1
 80057d2:	e7e7      	b.n	80057a4 <_printf_float+0x1a4>
 80057d4:	2900      	cmp	r1, #0
 80057d6:	bfd4      	ite	le
 80057d8:	f1c1 0202 	rsble	r2, r1, #2
 80057dc:	2201      	movgt	r2, #1
 80057de:	4413      	add	r3, r2
 80057e0:	e7e0      	b.n	80057a4 <_printf_float+0x1a4>
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	055a      	lsls	r2, r3, #21
 80057e6:	d407      	bmi.n	80057f8 <_printf_float+0x1f8>
 80057e8:	6923      	ldr	r3, [r4, #16]
 80057ea:	4642      	mov	r2, r8
 80057ec:	4631      	mov	r1, r6
 80057ee:	4628      	mov	r0, r5
 80057f0:	47b8      	blx	r7
 80057f2:	3001      	adds	r0, #1
 80057f4:	d12c      	bne.n	8005850 <_printf_float+0x250>
 80057f6:	e764      	b.n	80056c2 <_printf_float+0xc2>
 80057f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80057fc:	f240 80e0 	bls.w	80059c0 <_printf_float+0x3c0>
 8005800:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005804:	2200      	movs	r2, #0
 8005806:	2300      	movs	r3, #0
 8005808:	f7fb f95e 	bl	8000ac8 <__aeabi_dcmpeq>
 800580c:	2800      	cmp	r0, #0
 800580e:	d034      	beq.n	800587a <_printf_float+0x27a>
 8005810:	4a37      	ldr	r2, [pc, #220]	; (80058f0 <_printf_float+0x2f0>)
 8005812:	2301      	movs	r3, #1
 8005814:	4631      	mov	r1, r6
 8005816:	4628      	mov	r0, r5
 8005818:	47b8      	blx	r7
 800581a:	3001      	adds	r0, #1
 800581c:	f43f af51 	beq.w	80056c2 <_printf_float+0xc2>
 8005820:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005824:	429a      	cmp	r2, r3
 8005826:	db02      	blt.n	800582e <_printf_float+0x22e>
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	07d8      	lsls	r0, r3, #31
 800582c:	d510      	bpl.n	8005850 <_printf_float+0x250>
 800582e:	ee18 3a10 	vmov	r3, s16
 8005832:	4652      	mov	r2, sl
 8005834:	4631      	mov	r1, r6
 8005836:	4628      	mov	r0, r5
 8005838:	47b8      	blx	r7
 800583a:	3001      	adds	r0, #1
 800583c:	f43f af41 	beq.w	80056c2 <_printf_float+0xc2>
 8005840:	f04f 0800 	mov.w	r8, #0
 8005844:	f104 091a 	add.w	r9, r4, #26
 8005848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800584a:	3b01      	subs	r3, #1
 800584c:	4543      	cmp	r3, r8
 800584e:	dc09      	bgt.n	8005864 <_printf_float+0x264>
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	079b      	lsls	r3, r3, #30
 8005854:	f100 8105 	bmi.w	8005a62 <_printf_float+0x462>
 8005858:	68e0      	ldr	r0, [r4, #12]
 800585a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800585c:	4298      	cmp	r0, r3
 800585e:	bfb8      	it	lt
 8005860:	4618      	movlt	r0, r3
 8005862:	e730      	b.n	80056c6 <_printf_float+0xc6>
 8005864:	2301      	movs	r3, #1
 8005866:	464a      	mov	r2, r9
 8005868:	4631      	mov	r1, r6
 800586a:	4628      	mov	r0, r5
 800586c:	47b8      	blx	r7
 800586e:	3001      	adds	r0, #1
 8005870:	f43f af27 	beq.w	80056c2 <_printf_float+0xc2>
 8005874:	f108 0801 	add.w	r8, r8, #1
 8005878:	e7e6      	b.n	8005848 <_printf_float+0x248>
 800587a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800587c:	2b00      	cmp	r3, #0
 800587e:	dc39      	bgt.n	80058f4 <_printf_float+0x2f4>
 8005880:	4a1b      	ldr	r2, [pc, #108]	; (80058f0 <_printf_float+0x2f0>)
 8005882:	2301      	movs	r3, #1
 8005884:	4631      	mov	r1, r6
 8005886:	4628      	mov	r0, r5
 8005888:	47b8      	blx	r7
 800588a:	3001      	adds	r0, #1
 800588c:	f43f af19 	beq.w	80056c2 <_printf_float+0xc2>
 8005890:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005894:	4313      	orrs	r3, r2
 8005896:	d102      	bne.n	800589e <_printf_float+0x29e>
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	07d9      	lsls	r1, r3, #31
 800589c:	d5d8      	bpl.n	8005850 <_printf_float+0x250>
 800589e:	ee18 3a10 	vmov	r3, s16
 80058a2:	4652      	mov	r2, sl
 80058a4:	4631      	mov	r1, r6
 80058a6:	4628      	mov	r0, r5
 80058a8:	47b8      	blx	r7
 80058aa:	3001      	adds	r0, #1
 80058ac:	f43f af09 	beq.w	80056c2 <_printf_float+0xc2>
 80058b0:	f04f 0900 	mov.w	r9, #0
 80058b4:	f104 0a1a 	add.w	sl, r4, #26
 80058b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ba:	425b      	negs	r3, r3
 80058bc:	454b      	cmp	r3, r9
 80058be:	dc01      	bgt.n	80058c4 <_printf_float+0x2c4>
 80058c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058c2:	e792      	b.n	80057ea <_printf_float+0x1ea>
 80058c4:	2301      	movs	r3, #1
 80058c6:	4652      	mov	r2, sl
 80058c8:	4631      	mov	r1, r6
 80058ca:	4628      	mov	r0, r5
 80058cc:	47b8      	blx	r7
 80058ce:	3001      	adds	r0, #1
 80058d0:	f43f aef7 	beq.w	80056c2 <_printf_float+0xc2>
 80058d4:	f109 0901 	add.w	r9, r9, #1
 80058d8:	e7ee      	b.n	80058b8 <_printf_float+0x2b8>
 80058da:	bf00      	nop
 80058dc:	7fefffff 	.word	0x7fefffff
 80058e0:	080080e8 	.word	0x080080e8
 80058e4:	080080ec 	.word	0x080080ec
 80058e8:	080080f4 	.word	0x080080f4
 80058ec:	080080f0 	.word	0x080080f0
 80058f0:	080080f8 	.word	0x080080f8
 80058f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058f8:	429a      	cmp	r2, r3
 80058fa:	bfa8      	it	ge
 80058fc:	461a      	movge	r2, r3
 80058fe:	2a00      	cmp	r2, #0
 8005900:	4691      	mov	r9, r2
 8005902:	dc37      	bgt.n	8005974 <_printf_float+0x374>
 8005904:	f04f 0b00 	mov.w	fp, #0
 8005908:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800590c:	f104 021a 	add.w	r2, r4, #26
 8005910:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005912:	9305      	str	r3, [sp, #20]
 8005914:	eba3 0309 	sub.w	r3, r3, r9
 8005918:	455b      	cmp	r3, fp
 800591a:	dc33      	bgt.n	8005984 <_printf_float+0x384>
 800591c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005920:	429a      	cmp	r2, r3
 8005922:	db3b      	blt.n	800599c <_printf_float+0x39c>
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	07da      	lsls	r2, r3, #31
 8005928:	d438      	bmi.n	800599c <_printf_float+0x39c>
 800592a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800592c:	9a05      	ldr	r2, [sp, #20]
 800592e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005930:	1a9a      	subs	r2, r3, r2
 8005932:	eba3 0901 	sub.w	r9, r3, r1
 8005936:	4591      	cmp	r9, r2
 8005938:	bfa8      	it	ge
 800593a:	4691      	movge	r9, r2
 800593c:	f1b9 0f00 	cmp.w	r9, #0
 8005940:	dc35      	bgt.n	80059ae <_printf_float+0x3ae>
 8005942:	f04f 0800 	mov.w	r8, #0
 8005946:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800594a:	f104 0a1a 	add.w	sl, r4, #26
 800594e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005952:	1a9b      	subs	r3, r3, r2
 8005954:	eba3 0309 	sub.w	r3, r3, r9
 8005958:	4543      	cmp	r3, r8
 800595a:	f77f af79 	ble.w	8005850 <_printf_float+0x250>
 800595e:	2301      	movs	r3, #1
 8005960:	4652      	mov	r2, sl
 8005962:	4631      	mov	r1, r6
 8005964:	4628      	mov	r0, r5
 8005966:	47b8      	blx	r7
 8005968:	3001      	adds	r0, #1
 800596a:	f43f aeaa 	beq.w	80056c2 <_printf_float+0xc2>
 800596e:	f108 0801 	add.w	r8, r8, #1
 8005972:	e7ec      	b.n	800594e <_printf_float+0x34e>
 8005974:	4613      	mov	r3, r2
 8005976:	4631      	mov	r1, r6
 8005978:	4642      	mov	r2, r8
 800597a:	4628      	mov	r0, r5
 800597c:	47b8      	blx	r7
 800597e:	3001      	adds	r0, #1
 8005980:	d1c0      	bne.n	8005904 <_printf_float+0x304>
 8005982:	e69e      	b.n	80056c2 <_printf_float+0xc2>
 8005984:	2301      	movs	r3, #1
 8005986:	4631      	mov	r1, r6
 8005988:	4628      	mov	r0, r5
 800598a:	9205      	str	r2, [sp, #20]
 800598c:	47b8      	blx	r7
 800598e:	3001      	adds	r0, #1
 8005990:	f43f ae97 	beq.w	80056c2 <_printf_float+0xc2>
 8005994:	9a05      	ldr	r2, [sp, #20]
 8005996:	f10b 0b01 	add.w	fp, fp, #1
 800599a:	e7b9      	b.n	8005910 <_printf_float+0x310>
 800599c:	ee18 3a10 	vmov	r3, s16
 80059a0:	4652      	mov	r2, sl
 80059a2:	4631      	mov	r1, r6
 80059a4:	4628      	mov	r0, r5
 80059a6:	47b8      	blx	r7
 80059a8:	3001      	adds	r0, #1
 80059aa:	d1be      	bne.n	800592a <_printf_float+0x32a>
 80059ac:	e689      	b.n	80056c2 <_printf_float+0xc2>
 80059ae:	9a05      	ldr	r2, [sp, #20]
 80059b0:	464b      	mov	r3, r9
 80059b2:	4442      	add	r2, r8
 80059b4:	4631      	mov	r1, r6
 80059b6:	4628      	mov	r0, r5
 80059b8:	47b8      	blx	r7
 80059ba:	3001      	adds	r0, #1
 80059bc:	d1c1      	bne.n	8005942 <_printf_float+0x342>
 80059be:	e680      	b.n	80056c2 <_printf_float+0xc2>
 80059c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059c2:	2a01      	cmp	r2, #1
 80059c4:	dc01      	bgt.n	80059ca <_printf_float+0x3ca>
 80059c6:	07db      	lsls	r3, r3, #31
 80059c8:	d538      	bpl.n	8005a3c <_printf_float+0x43c>
 80059ca:	2301      	movs	r3, #1
 80059cc:	4642      	mov	r2, r8
 80059ce:	4631      	mov	r1, r6
 80059d0:	4628      	mov	r0, r5
 80059d2:	47b8      	blx	r7
 80059d4:	3001      	adds	r0, #1
 80059d6:	f43f ae74 	beq.w	80056c2 <_printf_float+0xc2>
 80059da:	ee18 3a10 	vmov	r3, s16
 80059de:	4652      	mov	r2, sl
 80059e0:	4631      	mov	r1, r6
 80059e2:	4628      	mov	r0, r5
 80059e4:	47b8      	blx	r7
 80059e6:	3001      	adds	r0, #1
 80059e8:	f43f ae6b 	beq.w	80056c2 <_printf_float+0xc2>
 80059ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059f0:	2200      	movs	r2, #0
 80059f2:	2300      	movs	r3, #0
 80059f4:	f7fb f868 	bl	8000ac8 <__aeabi_dcmpeq>
 80059f8:	b9d8      	cbnz	r0, 8005a32 <_printf_float+0x432>
 80059fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059fc:	f108 0201 	add.w	r2, r8, #1
 8005a00:	3b01      	subs	r3, #1
 8005a02:	4631      	mov	r1, r6
 8005a04:	4628      	mov	r0, r5
 8005a06:	47b8      	blx	r7
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d10e      	bne.n	8005a2a <_printf_float+0x42a>
 8005a0c:	e659      	b.n	80056c2 <_printf_float+0xc2>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	4652      	mov	r2, sl
 8005a12:	4631      	mov	r1, r6
 8005a14:	4628      	mov	r0, r5
 8005a16:	47b8      	blx	r7
 8005a18:	3001      	adds	r0, #1
 8005a1a:	f43f ae52 	beq.w	80056c2 <_printf_float+0xc2>
 8005a1e:	f108 0801 	add.w	r8, r8, #1
 8005a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a24:	3b01      	subs	r3, #1
 8005a26:	4543      	cmp	r3, r8
 8005a28:	dcf1      	bgt.n	8005a0e <_printf_float+0x40e>
 8005a2a:	464b      	mov	r3, r9
 8005a2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a30:	e6dc      	b.n	80057ec <_printf_float+0x1ec>
 8005a32:	f04f 0800 	mov.w	r8, #0
 8005a36:	f104 0a1a 	add.w	sl, r4, #26
 8005a3a:	e7f2      	b.n	8005a22 <_printf_float+0x422>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	4642      	mov	r2, r8
 8005a40:	e7df      	b.n	8005a02 <_printf_float+0x402>
 8005a42:	2301      	movs	r3, #1
 8005a44:	464a      	mov	r2, r9
 8005a46:	4631      	mov	r1, r6
 8005a48:	4628      	mov	r0, r5
 8005a4a:	47b8      	blx	r7
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	f43f ae38 	beq.w	80056c2 <_printf_float+0xc2>
 8005a52:	f108 0801 	add.w	r8, r8, #1
 8005a56:	68e3      	ldr	r3, [r4, #12]
 8005a58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a5a:	1a5b      	subs	r3, r3, r1
 8005a5c:	4543      	cmp	r3, r8
 8005a5e:	dcf0      	bgt.n	8005a42 <_printf_float+0x442>
 8005a60:	e6fa      	b.n	8005858 <_printf_float+0x258>
 8005a62:	f04f 0800 	mov.w	r8, #0
 8005a66:	f104 0919 	add.w	r9, r4, #25
 8005a6a:	e7f4      	b.n	8005a56 <_printf_float+0x456>

08005a6c <_printf_common>:
 8005a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a70:	4616      	mov	r6, r2
 8005a72:	4699      	mov	r9, r3
 8005a74:	688a      	ldr	r2, [r1, #8]
 8005a76:	690b      	ldr	r3, [r1, #16]
 8005a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	bfb8      	it	lt
 8005a80:	4613      	movlt	r3, r2
 8005a82:	6033      	str	r3, [r6, #0]
 8005a84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a88:	4607      	mov	r7, r0
 8005a8a:	460c      	mov	r4, r1
 8005a8c:	b10a      	cbz	r2, 8005a92 <_printf_common+0x26>
 8005a8e:	3301      	adds	r3, #1
 8005a90:	6033      	str	r3, [r6, #0]
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	0699      	lsls	r1, r3, #26
 8005a96:	bf42      	ittt	mi
 8005a98:	6833      	ldrmi	r3, [r6, #0]
 8005a9a:	3302      	addmi	r3, #2
 8005a9c:	6033      	strmi	r3, [r6, #0]
 8005a9e:	6825      	ldr	r5, [r4, #0]
 8005aa0:	f015 0506 	ands.w	r5, r5, #6
 8005aa4:	d106      	bne.n	8005ab4 <_printf_common+0x48>
 8005aa6:	f104 0a19 	add.w	sl, r4, #25
 8005aaa:	68e3      	ldr	r3, [r4, #12]
 8005aac:	6832      	ldr	r2, [r6, #0]
 8005aae:	1a9b      	subs	r3, r3, r2
 8005ab0:	42ab      	cmp	r3, r5
 8005ab2:	dc26      	bgt.n	8005b02 <_printf_common+0x96>
 8005ab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ab8:	1e13      	subs	r3, r2, #0
 8005aba:	6822      	ldr	r2, [r4, #0]
 8005abc:	bf18      	it	ne
 8005abe:	2301      	movne	r3, #1
 8005ac0:	0692      	lsls	r2, r2, #26
 8005ac2:	d42b      	bmi.n	8005b1c <_printf_common+0xb0>
 8005ac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ac8:	4649      	mov	r1, r9
 8005aca:	4638      	mov	r0, r7
 8005acc:	47c0      	blx	r8
 8005ace:	3001      	adds	r0, #1
 8005ad0:	d01e      	beq.n	8005b10 <_printf_common+0xa4>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	68e5      	ldr	r5, [r4, #12]
 8005ad6:	6832      	ldr	r2, [r6, #0]
 8005ad8:	f003 0306 	and.w	r3, r3, #6
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	bf08      	it	eq
 8005ae0:	1aad      	subeq	r5, r5, r2
 8005ae2:	68a3      	ldr	r3, [r4, #8]
 8005ae4:	6922      	ldr	r2, [r4, #16]
 8005ae6:	bf0c      	ite	eq
 8005ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005aec:	2500      	movne	r5, #0
 8005aee:	4293      	cmp	r3, r2
 8005af0:	bfc4      	itt	gt
 8005af2:	1a9b      	subgt	r3, r3, r2
 8005af4:	18ed      	addgt	r5, r5, r3
 8005af6:	2600      	movs	r6, #0
 8005af8:	341a      	adds	r4, #26
 8005afa:	42b5      	cmp	r5, r6
 8005afc:	d11a      	bne.n	8005b34 <_printf_common+0xc8>
 8005afe:	2000      	movs	r0, #0
 8005b00:	e008      	b.n	8005b14 <_printf_common+0xa8>
 8005b02:	2301      	movs	r3, #1
 8005b04:	4652      	mov	r2, sl
 8005b06:	4649      	mov	r1, r9
 8005b08:	4638      	mov	r0, r7
 8005b0a:	47c0      	blx	r8
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	d103      	bne.n	8005b18 <_printf_common+0xac>
 8005b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b18:	3501      	adds	r5, #1
 8005b1a:	e7c6      	b.n	8005aaa <_printf_common+0x3e>
 8005b1c:	18e1      	adds	r1, r4, r3
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	2030      	movs	r0, #48	; 0x30
 8005b22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b26:	4422      	add	r2, r4
 8005b28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b30:	3302      	adds	r3, #2
 8005b32:	e7c7      	b.n	8005ac4 <_printf_common+0x58>
 8005b34:	2301      	movs	r3, #1
 8005b36:	4622      	mov	r2, r4
 8005b38:	4649      	mov	r1, r9
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	47c0      	blx	r8
 8005b3e:	3001      	adds	r0, #1
 8005b40:	d0e6      	beq.n	8005b10 <_printf_common+0xa4>
 8005b42:	3601      	adds	r6, #1
 8005b44:	e7d9      	b.n	8005afa <_printf_common+0x8e>
	...

08005b48 <_printf_i>:
 8005b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b4c:	7e0f      	ldrb	r7, [r1, #24]
 8005b4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b50:	2f78      	cmp	r7, #120	; 0x78
 8005b52:	4691      	mov	r9, r2
 8005b54:	4680      	mov	r8, r0
 8005b56:	460c      	mov	r4, r1
 8005b58:	469a      	mov	sl, r3
 8005b5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b5e:	d807      	bhi.n	8005b70 <_printf_i+0x28>
 8005b60:	2f62      	cmp	r7, #98	; 0x62
 8005b62:	d80a      	bhi.n	8005b7a <_printf_i+0x32>
 8005b64:	2f00      	cmp	r7, #0
 8005b66:	f000 80d8 	beq.w	8005d1a <_printf_i+0x1d2>
 8005b6a:	2f58      	cmp	r7, #88	; 0x58
 8005b6c:	f000 80a3 	beq.w	8005cb6 <_printf_i+0x16e>
 8005b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b78:	e03a      	b.n	8005bf0 <_printf_i+0xa8>
 8005b7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b7e:	2b15      	cmp	r3, #21
 8005b80:	d8f6      	bhi.n	8005b70 <_printf_i+0x28>
 8005b82:	a101      	add	r1, pc, #4	; (adr r1, 8005b88 <_printf_i+0x40>)
 8005b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b88:	08005be1 	.word	0x08005be1
 8005b8c:	08005bf5 	.word	0x08005bf5
 8005b90:	08005b71 	.word	0x08005b71
 8005b94:	08005b71 	.word	0x08005b71
 8005b98:	08005b71 	.word	0x08005b71
 8005b9c:	08005b71 	.word	0x08005b71
 8005ba0:	08005bf5 	.word	0x08005bf5
 8005ba4:	08005b71 	.word	0x08005b71
 8005ba8:	08005b71 	.word	0x08005b71
 8005bac:	08005b71 	.word	0x08005b71
 8005bb0:	08005b71 	.word	0x08005b71
 8005bb4:	08005d01 	.word	0x08005d01
 8005bb8:	08005c25 	.word	0x08005c25
 8005bbc:	08005ce3 	.word	0x08005ce3
 8005bc0:	08005b71 	.word	0x08005b71
 8005bc4:	08005b71 	.word	0x08005b71
 8005bc8:	08005d23 	.word	0x08005d23
 8005bcc:	08005b71 	.word	0x08005b71
 8005bd0:	08005c25 	.word	0x08005c25
 8005bd4:	08005b71 	.word	0x08005b71
 8005bd8:	08005b71 	.word	0x08005b71
 8005bdc:	08005ceb 	.word	0x08005ceb
 8005be0:	682b      	ldr	r3, [r5, #0]
 8005be2:	1d1a      	adds	r2, r3, #4
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	602a      	str	r2, [r5, #0]
 8005be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e0a3      	b.n	8005d3c <_printf_i+0x1f4>
 8005bf4:	6820      	ldr	r0, [r4, #0]
 8005bf6:	6829      	ldr	r1, [r5, #0]
 8005bf8:	0606      	lsls	r6, r0, #24
 8005bfa:	f101 0304 	add.w	r3, r1, #4
 8005bfe:	d50a      	bpl.n	8005c16 <_printf_i+0xce>
 8005c00:	680e      	ldr	r6, [r1, #0]
 8005c02:	602b      	str	r3, [r5, #0]
 8005c04:	2e00      	cmp	r6, #0
 8005c06:	da03      	bge.n	8005c10 <_printf_i+0xc8>
 8005c08:	232d      	movs	r3, #45	; 0x2d
 8005c0a:	4276      	negs	r6, r6
 8005c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c10:	485e      	ldr	r0, [pc, #376]	; (8005d8c <_printf_i+0x244>)
 8005c12:	230a      	movs	r3, #10
 8005c14:	e019      	b.n	8005c4a <_printf_i+0x102>
 8005c16:	680e      	ldr	r6, [r1, #0]
 8005c18:	602b      	str	r3, [r5, #0]
 8005c1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c1e:	bf18      	it	ne
 8005c20:	b236      	sxthne	r6, r6
 8005c22:	e7ef      	b.n	8005c04 <_printf_i+0xbc>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	6820      	ldr	r0, [r4, #0]
 8005c28:	1d19      	adds	r1, r3, #4
 8005c2a:	6029      	str	r1, [r5, #0]
 8005c2c:	0601      	lsls	r1, r0, #24
 8005c2e:	d501      	bpl.n	8005c34 <_printf_i+0xec>
 8005c30:	681e      	ldr	r6, [r3, #0]
 8005c32:	e002      	b.n	8005c3a <_printf_i+0xf2>
 8005c34:	0646      	lsls	r6, r0, #25
 8005c36:	d5fb      	bpl.n	8005c30 <_printf_i+0xe8>
 8005c38:	881e      	ldrh	r6, [r3, #0]
 8005c3a:	4854      	ldr	r0, [pc, #336]	; (8005d8c <_printf_i+0x244>)
 8005c3c:	2f6f      	cmp	r7, #111	; 0x6f
 8005c3e:	bf0c      	ite	eq
 8005c40:	2308      	moveq	r3, #8
 8005c42:	230a      	movne	r3, #10
 8005c44:	2100      	movs	r1, #0
 8005c46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c4a:	6865      	ldr	r5, [r4, #4]
 8005c4c:	60a5      	str	r5, [r4, #8]
 8005c4e:	2d00      	cmp	r5, #0
 8005c50:	bfa2      	ittt	ge
 8005c52:	6821      	ldrge	r1, [r4, #0]
 8005c54:	f021 0104 	bicge.w	r1, r1, #4
 8005c58:	6021      	strge	r1, [r4, #0]
 8005c5a:	b90e      	cbnz	r6, 8005c60 <_printf_i+0x118>
 8005c5c:	2d00      	cmp	r5, #0
 8005c5e:	d04d      	beq.n	8005cfc <_printf_i+0x1b4>
 8005c60:	4615      	mov	r5, r2
 8005c62:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c66:	fb03 6711 	mls	r7, r3, r1, r6
 8005c6a:	5dc7      	ldrb	r7, [r0, r7]
 8005c6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c70:	4637      	mov	r7, r6
 8005c72:	42bb      	cmp	r3, r7
 8005c74:	460e      	mov	r6, r1
 8005c76:	d9f4      	bls.n	8005c62 <_printf_i+0x11a>
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d10b      	bne.n	8005c94 <_printf_i+0x14c>
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	07de      	lsls	r6, r3, #31
 8005c80:	d508      	bpl.n	8005c94 <_printf_i+0x14c>
 8005c82:	6923      	ldr	r3, [r4, #16]
 8005c84:	6861      	ldr	r1, [r4, #4]
 8005c86:	4299      	cmp	r1, r3
 8005c88:	bfde      	ittt	le
 8005c8a:	2330      	movle	r3, #48	; 0x30
 8005c8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c90:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005c94:	1b52      	subs	r2, r2, r5
 8005c96:	6122      	str	r2, [r4, #16]
 8005c98:	f8cd a000 	str.w	sl, [sp]
 8005c9c:	464b      	mov	r3, r9
 8005c9e:	aa03      	add	r2, sp, #12
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	f7ff fee2 	bl	8005a6c <_printf_common>
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d14c      	bne.n	8005d46 <_printf_i+0x1fe>
 8005cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cb0:	b004      	add	sp, #16
 8005cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb6:	4835      	ldr	r0, [pc, #212]	; (8005d8c <_printf_i+0x244>)
 8005cb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005cbc:	6829      	ldr	r1, [r5, #0]
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cc4:	6029      	str	r1, [r5, #0]
 8005cc6:	061d      	lsls	r5, r3, #24
 8005cc8:	d514      	bpl.n	8005cf4 <_printf_i+0x1ac>
 8005cca:	07df      	lsls	r7, r3, #31
 8005ccc:	bf44      	itt	mi
 8005cce:	f043 0320 	orrmi.w	r3, r3, #32
 8005cd2:	6023      	strmi	r3, [r4, #0]
 8005cd4:	b91e      	cbnz	r6, 8005cde <_printf_i+0x196>
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	f023 0320 	bic.w	r3, r3, #32
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	2310      	movs	r3, #16
 8005ce0:	e7b0      	b.n	8005c44 <_printf_i+0xfc>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	f043 0320 	orr.w	r3, r3, #32
 8005ce8:	6023      	str	r3, [r4, #0]
 8005cea:	2378      	movs	r3, #120	; 0x78
 8005cec:	4828      	ldr	r0, [pc, #160]	; (8005d90 <_printf_i+0x248>)
 8005cee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cf2:	e7e3      	b.n	8005cbc <_printf_i+0x174>
 8005cf4:	0659      	lsls	r1, r3, #25
 8005cf6:	bf48      	it	mi
 8005cf8:	b2b6      	uxthmi	r6, r6
 8005cfa:	e7e6      	b.n	8005cca <_printf_i+0x182>
 8005cfc:	4615      	mov	r5, r2
 8005cfe:	e7bb      	b.n	8005c78 <_printf_i+0x130>
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	6826      	ldr	r6, [r4, #0]
 8005d04:	6961      	ldr	r1, [r4, #20]
 8005d06:	1d18      	adds	r0, r3, #4
 8005d08:	6028      	str	r0, [r5, #0]
 8005d0a:	0635      	lsls	r5, r6, #24
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	d501      	bpl.n	8005d14 <_printf_i+0x1cc>
 8005d10:	6019      	str	r1, [r3, #0]
 8005d12:	e002      	b.n	8005d1a <_printf_i+0x1d2>
 8005d14:	0670      	lsls	r0, r6, #25
 8005d16:	d5fb      	bpl.n	8005d10 <_printf_i+0x1c8>
 8005d18:	8019      	strh	r1, [r3, #0]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	6123      	str	r3, [r4, #16]
 8005d1e:	4615      	mov	r5, r2
 8005d20:	e7ba      	b.n	8005c98 <_printf_i+0x150>
 8005d22:	682b      	ldr	r3, [r5, #0]
 8005d24:	1d1a      	adds	r2, r3, #4
 8005d26:	602a      	str	r2, [r5, #0]
 8005d28:	681d      	ldr	r5, [r3, #0]
 8005d2a:	6862      	ldr	r2, [r4, #4]
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f7fa fa56 	bl	80001e0 <memchr>
 8005d34:	b108      	cbz	r0, 8005d3a <_printf_i+0x1f2>
 8005d36:	1b40      	subs	r0, r0, r5
 8005d38:	6060      	str	r0, [r4, #4]
 8005d3a:	6863      	ldr	r3, [r4, #4]
 8005d3c:	6123      	str	r3, [r4, #16]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d44:	e7a8      	b.n	8005c98 <_printf_i+0x150>
 8005d46:	6923      	ldr	r3, [r4, #16]
 8005d48:	462a      	mov	r2, r5
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	4640      	mov	r0, r8
 8005d4e:	47d0      	blx	sl
 8005d50:	3001      	adds	r0, #1
 8005d52:	d0ab      	beq.n	8005cac <_printf_i+0x164>
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	079b      	lsls	r3, r3, #30
 8005d58:	d413      	bmi.n	8005d82 <_printf_i+0x23a>
 8005d5a:	68e0      	ldr	r0, [r4, #12]
 8005d5c:	9b03      	ldr	r3, [sp, #12]
 8005d5e:	4298      	cmp	r0, r3
 8005d60:	bfb8      	it	lt
 8005d62:	4618      	movlt	r0, r3
 8005d64:	e7a4      	b.n	8005cb0 <_printf_i+0x168>
 8005d66:	2301      	movs	r3, #1
 8005d68:	4632      	mov	r2, r6
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	4640      	mov	r0, r8
 8005d6e:	47d0      	blx	sl
 8005d70:	3001      	adds	r0, #1
 8005d72:	d09b      	beq.n	8005cac <_printf_i+0x164>
 8005d74:	3501      	adds	r5, #1
 8005d76:	68e3      	ldr	r3, [r4, #12]
 8005d78:	9903      	ldr	r1, [sp, #12]
 8005d7a:	1a5b      	subs	r3, r3, r1
 8005d7c:	42ab      	cmp	r3, r5
 8005d7e:	dcf2      	bgt.n	8005d66 <_printf_i+0x21e>
 8005d80:	e7eb      	b.n	8005d5a <_printf_i+0x212>
 8005d82:	2500      	movs	r5, #0
 8005d84:	f104 0619 	add.w	r6, r4, #25
 8005d88:	e7f5      	b.n	8005d76 <_printf_i+0x22e>
 8005d8a:	bf00      	nop
 8005d8c:	080080fa 	.word	0x080080fa
 8005d90:	0800810b 	.word	0x0800810b

08005d94 <iprintf>:
 8005d94:	b40f      	push	{r0, r1, r2, r3}
 8005d96:	4b0a      	ldr	r3, [pc, #40]	; (8005dc0 <iprintf+0x2c>)
 8005d98:	b513      	push	{r0, r1, r4, lr}
 8005d9a:	681c      	ldr	r4, [r3, #0]
 8005d9c:	b124      	cbz	r4, 8005da8 <iprintf+0x14>
 8005d9e:	69a3      	ldr	r3, [r4, #24]
 8005da0:	b913      	cbnz	r3, 8005da8 <iprintf+0x14>
 8005da2:	4620      	mov	r0, r4
 8005da4:	f001 f8d8 	bl	8006f58 <__sinit>
 8005da8:	ab05      	add	r3, sp, #20
 8005daa:	9a04      	ldr	r2, [sp, #16]
 8005dac:	68a1      	ldr	r1, [r4, #8]
 8005dae:	9301      	str	r3, [sp, #4]
 8005db0:	4620      	mov	r0, r4
 8005db2:	f001 fe95 	bl	8007ae0 <_vfiprintf_r>
 8005db6:	b002      	add	sp, #8
 8005db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dbc:	b004      	add	sp, #16
 8005dbe:	4770      	bx	lr
 8005dc0:	2000000c 	.word	0x2000000c

08005dc4 <_puts_r>:
 8005dc4:	b570      	push	{r4, r5, r6, lr}
 8005dc6:	460e      	mov	r6, r1
 8005dc8:	4605      	mov	r5, r0
 8005dca:	b118      	cbz	r0, 8005dd4 <_puts_r+0x10>
 8005dcc:	6983      	ldr	r3, [r0, #24]
 8005dce:	b90b      	cbnz	r3, 8005dd4 <_puts_r+0x10>
 8005dd0:	f001 f8c2 	bl	8006f58 <__sinit>
 8005dd4:	69ab      	ldr	r3, [r5, #24]
 8005dd6:	68ac      	ldr	r4, [r5, #8]
 8005dd8:	b913      	cbnz	r3, 8005de0 <_puts_r+0x1c>
 8005dda:	4628      	mov	r0, r5
 8005ddc:	f001 f8bc 	bl	8006f58 <__sinit>
 8005de0:	4b2c      	ldr	r3, [pc, #176]	; (8005e94 <_puts_r+0xd0>)
 8005de2:	429c      	cmp	r4, r3
 8005de4:	d120      	bne.n	8005e28 <_puts_r+0x64>
 8005de6:	686c      	ldr	r4, [r5, #4]
 8005de8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dea:	07db      	lsls	r3, r3, #31
 8005dec:	d405      	bmi.n	8005dfa <_puts_r+0x36>
 8005dee:	89a3      	ldrh	r3, [r4, #12]
 8005df0:	0598      	lsls	r0, r3, #22
 8005df2:	d402      	bmi.n	8005dfa <_puts_r+0x36>
 8005df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005df6:	f001 f952 	bl	800709e <__retarget_lock_acquire_recursive>
 8005dfa:	89a3      	ldrh	r3, [r4, #12]
 8005dfc:	0719      	lsls	r1, r3, #28
 8005dfe:	d51d      	bpl.n	8005e3c <_puts_r+0x78>
 8005e00:	6923      	ldr	r3, [r4, #16]
 8005e02:	b1db      	cbz	r3, 8005e3c <_puts_r+0x78>
 8005e04:	3e01      	subs	r6, #1
 8005e06:	68a3      	ldr	r3, [r4, #8]
 8005e08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	60a3      	str	r3, [r4, #8]
 8005e10:	bb39      	cbnz	r1, 8005e62 <_puts_r+0x9e>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	da38      	bge.n	8005e88 <_puts_r+0xc4>
 8005e16:	4622      	mov	r2, r4
 8005e18:	210a      	movs	r1, #10
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	f000 f848 	bl	8005eb0 <__swbuf_r>
 8005e20:	3001      	adds	r0, #1
 8005e22:	d011      	beq.n	8005e48 <_puts_r+0x84>
 8005e24:	250a      	movs	r5, #10
 8005e26:	e011      	b.n	8005e4c <_puts_r+0x88>
 8005e28:	4b1b      	ldr	r3, [pc, #108]	; (8005e98 <_puts_r+0xd4>)
 8005e2a:	429c      	cmp	r4, r3
 8005e2c:	d101      	bne.n	8005e32 <_puts_r+0x6e>
 8005e2e:	68ac      	ldr	r4, [r5, #8]
 8005e30:	e7da      	b.n	8005de8 <_puts_r+0x24>
 8005e32:	4b1a      	ldr	r3, [pc, #104]	; (8005e9c <_puts_r+0xd8>)
 8005e34:	429c      	cmp	r4, r3
 8005e36:	bf08      	it	eq
 8005e38:	68ec      	ldreq	r4, [r5, #12]
 8005e3a:	e7d5      	b.n	8005de8 <_puts_r+0x24>
 8005e3c:	4621      	mov	r1, r4
 8005e3e:	4628      	mov	r0, r5
 8005e40:	f000 f888 	bl	8005f54 <__swsetup_r>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d0dd      	beq.n	8005e04 <_puts_r+0x40>
 8005e48:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005e4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e4e:	07da      	lsls	r2, r3, #31
 8005e50:	d405      	bmi.n	8005e5e <_puts_r+0x9a>
 8005e52:	89a3      	ldrh	r3, [r4, #12]
 8005e54:	059b      	lsls	r3, r3, #22
 8005e56:	d402      	bmi.n	8005e5e <_puts_r+0x9a>
 8005e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e5a:	f001 f921 	bl	80070a0 <__retarget_lock_release_recursive>
 8005e5e:	4628      	mov	r0, r5
 8005e60:	bd70      	pop	{r4, r5, r6, pc}
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	da04      	bge.n	8005e70 <_puts_r+0xac>
 8005e66:	69a2      	ldr	r2, [r4, #24]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	dc06      	bgt.n	8005e7a <_puts_r+0xb6>
 8005e6c:	290a      	cmp	r1, #10
 8005e6e:	d004      	beq.n	8005e7a <_puts_r+0xb6>
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	6022      	str	r2, [r4, #0]
 8005e76:	7019      	strb	r1, [r3, #0]
 8005e78:	e7c5      	b.n	8005e06 <_puts_r+0x42>
 8005e7a:	4622      	mov	r2, r4
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	f000 f817 	bl	8005eb0 <__swbuf_r>
 8005e82:	3001      	adds	r0, #1
 8005e84:	d1bf      	bne.n	8005e06 <_puts_r+0x42>
 8005e86:	e7df      	b.n	8005e48 <_puts_r+0x84>
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	250a      	movs	r5, #10
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	6022      	str	r2, [r4, #0]
 8005e90:	701d      	strb	r5, [r3, #0]
 8005e92:	e7db      	b.n	8005e4c <_puts_r+0x88>
 8005e94:	080081cc 	.word	0x080081cc
 8005e98:	080081ec 	.word	0x080081ec
 8005e9c:	080081ac 	.word	0x080081ac

08005ea0 <puts>:
 8005ea0:	4b02      	ldr	r3, [pc, #8]	; (8005eac <puts+0xc>)
 8005ea2:	4601      	mov	r1, r0
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	f7ff bf8d 	b.w	8005dc4 <_puts_r>
 8005eaa:	bf00      	nop
 8005eac:	2000000c 	.word	0x2000000c

08005eb0 <__swbuf_r>:
 8005eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb2:	460e      	mov	r6, r1
 8005eb4:	4614      	mov	r4, r2
 8005eb6:	4605      	mov	r5, r0
 8005eb8:	b118      	cbz	r0, 8005ec2 <__swbuf_r+0x12>
 8005eba:	6983      	ldr	r3, [r0, #24]
 8005ebc:	b90b      	cbnz	r3, 8005ec2 <__swbuf_r+0x12>
 8005ebe:	f001 f84b 	bl	8006f58 <__sinit>
 8005ec2:	4b21      	ldr	r3, [pc, #132]	; (8005f48 <__swbuf_r+0x98>)
 8005ec4:	429c      	cmp	r4, r3
 8005ec6:	d12b      	bne.n	8005f20 <__swbuf_r+0x70>
 8005ec8:	686c      	ldr	r4, [r5, #4]
 8005eca:	69a3      	ldr	r3, [r4, #24]
 8005ecc:	60a3      	str	r3, [r4, #8]
 8005ece:	89a3      	ldrh	r3, [r4, #12]
 8005ed0:	071a      	lsls	r2, r3, #28
 8005ed2:	d52f      	bpl.n	8005f34 <__swbuf_r+0x84>
 8005ed4:	6923      	ldr	r3, [r4, #16]
 8005ed6:	b36b      	cbz	r3, 8005f34 <__swbuf_r+0x84>
 8005ed8:	6923      	ldr	r3, [r4, #16]
 8005eda:	6820      	ldr	r0, [r4, #0]
 8005edc:	1ac0      	subs	r0, r0, r3
 8005ede:	6963      	ldr	r3, [r4, #20]
 8005ee0:	b2f6      	uxtb	r6, r6
 8005ee2:	4283      	cmp	r3, r0
 8005ee4:	4637      	mov	r7, r6
 8005ee6:	dc04      	bgt.n	8005ef2 <__swbuf_r+0x42>
 8005ee8:	4621      	mov	r1, r4
 8005eea:	4628      	mov	r0, r5
 8005eec:	f000 ffa0 	bl	8006e30 <_fflush_r>
 8005ef0:	bb30      	cbnz	r0, 8005f40 <__swbuf_r+0x90>
 8005ef2:	68a3      	ldr	r3, [r4, #8]
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	60a3      	str	r3, [r4, #8]
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	6022      	str	r2, [r4, #0]
 8005efe:	701e      	strb	r6, [r3, #0]
 8005f00:	6963      	ldr	r3, [r4, #20]
 8005f02:	3001      	adds	r0, #1
 8005f04:	4283      	cmp	r3, r0
 8005f06:	d004      	beq.n	8005f12 <__swbuf_r+0x62>
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	07db      	lsls	r3, r3, #31
 8005f0c:	d506      	bpl.n	8005f1c <__swbuf_r+0x6c>
 8005f0e:	2e0a      	cmp	r6, #10
 8005f10:	d104      	bne.n	8005f1c <__swbuf_r+0x6c>
 8005f12:	4621      	mov	r1, r4
 8005f14:	4628      	mov	r0, r5
 8005f16:	f000 ff8b 	bl	8006e30 <_fflush_r>
 8005f1a:	b988      	cbnz	r0, 8005f40 <__swbuf_r+0x90>
 8005f1c:	4638      	mov	r0, r7
 8005f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f20:	4b0a      	ldr	r3, [pc, #40]	; (8005f4c <__swbuf_r+0x9c>)
 8005f22:	429c      	cmp	r4, r3
 8005f24:	d101      	bne.n	8005f2a <__swbuf_r+0x7a>
 8005f26:	68ac      	ldr	r4, [r5, #8]
 8005f28:	e7cf      	b.n	8005eca <__swbuf_r+0x1a>
 8005f2a:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <__swbuf_r+0xa0>)
 8005f2c:	429c      	cmp	r4, r3
 8005f2e:	bf08      	it	eq
 8005f30:	68ec      	ldreq	r4, [r5, #12]
 8005f32:	e7ca      	b.n	8005eca <__swbuf_r+0x1a>
 8005f34:	4621      	mov	r1, r4
 8005f36:	4628      	mov	r0, r5
 8005f38:	f000 f80c 	bl	8005f54 <__swsetup_r>
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	d0cb      	beq.n	8005ed8 <__swbuf_r+0x28>
 8005f40:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005f44:	e7ea      	b.n	8005f1c <__swbuf_r+0x6c>
 8005f46:	bf00      	nop
 8005f48:	080081cc 	.word	0x080081cc
 8005f4c:	080081ec 	.word	0x080081ec
 8005f50:	080081ac 	.word	0x080081ac

08005f54 <__swsetup_r>:
 8005f54:	4b32      	ldr	r3, [pc, #200]	; (8006020 <__swsetup_r+0xcc>)
 8005f56:	b570      	push	{r4, r5, r6, lr}
 8005f58:	681d      	ldr	r5, [r3, #0]
 8005f5a:	4606      	mov	r6, r0
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	b125      	cbz	r5, 8005f6a <__swsetup_r+0x16>
 8005f60:	69ab      	ldr	r3, [r5, #24]
 8005f62:	b913      	cbnz	r3, 8005f6a <__swsetup_r+0x16>
 8005f64:	4628      	mov	r0, r5
 8005f66:	f000 fff7 	bl	8006f58 <__sinit>
 8005f6a:	4b2e      	ldr	r3, [pc, #184]	; (8006024 <__swsetup_r+0xd0>)
 8005f6c:	429c      	cmp	r4, r3
 8005f6e:	d10f      	bne.n	8005f90 <__swsetup_r+0x3c>
 8005f70:	686c      	ldr	r4, [r5, #4]
 8005f72:	89a3      	ldrh	r3, [r4, #12]
 8005f74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f78:	0719      	lsls	r1, r3, #28
 8005f7a:	d42c      	bmi.n	8005fd6 <__swsetup_r+0x82>
 8005f7c:	06dd      	lsls	r5, r3, #27
 8005f7e:	d411      	bmi.n	8005fa4 <__swsetup_r+0x50>
 8005f80:	2309      	movs	r3, #9
 8005f82:	6033      	str	r3, [r6, #0]
 8005f84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f88:	81a3      	strh	r3, [r4, #12]
 8005f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f8e:	e03e      	b.n	800600e <__swsetup_r+0xba>
 8005f90:	4b25      	ldr	r3, [pc, #148]	; (8006028 <__swsetup_r+0xd4>)
 8005f92:	429c      	cmp	r4, r3
 8005f94:	d101      	bne.n	8005f9a <__swsetup_r+0x46>
 8005f96:	68ac      	ldr	r4, [r5, #8]
 8005f98:	e7eb      	b.n	8005f72 <__swsetup_r+0x1e>
 8005f9a:	4b24      	ldr	r3, [pc, #144]	; (800602c <__swsetup_r+0xd8>)
 8005f9c:	429c      	cmp	r4, r3
 8005f9e:	bf08      	it	eq
 8005fa0:	68ec      	ldreq	r4, [r5, #12]
 8005fa2:	e7e6      	b.n	8005f72 <__swsetup_r+0x1e>
 8005fa4:	0758      	lsls	r0, r3, #29
 8005fa6:	d512      	bpl.n	8005fce <__swsetup_r+0x7a>
 8005fa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005faa:	b141      	cbz	r1, 8005fbe <__swsetup_r+0x6a>
 8005fac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fb0:	4299      	cmp	r1, r3
 8005fb2:	d002      	beq.n	8005fba <__swsetup_r+0x66>
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	f001 fc89 	bl	80078cc <_free_r>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	6363      	str	r3, [r4, #52]	; 0x34
 8005fbe:	89a3      	ldrh	r3, [r4, #12]
 8005fc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fc4:	81a3      	strh	r3, [r4, #12]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	6063      	str	r3, [r4, #4]
 8005fca:	6923      	ldr	r3, [r4, #16]
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	f043 0308 	orr.w	r3, r3, #8
 8005fd4:	81a3      	strh	r3, [r4, #12]
 8005fd6:	6923      	ldr	r3, [r4, #16]
 8005fd8:	b94b      	cbnz	r3, 8005fee <__swsetup_r+0x9a>
 8005fda:	89a3      	ldrh	r3, [r4, #12]
 8005fdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe4:	d003      	beq.n	8005fee <__swsetup_r+0x9a>
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f001 f87f 	bl	80070ec <__smakebuf_r>
 8005fee:	89a0      	ldrh	r0, [r4, #12]
 8005ff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ff4:	f010 0301 	ands.w	r3, r0, #1
 8005ff8:	d00a      	beq.n	8006010 <__swsetup_r+0xbc>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60a3      	str	r3, [r4, #8]
 8005ffe:	6963      	ldr	r3, [r4, #20]
 8006000:	425b      	negs	r3, r3
 8006002:	61a3      	str	r3, [r4, #24]
 8006004:	6923      	ldr	r3, [r4, #16]
 8006006:	b943      	cbnz	r3, 800601a <__swsetup_r+0xc6>
 8006008:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800600c:	d1ba      	bne.n	8005f84 <__swsetup_r+0x30>
 800600e:	bd70      	pop	{r4, r5, r6, pc}
 8006010:	0781      	lsls	r1, r0, #30
 8006012:	bf58      	it	pl
 8006014:	6963      	ldrpl	r3, [r4, #20]
 8006016:	60a3      	str	r3, [r4, #8]
 8006018:	e7f4      	b.n	8006004 <__swsetup_r+0xb0>
 800601a:	2000      	movs	r0, #0
 800601c:	e7f7      	b.n	800600e <__swsetup_r+0xba>
 800601e:	bf00      	nop
 8006020:	2000000c 	.word	0x2000000c
 8006024:	080081cc 	.word	0x080081cc
 8006028:	080081ec 	.word	0x080081ec
 800602c:	080081ac 	.word	0x080081ac

08006030 <quorem>:
 8006030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006034:	6903      	ldr	r3, [r0, #16]
 8006036:	690c      	ldr	r4, [r1, #16]
 8006038:	42a3      	cmp	r3, r4
 800603a:	4607      	mov	r7, r0
 800603c:	f2c0 8081 	blt.w	8006142 <quorem+0x112>
 8006040:	3c01      	subs	r4, #1
 8006042:	f101 0814 	add.w	r8, r1, #20
 8006046:	f100 0514 	add.w	r5, r0, #20
 800604a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800604e:	9301      	str	r3, [sp, #4]
 8006050:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006054:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006058:	3301      	adds	r3, #1
 800605a:	429a      	cmp	r2, r3
 800605c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006060:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006064:	fbb2 f6f3 	udiv	r6, r2, r3
 8006068:	d331      	bcc.n	80060ce <quorem+0x9e>
 800606a:	f04f 0e00 	mov.w	lr, #0
 800606e:	4640      	mov	r0, r8
 8006070:	46ac      	mov	ip, r5
 8006072:	46f2      	mov	sl, lr
 8006074:	f850 2b04 	ldr.w	r2, [r0], #4
 8006078:	b293      	uxth	r3, r2
 800607a:	fb06 e303 	mla	r3, r6, r3, lr
 800607e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006082:	b29b      	uxth	r3, r3
 8006084:	ebaa 0303 	sub.w	r3, sl, r3
 8006088:	f8dc a000 	ldr.w	sl, [ip]
 800608c:	0c12      	lsrs	r2, r2, #16
 800608e:	fa13 f38a 	uxtah	r3, r3, sl
 8006092:	fb06 e202 	mla	r2, r6, r2, lr
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	9b00      	ldr	r3, [sp, #0]
 800609a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800609e:	b292      	uxth	r2, r2
 80060a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80060a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060a8:	f8bd 3000 	ldrh.w	r3, [sp]
 80060ac:	4581      	cmp	r9, r0
 80060ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060b2:	f84c 3b04 	str.w	r3, [ip], #4
 80060b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80060ba:	d2db      	bcs.n	8006074 <quorem+0x44>
 80060bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80060c0:	b92b      	cbnz	r3, 80060ce <quorem+0x9e>
 80060c2:	9b01      	ldr	r3, [sp, #4]
 80060c4:	3b04      	subs	r3, #4
 80060c6:	429d      	cmp	r5, r3
 80060c8:	461a      	mov	r2, r3
 80060ca:	d32e      	bcc.n	800612a <quorem+0xfa>
 80060cc:	613c      	str	r4, [r7, #16]
 80060ce:	4638      	mov	r0, r7
 80060d0:	f001 fae4 	bl	800769c <__mcmp>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	db24      	blt.n	8006122 <quorem+0xf2>
 80060d8:	3601      	adds	r6, #1
 80060da:	4628      	mov	r0, r5
 80060dc:	f04f 0c00 	mov.w	ip, #0
 80060e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80060e4:	f8d0 e000 	ldr.w	lr, [r0]
 80060e8:	b293      	uxth	r3, r2
 80060ea:	ebac 0303 	sub.w	r3, ip, r3
 80060ee:	0c12      	lsrs	r2, r2, #16
 80060f0:	fa13 f38e 	uxtah	r3, r3, lr
 80060f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006102:	45c1      	cmp	r9, r8
 8006104:	f840 3b04 	str.w	r3, [r0], #4
 8006108:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800610c:	d2e8      	bcs.n	80060e0 <quorem+0xb0>
 800610e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006112:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006116:	b922      	cbnz	r2, 8006122 <quorem+0xf2>
 8006118:	3b04      	subs	r3, #4
 800611a:	429d      	cmp	r5, r3
 800611c:	461a      	mov	r2, r3
 800611e:	d30a      	bcc.n	8006136 <quorem+0x106>
 8006120:	613c      	str	r4, [r7, #16]
 8006122:	4630      	mov	r0, r6
 8006124:	b003      	add	sp, #12
 8006126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800612a:	6812      	ldr	r2, [r2, #0]
 800612c:	3b04      	subs	r3, #4
 800612e:	2a00      	cmp	r2, #0
 8006130:	d1cc      	bne.n	80060cc <quorem+0x9c>
 8006132:	3c01      	subs	r4, #1
 8006134:	e7c7      	b.n	80060c6 <quorem+0x96>
 8006136:	6812      	ldr	r2, [r2, #0]
 8006138:	3b04      	subs	r3, #4
 800613a:	2a00      	cmp	r2, #0
 800613c:	d1f0      	bne.n	8006120 <quorem+0xf0>
 800613e:	3c01      	subs	r4, #1
 8006140:	e7eb      	b.n	800611a <quorem+0xea>
 8006142:	2000      	movs	r0, #0
 8006144:	e7ee      	b.n	8006124 <quorem+0xf4>
	...

08006148 <_dtoa_r>:
 8006148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614c:	ed2d 8b04 	vpush	{d8-d9}
 8006150:	ec57 6b10 	vmov	r6, r7, d0
 8006154:	b093      	sub	sp, #76	; 0x4c
 8006156:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006158:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800615c:	9106      	str	r1, [sp, #24]
 800615e:	ee10 aa10 	vmov	sl, s0
 8006162:	4604      	mov	r4, r0
 8006164:	9209      	str	r2, [sp, #36]	; 0x24
 8006166:	930c      	str	r3, [sp, #48]	; 0x30
 8006168:	46bb      	mov	fp, r7
 800616a:	b975      	cbnz	r5, 800618a <_dtoa_r+0x42>
 800616c:	2010      	movs	r0, #16
 800616e:	f000 fffd 	bl	800716c <malloc>
 8006172:	4602      	mov	r2, r0
 8006174:	6260      	str	r0, [r4, #36]	; 0x24
 8006176:	b920      	cbnz	r0, 8006182 <_dtoa_r+0x3a>
 8006178:	4ba7      	ldr	r3, [pc, #668]	; (8006418 <_dtoa_r+0x2d0>)
 800617a:	21ea      	movs	r1, #234	; 0xea
 800617c:	48a7      	ldr	r0, [pc, #668]	; (800641c <_dtoa_r+0x2d4>)
 800617e:	f001 fe45 	bl	8007e0c <__assert_func>
 8006182:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006186:	6005      	str	r5, [r0, #0]
 8006188:	60c5      	str	r5, [r0, #12]
 800618a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800618c:	6819      	ldr	r1, [r3, #0]
 800618e:	b151      	cbz	r1, 80061a6 <_dtoa_r+0x5e>
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	604a      	str	r2, [r1, #4]
 8006194:	2301      	movs	r3, #1
 8006196:	4093      	lsls	r3, r2
 8006198:	608b      	str	r3, [r1, #8]
 800619a:	4620      	mov	r0, r4
 800619c:	f001 f83c 	bl	8007218 <_Bfree>
 80061a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	1e3b      	subs	r3, r7, #0
 80061a8:	bfaa      	itet	ge
 80061aa:	2300      	movge	r3, #0
 80061ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80061b0:	f8c8 3000 	strge.w	r3, [r8]
 80061b4:	4b9a      	ldr	r3, [pc, #616]	; (8006420 <_dtoa_r+0x2d8>)
 80061b6:	bfbc      	itt	lt
 80061b8:	2201      	movlt	r2, #1
 80061ba:	f8c8 2000 	strlt.w	r2, [r8]
 80061be:	ea33 030b 	bics.w	r3, r3, fp
 80061c2:	d11b      	bne.n	80061fc <_dtoa_r+0xb4>
 80061c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061d0:	4333      	orrs	r3, r6
 80061d2:	f000 8592 	beq.w	8006cfa <_dtoa_r+0xbb2>
 80061d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061d8:	b963      	cbnz	r3, 80061f4 <_dtoa_r+0xac>
 80061da:	4b92      	ldr	r3, [pc, #584]	; (8006424 <_dtoa_r+0x2dc>)
 80061dc:	e022      	b.n	8006224 <_dtoa_r+0xdc>
 80061de:	4b92      	ldr	r3, [pc, #584]	; (8006428 <_dtoa_r+0x2e0>)
 80061e0:	9301      	str	r3, [sp, #4]
 80061e2:	3308      	adds	r3, #8
 80061e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061e6:	6013      	str	r3, [r2, #0]
 80061e8:	9801      	ldr	r0, [sp, #4]
 80061ea:	b013      	add	sp, #76	; 0x4c
 80061ec:	ecbd 8b04 	vpop	{d8-d9}
 80061f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f4:	4b8b      	ldr	r3, [pc, #556]	; (8006424 <_dtoa_r+0x2dc>)
 80061f6:	9301      	str	r3, [sp, #4]
 80061f8:	3303      	adds	r3, #3
 80061fa:	e7f3      	b.n	80061e4 <_dtoa_r+0x9c>
 80061fc:	2200      	movs	r2, #0
 80061fe:	2300      	movs	r3, #0
 8006200:	4650      	mov	r0, sl
 8006202:	4659      	mov	r1, fp
 8006204:	f7fa fc60 	bl	8000ac8 <__aeabi_dcmpeq>
 8006208:	ec4b ab19 	vmov	d9, sl, fp
 800620c:	4680      	mov	r8, r0
 800620e:	b158      	cbz	r0, 8006228 <_dtoa_r+0xe0>
 8006210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006212:	2301      	movs	r3, #1
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 856b 	beq.w	8006cf4 <_dtoa_r+0xbac>
 800621e:	4883      	ldr	r0, [pc, #524]	; (800642c <_dtoa_r+0x2e4>)
 8006220:	6018      	str	r0, [r3, #0]
 8006222:	1e43      	subs	r3, r0, #1
 8006224:	9301      	str	r3, [sp, #4]
 8006226:	e7df      	b.n	80061e8 <_dtoa_r+0xa0>
 8006228:	ec4b ab10 	vmov	d0, sl, fp
 800622c:	aa10      	add	r2, sp, #64	; 0x40
 800622e:	a911      	add	r1, sp, #68	; 0x44
 8006230:	4620      	mov	r0, r4
 8006232:	f001 fad9 	bl	80077e8 <__d2b>
 8006236:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800623a:	ee08 0a10 	vmov	s16, r0
 800623e:	2d00      	cmp	r5, #0
 8006240:	f000 8084 	beq.w	800634c <_dtoa_r+0x204>
 8006244:	ee19 3a90 	vmov	r3, s19
 8006248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800624c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006250:	4656      	mov	r6, sl
 8006252:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006256:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800625a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800625e:	4b74      	ldr	r3, [pc, #464]	; (8006430 <_dtoa_r+0x2e8>)
 8006260:	2200      	movs	r2, #0
 8006262:	4630      	mov	r0, r6
 8006264:	4639      	mov	r1, r7
 8006266:	f7fa f80f 	bl	8000288 <__aeabi_dsub>
 800626a:	a365      	add	r3, pc, #404	; (adr r3, 8006400 <_dtoa_r+0x2b8>)
 800626c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006270:	f7fa f9c2 	bl	80005f8 <__aeabi_dmul>
 8006274:	a364      	add	r3, pc, #400	; (adr r3, 8006408 <_dtoa_r+0x2c0>)
 8006276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627a:	f7fa f807 	bl	800028c <__adddf3>
 800627e:	4606      	mov	r6, r0
 8006280:	4628      	mov	r0, r5
 8006282:	460f      	mov	r7, r1
 8006284:	f7fa f94e 	bl	8000524 <__aeabi_i2d>
 8006288:	a361      	add	r3, pc, #388	; (adr r3, 8006410 <_dtoa_r+0x2c8>)
 800628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628e:	f7fa f9b3 	bl	80005f8 <__aeabi_dmul>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4630      	mov	r0, r6
 8006298:	4639      	mov	r1, r7
 800629a:	f7f9 fff7 	bl	800028c <__adddf3>
 800629e:	4606      	mov	r6, r0
 80062a0:	460f      	mov	r7, r1
 80062a2:	f7fa fc59 	bl	8000b58 <__aeabi_d2iz>
 80062a6:	2200      	movs	r2, #0
 80062a8:	9000      	str	r0, [sp, #0]
 80062aa:	2300      	movs	r3, #0
 80062ac:	4630      	mov	r0, r6
 80062ae:	4639      	mov	r1, r7
 80062b0:	f7fa fc14 	bl	8000adc <__aeabi_dcmplt>
 80062b4:	b150      	cbz	r0, 80062cc <_dtoa_r+0x184>
 80062b6:	9800      	ldr	r0, [sp, #0]
 80062b8:	f7fa f934 	bl	8000524 <__aeabi_i2d>
 80062bc:	4632      	mov	r2, r6
 80062be:	463b      	mov	r3, r7
 80062c0:	f7fa fc02 	bl	8000ac8 <__aeabi_dcmpeq>
 80062c4:	b910      	cbnz	r0, 80062cc <_dtoa_r+0x184>
 80062c6:	9b00      	ldr	r3, [sp, #0]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	9b00      	ldr	r3, [sp, #0]
 80062ce:	2b16      	cmp	r3, #22
 80062d0:	d85a      	bhi.n	8006388 <_dtoa_r+0x240>
 80062d2:	9a00      	ldr	r2, [sp, #0]
 80062d4:	4b57      	ldr	r3, [pc, #348]	; (8006434 <_dtoa_r+0x2ec>)
 80062d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062de:	ec51 0b19 	vmov	r0, r1, d9
 80062e2:	f7fa fbfb 	bl	8000adc <__aeabi_dcmplt>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d050      	beq.n	800638c <_dtoa_r+0x244>
 80062ea:	9b00      	ldr	r3, [sp, #0]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	2300      	movs	r3, #0
 80062f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80062f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062f6:	1b5d      	subs	r5, r3, r5
 80062f8:	1e6b      	subs	r3, r5, #1
 80062fa:	9305      	str	r3, [sp, #20]
 80062fc:	bf45      	ittet	mi
 80062fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8006302:	9304      	strmi	r3, [sp, #16]
 8006304:	2300      	movpl	r3, #0
 8006306:	2300      	movmi	r3, #0
 8006308:	bf4c      	ite	mi
 800630a:	9305      	strmi	r3, [sp, #20]
 800630c:	9304      	strpl	r3, [sp, #16]
 800630e:	9b00      	ldr	r3, [sp, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	db3d      	blt.n	8006390 <_dtoa_r+0x248>
 8006314:	9b05      	ldr	r3, [sp, #20]
 8006316:	9a00      	ldr	r2, [sp, #0]
 8006318:	920a      	str	r2, [sp, #40]	; 0x28
 800631a:	4413      	add	r3, r2
 800631c:	9305      	str	r3, [sp, #20]
 800631e:	2300      	movs	r3, #0
 8006320:	9307      	str	r3, [sp, #28]
 8006322:	9b06      	ldr	r3, [sp, #24]
 8006324:	2b09      	cmp	r3, #9
 8006326:	f200 8089 	bhi.w	800643c <_dtoa_r+0x2f4>
 800632a:	2b05      	cmp	r3, #5
 800632c:	bfc4      	itt	gt
 800632e:	3b04      	subgt	r3, #4
 8006330:	9306      	strgt	r3, [sp, #24]
 8006332:	9b06      	ldr	r3, [sp, #24]
 8006334:	f1a3 0302 	sub.w	r3, r3, #2
 8006338:	bfcc      	ite	gt
 800633a:	2500      	movgt	r5, #0
 800633c:	2501      	movle	r5, #1
 800633e:	2b03      	cmp	r3, #3
 8006340:	f200 8087 	bhi.w	8006452 <_dtoa_r+0x30a>
 8006344:	e8df f003 	tbb	[pc, r3]
 8006348:	59383a2d 	.word	0x59383a2d
 800634c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006350:	441d      	add	r5, r3
 8006352:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006356:	2b20      	cmp	r3, #32
 8006358:	bfc1      	itttt	gt
 800635a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800635e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006362:	fa0b f303 	lslgt.w	r3, fp, r3
 8006366:	fa26 f000 	lsrgt.w	r0, r6, r0
 800636a:	bfda      	itte	le
 800636c:	f1c3 0320 	rsble	r3, r3, #32
 8006370:	fa06 f003 	lslle.w	r0, r6, r3
 8006374:	4318      	orrgt	r0, r3
 8006376:	f7fa f8c5 	bl	8000504 <__aeabi_ui2d>
 800637a:	2301      	movs	r3, #1
 800637c:	4606      	mov	r6, r0
 800637e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006382:	3d01      	subs	r5, #1
 8006384:	930e      	str	r3, [sp, #56]	; 0x38
 8006386:	e76a      	b.n	800625e <_dtoa_r+0x116>
 8006388:	2301      	movs	r3, #1
 800638a:	e7b2      	b.n	80062f2 <_dtoa_r+0x1aa>
 800638c:	900b      	str	r0, [sp, #44]	; 0x2c
 800638e:	e7b1      	b.n	80062f4 <_dtoa_r+0x1ac>
 8006390:	9b04      	ldr	r3, [sp, #16]
 8006392:	9a00      	ldr	r2, [sp, #0]
 8006394:	1a9b      	subs	r3, r3, r2
 8006396:	9304      	str	r3, [sp, #16]
 8006398:	4253      	negs	r3, r2
 800639a:	9307      	str	r3, [sp, #28]
 800639c:	2300      	movs	r3, #0
 800639e:	930a      	str	r3, [sp, #40]	; 0x28
 80063a0:	e7bf      	b.n	8006322 <_dtoa_r+0x1da>
 80063a2:	2300      	movs	r3, #0
 80063a4:	9308      	str	r3, [sp, #32]
 80063a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	dc55      	bgt.n	8006458 <_dtoa_r+0x310>
 80063ac:	2301      	movs	r3, #1
 80063ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80063b2:	461a      	mov	r2, r3
 80063b4:	9209      	str	r2, [sp, #36]	; 0x24
 80063b6:	e00c      	b.n	80063d2 <_dtoa_r+0x28a>
 80063b8:	2301      	movs	r3, #1
 80063ba:	e7f3      	b.n	80063a4 <_dtoa_r+0x25c>
 80063bc:	2300      	movs	r3, #0
 80063be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063c0:	9308      	str	r3, [sp, #32]
 80063c2:	9b00      	ldr	r3, [sp, #0]
 80063c4:	4413      	add	r3, r2
 80063c6:	9302      	str	r3, [sp, #8]
 80063c8:	3301      	adds	r3, #1
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	9303      	str	r3, [sp, #12]
 80063ce:	bfb8      	it	lt
 80063d0:	2301      	movlt	r3, #1
 80063d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80063d4:	2200      	movs	r2, #0
 80063d6:	6042      	str	r2, [r0, #4]
 80063d8:	2204      	movs	r2, #4
 80063da:	f102 0614 	add.w	r6, r2, #20
 80063de:	429e      	cmp	r6, r3
 80063e0:	6841      	ldr	r1, [r0, #4]
 80063e2:	d93d      	bls.n	8006460 <_dtoa_r+0x318>
 80063e4:	4620      	mov	r0, r4
 80063e6:	f000 fed7 	bl	8007198 <_Balloc>
 80063ea:	9001      	str	r0, [sp, #4]
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d13b      	bne.n	8006468 <_dtoa_r+0x320>
 80063f0:	4b11      	ldr	r3, [pc, #68]	; (8006438 <_dtoa_r+0x2f0>)
 80063f2:	4602      	mov	r2, r0
 80063f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80063f8:	e6c0      	b.n	800617c <_dtoa_r+0x34>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e7df      	b.n	80063be <_dtoa_r+0x276>
 80063fe:	bf00      	nop
 8006400:	636f4361 	.word	0x636f4361
 8006404:	3fd287a7 	.word	0x3fd287a7
 8006408:	8b60c8b3 	.word	0x8b60c8b3
 800640c:	3fc68a28 	.word	0x3fc68a28
 8006410:	509f79fb 	.word	0x509f79fb
 8006414:	3fd34413 	.word	0x3fd34413
 8006418:	08008129 	.word	0x08008129
 800641c:	08008140 	.word	0x08008140
 8006420:	7ff00000 	.word	0x7ff00000
 8006424:	08008125 	.word	0x08008125
 8006428:	0800811c 	.word	0x0800811c
 800642c:	080080f9 	.word	0x080080f9
 8006430:	3ff80000 	.word	0x3ff80000
 8006434:	08008290 	.word	0x08008290
 8006438:	0800819b 	.word	0x0800819b
 800643c:	2501      	movs	r5, #1
 800643e:	2300      	movs	r3, #0
 8006440:	9306      	str	r3, [sp, #24]
 8006442:	9508      	str	r5, [sp, #32]
 8006444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006448:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800644c:	2200      	movs	r2, #0
 800644e:	2312      	movs	r3, #18
 8006450:	e7b0      	b.n	80063b4 <_dtoa_r+0x26c>
 8006452:	2301      	movs	r3, #1
 8006454:	9308      	str	r3, [sp, #32]
 8006456:	e7f5      	b.n	8006444 <_dtoa_r+0x2fc>
 8006458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800645a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800645e:	e7b8      	b.n	80063d2 <_dtoa_r+0x28a>
 8006460:	3101      	adds	r1, #1
 8006462:	6041      	str	r1, [r0, #4]
 8006464:	0052      	lsls	r2, r2, #1
 8006466:	e7b8      	b.n	80063da <_dtoa_r+0x292>
 8006468:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800646a:	9a01      	ldr	r2, [sp, #4]
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	9b03      	ldr	r3, [sp, #12]
 8006470:	2b0e      	cmp	r3, #14
 8006472:	f200 809d 	bhi.w	80065b0 <_dtoa_r+0x468>
 8006476:	2d00      	cmp	r5, #0
 8006478:	f000 809a 	beq.w	80065b0 <_dtoa_r+0x468>
 800647c:	9b00      	ldr	r3, [sp, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	dd32      	ble.n	80064e8 <_dtoa_r+0x3a0>
 8006482:	4ab7      	ldr	r2, [pc, #732]	; (8006760 <_dtoa_r+0x618>)
 8006484:	f003 030f 	and.w	r3, r3, #15
 8006488:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800648c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006490:	9b00      	ldr	r3, [sp, #0]
 8006492:	05d8      	lsls	r0, r3, #23
 8006494:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006498:	d516      	bpl.n	80064c8 <_dtoa_r+0x380>
 800649a:	4bb2      	ldr	r3, [pc, #712]	; (8006764 <_dtoa_r+0x61c>)
 800649c:	ec51 0b19 	vmov	r0, r1, d9
 80064a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064a4:	f7fa f9d2 	bl	800084c <__aeabi_ddiv>
 80064a8:	f007 070f 	and.w	r7, r7, #15
 80064ac:	4682      	mov	sl, r0
 80064ae:	468b      	mov	fp, r1
 80064b0:	2503      	movs	r5, #3
 80064b2:	4eac      	ldr	r6, [pc, #688]	; (8006764 <_dtoa_r+0x61c>)
 80064b4:	b957      	cbnz	r7, 80064cc <_dtoa_r+0x384>
 80064b6:	4642      	mov	r2, r8
 80064b8:	464b      	mov	r3, r9
 80064ba:	4650      	mov	r0, sl
 80064bc:	4659      	mov	r1, fp
 80064be:	f7fa f9c5 	bl	800084c <__aeabi_ddiv>
 80064c2:	4682      	mov	sl, r0
 80064c4:	468b      	mov	fp, r1
 80064c6:	e028      	b.n	800651a <_dtoa_r+0x3d2>
 80064c8:	2502      	movs	r5, #2
 80064ca:	e7f2      	b.n	80064b2 <_dtoa_r+0x36a>
 80064cc:	07f9      	lsls	r1, r7, #31
 80064ce:	d508      	bpl.n	80064e2 <_dtoa_r+0x39a>
 80064d0:	4640      	mov	r0, r8
 80064d2:	4649      	mov	r1, r9
 80064d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064d8:	f7fa f88e 	bl	80005f8 <__aeabi_dmul>
 80064dc:	3501      	adds	r5, #1
 80064de:	4680      	mov	r8, r0
 80064e0:	4689      	mov	r9, r1
 80064e2:	107f      	asrs	r7, r7, #1
 80064e4:	3608      	adds	r6, #8
 80064e6:	e7e5      	b.n	80064b4 <_dtoa_r+0x36c>
 80064e8:	f000 809b 	beq.w	8006622 <_dtoa_r+0x4da>
 80064ec:	9b00      	ldr	r3, [sp, #0]
 80064ee:	4f9d      	ldr	r7, [pc, #628]	; (8006764 <_dtoa_r+0x61c>)
 80064f0:	425e      	negs	r6, r3
 80064f2:	4b9b      	ldr	r3, [pc, #620]	; (8006760 <_dtoa_r+0x618>)
 80064f4:	f006 020f 	and.w	r2, r6, #15
 80064f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006500:	ec51 0b19 	vmov	r0, r1, d9
 8006504:	f7fa f878 	bl	80005f8 <__aeabi_dmul>
 8006508:	1136      	asrs	r6, r6, #4
 800650a:	4682      	mov	sl, r0
 800650c:	468b      	mov	fp, r1
 800650e:	2300      	movs	r3, #0
 8006510:	2502      	movs	r5, #2
 8006512:	2e00      	cmp	r6, #0
 8006514:	d17a      	bne.n	800660c <_dtoa_r+0x4c4>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1d3      	bne.n	80064c2 <_dtoa_r+0x37a>
 800651a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 8082 	beq.w	8006626 <_dtoa_r+0x4de>
 8006522:	4b91      	ldr	r3, [pc, #580]	; (8006768 <_dtoa_r+0x620>)
 8006524:	2200      	movs	r2, #0
 8006526:	4650      	mov	r0, sl
 8006528:	4659      	mov	r1, fp
 800652a:	f7fa fad7 	bl	8000adc <__aeabi_dcmplt>
 800652e:	2800      	cmp	r0, #0
 8006530:	d079      	beq.n	8006626 <_dtoa_r+0x4de>
 8006532:	9b03      	ldr	r3, [sp, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d076      	beq.n	8006626 <_dtoa_r+0x4de>
 8006538:	9b02      	ldr	r3, [sp, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	dd36      	ble.n	80065ac <_dtoa_r+0x464>
 800653e:	9b00      	ldr	r3, [sp, #0]
 8006540:	4650      	mov	r0, sl
 8006542:	4659      	mov	r1, fp
 8006544:	1e5f      	subs	r7, r3, #1
 8006546:	2200      	movs	r2, #0
 8006548:	4b88      	ldr	r3, [pc, #544]	; (800676c <_dtoa_r+0x624>)
 800654a:	f7fa f855 	bl	80005f8 <__aeabi_dmul>
 800654e:	9e02      	ldr	r6, [sp, #8]
 8006550:	4682      	mov	sl, r0
 8006552:	468b      	mov	fp, r1
 8006554:	3501      	adds	r5, #1
 8006556:	4628      	mov	r0, r5
 8006558:	f7f9 ffe4 	bl	8000524 <__aeabi_i2d>
 800655c:	4652      	mov	r2, sl
 800655e:	465b      	mov	r3, fp
 8006560:	f7fa f84a 	bl	80005f8 <__aeabi_dmul>
 8006564:	4b82      	ldr	r3, [pc, #520]	; (8006770 <_dtoa_r+0x628>)
 8006566:	2200      	movs	r2, #0
 8006568:	f7f9 fe90 	bl	800028c <__adddf3>
 800656c:	46d0      	mov	r8, sl
 800656e:	46d9      	mov	r9, fp
 8006570:	4682      	mov	sl, r0
 8006572:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006576:	2e00      	cmp	r6, #0
 8006578:	d158      	bne.n	800662c <_dtoa_r+0x4e4>
 800657a:	4b7e      	ldr	r3, [pc, #504]	; (8006774 <_dtoa_r+0x62c>)
 800657c:	2200      	movs	r2, #0
 800657e:	4640      	mov	r0, r8
 8006580:	4649      	mov	r1, r9
 8006582:	f7f9 fe81 	bl	8000288 <__aeabi_dsub>
 8006586:	4652      	mov	r2, sl
 8006588:	465b      	mov	r3, fp
 800658a:	4680      	mov	r8, r0
 800658c:	4689      	mov	r9, r1
 800658e:	f7fa fac3 	bl	8000b18 <__aeabi_dcmpgt>
 8006592:	2800      	cmp	r0, #0
 8006594:	f040 8295 	bne.w	8006ac2 <_dtoa_r+0x97a>
 8006598:	4652      	mov	r2, sl
 800659a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800659e:	4640      	mov	r0, r8
 80065a0:	4649      	mov	r1, r9
 80065a2:	f7fa fa9b 	bl	8000adc <__aeabi_dcmplt>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	f040 8289 	bne.w	8006abe <_dtoa_r+0x976>
 80065ac:	ec5b ab19 	vmov	sl, fp, d9
 80065b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f2c0 8148 	blt.w	8006848 <_dtoa_r+0x700>
 80065b8:	9a00      	ldr	r2, [sp, #0]
 80065ba:	2a0e      	cmp	r2, #14
 80065bc:	f300 8144 	bgt.w	8006848 <_dtoa_r+0x700>
 80065c0:	4b67      	ldr	r3, [pc, #412]	; (8006760 <_dtoa_r+0x618>)
 80065c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f280 80d5 	bge.w	800677c <_dtoa_r+0x634>
 80065d2:	9b03      	ldr	r3, [sp, #12]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f300 80d1 	bgt.w	800677c <_dtoa_r+0x634>
 80065da:	f040 826f 	bne.w	8006abc <_dtoa_r+0x974>
 80065de:	4b65      	ldr	r3, [pc, #404]	; (8006774 <_dtoa_r+0x62c>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	4640      	mov	r0, r8
 80065e4:	4649      	mov	r1, r9
 80065e6:	f7fa f807 	bl	80005f8 <__aeabi_dmul>
 80065ea:	4652      	mov	r2, sl
 80065ec:	465b      	mov	r3, fp
 80065ee:	f7fa fa89 	bl	8000b04 <__aeabi_dcmpge>
 80065f2:	9e03      	ldr	r6, [sp, #12]
 80065f4:	4637      	mov	r7, r6
 80065f6:	2800      	cmp	r0, #0
 80065f8:	f040 8245 	bne.w	8006a86 <_dtoa_r+0x93e>
 80065fc:	9d01      	ldr	r5, [sp, #4]
 80065fe:	2331      	movs	r3, #49	; 0x31
 8006600:	f805 3b01 	strb.w	r3, [r5], #1
 8006604:	9b00      	ldr	r3, [sp, #0]
 8006606:	3301      	adds	r3, #1
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	e240      	b.n	8006a8e <_dtoa_r+0x946>
 800660c:	07f2      	lsls	r2, r6, #31
 800660e:	d505      	bpl.n	800661c <_dtoa_r+0x4d4>
 8006610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006614:	f7f9 fff0 	bl	80005f8 <__aeabi_dmul>
 8006618:	3501      	adds	r5, #1
 800661a:	2301      	movs	r3, #1
 800661c:	1076      	asrs	r6, r6, #1
 800661e:	3708      	adds	r7, #8
 8006620:	e777      	b.n	8006512 <_dtoa_r+0x3ca>
 8006622:	2502      	movs	r5, #2
 8006624:	e779      	b.n	800651a <_dtoa_r+0x3d2>
 8006626:	9f00      	ldr	r7, [sp, #0]
 8006628:	9e03      	ldr	r6, [sp, #12]
 800662a:	e794      	b.n	8006556 <_dtoa_r+0x40e>
 800662c:	9901      	ldr	r1, [sp, #4]
 800662e:	4b4c      	ldr	r3, [pc, #304]	; (8006760 <_dtoa_r+0x618>)
 8006630:	4431      	add	r1, r6
 8006632:	910d      	str	r1, [sp, #52]	; 0x34
 8006634:	9908      	ldr	r1, [sp, #32]
 8006636:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800663a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800663e:	2900      	cmp	r1, #0
 8006640:	d043      	beq.n	80066ca <_dtoa_r+0x582>
 8006642:	494d      	ldr	r1, [pc, #308]	; (8006778 <_dtoa_r+0x630>)
 8006644:	2000      	movs	r0, #0
 8006646:	f7fa f901 	bl	800084c <__aeabi_ddiv>
 800664a:	4652      	mov	r2, sl
 800664c:	465b      	mov	r3, fp
 800664e:	f7f9 fe1b 	bl	8000288 <__aeabi_dsub>
 8006652:	9d01      	ldr	r5, [sp, #4]
 8006654:	4682      	mov	sl, r0
 8006656:	468b      	mov	fp, r1
 8006658:	4649      	mov	r1, r9
 800665a:	4640      	mov	r0, r8
 800665c:	f7fa fa7c 	bl	8000b58 <__aeabi_d2iz>
 8006660:	4606      	mov	r6, r0
 8006662:	f7f9 ff5f 	bl	8000524 <__aeabi_i2d>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	4640      	mov	r0, r8
 800666c:	4649      	mov	r1, r9
 800666e:	f7f9 fe0b 	bl	8000288 <__aeabi_dsub>
 8006672:	3630      	adds	r6, #48	; 0x30
 8006674:	f805 6b01 	strb.w	r6, [r5], #1
 8006678:	4652      	mov	r2, sl
 800667a:	465b      	mov	r3, fp
 800667c:	4680      	mov	r8, r0
 800667e:	4689      	mov	r9, r1
 8006680:	f7fa fa2c 	bl	8000adc <__aeabi_dcmplt>
 8006684:	2800      	cmp	r0, #0
 8006686:	d163      	bne.n	8006750 <_dtoa_r+0x608>
 8006688:	4642      	mov	r2, r8
 800668a:	464b      	mov	r3, r9
 800668c:	4936      	ldr	r1, [pc, #216]	; (8006768 <_dtoa_r+0x620>)
 800668e:	2000      	movs	r0, #0
 8006690:	f7f9 fdfa 	bl	8000288 <__aeabi_dsub>
 8006694:	4652      	mov	r2, sl
 8006696:	465b      	mov	r3, fp
 8006698:	f7fa fa20 	bl	8000adc <__aeabi_dcmplt>
 800669c:	2800      	cmp	r0, #0
 800669e:	f040 80b5 	bne.w	800680c <_dtoa_r+0x6c4>
 80066a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066a4:	429d      	cmp	r5, r3
 80066a6:	d081      	beq.n	80065ac <_dtoa_r+0x464>
 80066a8:	4b30      	ldr	r3, [pc, #192]	; (800676c <_dtoa_r+0x624>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	4650      	mov	r0, sl
 80066ae:	4659      	mov	r1, fp
 80066b0:	f7f9 ffa2 	bl	80005f8 <__aeabi_dmul>
 80066b4:	4b2d      	ldr	r3, [pc, #180]	; (800676c <_dtoa_r+0x624>)
 80066b6:	4682      	mov	sl, r0
 80066b8:	468b      	mov	fp, r1
 80066ba:	4640      	mov	r0, r8
 80066bc:	4649      	mov	r1, r9
 80066be:	2200      	movs	r2, #0
 80066c0:	f7f9 ff9a 	bl	80005f8 <__aeabi_dmul>
 80066c4:	4680      	mov	r8, r0
 80066c6:	4689      	mov	r9, r1
 80066c8:	e7c6      	b.n	8006658 <_dtoa_r+0x510>
 80066ca:	4650      	mov	r0, sl
 80066cc:	4659      	mov	r1, fp
 80066ce:	f7f9 ff93 	bl	80005f8 <__aeabi_dmul>
 80066d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066d4:	9d01      	ldr	r5, [sp, #4]
 80066d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80066d8:	4682      	mov	sl, r0
 80066da:	468b      	mov	fp, r1
 80066dc:	4649      	mov	r1, r9
 80066de:	4640      	mov	r0, r8
 80066e0:	f7fa fa3a 	bl	8000b58 <__aeabi_d2iz>
 80066e4:	4606      	mov	r6, r0
 80066e6:	f7f9 ff1d 	bl	8000524 <__aeabi_i2d>
 80066ea:	3630      	adds	r6, #48	; 0x30
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	4640      	mov	r0, r8
 80066f2:	4649      	mov	r1, r9
 80066f4:	f7f9 fdc8 	bl	8000288 <__aeabi_dsub>
 80066f8:	f805 6b01 	strb.w	r6, [r5], #1
 80066fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066fe:	429d      	cmp	r5, r3
 8006700:	4680      	mov	r8, r0
 8006702:	4689      	mov	r9, r1
 8006704:	f04f 0200 	mov.w	r2, #0
 8006708:	d124      	bne.n	8006754 <_dtoa_r+0x60c>
 800670a:	4b1b      	ldr	r3, [pc, #108]	; (8006778 <_dtoa_r+0x630>)
 800670c:	4650      	mov	r0, sl
 800670e:	4659      	mov	r1, fp
 8006710:	f7f9 fdbc 	bl	800028c <__adddf3>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4640      	mov	r0, r8
 800671a:	4649      	mov	r1, r9
 800671c:	f7fa f9fc 	bl	8000b18 <__aeabi_dcmpgt>
 8006720:	2800      	cmp	r0, #0
 8006722:	d173      	bne.n	800680c <_dtoa_r+0x6c4>
 8006724:	4652      	mov	r2, sl
 8006726:	465b      	mov	r3, fp
 8006728:	4913      	ldr	r1, [pc, #76]	; (8006778 <_dtoa_r+0x630>)
 800672a:	2000      	movs	r0, #0
 800672c:	f7f9 fdac 	bl	8000288 <__aeabi_dsub>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4640      	mov	r0, r8
 8006736:	4649      	mov	r1, r9
 8006738:	f7fa f9d0 	bl	8000adc <__aeabi_dcmplt>
 800673c:	2800      	cmp	r0, #0
 800673e:	f43f af35 	beq.w	80065ac <_dtoa_r+0x464>
 8006742:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006744:	1e6b      	subs	r3, r5, #1
 8006746:	930f      	str	r3, [sp, #60]	; 0x3c
 8006748:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800674c:	2b30      	cmp	r3, #48	; 0x30
 800674e:	d0f8      	beq.n	8006742 <_dtoa_r+0x5fa>
 8006750:	9700      	str	r7, [sp, #0]
 8006752:	e049      	b.n	80067e8 <_dtoa_r+0x6a0>
 8006754:	4b05      	ldr	r3, [pc, #20]	; (800676c <_dtoa_r+0x624>)
 8006756:	f7f9 ff4f 	bl	80005f8 <__aeabi_dmul>
 800675a:	4680      	mov	r8, r0
 800675c:	4689      	mov	r9, r1
 800675e:	e7bd      	b.n	80066dc <_dtoa_r+0x594>
 8006760:	08008290 	.word	0x08008290
 8006764:	08008268 	.word	0x08008268
 8006768:	3ff00000 	.word	0x3ff00000
 800676c:	40240000 	.word	0x40240000
 8006770:	401c0000 	.word	0x401c0000
 8006774:	40140000 	.word	0x40140000
 8006778:	3fe00000 	.word	0x3fe00000
 800677c:	9d01      	ldr	r5, [sp, #4]
 800677e:	4656      	mov	r6, sl
 8006780:	465f      	mov	r7, fp
 8006782:	4642      	mov	r2, r8
 8006784:	464b      	mov	r3, r9
 8006786:	4630      	mov	r0, r6
 8006788:	4639      	mov	r1, r7
 800678a:	f7fa f85f 	bl	800084c <__aeabi_ddiv>
 800678e:	f7fa f9e3 	bl	8000b58 <__aeabi_d2iz>
 8006792:	4682      	mov	sl, r0
 8006794:	f7f9 fec6 	bl	8000524 <__aeabi_i2d>
 8006798:	4642      	mov	r2, r8
 800679a:	464b      	mov	r3, r9
 800679c:	f7f9 ff2c 	bl	80005f8 <__aeabi_dmul>
 80067a0:	4602      	mov	r2, r0
 80067a2:	460b      	mov	r3, r1
 80067a4:	4630      	mov	r0, r6
 80067a6:	4639      	mov	r1, r7
 80067a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80067ac:	f7f9 fd6c 	bl	8000288 <__aeabi_dsub>
 80067b0:	f805 6b01 	strb.w	r6, [r5], #1
 80067b4:	9e01      	ldr	r6, [sp, #4]
 80067b6:	9f03      	ldr	r7, [sp, #12]
 80067b8:	1bae      	subs	r6, r5, r6
 80067ba:	42b7      	cmp	r7, r6
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	d135      	bne.n	800682e <_dtoa_r+0x6e6>
 80067c2:	f7f9 fd63 	bl	800028c <__adddf3>
 80067c6:	4642      	mov	r2, r8
 80067c8:	464b      	mov	r3, r9
 80067ca:	4606      	mov	r6, r0
 80067cc:	460f      	mov	r7, r1
 80067ce:	f7fa f9a3 	bl	8000b18 <__aeabi_dcmpgt>
 80067d2:	b9d0      	cbnz	r0, 800680a <_dtoa_r+0x6c2>
 80067d4:	4642      	mov	r2, r8
 80067d6:	464b      	mov	r3, r9
 80067d8:	4630      	mov	r0, r6
 80067da:	4639      	mov	r1, r7
 80067dc:	f7fa f974 	bl	8000ac8 <__aeabi_dcmpeq>
 80067e0:	b110      	cbz	r0, 80067e8 <_dtoa_r+0x6a0>
 80067e2:	f01a 0f01 	tst.w	sl, #1
 80067e6:	d110      	bne.n	800680a <_dtoa_r+0x6c2>
 80067e8:	4620      	mov	r0, r4
 80067ea:	ee18 1a10 	vmov	r1, s16
 80067ee:	f000 fd13 	bl	8007218 <_Bfree>
 80067f2:	2300      	movs	r3, #0
 80067f4:	9800      	ldr	r0, [sp, #0]
 80067f6:	702b      	strb	r3, [r5, #0]
 80067f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067fa:	3001      	adds	r0, #1
 80067fc:	6018      	str	r0, [r3, #0]
 80067fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006800:	2b00      	cmp	r3, #0
 8006802:	f43f acf1 	beq.w	80061e8 <_dtoa_r+0xa0>
 8006806:	601d      	str	r5, [r3, #0]
 8006808:	e4ee      	b.n	80061e8 <_dtoa_r+0xa0>
 800680a:	9f00      	ldr	r7, [sp, #0]
 800680c:	462b      	mov	r3, r5
 800680e:	461d      	mov	r5, r3
 8006810:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006814:	2a39      	cmp	r2, #57	; 0x39
 8006816:	d106      	bne.n	8006826 <_dtoa_r+0x6de>
 8006818:	9a01      	ldr	r2, [sp, #4]
 800681a:	429a      	cmp	r2, r3
 800681c:	d1f7      	bne.n	800680e <_dtoa_r+0x6c6>
 800681e:	9901      	ldr	r1, [sp, #4]
 8006820:	2230      	movs	r2, #48	; 0x30
 8006822:	3701      	adds	r7, #1
 8006824:	700a      	strb	r2, [r1, #0]
 8006826:	781a      	ldrb	r2, [r3, #0]
 8006828:	3201      	adds	r2, #1
 800682a:	701a      	strb	r2, [r3, #0]
 800682c:	e790      	b.n	8006750 <_dtoa_r+0x608>
 800682e:	4ba6      	ldr	r3, [pc, #664]	; (8006ac8 <_dtoa_r+0x980>)
 8006830:	2200      	movs	r2, #0
 8006832:	f7f9 fee1 	bl	80005f8 <__aeabi_dmul>
 8006836:	2200      	movs	r2, #0
 8006838:	2300      	movs	r3, #0
 800683a:	4606      	mov	r6, r0
 800683c:	460f      	mov	r7, r1
 800683e:	f7fa f943 	bl	8000ac8 <__aeabi_dcmpeq>
 8006842:	2800      	cmp	r0, #0
 8006844:	d09d      	beq.n	8006782 <_dtoa_r+0x63a>
 8006846:	e7cf      	b.n	80067e8 <_dtoa_r+0x6a0>
 8006848:	9a08      	ldr	r2, [sp, #32]
 800684a:	2a00      	cmp	r2, #0
 800684c:	f000 80d7 	beq.w	80069fe <_dtoa_r+0x8b6>
 8006850:	9a06      	ldr	r2, [sp, #24]
 8006852:	2a01      	cmp	r2, #1
 8006854:	f300 80ba 	bgt.w	80069cc <_dtoa_r+0x884>
 8006858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800685a:	2a00      	cmp	r2, #0
 800685c:	f000 80b2 	beq.w	80069c4 <_dtoa_r+0x87c>
 8006860:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006864:	9e07      	ldr	r6, [sp, #28]
 8006866:	9d04      	ldr	r5, [sp, #16]
 8006868:	9a04      	ldr	r2, [sp, #16]
 800686a:	441a      	add	r2, r3
 800686c:	9204      	str	r2, [sp, #16]
 800686e:	9a05      	ldr	r2, [sp, #20]
 8006870:	2101      	movs	r1, #1
 8006872:	441a      	add	r2, r3
 8006874:	4620      	mov	r0, r4
 8006876:	9205      	str	r2, [sp, #20]
 8006878:	f000 fd86 	bl	8007388 <__i2b>
 800687c:	4607      	mov	r7, r0
 800687e:	2d00      	cmp	r5, #0
 8006880:	dd0c      	ble.n	800689c <_dtoa_r+0x754>
 8006882:	9b05      	ldr	r3, [sp, #20]
 8006884:	2b00      	cmp	r3, #0
 8006886:	dd09      	ble.n	800689c <_dtoa_r+0x754>
 8006888:	42ab      	cmp	r3, r5
 800688a:	9a04      	ldr	r2, [sp, #16]
 800688c:	bfa8      	it	ge
 800688e:	462b      	movge	r3, r5
 8006890:	1ad2      	subs	r2, r2, r3
 8006892:	9204      	str	r2, [sp, #16]
 8006894:	9a05      	ldr	r2, [sp, #20]
 8006896:	1aed      	subs	r5, r5, r3
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	9305      	str	r3, [sp, #20]
 800689c:	9b07      	ldr	r3, [sp, #28]
 800689e:	b31b      	cbz	r3, 80068e8 <_dtoa_r+0x7a0>
 80068a0:	9b08      	ldr	r3, [sp, #32]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 80af 	beq.w	8006a06 <_dtoa_r+0x8be>
 80068a8:	2e00      	cmp	r6, #0
 80068aa:	dd13      	ble.n	80068d4 <_dtoa_r+0x78c>
 80068ac:	4639      	mov	r1, r7
 80068ae:	4632      	mov	r2, r6
 80068b0:	4620      	mov	r0, r4
 80068b2:	f000 fe29 	bl	8007508 <__pow5mult>
 80068b6:	ee18 2a10 	vmov	r2, s16
 80068ba:	4601      	mov	r1, r0
 80068bc:	4607      	mov	r7, r0
 80068be:	4620      	mov	r0, r4
 80068c0:	f000 fd78 	bl	80073b4 <__multiply>
 80068c4:	ee18 1a10 	vmov	r1, s16
 80068c8:	4680      	mov	r8, r0
 80068ca:	4620      	mov	r0, r4
 80068cc:	f000 fca4 	bl	8007218 <_Bfree>
 80068d0:	ee08 8a10 	vmov	s16, r8
 80068d4:	9b07      	ldr	r3, [sp, #28]
 80068d6:	1b9a      	subs	r2, r3, r6
 80068d8:	d006      	beq.n	80068e8 <_dtoa_r+0x7a0>
 80068da:	ee18 1a10 	vmov	r1, s16
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 fe12 	bl	8007508 <__pow5mult>
 80068e4:	ee08 0a10 	vmov	s16, r0
 80068e8:	2101      	movs	r1, #1
 80068ea:	4620      	mov	r0, r4
 80068ec:	f000 fd4c 	bl	8007388 <__i2b>
 80068f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	4606      	mov	r6, r0
 80068f6:	f340 8088 	ble.w	8006a0a <_dtoa_r+0x8c2>
 80068fa:	461a      	mov	r2, r3
 80068fc:	4601      	mov	r1, r0
 80068fe:	4620      	mov	r0, r4
 8006900:	f000 fe02 	bl	8007508 <__pow5mult>
 8006904:	9b06      	ldr	r3, [sp, #24]
 8006906:	2b01      	cmp	r3, #1
 8006908:	4606      	mov	r6, r0
 800690a:	f340 8081 	ble.w	8006a10 <_dtoa_r+0x8c8>
 800690e:	f04f 0800 	mov.w	r8, #0
 8006912:	6933      	ldr	r3, [r6, #16]
 8006914:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006918:	6918      	ldr	r0, [r3, #16]
 800691a:	f000 fce5 	bl	80072e8 <__hi0bits>
 800691e:	f1c0 0020 	rsb	r0, r0, #32
 8006922:	9b05      	ldr	r3, [sp, #20]
 8006924:	4418      	add	r0, r3
 8006926:	f010 001f 	ands.w	r0, r0, #31
 800692a:	f000 8092 	beq.w	8006a52 <_dtoa_r+0x90a>
 800692e:	f1c0 0320 	rsb	r3, r0, #32
 8006932:	2b04      	cmp	r3, #4
 8006934:	f340 808a 	ble.w	8006a4c <_dtoa_r+0x904>
 8006938:	f1c0 001c 	rsb	r0, r0, #28
 800693c:	9b04      	ldr	r3, [sp, #16]
 800693e:	4403      	add	r3, r0
 8006940:	9304      	str	r3, [sp, #16]
 8006942:	9b05      	ldr	r3, [sp, #20]
 8006944:	4403      	add	r3, r0
 8006946:	4405      	add	r5, r0
 8006948:	9305      	str	r3, [sp, #20]
 800694a:	9b04      	ldr	r3, [sp, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	dd07      	ble.n	8006960 <_dtoa_r+0x818>
 8006950:	ee18 1a10 	vmov	r1, s16
 8006954:	461a      	mov	r2, r3
 8006956:	4620      	mov	r0, r4
 8006958:	f000 fe30 	bl	80075bc <__lshift>
 800695c:	ee08 0a10 	vmov	s16, r0
 8006960:	9b05      	ldr	r3, [sp, #20]
 8006962:	2b00      	cmp	r3, #0
 8006964:	dd05      	ble.n	8006972 <_dtoa_r+0x82a>
 8006966:	4631      	mov	r1, r6
 8006968:	461a      	mov	r2, r3
 800696a:	4620      	mov	r0, r4
 800696c:	f000 fe26 	bl	80075bc <__lshift>
 8006970:	4606      	mov	r6, r0
 8006972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006974:	2b00      	cmp	r3, #0
 8006976:	d06e      	beq.n	8006a56 <_dtoa_r+0x90e>
 8006978:	ee18 0a10 	vmov	r0, s16
 800697c:	4631      	mov	r1, r6
 800697e:	f000 fe8d 	bl	800769c <__mcmp>
 8006982:	2800      	cmp	r0, #0
 8006984:	da67      	bge.n	8006a56 <_dtoa_r+0x90e>
 8006986:	9b00      	ldr	r3, [sp, #0]
 8006988:	3b01      	subs	r3, #1
 800698a:	ee18 1a10 	vmov	r1, s16
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	220a      	movs	r2, #10
 8006992:	2300      	movs	r3, #0
 8006994:	4620      	mov	r0, r4
 8006996:	f000 fc61 	bl	800725c <__multadd>
 800699a:	9b08      	ldr	r3, [sp, #32]
 800699c:	ee08 0a10 	vmov	s16, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 81b1 	beq.w	8006d08 <_dtoa_r+0xbc0>
 80069a6:	2300      	movs	r3, #0
 80069a8:	4639      	mov	r1, r7
 80069aa:	220a      	movs	r2, #10
 80069ac:	4620      	mov	r0, r4
 80069ae:	f000 fc55 	bl	800725c <__multadd>
 80069b2:	9b02      	ldr	r3, [sp, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	4607      	mov	r7, r0
 80069b8:	f300 808e 	bgt.w	8006ad8 <_dtoa_r+0x990>
 80069bc:	9b06      	ldr	r3, [sp, #24]
 80069be:	2b02      	cmp	r3, #2
 80069c0:	dc51      	bgt.n	8006a66 <_dtoa_r+0x91e>
 80069c2:	e089      	b.n	8006ad8 <_dtoa_r+0x990>
 80069c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069ca:	e74b      	b.n	8006864 <_dtoa_r+0x71c>
 80069cc:	9b03      	ldr	r3, [sp, #12]
 80069ce:	1e5e      	subs	r6, r3, #1
 80069d0:	9b07      	ldr	r3, [sp, #28]
 80069d2:	42b3      	cmp	r3, r6
 80069d4:	bfbf      	itttt	lt
 80069d6:	9b07      	ldrlt	r3, [sp, #28]
 80069d8:	9607      	strlt	r6, [sp, #28]
 80069da:	1af2      	sublt	r2, r6, r3
 80069dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80069de:	bfb6      	itet	lt
 80069e0:	189b      	addlt	r3, r3, r2
 80069e2:	1b9e      	subge	r6, r3, r6
 80069e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80069e6:	9b03      	ldr	r3, [sp, #12]
 80069e8:	bfb8      	it	lt
 80069ea:	2600      	movlt	r6, #0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	bfb7      	itett	lt
 80069f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80069f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80069f8:	1a9d      	sublt	r5, r3, r2
 80069fa:	2300      	movlt	r3, #0
 80069fc:	e734      	b.n	8006868 <_dtoa_r+0x720>
 80069fe:	9e07      	ldr	r6, [sp, #28]
 8006a00:	9d04      	ldr	r5, [sp, #16]
 8006a02:	9f08      	ldr	r7, [sp, #32]
 8006a04:	e73b      	b.n	800687e <_dtoa_r+0x736>
 8006a06:	9a07      	ldr	r2, [sp, #28]
 8006a08:	e767      	b.n	80068da <_dtoa_r+0x792>
 8006a0a:	9b06      	ldr	r3, [sp, #24]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	dc18      	bgt.n	8006a42 <_dtoa_r+0x8fa>
 8006a10:	f1ba 0f00 	cmp.w	sl, #0
 8006a14:	d115      	bne.n	8006a42 <_dtoa_r+0x8fa>
 8006a16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a1a:	b993      	cbnz	r3, 8006a42 <_dtoa_r+0x8fa>
 8006a1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006a20:	0d1b      	lsrs	r3, r3, #20
 8006a22:	051b      	lsls	r3, r3, #20
 8006a24:	b183      	cbz	r3, 8006a48 <_dtoa_r+0x900>
 8006a26:	9b04      	ldr	r3, [sp, #16]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	9304      	str	r3, [sp, #16]
 8006a2c:	9b05      	ldr	r3, [sp, #20]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	9305      	str	r3, [sp, #20]
 8006a32:	f04f 0801 	mov.w	r8, #1
 8006a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f47f af6a 	bne.w	8006912 <_dtoa_r+0x7ca>
 8006a3e:	2001      	movs	r0, #1
 8006a40:	e76f      	b.n	8006922 <_dtoa_r+0x7da>
 8006a42:	f04f 0800 	mov.w	r8, #0
 8006a46:	e7f6      	b.n	8006a36 <_dtoa_r+0x8ee>
 8006a48:	4698      	mov	r8, r3
 8006a4a:	e7f4      	b.n	8006a36 <_dtoa_r+0x8ee>
 8006a4c:	f43f af7d 	beq.w	800694a <_dtoa_r+0x802>
 8006a50:	4618      	mov	r0, r3
 8006a52:	301c      	adds	r0, #28
 8006a54:	e772      	b.n	800693c <_dtoa_r+0x7f4>
 8006a56:	9b03      	ldr	r3, [sp, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	dc37      	bgt.n	8006acc <_dtoa_r+0x984>
 8006a5c:	9b06      	ldr	r3, [sp, #24]
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	dd34      	ble.n	8006acc <_dtoa_r+0x984>
 8006a62:	9b03      	ldr	r3, [sp, #12]
 8006a64:	9302      	str	r3, [sp, #8]
 8006a66:	9b02      	ldr	r3, [sp, #8]
 8006a68:	b96b      	cbnz	r3, 8006a86 <_dtoa_r+0x93e>
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	2205      	movs	r2, #5
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f000 fbf4 	bl	800725c <__multadd>
 8006a74:	4601      	mov	r1, r0
 8006a76:	4606      	mov	r6, r0
 8006a78:	ee18 0a10 	vmov	r0, s16
 8006a7c:	f000 fe0e 	bl	800769c <__mcmp>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	f73f adbb 	bgt.w	80065fc <_dtoa_r+0x4b4>
 8006a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a88:	9d01      	ldr	r5, [sp, #4]
 8006a8a:	43db      	mvns	r3, r3
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	f04f 0800 	mov.w	r8, #0
 8006a92:	4631      	mov	r1, r6
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 fbbf 	bl	8007218 <_Bfree>
 8006a9a:	2f00      	cmp	r7, #0
 8006a9c:	f43f aea4 	beq.w	80067e8 <_dtoa_r+0x6a0>
 8006aa0:	f1b8 0f00 	cmp.w	r8, #0
 8006aa4:	d005      	beq.n	8006ab2 <_dtoa_r+0x96a>
 8006aa6:	45b8      	cmp	r8, r7
 8006aa8:	d003      	beq.n	8006ab2 <_dtoa_r+0x96a>
 8006aaa:	4641      	mov	r1, r8
 8006aac:	4620      	mov	r0, r4
 8006aae:	f000 fbb3 	bl	8007218 <_Bfree>
 8006ab2:	4639      	mov	r1, r7
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f000 fbaf 	bl	8007218 <_Bfree>
 8006aba:	e695      	b.n	80067e8 <_dtoa_r+0x6a0>
 8006abc:	2600      	movs	r6, #0
 8006abe:	4637      	mov	r7, r6
 8006ac0:	e7e1      	b.n	8006a86 <_dtoa_r+0x93e>
 8006ac2:	9700      	str	r7, [sp, #0]
 8006ac4:	4637      	mov	r7, r6
 8006ac6:	e599      	b.n	80065fc <_dtoa_r+0x4b4>
 8006ac8:	40240000 	.word	0x40240000
 8006acc:	9b08      	ldr	r3, [sp, #32]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 80ca 	beq.w	8006c68 <_dtoa_r+0xb20>
 8006ad4:	9b03      	ldr	r3, [sp, #12]
 8006ad6:	9302      	str	r3, [sp, #8]
 8006ad8:	2d00      	cmp	r5, #0
 8006ada:	dd05      	ble.n	8006ae8 <_dtoa_r+0x9a0>
 8006adc:	4639      	mov	r1, r7
 8006ade:	462a      	mov	r2, r5
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f000 fd6b 	bl	80075bc <__lshift>
 8006ae6:	4607      	mov	r7, r0
 8006ae8:	f1b8 0f00 	cmp.w	r8, #0
 8006aec:	d05b      	beq.n	8006ba6 <_dtoa_r+0xa5e>
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	4620      	mov	r0, r4
 8006af2:	f000 fb51 	bl	8007198 <_Balloc>
 8006af6:	4605      	mov	r5, r0
 8006af8:	b928      	cbnz	r0, 8006b06 <_dtoa_r+0x9be>
 8006afa:	4b87      	ldr	r3, [pc, #540]	; (8006d18 <_dtoa_r+0xbd0>)
 8006afc:	4602      	mov	r2, r0
 8006afe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006b02:	f7ff bb3b 	b.w	800617c <_dtoa_r+0x34>
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	3202      	adds	r2, #2
 8006b0a:	0092      	lsls	r2, r2, #2
 8006b0c:	f107 010c 	add.w	r1, r7, #12
 8006b10:	300c      	adds	r0, #12
 8006b12:	f000 fb33 	bl	800717c <memcpy>
 8006b16:	2201      	movs	r2, #1
 8006b18:	4629      	mov	r1, r5
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f000 fd4e 	bl	80075bc <__lshift>
 8006b20:	9b01      	ldr	r3, [sp, #4]
 8006b22:	f103 0901 	add.w	r9, r3, #1
 8006b26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	9305      	str	r3, [sp, #20]
 8006b2e:	f00a 0301 	and.w	r3, sl, #1
 8006b32:	46b8      	mov	r8, r7
 8006b34:	9304      	str	r3, [sp, #16]
 8006b36:	4607      	mov	r7, r0
 8006b38:	4631      	mov	r1, r6
 8006b3a:	ee18 0a10 	vmov	r0, s16
 8006b3e:	f7ff fa77 	bl	8006030 <quorem>
 8006b42:	4641      	mov	r1, r8
 8006b44:	9002      	str	r0, [sp, #8]
 8006b46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006b4a:	ee18 0a10 	vmov	r0, s16
 8006b4e:	f000 fda5 	bl	800769c <__mcmp>
 8006b52:	463a      	mov	r2, r7
 8006b54:	9003      	str	r0, [sp, #12]
 8006b56:	4631      	mov	r1, r6
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f000 fdbb 	bl	80076d4 <__mdiff>
 8006b5e:	68c2      	ldr	r2, [r0, #12]
 8006b60:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006b64:	4605      	mov	r5, r0
 8006b66:	bb02      	cbnz	r2, 8006baa <_dtoa_r+0xa62>
 8006b68:	4601      	mov	r1, r0
 8006b6a:	ee18 0a10 	vmov	r0, s16
 8006b6e:	f000 fd95 	bl	800769c <__mcmp>
 8006b72:	4602      	mov	r2, r0
 8006b74:	4629      	mov	r1, r5
 8006b76:	4620      	mov	r0, r4
 8006b78:	9207      	str	r2, [sp, #28]
 8006b7a:	f000 fb4d 	bl	8007218 <_Bfree>
 8006b7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006b82:	ea43 0102 	orr.w	r1, r3, r2
 8006b86:	9b04      	ldr	r3, [sp, #16]
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	464d      	mov	r5, r9
 8006b8c:	d10f      	bne.n	8006bae <_dtoa_r+0xa66>
 8006b8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b92:	d02a      	beq.n	8006bea <_dtoa_r+0xaa2>
 8006b94:	9b03      	ldr	r3, [sp, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	dd02      	ble.n	8006ba0 <_dtoa_r+0xa58>
 8006b9a:	9b02      	ldr	r3, [sp, #8]
 8006b9c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006ba0:	f88b a000 	strb.w	sl, [fp]
 8006ba4:	e775      	b.n	8006a92 <_dtoa_r+0x94a>
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	e7ba      	b.n	8006b20 <_dtoa_r+0x9d8>
 8006baa:	2201      	movs	r2, #1
 8006bac:	e7e2      	b.n	8006b74 <_dtoa_r+0xa2c>
 8006bae:	9b03      	ldr	r3, [sp, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	db04      	blt.n	8006bbe <_dtoa_r+0xa76>
 8006bb4:	9906      	ldr	r1, [sp, #24]
 8006bb6:	430b      	orrs	r3, r1
 8006bb8:	9904      	ldr	r1, [sp, #16]
 8006bba:	430b      	orrs	r3, r1
 8006bbc:	d122      	bne.n	8006c04 <_dtoa_r+0xabc>
 8006bbe:	2a00      	cmp	r2, #0
 8006bc0:	ddee      	ble.n	8006ba0 <_dtoa_r+0xa58>
 8006bc2:	ee18 1a10 	vmov	r1, s16
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f000 fcf7 	bl	80075bc <__lshift>
 8006bce:	4631      	mov	r1, r6
 8006bd0:	ee08 0a10 	vmov	s16, r0
 8006bd4:	f000 fd62 	bl	800769c <__mcmp>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	dc03      	bgt.n	8006be4 <_dtoa_r+0xa9c>
 8006bdc:	d1e0      	bne.n	8006ba0 <_dtoa_r+0xa58>
 8006bde:	f01a 0f01 	tst.w	sl, #1
 8006be2:	d0dd      	beq.n	8006ba0 <_dtoa_r+0xa58>
 8006be4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006be8:	d1d7      	bne.n	8006b9a <_dtoa_r+0xa52>
 8006bea:	2339      	movs	r3, #57	; 0x39
 8006bec:	f88b 3000 	strb.w	r3, [fp]
 8006bf0:	462b      	mov	r3, r5
 8006bf2:	461d      	mov	r5, r3
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006bfa:	2a39      	cmp	r2, #57	; 0x39
 8006bfc:	d071      	beq.n	8006ce2 <_dtoa_r+0xb9a>
 8006bfe:	3201      	adds	r2, #1
 8006c00:	701a      	strb	r2, [r3, #0]
 8006c02:	e746      	b.n	8006a92 <_dtoa_r+0x94a>
 8006c04:	2a00      	cmp	r2, #0
 8006c06:	dd07      	ble.n	8006c18 <_dtoa_r+0xad0>
 8006c08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006c0c:	d0ed      	beq.n	8006bea <_dtoa_r+0xaa2>
 8006c0e:	f10a 0301 	add.w	r3, sl, #1
 8006c12:	f88b 3000 	strb.w	r3, [fp]
 8006c16:	e73c      	b.n	8006a92 <_dtoa_r+0x94a>
 8006c18:	9b05      	ldr	r3, [sp, #20]
 8006c1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006c1e:	4599      	cmp	r9, r3
 8006c20:	d047      	beq.n	8006cb2 <_dtoa_r+0xb6a>
 8006c22:	ee18 1a10 	vmov	r1, s16
 8006c26:	2300      	movs	r3, #0
 8006c28:	220a      	movs	r2, #10
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f000 fb16 	bl	800725c <__multadd>
 8006c30:	45b8      	cmp	r8, r7
 8006c32:	ee08 0a10 	vmov	s16, r0
 8006c36:	f04f 0300 	mov.w	r3, #0
 8006c3a:	f04f 020a 	mov.w	r2, #10
 8006c3e:	4641      	mov	r1, r8
 8006c40:	4620      	mov	r0, r4
 8006c42:	d106      	bne.n	8006c52 <_dtoa_r+0xb0a>
 8006c44:	f000 fb0a 	bl	800725c <__multadd>
 8006c48:	4680      	mov	r8, r0
 8006c4a:	4607      	mov	r7, r0
 8006c4c:	f109 0901 	add.w	r9, r9, #1
 8006c50:	e772      	b.n	8006b38 <_dtoa_r+0x9f0>
 8006c52:	f000 fb03 	bl	800725c <__multadd>
 8006c56:	4639      	mov	r1, r7
 8006c58:	4680      	mov	r8, r0
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	220a      	movs	r2, #10
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f000 fafc 	bl	800725c <__multadd>
 8006c64:	4607      	mov	r7, r0
 8006c66:	e7f1      	b.n	8006c4c <_dtoa_r+0xb04>
 8006c68:	9b03      	ldr	r3, [sp, #12]
 8006c6a:	9302      	str	r3, [sp, #8]
 8006c6c:	9d01      	ldr	r5, [sp, #4]
 8006c6e:	ee18 0a10 	vmov	r0, s16
 8006c72:	4631      	mov	r1, r6
 8006c74:	f7ff f9dc 	bl	8006030 <quorem>
 8006c78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006c7c:	9b01      	ldr	r3, [sp, #4]
 8006c7e:	f805 ab01 	strb.w	sl, [r5], #1
 8006c82:	1aea      	subs	r2, r5, r3
 8006c84:	9b02      	ldr	r3, [sp, #8]
 8006c86:	4293      	cmp	r3, r2
 8006c88:	dd09      	ble.n	8006c9e <_dtoa_r+0xb56>
 8006c8a:	ee18 1a10 	vmov	r1, s16
 8006c8e:	2300      	movs	r3, #0
 8006c90:	220a      	movs	r2, #10
 8006c92:	4620      	mov	r0, r4
 8006c94:	f000 fae2 	bl	800725c <__multadd>
 8006c98:	ee08 0a10 	vmov	s16, r0
 8006c9c:	e7e7      	b.n	8006c6e <_dtoa_r+0xb26>
 8006c9e:	9b02      	ldr	r3, [sp, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	bfc8      	it	gt
 8006ca4:	461d      	movgt	r5, r3
 8006ca6:	9b01      	ldr	r3, [sp, #4]
 8006ca8:	bfd8      	it	le
 8006caa:	2501      	movle	r5, #1
 8006cac:	441d      	add	r5, r3
 8006cae:	f04f 0800 	mov.w	r8, #0
 8006cb2:	ee18 1a10 	vmov	r1, s16
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f000 fc7f 	bl	80075bc <__lshift>
 8006cbe:	4631      	mov	r1, r6
 8006cc0:	ee08 0a10 	vmov	s16, r0
 8006cc4:	f000 fcea 	bl	800769c <__mcmp>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	dc91      	bgt.n	8006bf0 <_dtoa_r+0xaa8>
 8006ccc:	d102      	bne.n	8006cd4 <_dtoa_r+0xb8c>
 8006cce:	f01a 0f01 	tst.w	sl, #1
 8006cd2:	d18d      	bne.n	8006bf0 <_dtoa_r+0xaa8>
 8006cd4:	462b      	mov	r3, r5
 8006cd6:	461d      	mov	r5, r3
 8006cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cdc:	2a30      	cmp	r2, #48	; 0x30
 8006cde:	d0fa      	beq.n	8006cd6 <_dtoa_r+0xb8e>
 8006ce0:	e6d7      	b.n	8006a92 <_dtoa_r+0x94a>
 8006ce2:	9a01      	ldr	r2, [sp, #4]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d184      	bne.n	8006bf2 <_dtoa_r+0xaaa>
 8006ce8:	9b00      	ldr	r3, [sp, #0]
 8006cea:	3301      	adds	r3, #1
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	2331      	movs	r3, #49	; 0x31
 8006cf0:	7013      	strb	r3, [r2, #0]
 8006cf2:	e6ce      	b.n	8006a92 <_dtoa_r+0x94a>
 8006cf4:	4b09      	ldr	r3, [pc, #36]	; (8006d1c <_dtoa_r+0xbd4>)
 8006cf6:	f7ff ba95 	b.w	8006224 <_dtoa_r+0xdc>
 8006cfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f47f aa6e 	bne.w	80061de <_dtoa_r+0x96>
 8006d02:	4b07      	ldr	r3, [pc, #28]	; (8006d20 <_dtoa_r+0xbd8>)
 8006d04:	f7ff ba8e 	b.w	8006224 <_dtoa_r+0xdc>
 8006d08:	9b02      	ldr	r3, [sp, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	dcae      	bgt.n	8006c6c <_dtoa_r+0xb24>
 8006d0e:	9b06      	ldr	r3, [sp, #24]
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	f73f aea8 	bgt.w	8006a66 <_dtoa_r+0x91e>
 8006d16:	e7a9      	b.n	8006c6c <_dtoa_r+0xb24>
 8006d18:	0800819b 	.word	0x0800819b
 8006d1c:	080080f8 	.word	0x080080f8
 8006d20:	0800811c 	.word	0x0800811c

08006d24 <__sflush_r>:
 8006d24:	898a      	ldrh	r2, [r1, #12]
 8006d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2a:	4605      	mov	r5, r0
 8006d2c:	0710      	lsls	r0, r2, #28
 8006d2e:	460c      	mov	r4, r1
 8006d30:	d458      	bmi.n	8006de4 <__sflush_r+0xc0>
 8006d32:	684b      	ldr	r3, [r1, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	dc05      	bgt.n	8006d44 <__sflush_r+0x20>
 8006d38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	dc02      	bgt.n	8006d44 <__sflush_r+0x20>
 8006d3e:	2000      	movs	r0, #0
 8006d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d46:	2e00      	cmp	r6, #0
 8006d48:	d0f9      	beq.n	8006d3e <__sflush_r+0x1a>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d50:	682f      	ldr	r7, [r5, #0]
 8006d52:	602b      	str	r3, [r5, #0]
 8006d54:	d032      	beq.n	8006dbc <__sflush_r+0x98>
 8006d56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	075a      	lsls	r2, r3, #29
 8006d5c:	d505      	bpl.n	8006d6a <__sflush_r+0x46>
 8006d5e:	6863      	ldr	r3, [r4, #4]
 8006d60:	1ac0      	subs	r0, r0, r3
 8006d62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d64:	b10b      	cbz	r3, 8006d6a <__sflush_r+0x46>
 8006d66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d68:	1ac0      	subs	r0, r0, r3
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d70:	6a21      	ldr	r1, [r4, #32]
 8006d72:	4628      	mov	r0, r5
 8006d74:	47b0      	blx	r6
 8006d76:	1c43      	adds	r3, r0, #1
 8006d78:	89a3      	ldrh	r3, [r4, #12]
 8006d7a:	d106      	bne.n	8006d8a <__sflush_r+0x66>
 8006d7c:	6829      	ldr	r1, [r5, #0]
 8006d7e:	291d      	cmp	r1, #29
 8006d80:	d82c      	bhi.n	8006ddc <__sflush_r+0xb8>
 8006d82:	4a2a      	ldr	r2, [pc, #168]	; (8006e2c <__sflush_r+0x108>)
 8006d84:	40ca      	lsrs	r2, r1
 8006d86:	07d6      	lsls	r6, r2, #31
 8006d88:	d528      	bpl.n	8006ddc <__sflush_r+0xb8>
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	6062      	str	r2, [r4, #4]
 8006d8e:	04d9      	lsls	r1, r3, #19
 8006d90:	6922      	ldr	r2, [r4, #16]
 8006d92:	6022      	str	r2, [r4, #0]
 8006d94:	d504      	bpl.n	8006da0 <__sflush_r+0x7c>
 8006d96:	1c42      	adds	r2, r0, #1
 8006d98:	d101      	bne.n	8006d9e <__sflush_r+0x7a>
 8006d9a:	682b      	ldr	r3, [r5, #0]
 8006d9c:	b903      	cbnz	r3, 8006da0 <__sflush_r+0x7c>
 8006d9e:	6560      	str	r0, [r4, #84]	; 0x54
 8006da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006da2:	602f      	str	r7, [r5, #0]
 8006da4:	2900      	cmp	r1, #0
 8006da6:	d0ca      	beq.n	8006d3e <__sflush_r+0x1a>
 8006da8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dac:	4299      	cmp	r1, r3
 8006dae:	d002      	beq.n	8006db6 <__sflush_r+0x92>
 8006db0:	4628      	mov	r0, r5
 8006db2:	f000 fd8b 	bl	80078cc <_free_r>
 8006db6:	2000      	movs	r0, #0
 8006db8:	6360      	str	r0, [r4, #52]	; 0x34
 8006dba:	e7c1      	b.n	8006d40 <__sflush_r+0x1c>
 8006dbc:	6a21      	ldr	r1, [r4, #32]
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	47b0      	blx	r6
 8006dc4:	1c41      	adds	r1, r0, #1
 8006dc6:	d1c7      	bne.n	8006d58 <__sflush_r+0x34>
 8006dc8:	682b      	ldr	r3, [r5, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d0c4      	beq.n	8006d58 <__sflush_r+0x34>
 8006dce:	2b1d      	cmp	r3, #29
 8006dd0:	d001      	beq.n	8006dd6 <__sflush_r+0xb2>
 8006dd2:	2b16      	cmp	r3, #22
 8006dd4:	d101      	bne.n	8006dda <__sflush_r+0xb6>
 8006dd6:	602f      	str	r7, [r5, #0]
 8006dd8:	e7b1      	b.n	8006d3e <__sflush_r+0x1a>
 8006dda:	89a3      	ldrh	r3, [r4, #12]
 8006ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006de0:	81a3      	strh	r3, [r4, #12]
 8006de2:	e7ad      	b.n	8006d40 <__sflush_r+0x1c>
 8006de4:	690f      	ldr	r7, [r1, #16]
 8006de6:	2f00      	cmp	r7, #0
 8006de8:	d0a9      	beq.n	8006d3e <__sflush_r+0x1a>
 8006dea:	0793      	lsls	r3, r2, #30
 8006dec:	680e      	ldr	r6, [r1, #0]
 8006dee:	bf08      	it	eq
 8006df0:	694b      	ldreq	r3, [r1, #20]
 8006df2:	600f      	str	r7, [r1, #0]
 8006df4:	bf18      	it	ne
 8006df6:	2300      	movne	r3, #0
 8006df8:	eba6 0807 	sub.w	r8, r6, r7
 8006dfc:	608b      	str	r3, [r1, #8]
 8006dfe:	f1b8 0f00 	cmp.w	r8, #0
 8006e02:	dd9c      	ble.n	8006d3e <__sflush_r+0x1a>
 8006e04:	6a21      	ldr	r1, [r4, #32]
 8006e06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e08:	4643      	mov	r3, r8
 8006e0a:	463a      	mov	r2, r7
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	47b0      	blx	r6
 8006e10:	2800      	cmp	r0, #0
 8006e12:	dc06      	bgt.n	8006e22 <__sflush_r+0xfe>
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e1a:	81a3      	strh	r3, [r4, #12]
 8006e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e20:	e78e      	b.n	8006d40 <__sflush_r+0x1c>
 8006e22:	4407      	add	r7, r0
 8006e24:	eba8 0800 	sub.w	r8, r8, r0
 8006e28:	e7e9      	b.n	8006dfe <__sflush_r+0xda>
 8006e2a:	bf00      	nop
 8006e2c:	20400001 	.word	0x20400001

08006e30 <_fflush_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	690b      	ldr	r3, [r1, #16]
 8006e34:	4605      	mov	r5, r0
 8006e36:	460c      	mov	r4, r1
 8006e38:	b913      	cbnz	r3, 8006e40 <_fflush_r+0x10>
 8006e3a:	2500      	movs	r5, #0
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	bd38      	pop	{r3, r4, r5, pc}
 8006e40:	b118      	cbz	r0, 8006e4a <_fflush_r+0x1a>
 8006e42:	6983      	ldr	r3, [r0, #24]
 8006e44:	b90b      	cbnz	r3, 8006e4a <_fflush_r+0x1a>
 8006e46:	f000 f887 	bl	8006f58 <__sinit>
 8006e4a:	4b14      	ldr	r3, [pc, #80]	; (8006e9c <_fflush_r+0x6c>)
 8006e4c:	429c      	cmp	r4, r3
 8006e4e:	d11b      	bne.n	8006e88 <_fflush_r+0x58>
 8006e50:	686c      	ldr	r4, [r5, #4]
 8006e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0ef      	beq.n	8006e3a <_fflush_r+0xa>
 8006e5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e5c:	07d0      	lsls	r0, r2, #31
 8006e5e:	d404      	bmi.n	8006e6a <_fflush_r+0x3a>
 8006e60:	0599      	lsls	r1, r3, #22
 8006e62:	d402      	bmi.n	8006e6a <_fflush_r+0x3a>
 8006e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e66:	f000 f91a 	bl	800709e <__retarget_lock_acquire_recursive>
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	4621      	mov	r1, r4
 8006e6e:	f7ff ff59 	bl	8006d24 <__sflush_r>
 8006e72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e74:	07da      	lsls	r2, r3, #31
 8006e76:	4605      	mov	r5, r0
 8006e78:	d4e0      	bmi.n	8006e3c <_fflush_r+0xc>
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	059b      	lsls	r3, r3, #22
 8006e7e:	d4dd      	bmi.n	8006e3c <_fflush_r+0xc>
 8006e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e82:	f000 f90d 	bl	80070a0 <__retarget_lock_release_recursive>
 8006e86:	e7d9      	b.n	8006e3c <_fflush_r+0xc>
 8006e88:	4b05      	ldr	r3, [pc, #20]	; (8006ea0 <_fflush_r+0x70>)
 8006e8a:	429c      	cmp	r4, r3
 8006e8c:	d101      	bne.n	8006e92 <_fflush_r+0x62>
 8006e8e:	68ac      	ldr	r4, [r5, #8]
 8006e90:	e7df      	b.n	8006e52 <_fflush_r+0x22>
 8006e92:	4b04      	ldr	r3, [pc, #16]	; (8006ea4 <_fflush_r+0x74>)
 8006e94:	429c      	cmp	r4, r3
 8006e96:	bf08      	it	eq
 8006e98:	68ec      	ldreq	r4, [r5, #12]
 8006e9a:	e7da      	b.n	8006e52 <_fflush_r+0x22>
 8006e9c:	080081cc 	.word	0x080081cc
 8006ea0:	080081ec 	.word	0x080081ec
 8006ea4:	080081ac 	.word	0x080081ac

08006ea8 <std>:
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	b510      	push	{r4, lr}
 8006eac:	4604      	mov	r4, r0
 8006eae:	e9c0 3300 	strd	r3, r3, [r0]
 8006eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006eb6:	6083      	str	r3, [r0, #8]
 8006eb8:	8181      	strh	r1, [r0, #12]
 8006eba:	6643      	str	r3, [r0, #100]	; 0x64
 8006ebc:	81c2      	strh	r2, [r0, #14]
 8006ebe:	6183      	str	r3, [r0, #24]
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	2208      	movs	r2, #8
 8006ec4:	305c      	adds	r0, #92	; 0x5c
 8006ec6:	f7fe faf3 	bl	80054b0 <memset>
 8006eca:	4b05      	ldr	r3, [pc, #20]	; (8006ee0 <std+0x38>)
 8006ecc:	6263      	str	r3, [r4, #36]	; 0x24
 8006ece:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <std+0x3c>)
 8006ed0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ed2:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <std+0x40>)
 8006ed4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ed6:	4b05      	ldr	r3, [pc, #20]	; (8006eec <std+0x44>)
 8006ed8:	6224      	str	r4, [r4, #32]
 8006eda:	6323      	str	r3, [r4, #48]	; 0x30
 8006edc:	bd10      	pop	{r4, pc}
 8006ede:	bf00      	nop
 8006ee0:	08007d61 	.word	0x08007d61
 8006ee4:	08007d83 	.word	0x08007d83
 8006ee8:	08007dbb 	.word	0x08007dbb
 8006eec:	08007ddf 	.word	0x08007ddf

08006ef0 <_cleanup_r>:
 8006ef0:	4901      	ldr	r1, [pc, #4]	; (8006ef8 <_cleanup_r+0x8>)
 8006ef2:	f000 b8af 	b.w	8007054 <_fwalk_reent>
 8006ef6:	bf00      	nop
 8006ef8:	08006e31 	.word	0x08006e31

08006efc <__sfmoreglue>:
 8006efc:	b570      	push	{r4, r5, r6, lr}
 8006efe:	2268      	movs	r2, #104	; 0x68
 8006f00:	1e4d      	subs	r5, r1, #1
 8006f02:	4355      	muls	r5, r2
 8006f04:	460e      	mov	r6, r1
 8006f06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f0a:	f000 fd4b 	bl	80079a4 <_malloc_r>
 8006f0e:	4604      	mov	r4, r0
 8006f10:	b140      	cbz	r0, 8006f24 <__sfmoreglue+0x28>
 8006f12:	2100      	movs	r1, #0
 8006f14:	e9c0 1600 	strd	r1, r6, [r0]
 8006f18:	300c      	adds	r0, #12
 8006f1a:	60a0      	str	r0, [r4, #8]
 8006f1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f20:	f7fe fac6 	bl	80054b0 <memset>
 8006f24:	4620      	mov	r0, r4
 8006f26:	bd70      	pop	{r4, r5, r6, pc}

08006f28 <__sfp_lock_acquire>:
 8006f28:	4801      	ldr	r0, [pc, #4]	; (8006f30 <__sfp_lock_acquire+0x8>)
 8006f2a:	f000 b8b8 	b.w	800709e <__retarget_lock_acquire_recursive>
 8006f2e:	bf00      	nop
 8006f30:	20000361 	.word	0x20000361

08006f34 <__sfp_lock_release>:
 8006f34:	4801      	ldr	r0, [pc, #4]	; (8006f3c <__sfp_lock_release+0x8>)
 8006f36:	f000 b8b3 	b.w	80070a0 <__retarget_lock_release_recursive>
 8006f3a:	bf00      	nop
 8006f3c:	20000361 	.word	0x20000361

08006f40 <__sinit_lock_acquire>:
 8006f40:	4801      	ldr	r0, [pc, #4]	; (8006f48 <__sinit_lock_acquire+0x8>)
 8006f42:	f000 b8ac 	b.w	800709e <__retarget_lock_acquire_recursive>
 8006f46:	bf00      	nop
 8006f48:	20000362 	.word	0x20000362

08006f4c <__sinit_lock_release>:
 8006f4c:	4801      	ldr	r0, [pc, #4]	; (8006f54 <__sinit_lock_release+0x8>)
 8006f4e:	f000 b8a7 	b.w	80070a0 <__retarget_lock_release_recursive>
 8006f52:	bf00      	nop
 8006f54:	20000362 	.word	0x20000362

08006f58 <__sinit>:
 8006f58:	b510      	push	{r4, lr}
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	f7ff fff0 	bl	8006f40 <__sinit_lock_acquire>
 8006f60:	69a3      	ldr	r3, [r4, #24]
 8006f62:	b11b      	cbz	r3, 8006f6c <__sinit+0x14>
 8006f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f68:	f7ff bff0 	b.w	8006f4c <__sinit_lock_release>
 8006f6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f70:	6523      	str	r3, [r4, #80]	; 0x50
 8006f72:	4b13      	ldr	r3, [pc, #76]	; (8006fc0 <__sinit+0x68>)
 8006f74:	4a13      	ldr	r2, [pc, #76]	; (8006fc4 <__sinit+0x6c>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f7a:	42a3      	cmp	r3, r4
 8006f7c:	bf04      	itt	eq
 8006f7e:	2301      	moveq	r3, #1
 8006f80:	61a3      	streq	r3, [r4, #24]
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 f820 	bl	8006fc8 <__sfp>
 8006f88:	6060      	str	r0, [r4, #4]
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f000 f81c 	bl	8006fc8 <__sfp>
 8006f90:	60a0      	str	r0, [r4, #8]
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 f818 	bl	8006fc8 <__sfp>
 8006f98:	2200      	movs	r2, #0
 8006f9a:	60e0      	str	r0, [r4, #12]
 8006f9c:	2104      	movs	r1, #4
 8006f9e:	6860      	ldr	r0, [r4, #4]
 8006fa0:	f7ff ff82 	bl	8006ea8 <std>
 8006fa4:	68a0      	ldr	r0, [r4, #8]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	2109      	movs	r1, #9
 8006faa:	f7ff ff7d 	bl	8006ea8 <std>
 8006fae:	68e0      	ldr	r0, [r4, #12]
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	2112      	movs	r1, #18
 8006fb4:	f7ff ff78 	bl	8006ea8 <std>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	61a3      	str	r3, [r4, #24]
 8006fbc:	e7d2      	b.n	8006f64 <__sinit+0xc>
 8006fbe:	bf00      	nop
 8006fc0:	080080e4 	.word	0x080080e4
 8006fc4:	08006ef1 	.word	0x08006ef1

08006fc8 <__sfp>:
 8006fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fca:	4607      	mov	r7, r0
 8006fcc:	f7ff ffac 	bl	8006f28 <__sfp_lock_acquire>
 8006fd0:	4b1e      	ldr	r3, [pc, #120]	; (800704c <__sfp+0x84>)
 8006fd2:	681e      	ldr	r6, [r3, #0]
 8006fd4:	69b3      	ldr	r3, [r6, #24]
 8006fd6:	b913      	cbnz	r3, 8006fde <__sfp+0x16>
 8006fd8:	4630      	mov	r0, r6
 8006fda:	f7ff ffbd 	bl	8006f58 <__sinit>
 8006fde:	3648      	adds	r6, #72	; 0x48
 8006fe0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	d503      	bpl.n	8006ff0 <__sfp+0x28>
 8006fe8:	6833      	ldr	r3, [r6, #0]
 8006fea:	b30b      	cbz	r3, 8007030 <__sfp+0x68>
 8006fec:	6836      	ldr	r6, [r6, #0]
 8006fee:	e7f7      	b.n	8006fe0 <__sfp+0x18>
 8006ff0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ff4:	b9d5      	cbnz	r5, 800702c <__sfp+0x64>
 8006ff6:	4b16      	ldr	r3, [pc, #88]	; (8007050 <__sfp+0x88>)
 8006ff8:	60e3      	str	r3, [r4, #12]
 8006ffa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ffe:	6665      	str	r5, [r4, #100]	; 0x64
 8007000:	f000 f84c 	bl	800709c <__retarget_lock_init_recursive>
 8007004:	f7ff ff96 	bl	8006f34 <__sfp_lock_release>
 8007008:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800700c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007010:	6025      	str	r5, [r4, #0]
 8007012:	61a5      	str	r5, [r4, #24]
 8007014:	2208      	movs	r2, #8
 8007016:	4629      	mov	r1, r5
 8007018:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800701c:	f7fe fa48 	bl	80054b0 <memset>
 8007020:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007024:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007028:	4620      	mov	r0, r4
 800702a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800702c:	3468      	adds	r4, #104	; 0x68
 800702e:	e7d9      	b.n	8006fe4 <__sfp+0x1c>
 8007030:	2104      	movs	r1, #4
 8007032:	4638      	mov	r0, r7
 8007034:	f7ff ff62 	bl	8006efc <__sfmoreglue>
 8007038:	4604      	mov	r4, r0
 800703a:	6030      	str	r0, [r6, #0]
 800703c:	2800      	cmp	r0, #0
 800703e:	d1d5      	bne.n	8006fec <__sfp+0x24>
 8007040:	f7ff ff78 	bl	8006f34 <__sfp_lock_release>
 8007044:	230c      	movs	r3, #12
 8007046:	603b      	str	r3, [r7, #0]
 8007048:	e7ee      	b.n	8007028 <__sfp+0x60>
 800704a:	bf00      	nop
 800704c:	080080e4 	.word	0x080080e4
 8007050:	ffff0001 	.word	0xffff0001

08007054 <_fwalk_reent>:
 8007054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007058:	4606      	mov	r6, r0
 800705a:	4688      	mov	r8, r1
 800705c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007060:	2700      	movs	r7, #0
 8007062:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007066:	f1b9 0901 	subs.w	r9, r9, #1
 800706a:	d505      	bpl.n	8007078 <_fwalk_reent+0x24>
 800706c:	6824      	ldr	r4, [r4, #0]
 800706e:	2c00      	cmp	r4, #0
 8007070:	d1f7      	bne.n	8007062 <_fwalk_reent+0xe>
 8007072:	4638      	mov	r0, r7
 8007074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007078:	89ab      	ldrh	r3, [r5, #12]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d907      	bls.n	800708e <_fwalk_reent+0x3a>
 800707e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007082:	3301      	adds	r3, #1
 8007084:	d003      	beq.n	800708e <_fwalk_reent+0x3a>
 8007086:	4629      	mov	r1, r5
 8007088:	4630      	mov	r0, r6
 800708a:	47c0      	blx	r8
 800708c:	4307      	orrs	r7, r0
 800708e:	3568      	adds	r5, #104	; 0x68
 8007090:	e7e9      	b.n	8007066 <_fwalk_reent+0x12>
	...

08007094 <_localeconv_r>:
 8007094:	4800      	ldr	r0, [pc, #0]	; (8007098 <_localeconv_r+0x4>)
 8007096:	4770      	bx	lr
 8007098:	20000160 	.word	0x20000160

0800709c <__retarget_lock_init_recursive>:
 800709c:	4770      	bx	lr

0800709e <__retarget_lock_acquire_recursive>:
 800709e:	4770      	bx	lr

080070a0 <__retarget_lock_release_recursive>:
 80070a0:	4770      	bx	lr

080070a2 <__swhatbuf_r>:
 80070a2:	b570      	push	{r4, r5, r6, lr}
 80070a4:	460e      	mov	r6, r1
 80070a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070aa:	2900      	cmp	r1, #0
 80070ac:	b096      	sub	sp, #88	; 0x58
 80070ae:	4614      	mov	r4, r2
 80070b0:	461d      	mov	r5, r3
 80070b2:	da08      	bge.n	80070c6 <__swhatbuf_r+0x24>
 80070b4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	602a      	str	r2, [r5, #0]
 80070bc:	061a      	lsls	r2, r3, #24
 80070be:	d410      	bmi.n	80070e2 <__swhatbuf_r+0x40>
 80070c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070c4:	e00e      	b.n	80070e4 <__swhatbuf_r+0x42>
 80070c6:	466a      	mov	r2, sp
 80070c8:	f000 fee0 	bl	8007e8c <_fstat_r>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	dbf1      	blt.n	80070b4 <__swhatbuf_r+0x12>
 80070d0:	9a01      	ldr	r2, [sp, #4]
 80070d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070da:	425a      	negs	r2, r3
 80070dc:	415a      	adcs	r2, r3
 80070de:	602a      	str	r2, [r5, #0]
 80070e0:	e7ee      	b.n	80070c0 <__swhatbuf_r+0x1e>
 80070e2:	2340      	movs	r3, #64	; 0x40
 80070e4:	2000      	movs	r0, #0
 80070e6:	6023      	str	r3, [r4, #0]
 80070e8:	b016      	add	sp, #88	; 0x58
 80070ea:	bd70      	pop	{r4, r5, r6, pc}

080070ec <__smakebuf_r>:
 80070ec:	898b      	ldrh	r3, [r1, #12]
 80070ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070f0:	079d      	lsls	r5, r3, #30
 80070f2:	4606      	mov	r6, r0
 80070f4:	460c      	mov	r4, r1
 80070f6:	d507      	bpl.n	8007108 <__smakebuf_r+0x1c>
 80070f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	6123      	str	r3, [r4, #16]
 8007100:	2301      	movs	r3, #1
 8007102:	6163      	str	r3, [r4, #20]
 8007104:	b002      	add	sp, #8
 8007106:	bd70      	pop	{r4, r5, r6, pc}
 8007108:	ab01      	add	r3, sp, #4
 800710a:	466a      	mov	r2, sp
 800710c:	f7ff ffc9 	bl	80070a2 <__swhatbuf_r>
 8007110:	9900      	ldr	r1, [sp, #0]
 8007112:	4605      	mov	r5, r0
 8007114:	4630      	mov	r0, r6
 8007116:	f000 fc45 	bl	80079a4 <_malloc_r>
 800711a:	b948      	cbnz	r0, 8007130 <__smakebuf_r+0x44>
 800711c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007120:	059a      	lsls	r2, r3, #22
 8007122:	d4ef      	bmi.n	8007104 <__smakebuf_r+0x18>
 8007124:	f023 0303 	bic.w	r3, r3, #3
 8007128:	f043 0302 	orr.w	r3, r3, #2
 800712c:	81a3      	strh	r3, [r4, #12]
 800712e:	e7e3      	b.n	80070f8 <__smakebuf_r+0xc>
 8007130:	4b0d      	ldr	r3, [pc, #52]	; (8007168 <__smakebuf_r+0x7c>)
 8007132:	62b3      	str	r3, [r6, #40]	; 0x28
 8007134:	89a3      	ldrh	r3, [r4, #12]
 8007136:	6020      	str	r0, [r4, #0]
 8007138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713c:	81a3      	strh	r3, [r4, #12]
 800713e:	9b00      	ldr	r3, [sp, #0]
 8007140:	6163      	str	r3, [r4, #20]
 8007142:	9b01      	ldr	r3, [sp, #4]
 8007144:	6120      	str	r0, [r4, #16]
 8007146:	b15b      	cbz	r3, 8007160 <__smakebuf_r+0x74>
 8007148:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800714c:	4630      	mov	r0, r6
 800714e:	f000 feaf 	bl	8007eb0 <_isatty_r>
 8007152:	b128      	cbz	r0, 8007160 <__smakebuf_r+0x74>
 8007154:	89a3      	ldrh	r3, [r4, #12]
 8007156:	f023 0303 	bic.w	r3, r3, #3
 800715a:	f043 0301 	orr.w	r3, r3, #1
 800715e:	81a3      	strh	r3, [r4, #12]
 8007160:	89a0      	ldrh	r0, [r4, #12]
 8007162:	4305      	orrs	r5, r0
 8007164:	81a5      	strh	r5, [r4, #12]
 8007166:	e7cd      	b.n	8007104 <__smakebuf_r+0x18>
 8007168:	08006ef1 	.word	0x08006ef1

0800716c <malloc>:
 800716c:	4b02      	ldr	r3, [pc, #8]	; (8007178 <malloc+0xc>)
 800716e:	4601      	mov	r1, r0
 8007170:	6818      	ldr	r0, [r3, #0]
 8007172:	f000 bc17 	b.w	80079a4 <_malloc_r>
 8007176:	bf00      	nop
 8007178:	2000000c 	.word	0x2000000c

0800717c <memcpy>:
 800717c:	440a      	add	r2, r1
 800717e:	4291      	cmp	r1, r2
 8007180:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007184:	d100      	bne.n	8007188 <memcpy+0xc>
 8007186:	4770      	bx	lr
 8007188:	b510      	push	{r4, lr}
 800718a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800718e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007192:	4291      	cmp	r1, r2
 8007194:	d1f9      	bne.n	800718a <memcpy+0xe>
 8007196:	bd10      	pop	{r4, pc}

08007198 <_Balloc>:
 8007198:	b570      	push	{r4, r5, r6, lr}
 800719a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800719c:	4604      	mov	r4, r0
 800719e:	460d      	mov	r5, r1
 80071a0:	b976      	cbnz	r6, 80071c0 <_Balloc+0x28>
 80071a2:	2010      	movs	r0, #16
 80071a4:	f7ff ffe2 	bl	800716c <malloc>
 80071a8:	4602      	mov	r2, r0
 80071aa:	6260      	str	r0, [r4, #36]	; 0x24
 80071ac:	b920      	cbnz	r0, 80071b8 <_Balloc+0x20>
 80071ae:	4b18      	ldr	r3, [pc, #96]	; (8007210 <_Balloc+0x78>)
 80071b0:	4818      	ldr	r0, [pc, #96]	; (8007214 <_Balloc+0x7c>)
 80071b2:	2166      	movs	r1, #102	; 0x66
 80071b4:	f000 fe2a 	bl	8007e0c <__assert_func>
 80071b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071bc:	6006      	str	r6, [r0, #0]
 80071be:	60c6      	str	r6, [r0, #12]
 80071c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071c2:	68f3      	ldr	r3, [r6, #12]
 80071c4:	b183      	cbz	r3, 80071e8 <_Balloc+0x50>
 80071c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071ce:	b9b8      	cbnz	r0, 8007200 <_Balloc+0x68>
 80071d0:	2101      	movs	r1, #1
 80071d2:	fa01 f605 	lsl.w	r6, r1, r5
 80071d6:	1d72      	adds	r2, r6, #5
 80071d8:	0092      	lsls	r2, r2, #2
 80071da:	4620      	mov	r0, r4
 80071dc:	f000 fb60 	bl	80078a0 <_calloc_r>
 80071e0:	b160      	cbz	r0, 80071fc <_Balloc+0x64>
 80071e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071e6:	e00e      	b.n	8007206 <_Balloc+0x6e>
 80071e8:	2221      	movs	r2, #33	; 0x21
 80071ea:	2104      	movs	r1, #4
 80071ec:	4620      	mov	r0, r4
 80071ee:	f000 fb57 	bl	80078a0 <_calloc_r>
 80071f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071f4:	60f0      	str	r0, [r6, #12]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1e4      	bne.n	80071c6 <_Balloc+0x2e>
 80071fc:	2000      	movs	r0, #0
 80071fe:	bd70      	pop	{r4, r5, r6, pc}
 8007200:	6802      	ldr	r2, [r0, #0]
 8007202:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007206:	2300      	movs	r3, #0
 8007208:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800720c:	e7f7      	b.n	80071fe <_Balloc+0x66>
 800720e:	bf00      	nop
 8007210:	08008129 	.word	0x08008129
 8007214:	0800820c 	.word	0x0800820c

08007218 <_Bfree>:
 8007218:	b570      	push	{r4, r5, r6, lr}
 800721a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800721c:	4605      	mov	r5, r0
 800721e:	460c      	mov	r4, r1
 8007220:	b976      	cbnz	r6, 8007240 <_Bfree+0x28>
 8007222:	2010      	movs	r0, #16
 8007224:	f7ff ffa2 	bl	800716c <malloc>
 8007228:	4602      	mov	r2, r0
 800722a:	6268      	str	r0, [r5, #36]	; 0x24
 800722c:	b920      	cbnz	r0, 8007238 <_Bfree+0x20>
 800722e:	4b09      	ldr	r3, [pc, #36]	; (8007254 <_Bfree+0x3c>)
 8007230:	4809      	ldr	r0, [pc, #36]	; (8007258 <_Bfree+0x40>)
 8007232:	218a      	movs	r1, #138	; 0x8a
 8007234:	f000 fdea 	bl	8007e0c <__assert_func>
 8007238:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800723c:	6006      	str	r6, [r0, #0]
 800723e:	60c6      	str	r6, [r0, #12]
 8007240:	b13c      	cbz	r4, 8007252 <_Bfree+0x3a>
 8007242:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007244:	6862      	ldr	r2, [r4, #4]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800724c:	6021      	str	r1, [r4, #0]
 800724e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007252:	bd70      	pop	{r4, r5, r6, pc}
 8007254:	08008129 	.word	0x08008129
 8007258:	0800820c 	.word	0x0800820c

0800725c <__multadd>:
 800725c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007260:	690d      	ldr	r5, [r1, #16]
 8007262:	4607      	mov	r7, r0
 8007264:	460c      	mov	r4, r1
 8007266:	461e      	mov	r6, r3
 8007268:	f101 0c14 	add.w	ip, r1, #20
 800726c:	2000      	movs	r0, #0
 800726e:	f8dc 3000 	ldr.w	r3, [ip]
 8007272:	b299      	uxth	r1, r3
 8007274:	fb02 6101 	mla	r1, r2, r1, r6
 8007278:	0c1e      	lsrs	r6, r3, #16
 800727a:	0c0b      	lsrs	r3, r1, #16
 800727c:	fb02 3306 	mla	r3, r2, r6, r3
 8007280:	b289      	uxth	r1, r1
 8007282:	3001      	adds	r0, #1
 8007284:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007288:	4285      	cmp	r5, r0
 800728a:	f84c 1b04 	str.w	r1, [ip], #4
 800728e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007292:	dcec      	bgt.n	800726e <__multadd+0x12>
 8007294:	b30e      	cbz	r6, 80072da <__multadd+0x7e>
 8007296:	68a3      	ldr	r3, [r4, #8]
 8007298:	42ab      	cmp	r3, r5
 800729a:	dc19      	bgt.n	80072d0 <__multadd+0x74>
 800729c:	6861      	ldr	r1, [r4, #4]
 800729e:	4638      	mov	r0, r7
 80072a0:	3101      	adds	r1, #1
 80072a2:	f7ff ff79 	bl	8007198 <_Balloc>
 80072a6:	4680      	mov	r8, r0
 80072a8:	b928      	cbnz	r0, 80072b6 <__multadd+0x5a>
 80072aa:	4602      	mov	r2, r0
 80072ac:	4b0c      	ldr	r3, [pc, #48]	; (80072e0 <__multadd+0x84>)
 80072ae:	480d      	ldr	r0, [pc, #52]	; (80072e4 <__multadd+0x88>)
 80072b0:	21b5      	movs	r1, #181	; 0xb5
 80072b2:	f000 fdab 	bl	8007e0c <__assert_func>
 80072b6:	6922      	ldr	r2, [r4, #16]
 80072b8:	3202      	adds	r2, #2
 80072ba:	f104 010c 	add.w	r1, r4, #12
 80072be:	0092      	lsls	r2, r2, #2
 80072c0:	300c      	adds	r0, #12
 80072c2:	f7ff ff5b 	bl	800717c <memcpy>
 80072c6:	4621      	mov	r1, r4
 80072c8:	4638      	mov	r0, r7
 80072ca:	f7ff ffa5 	bl	8007218 <_Bfree>
 80072ce:	4644      	mov	r4, r8
 80072d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072d4:	3501      	adds	r5, #1
 80072d6:	615e      	str	r6, [r3, #20]
 80072d8:	6125      	str	r5, [r4, #16]
 80072da:	4620      	mov	r0, r4
 80072dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072e0:	0800819b 	.word	0x0800819b
 80072e4:	0800820c 	.word	0x0800820c

080072e8 <__hi0bits>:
 80072e8:	0c03      	lsrs	r3, r0, #16
 80072ea:	041b      	lsls	r3, r3, #16
 80072ec:	b9d3      	cbnz	r3, 8007324 <__hi0bits+0x3c>
 80072ee:	0400      	lsls	r0, r0, #16
 80072f0:	2310      	movs	r3, #16
 80072f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80072f6:	bf04      	itt	eq
 80072f8:	0200      	lsleq	r0, r0, #8
 80072fa:	3308      	addeq	r3, #8
 80072fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007300:	bf04      	itt	eq
 8007302:	0100      	lsleq	r0, r0, #4
 8007304:	3304      	addeq	r3, #4
 8007306:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800730a:	bf04      	itt	eq
 800730c:	0080      	lsleq	r0, r0, #2
 800730e:	3302      	addeq	r3, #2
 8007310:	2800      	cmp	r0, #0
 8007312:	db05      	blt.n	8007320 <__hi0bits+0x38>
 8007314:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007318:	f103 0301 	add.w	r3, r3, #1
 800731c:	bf08      	it	eq
 800731e:	2320      	moveq	r3, #32
 8007320:	4618      	mov	r0, r3
 8007322:	4770      	bx	lr
 8007324:	2300      	movs	r3, #0
 8007326:	e7e4      	b.n	80072f2 <__hi0bits+0xa>

08007328 <__lo0bits>:
 8007328:	6803      	ldr	r3, [r0, #0]
 800732a:	f013 0207 	ands.w	r2, r3, #7
 800732e:	4601      	mov	r1, r0
 8007330:	d00b      	beq.n	800734a <__lo0bits+0x22>
 8007332:	07da      	lsls	r2, r3, #31
 8007334:	d423      	bmi.n	800737e <__lo0bits+0x56>
 8007336:	0798      	lsls	r0, r3, #30
 8007338:	bf49      	itett	mi
 800733a:	085b      	lsrmi	r3, r3, #1
 800733c:	089b      	lsrpl	r3, r3, #2
 800733e:	2001      	movmi	r0, #1
 8007340:	600b      	strmi	r3, [r1, #0]
 8007342:	bf5c      	itt	pl
 8007344:	600b      	strpl	r3, [r1, #0]
 8007346:	2002      	movpl	r0, #2
 8007348:	4770      	bx	lr
 800734a:	b298      	uxth	r0, r3
 800734c:	b9a8      	cbnz	r0, 800737a <__lo0bits+0x52>
 800734e:	0c1b      	lsrs	r3, r3, #16
 8007350:	2010      	movs	r0, #16
 8007352:	b2da      	uxtb	r2, r3
 8007354:	b90a      	cbnz	r2, 800735a <__lo0bits+0x32>
 8007356:	3008      	adds	r0, #8
 8007358:	0a1b      	lsrs	r3, r3, #8
 800735a:	071a      	lsls	r2, r3, #28
 800735c:	bf04      	itt	eq
 800735e:	091b      	lsreq	r3, r3, #4
 8007360:	3004      	addeq	r0, #4
 8007362:	079a      	lsls	r2, r3, #30
 8007364:	bf04      	itt	eq
 8007366:	089b      	lsreq	r3, r3, #2
 8007368:	3002      	addeq	r0, #2
 800736a:	07da      	lsls	r2, r3, #31
 800736c:	d403      	bmi.n	8007376 <__lo0bits+0x4e>
 800736e:	085b      	lsrs	r3, r3, #1
 8007370:	f100 0001 	add.w	r0, r0, #1
 8007374:	d005      	beq.n	8007382 <__lo0bits+0x5a>
 8007376:	600b      	str	r3, [r1, #0]
 8007378:	4770      	bx	lr
 800737a:	4610      	mov	r0, r2
 800737c:	e7e9      	b.n	8007352 <__lo0bits+0x2a>
 800737e:	2000      	movs	r0, #0
 8007380:	4770      	bx	lr
 8007382:	2020      	movs	r0, #32
 8007384:	4770      	bx	lr
	...

08007388 <__i2b>:
 8007388:	b510      	push	{r4, lr}
 800738a:	460c      	mov	r4, r1
 800738c:	2101      	movs	r1, #1
 800738e:	f7ff ff03 	bl	8007198 <_Balloc>
 8007392:	4602      	mov	r2, r0
 8007394:	b928      	cbnz	r0, 80073a2 <__i2b+0x1a>
 8007396:	4b05      	ldr	r3, [pc, #20]	; (80073ac <__i2b+0x24>)
 8007398:	4805      	ldr	r0, [pc, #20]	; (80073b0 <__i2b+0x28>)
 800739a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800739e:	f000 fd35 	bl	8007e0c <__assert_func>
 80073a2:	2301      	movs	r3, #1
 80073a4:	6144      	str	r4, [r0, #20]
 80073a6:	6103      	str	r3, [r0, #16]
 80073a8:	bd10      	pop	{r4, pc}
 80073aa:	bf00      	nop
 80073ac:	0800819b 	.word	0x0800819b
 80073b0:	0800820c 	.word	0x0800820c

080073b4 <__multiply>:
 80073b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b8:	4691      	mov	r9, r2
 80073ba:	690a      	ldr	r2, [r1, #16]
 80073bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	bfb8      	it	lt
 80073c4:	460b      	movlt	r3, r1
 80073c6:	460c      	mov	r4, r1
 80073c8:	bfbc      	itt	lt
 80073ca:	464c      	movlt	r4, r9
 80073cc:	4699      	movlt	r9, r3
 80073ce:	6927      	ldr	r7, [r4, #16]
 80073d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80073d4:	68a3      	ldr	r3, [r4, #8]
 80073d6:	6861      	ldr	r1, [r4, #4]
 80073d8:	eb07 060a 	add.w	r6, r7, sl
 80073dc:	42b3      	cmp	r3, r6
 80073de:	b085      	sub	sp, #20
 80073e0:	bfb8      	it	lt
 80073e2:	3101      	addlt	r1, #1
 80073e4:	f7ff fed8 	bl	8007198 <_Balloc>
 80073e8:	b930      	cbnz	r0, 80073f8 <__multiply+0x44>
 80073ea:	4602      	mov	r2, r0
 80073ec:	4b44      	ldr	r3, [pc, #272]	; (8007500 <__multiply+0x14c>)
 80073ee:	4845      	ldr	r0, [pc, #276]	; (8007504 <__multiply+0x150>)
 80073f0:	f240 115d 	movw	r1, #349	; 0x15d
 80073f4:	f000 fd0a 	bl	8007e0c <__assert_func>
 80073f8:	f100 0514 	add.w	r5, r0, #20
 80073fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007400:	462b      	mov	r3, r5
 8007402:	2200      	movs	r2, #0
 8007404:	4543      	cmp	r3, r8
 8007406:	d321      	bcc.n	800744c <__multiply+0x98>
 8007408:	f104 0314 	add.w	r3, r4, #20
 800740c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007410:	f109 0314 	add.w	r3, r9, #20
 8007414:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007418:	9202      	str	r2, [sp, #8]
 800741a:	1b3a      	subs	r2, r7, r4
 800741c:	3a15      	subs	r2, #21
 800741e:	f022 0203 	bic.w	r2, r2, #3
 8007422:	3204      	adds	r2, #4
 8007424:	f104 0115 	add.w	r1, r4, #21
 8007428:	428f      	cmp	r7, r1
 800742a:	bf38      	it	cc
 800742c:	2204      	movcc	r2, #4
 800742e:	9201      	str	r2, [sp, #4]
 8007430:	9a02      	ldr	r2, [sp, #8]
 8007432:	9303      	str	r3, [sp, #12]
 8007434:	429a      	cmp	r2, r3
 8007436:	d80c      	bhi.n	8007452 <__multiply+0x9e>
 8007438:	2e00      	cmp	r6, #0
 800743a:	dd03      	ble.n	8007444 <__multiply+0x90>
 800743c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007440:	2b00      	cmp	r3, #0
 8007442:	d05a      	beq.n	80074fa <__multiply+0x146>
 8007444:	6106      	str	r6, [r0, #16]
 8007446:	b005      	add	sp, #20
 8007448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744c:	f843 2b04 	str.w	r2, [r3], #4
 8007450:	e7d8      	b.n	8007404 <__multiply+0x50>
 8007452:	f8b3 a000 	ldrh.w	sl, [r3]
 8007456:	f1ba 0f00 	cmp.w	sl, #0
 800745a:	d024      	beq.n	80074a6 <__multiply+0xf2>
 800745c:	f104 0e14 	add.w	lr, r4, #20
 8007460:	46a9      	mov	r9, r5
 8007462:	f04f 0c00 	mov.w	ip, #0
 8007466:	f85e 2b04 	ldr.w	r2, [lr], #4
 800746a:	f8d9 1000 	ldr.w	r1, [r9]
 800746e:	fa1f fb82 	uxth.w	fp, r2
 8007472:	b289      	uxth	r1, r1
 8007474:	fb0a 110b 	mla	r1, sl, fp, r1
 8007478:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800747c:	f8d9 2000 	ldr.w	r2, [r9]
 8007480:	4461      	add	r1, ip
 8007482:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007486:	fb0a c20b 	mla	r2, sl, fp, ip
 800748a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800748e:	b289      	uxth	r1, r1
 8007490:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007494:	4577      	cmp	r7, lr
 8007496:	f849 1b04 	str.w	r1, [r9], #4
 800749a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800749e:	d8e2      	bhi.n	8007466 <__multiply+0xb2>
 80074a0:	9a01      	ldr	r2, [sp, #4]
 80074a2:	f845 c002 	str.w	ip, [r5, r2]
 80074a6:	9a03      	ldr	r2, [sp, #12]
 80074a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074ac:	3304      	adds	r3, #4
 80074ae:	f1b9 0f00 	cmp.w	r9, #0
 80074b2:	d020      	beq.n	80074f6 <__multiply+0x142>
 80074b4:	6829      	ldr	r1, [r5, #0]
 80074b6:	f104 0c14 	add.w	ip, r4, #20
 80074ba:	46ae      	mov	lr, r5
 80074bc:	f04f 0a00 	mov.w	sl, #0
 80074c0:	f8bc b000 	ldrh.w	fp, [ip]
 80074c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80074c8:	fb09 220b 	mla	r2, r9, fp, r2
 80074cc:	4492      	add	sl, r2
 80074ce:	b289      	uxth	r1, r1
 80074d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80074d4:	f84e 1b04 	str.w	r1, [lr], #4
 80074d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80074dc:	f8be 1000 	ldrh.w	r1, [lr]
 80074e0:	0c12      	lsrs	r2, r2, #16
 80074e2:	fb09 1102 	mla	r1, r9, r2, r1
 80074e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80074ea:	4567      	cmp	r7, ip
 80074ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80074f0:	d8e6      	bhi.n	80074c0 <__multiply+0x10c>
 80074f2:	9a01      	ldr	r2, [sp, #4]
 80074f4:	50a9      	str	r1, [r5, r2]
 80074f6:	3504      	adds	r5, #4
 80074f8:	e79a      	b.n	8007430 <__multiply+0x7c>
 80074fa:	3e01      	subs	r6, #1
 80074fc:	e79c      	b.n	8007438 <__multiply+0x84>
 80074fe:	bf00      	nop
 8007500:	0800819b 	.word	0x0800819b
 8007504:	0800820c 	.word	0x0800820c

08007508 <__pow5mult>:
 8007508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800750c:	4615      	mov	r5, r2
 800750e:	f012 0203 	ands.w	r2, r2, #3
 8007512:	4606      	mov	r6, r0
 8007514:	460f      	mov	r7, r1
 8007516:	d007      	beq.n	8007528 <__pow5mult+0x20>
 8007518:	4c25      	ldr	r4, [pc, #148]	; (80075b0 <__pow5mult+0xa8>)
 800751a:	3a01      	subs	r2, #1
 800751c:	2300      	movs	r3, #0
 800751e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007522:	f7ff fe9b 	bl	800725c <__multadd>
 8007526:	4607      	mov	r7, r0
 8007528:	10ad      	asrs	r5, r5, #2
 800752a:	d03d      	beq.n	80075a8 <__pow5mult+0xa0>
 800752c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800752e:	b97c      	cbnz	r4, 8007550 <__pow5mult+0x48>
 8007530:	2010      	movs	r0, #16
 8007532:	f7ff fe1b 	bl	800716c <malloc>
 8007536:	4602      	mov	r2, r0
 8007538:	6270      	str	r0, [r6, #36]	; 0x24
 800753a:	b928      	cbnz	r0, 8007548 <__pow5mult+0x40>
 800753c:	4b1d      	ldr	r3, [pc, #116]	; (80075b4 <__pow5mult+0xac>)
 800753e:	481e      	ldr	r0, [pc, #120]	; (80075b8 <__pow5mult+0xb0>)
 8007540:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007544:	f000 fc62 	bl	8007e0c <__assert_func>
 8007548:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800754c:	6004      	str	r4, [r0, #0]
 800754e:	60c4      	str	r4, [r0, #12]
 8007550:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007554:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007558:	b94c      	cbnz	r4, 800756e <__pow5mult+0x66>
 800755a:	f240 2171 	movw	r1, #625	; 0x271
 800755e:	4630      	mov	r0, r6
 8007560:	f7ff ff12 	bl	8007388 <__i2b>
 8007564:	2300      	movs	r3, #0
 8007566:	f8c8 0008 	str.w	r0, [r8, #8]
 800756a:	4604      	mov	r4, r0
 800756c:	6003      	str	r3, [r0, #0]
 800756e:	f04f 0900 	mov.w	r9, #0
 8007572:	07eb      	lsls	r3, r5, #31
 8007574:	d50a      	bpl.n	800758c <__pow5mult+0x84>
 8007576:	4639      	mov	r1, r7
 8007578:	4622      	mov	r2, r4
 800757a:	4630      	mov	r0, r6
 800757c:	f7ff ff1a 	bl	80073b4 <__multiply>
 8007580:	4639      	mov	r1, r7
 8007582:	4680      	mov	r8, r0
 8007584:	4630      	mov	r0, r6
 8007586:	f7ff fe47 	bl	8007218 <_Bfree>
 800758a:	4647      	mov	r7, r8
 800758c:	106d      	asrs	r5, r5, #1
 800758e:	d00b      	beq.n	80075a8 <__pow5mult+0xa0>
 8007590:	6820      	ldr	r0, [r4, #0]
 8007592:	b938      	cbnz	r0, 80075a4 <__pow5mult+0x9c>
 8007594:	4622      	mov	r2, r4
 8007596:	4621      	mov	r1, r4
 8007598:	4630      	mov	r0, r6
 800759a:	f7ff ff0b 	bl	80073b4 <__multiply>
 800759e:	6020      	str	r0, [r4, #0]
 80075a0:	f8c0 9000 	str.w	r9, [r0]
 80075a4:	4604      	mov	r4, r0
 80075a6:	e7e4      	b.n	8007572 <__pow5mult+0x6a>
 80075a8:	4638      	mov	r0, r7
 80075aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ae:	bf00      	nop
 80075b0:	08008358 	.word	0x08008358
 80075b4:	08008129 	.word	0x08008129
 80075b8:	0800820c 	.word	0x0800820c

080075bc <__lshift>:
 80075bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c0:	460c      	mov	r4, r1
 80075c2:	6849      	ldr	r1, [r1, #4]
 80075c4:	6923      	ldr	r3, [r4, #16]
 80075c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075ca:	68a3      	ldr	r3, [r4, #8]
 80075cc:	4607      	mov	r7, r0
 80075ce:	4691      	mov	r9, r2
 80075d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075d4:	f108 0601 	add.w	r6, r8, #1
 80075d8:	42b3      	cmp	r3, r6
 80075da:	db0b      	blt.n	80075f4 <__lshift+0x38>
 80075dc:	4638      	mov	r0, r7
 80075de:	f7ff fddb 	bl	8007198 <_Balloc>
 80075e2:	4605      	mov	r5, r0
 80075e4:	b948      	cbnz	r0, 80075fa <__lshift+0x3e>
 80075e6:	4602      	mov	r2, r0
 80075e8:	4b2a      	ldr	r3, [pc, #168]	; (8007694 <__lshift+0xd8>)
 80075ea:	482b      	ldr	r0, [pc, #172]	; (8007698 <__lshift+0xdc>)
 80075ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80075f0:	f000 fc0c 	bl	8007e0c <__assert_func>
 80075f4:	3101      	adds	r1, #1
 80075f6:	005b      	lsls	r3, r3, #1
 80075f8:	e7ee      	b.n	80075d8 <__lshift+0x1c>
 80075fa:	2300      	movs	r3, #0
 80075fc:	f100 0114 	add.w	r1, r0, #20
 8007600:	f100 0210 	add.w	r2, r0, #16
 8007604:	4618      	mov	r0, r3
 8007606:	4553      	cmp	r3, sl
 8007608:	db37      	blt.n	800767a <__lshift+0xbe>
 800760a:	6920      	ldr	r0, [r4, #16]
 800760c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007610:	f104 0314 	add.w	r3, r4, #20
 8007614:	f019 091f 	ands.w	r9, r9, #31
 8007618:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800761c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007620:	d02f      	beq.n	8007682 <__lshift+0xc6>
 8007622:	f1c9 0e20 	rsb	lr, r9, #32
 8007626:	468a      	mov	sl, r1
 8007628:	f04f 0c00 	mov.w	ip, #0
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	fa02 f209 	lsl.w	r2, r2, r9
 8007632:	ea42 020c 	orr.w	r2, r2, ip
 8007636:	f84a 2b04 	str.w	r2, [sl], #4
 800763a:	f853 2b04 	ldr.w	r2, [r3], #4
 800763e:	4298      	cmp	r0, r3
 8007640:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007644:	d8f2      	bhi.n	800762c <__lshift+0x70>
 8007646:	1b03      	subs	r3, r0, r4
 8007648:	3b15      	subs	r3, #21
 800764a:	f023 0303 	bic.w	r3, r3, #3
 800764e:	3304      	adds	r3, #4
 8007650:	f104 0215 	add.w	r2, r4, #21
 8007654:	4290      	cmp	r0, r2
 8007656:	bf38      	it	cc
 8007658:	2304      	movcc	r3, #4
 800765a:	f841 c003 	str.w	ip, [r1, r3]
 800765e:	f1bc 0f00 	cmp.w	ip, #0
 8007662:	d001      	beq.n	8007668 <__lshift+0xac>
 8007664:	f108 0602 	add.w	r6, r8, #2
 8007668:	3e01      	subs	r6, #1
 800766a:	4638      	mov	r0, r7
 800766c:	612e      	str	r6, [r5, #16]
 800766e:	4621      	mov	r1, r4
 8007670:	f7ff fdd2 	bl	8007218 <_Bfree>
 8007674:	4628      	mov	r0, r5
 8007676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800767a:	f842 0f04 	str.w	r0, [r2, #4]!
 800767e:	3301      	adds	r3, #1
 8007680:	e7c1      	b.n	8007606 <__lshift+0x4a>
 8007682:	3904      	subs	r1, #4
 8007684:	f853 2b04 	ldr.w	r2, [r3], #4
 8007688:	f841 2f04 	str.w	r2, [r1, #4]!
 800768c:	4298      	cmp	r0, r3
 800768e:	d8f9      	bhi.n	8007684 <__lshift+0xc8>
 8007690:	e7ea      	b.n	8007668 <__lshift+0xac>
 8007692:	bf00      	nop
 8007694:	0800819b 	.word	0x0800819b
 8007698:	0800820c 	.word	0x0800820c

0800769c <__mcmp>:
 800769c:	b530      	push	{r4, r5, lr}
 800769e:	6902      	ldr	r2, [r0, #16]
 80076a0:	690c      	ldr	r4, [r1, #16]
 80076a2:	1b12      	subs	r2, r2, r4
 80076a4:	d10e      	bne.n	80076c4 <__mcmp+0x28>
 80076a6:	f100 0314 	add.w	r3, r0, #20
 80076aa:	3114      	adds	r1, #20
 80076ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80076b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80076b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80076b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80076bc:	42a5      	cmp	r5, r4
 80076be:	d003      	beq.n	80076c8 <__mcmp+0x2c>
 80076c0:	d305      	bcc.n	80076ce <__mcmp+0x32>
 80076c2:	2201      	movs	r2, #1
 80076c4:	4610      	mov	r0, r2
 80076c6:	bd30      	pop	{r4, r5, pc}
 80076c8:	4283      	cmp	r3, r0
 80076ca:	d3f3      	bcc.n	80076b4 <__mcmp+0x18>
 80076cc:	e7fa      	b.n	80076c4 <__mcmp+0x28>
 80076ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076d2:	e7f7      	b.n	80076c4 <__mcmp+0x28>

080076d4 <__mdiff>:
 80076d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d8:	460c      	mov	r4, r1
 80076da:	4606      	mov	r6, r0
 80076dc:	4611      	mov	r1, r2
 80076de:	4620      	mov	r0, r4
 80076e0:	4690      	mov	r8, r2
 80076e2:	f7ff ffdb 	bl	800769c <__mcmp>
 80076e6:	1e05      	subs	r5, r0, #0
 80076e8:	d110      	bne.n	800770c <__mdiff+0x38>
 80076ea:	4629      	mov	r1, r5
 80076ec:	4630      	mov	r0, r6
 80076ee:	f7ff fd53 	bl	8007198 <_Balloc>
 80076f2:	b930      	cbnz	r0, 8007702 <__mdiff+0x2e>
 80076f4:	4b3a      	ldr	r3, [pc, #232]	; (80077e0 <__mdiff+0x10c>)
 80076f6:	4602      	mov	r2, r0
 80076f8:	f240 2132 	movw	r1, #562	; 0x232
 80076fc:	4839      	ldr	r0, [pc, #228]	; (80077e4 <__mdiff+0x110>)
 80076fe:	f000 fb85 	bl	8007e0c <__assert_func>
 8007702:	2301      	movs	r3, #1
 8007704:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770c:	bfa4      	itt	ge
 800770e:	4643      	movge	r3, r8
 8007710:	46a0      	movge	r8, r4
 8007712:	4630      	mov	r0, r6
 8007714:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007718:	bfa6      	itte	ge
 800771a:	461c      	movge	r4, r3
 800771c:	2500      	movge	r5, #0
 800771e:	2501      	movlt	r5, #1
 8007720:	f7ff fd3a 	bl	8007198 <_Balloc>
 8007724:	b920      	cbnz	r0, 8007730 <__mdiff+0x5c>
 8007726:	4b2e      	ldr	r3, [pc, #184]	; (80077e0 <__mdiff+0x10c>)
 8007728:	4602      	mov	r2, r0
 800772a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800772e:	e7e5      	b.n	80076fc <__mdiff+0x28>
 8007730:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007734:	6926      	ldr	r6, [r4, #16]
 8007736:	60c5      	str	r5, [r0, #12]
 8007738:	f104 0914 	add.w	r9, r4, #20
 800773c:	f108 0514 	add.w	r5, r8, #20
 8007740:	f100 0e14 	add.w	lr, r0, #20
 8007744:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007748:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800774c:	f108 0210 	add.w	r2, r8, #16
 8007750:	46f2      	mov	sl, lr
 8007752:	2100      	movs	r1, #0
 8007754:	f859 3b04 	ldr.w	r3, [r9], #4
 8007758:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800775c:	fa1f f883 	uxth.w	r8, r3
 8007760:	fa11 f18b 	uxtah	r1, r1, fp
 8007764:	0c1b      	lsrs	r3, r3, #16
 8007766:	eba1 0808 	sub.w	r8, r1, r8
 800776a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800776e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007772:	fa1f f888 	uxth.w	r8, r8
 8007776:	1419      	asrs	r1, r3, #16
 8007778:	454e      	cmp	r6, r9
 800777a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800777e:	f84a 3b04 	str.w	r3, [sl], #4
 8007782:	d8e7      	bhi.n	8007754 <__mdiff+0x80>
 8007784:	1b33      	subs	r3, r6, r4
 8007786:	3b15      	subs	r3, #21
 8007788:	f023 0303 	bic.w	r3, r3, #3
 800778c:	3304      	adds	r3, #4
 800778e:	3415      	adds	r4, #21
 8007790:	42a6      	cmp	r6, r4
 8007792:	bf38      	it	cc
 8007794:	2304      	movcc	r3, #4
 8007796:	441d      	add	r5, r3
 8007798:	4473      	add	r3, lr
 800779a:	469e      	mov	lr, r3
 800779c:	462e      	mov	r6, r5
 800779e:	4566      	cmp	r6, ip
 80077a0:	d30e      	bcc.n	80077c0 <__mdiff+0xec>
 80077a2:	f10c 0203 	add.w	r2, ip, #3
 80077a6:	1b52      	subs	r2, r2, r5
 80077a8:	f022 0203 	bic.w	r2, r2, #3
 80077ac:	3d03      	subs	r5, #3
 80077ae:	45ac      	cmp	ip, r5
 80077b0:	bf38      	it	cc
 80077b2:	2200      	movcc	r2, #0
 80077b4:	441a      	add	r2, r3
 80077b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80077ba:	b17b      	cbz	r3, 80077dc <__mdiff+0x108>
 80077bc:	6107      	str	r7, [r0, #16]
 80077be:	e7a3      	b.n	8007708 <__mdiff+0x34>
 80077c0:	f856 8b04 	ldr.w	r8, [r6], #4
 80077c4:	fa11 f288 	uxtah	r2, r1, r8
 80077c8:	1414      	asrs	r4, r2, #16
 80077ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80077ce:	b292      	uxth	r2, r2
 80077d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80077d4:	f84e 2b04 	str.w	r2, [lr], #4
 80077d8:	1421      	asrs	r1, r4, #16
 80077da:	e7e0      	b.n	800779e <__mdiff+0xca>
 80077dc:	3f01      	subs	r7, #1
 80077de:	e7ea      	b.n	80077b6 <__mdiff+0xe2>
 80077e0:	0800819b 	.word	0x0800819b
 80077e4:	0800820c 	.word	0x0800820c

080077e8 <__d2b>:
 80077e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077ec:	4689      	mov	r9, r1
 80077ee:	2101      	movs	r1, #1
 80077f0:	ec57 6b10 	vmov	r6, r7, d0
 80077f4:	4690      	mov	r8, r2
 80077f6:	f7ff fccf 	bl	8007198 <_Balloc>
 80077fa:	4604      	mov	r4, r0
 80077fc:	b930      	cbnz	r0, 800780c <__d2b+0x24>
 80077fe:	4602      	mov	r2, r0
 8007800:	4b25      	ldr	r3, [pc, #148]	; (8007898 <__d2b+0xb0>)
 8007802:	4826      	ldr	r0, [pc, #152]	; (800789c <__d2b+0xb4>)
 8007804:	f240 310a 	movw	r1, #778	; 0x30a
 8007808:	f000 fb00 	bl	8007e0c <__assert_func>
 800780c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007810:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007814:	bb35      	cbnz	r5, 8007864 <__d2b+0x7c>
 8007816:	2e00      	cmp	r6, #0
 8007818:	9301      	str	r3, [sp, #4]
 800781a:	d028      	beq.n	800786e <__d2b+0x86>
 800781c:	4668      	mov	r0, sp
 800781e:	9600      	str	r6, [sp, #0]
 8007820:	f7ff fd82 	bl	8007328 <__lo0bits>
 8007824:	9900      	ldr	r1, [sp, #0]
 8007826:	b300      	cbz	r0, 800786a <__d2b+0x82>
 8007828:	9a01      	ldr	r2, [sp, #4]
 800782a:	f1c0 0320 	rsb	r3, r0, #32
 800782e:	fa02 f303 	lsl.w	r3, r2, r3
 8007832:	430b      	orrs	r3, r1
 8007834:	40c2      	lsrs	r2, r0
 8007836:	6163      	str	r3, [r4, #20]
 8007838:	9201      	str	r2, [sp, #4]
 800783a:	9b01      	ldr	r3, [sp, #4]
 800783c:	61a3      	str	r3, [r4, #24]
 800783e:	2b00      	cmp	r3, #0
 8007840:	bf14      	ite	ne
 8007842:	2202      	movne	r2, #2
 8007844:	2201      	moveq	r2, #1
 8007846:	6122      	str	r2, [r4, #16]
 8007848:	b1d5      	cbz	r5, 8007880 <__d2b+0x98>
 800784a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800784e:	4405      	add	r5, r0
 8007850:	f8c9 5000 	str.w	r5, [r9]
 8007854:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007858:	f8c8 0000 	str.w	r0, [r8]
 800785c:	4620      	mov	r0, r4
 800785e:	b003      	add	sp, #12
 8007860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007868:	e7d5      	b.n	8007816 <__d2b+0x2e>
 800786a:	6161      	str	r1, [r4, #20]
 800786c:	e7e5      	b.n	800783a <__d2b+0x52>
 800786e:	a801      	add	r0, sp, #4
 8007870:	f7ff fd5a 	bl	8007328 <__lo0bits>
 8007874:	9b01      	ldr	r3, [sp, #4]
 8007876:	6163      	str	r3, [r4, #20]
 8007878:	2201      	movs	r2, #1
 800787a:	6122      	str	r2, [r4, #16]
 800787c:	3020      	adds	r0, #32
 800787e:	e7e3      	b.n	8007848 <__d2b+0x60>
 8007880:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007884:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007888:	f8c9 0000 	str.w	r0, [r9]
 800788c:	6918      	ldr	r0, [r3, #16]
 800788e:	f7ff fd2b 	bl	80072e8 <__hi0bits>
 8007892:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007896:	e7df      	b.n	8007858 <__d2b+0x70>
 8007898:	0800819b 	.word	0x0800819b
 800789c:	0800820c 	.word	0x0800820c

080078a0 <_calloc_r>:
 80078a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078a2:	fba1 2402 	umull	r2, r4, r1, r2
 80078a6:	b94c      	cbnz	r4, 80078bc <_calloc_r+0x1c>
 80078a8:	4611      	mov	r1, r2
 80078aa:	9201      	str	r2, [sp, #4]
 80078ac:	f000 f87a 	bl	80079a4 <_malloc_r>
 80078b0:	9a01      	ldr	r2, [sp, #4]
 80078b2:	4605      	mov	r5, r0
 80078b4:	b930      	cbnz	r0, 80078c4 <_calloc_r+0x24>
 80078b6:	4628      	mov	r0, r5
 80078b8:	b003      	add	sp, #12
 80078ba:	bd30      	pop	{r4, r5, pc}
 80078bc:	220c      	movs	r2, #12
 80078be:	6002      	str	r2, [r0, #0]
 80078c0:	2500      	movs	r5, #0
 80078c2:	e7f8      	b.n	80078b6 <_calloc_r+0x16>
 80078c4:	4621      	mov	r1, r4
 80078c6:	f7fd fdf3 	bl	80054b0 <memset>
 80078ca:	e7f4      	b.n	80078b6 <_calloc_r+0x16>

080078cc <_free_r>:
 80078cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078ce:	2900      	cmp	r1, #0
 80078d0:	d044      	beq.n	800795c <_free_r+0x90>
 80078d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078d6:	9001      	str	r0, [sp, #4]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f1a1 0404 	sub.w	r4, r1, #4
 80078de:	bfb8      	it	lt
 80078e0:	18e4      	addlt	r4, r4, r3
 80078e2:	f000 fb19 	bl	8007f18 <__malloc_lock>
 80078e6:	4a1e      	ldr	r2, [pc, #120]	; (8007960 <_free_r+0x94>)
 80078e8:	9801      	ldr	r0, [sp, #4]
 80078ea:	6813      	ldr	r3, [r2, #0]
 80078ec:	b933      	cbnz	r3, 80078fc <_free_r+0x30>
 80078ee:	6063      	str	r3, [r4, #4]
 80078f0:	6014      	str	r4, [r2, #0]
 80078f2:	b003      	add	sp, #12
 80078f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078f8:	f000 bb14 	b.w	8007f24 <__malloc_unlock>
 80078fc:	42a3      	cmp	r3, r4
 80078fe:	d908      	bls.n	8007912 <_free_r+0x46>
 8007900:	6825      	ldr	r5, [r4, #0]
 8007902:	1961      	adds	r1, r4, r5
 8007904:	428b      	cmp	r3, r1
 8007906:	bf01      	itttt	eq
 8007908:	6819      	ldreq	r1, [r3, #0]
 800790a:	685b      	ldreq	r3, [r3, #4]
 800790c:	1949      	addeq	r1, r1, r5
 800790e:	6021      	streq	r1, [r4, #0]
 8007910:	e7ed      	b.n	80078ee <_free_r+0x22>
 8007912:	461a      	mov	r2, r3
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	b10b      	cbz	r3, 800791c <_free_r+0x50>
 8007918:	42a3      	cmp	r3, r4
 800791a:	d9fa      	bls.n	8007912 <_free_r+0x46>
 800791c:	6811      	ldr	r1, [r2, #0]
 800791e:	1855      	adds	r5, r2, r1
 8007920:	42a5      	cmp	r5, r4
 8007922:	d10b      	bne.n	800793c <_free_r+0x70>
 8007924:	6824      	ldr	r4, [r4, #0]
 8007926:	4421      	add	r1, r4
 8007928:	1854      	adds	r4, r2, r1
 800792a:	42a3      	cmp	r3, r4
 800792c:	6011      	str	r1, [r2, #0]
 800792e:	d1e0      	bne.n	80078f2 <_free_r+0x26>
 8007930:	681c      	ldr	r4, [r3, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	6053      	str	r3, [r2, #4]
 8007936:	4421      	add	r1, r4
 8007938:	6011      	str	r1, [r2, #0]
 800793a:	e7da      	b.n	80078f2 <_free_r+0x26>
 800793c:	d902      	bls.n	8007944 <_free_r+0x78>
 800793e:	230c      	movs	r3, #12
 8007940:	6003      	str	r3, [r0, #0]
 8007942:	e7d6      	b.n	80078f2 <_free_r+0x26>
 8007944:	6825      	ldr	r5, [r4, #0]
 8007946:	1961      	adds	r1, r4, r5
 8007948:	428b      	cmp	r3, r1
 800794a:	bf04      	itt	eq
 800794c:	6819      	ldreq	r1, [r3, #0]
 800794e:	685b      	ldreq	r3, [r3, #4]
 8007950:	6063      	str	r3, [r4, #4]
 8007952:	bf04      	itt	eq
 8007954:	1949      	addeq	r1, r1, r5
 8007956:	6021      	streq	r1, [r4, #0]
 8007958:	6054      	str	r4, [r2, #4]
 800795a:	e7ca      	b.n	80078f2 <_free_r+0x26>
 800795c:	b003      	add	sp, #12
 800795e:	bd30      	pop	{r4, r5, pc}
 8007960:	20000364 	.word	0x20000364

08007964 <sbrk_aligned>:
 8007964:	b570      	push	{r4, r5, r6, lr}
 8007966:	4e0e      	ldr	r6, [pc, #56]	; (80079a0 <sbrk_aligned+0x3c>)
 8007968:	460c      	mov	r4, r1
 800796a:	6831      	ldr	r1, [r6, #0]
 800796c:	4605      	mov	r5, r0
 800796e:	b911      	cbnz	r1, 8007976 <sbrk_aligned+0x12>
 8007970:	f000 f9e6 	bl	8007d40 <_sbrk_r>
 8007974:	6030      	str	r0, [r6, #0]
 8007976:	4621      	mov	r1, r4
 8007978:	4628      	mov	r0, r5
 800797a:	f000 f9e1 	bl	8007d40 <_sbrk_r>
 800797e:	1c43      	adds	r3, r0, #1
 8007980:	d00a      	beq.n	8007998 <sbrk_aligned+0x34>
 8007982:	1cc4      	adds	r4, r0, #3
 8007984:	f024 0403 	bic.w	r4, r4, #3
 8007988:	42a0      	cmp	r0, r4
 800798a:	d007      	beq.n	800799c <sbrk_aligned+0x38>
 800798c:	1a21      	subs	r1, r4, r0
 800798e:	4628      	mov	r0, r5
 8007990:	f000 f9d6 	bl	8007d40 <_sbrk_r>
 8007994:	3001      	adds	r0, #1
 8007996:	d101      	bne.n	800799c <sbrk_aligned+0x38>
 8007998:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800799c:	4620      	mov	r0, r4
 800799e:	bd70      	pop	{r4, r5, r6, pc}
 80079a0:	20000368 	.word	0x20000368

080079a4 <_malloc_r>:
 80079a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a8:	1ccd      	adds	r5, r1, #3
 80079aa:	f025 0503 	bic.w	r5, r5, #3
 80079ae:	3508      	adds	r5, #8
 80079b0:	2d0c      	cmp	r5, #12
 80079b2:	bf38      	it	cc
 80079b4:	250c      	movcc	r5, #12
 80079b6:	2d00      	cmp	r5, #0
 80079b8:	4607      	mov	r7, r0
 80079ba:	db01      	blt.n	80079c0 <_malloc_r+0x1c>
 80079bc:	42a9      	cmp	r1, r5
 80079be:	d905      	bls.n	80079cc <_malloc_r+0x28>
 80079c0:	230c      	movs	r3, #12
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	2600      	movs	r6, #0
 80079c6:	4630      	mov	r0, r6
 80079c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079cc:	4e2e      	ldr	r6, [pc, #184]	; (8007a88 <_malloc_r+0xe4>)
 80079ce:	f000 faa3 	bl	8007f18 <__malloc_lock>
 80079d2:	6833      	ldr	r3, [r6, #0]
 80079d4:	461c      	mov	r4, r3
 80079d6:	bb34      	cbnz	r4, 8007a26 <_malloc_r+0x82>
 80079d8:	4629      	mov	r1, r5
 80079da:	4638      	mov	r0, r7
 80079dc:	f7ff ffc2 	bl	8007964 <sbrk_aligned>
 80079e0:	1c43      	adds	r3, r0, #1
 80079e2:	4604      	mov	r4, r0
 80079e4:	d14d      	bne.n	8007a82 <_malloc_r+0xde>
 80079e6:	6834      	ldr	r4, [r6, #0]
 80079e8:	4626      	mov	r6, r4
 80079ea:	2e00      	cmp	r6, #0
 80079ec:	d140      	bne.n	8007a70 <_malloc_r+0xcc>
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	4631      	mov	r1, r6
 80079f2:	4638      	mov	r0, r7
 80079f4:	eb04 0803 	add.w	r8, r4, r3
 80079f8:	f000 f9a2 	bl	8007d40 <_sbrk_r>
 80079fc:	4580      	cmp	r8, r0
 80079fe:	d13a      	bne.n	8007a76 <_malloc_r+0xd2>
 8007a00:	6821      	ldr	r1, [r4, #0]
 8007a02:	3503      	adds	r5, #3
 8007a04:	1a6d      	subs	r5, r5, r1
 8007a06:	f025 0503 	bic.w	r5, r5, #3
 8007a0a:	3508      	adds	r5, #8
 8007a0c:	2d0c      	cmp	r5, #12
 8007a0e:	bf38      	it	cc
 8007a10:	250c      	movcc	r5, #12
 8007a12:	4629      	mov	r1, r5
 8007a14:	4638      	mov	r0, r7
 8007a16:	f7ff ffa5 	bl	8007964 <sbrk_aligned>
 8007a1a:	3001      	adds	r0, #1
 8007a1c:	d02b      	beq.n	8007a76 <_malloc_r+0xd2>
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	442b      	add	r3, r5
 8007a22:	6023      	str	r3, [r4, #0]
 8007a24:	e00e      	b.n	8007a44 <_malloc_r+0xa0>
 8007a26:	6822      	ldr	r2, [r4, #0]
 8007a28:	1b52      	subs	r2, r2, r5
 8007a2a:	d41e      	bmi.n	8007a6a <_malloc_r+0xc6>
 8007a2c:	2a0b      	cmp	r2, #11
 8007a2e:	d916      	bls.n	8007a5e <_malloc_r+0xba>
 8007a30:	1961      	adds	r1, r4, r5
 8007a32:	42a3      	cmp	r3, r4
 8007a34:	6025      	str	r5, [r4, #0]
 8007a36:	bf18      	it	ne
 8007a38:	6059      	strne	r1, [r3, #4]
 8007a3a:	6863      	ldr	r3, [r4, #4]
 8007a3c:	bf08      	it	eq
 8007a3e:	6031      	streq	r1, [r6, #0]
 8007a40:	5162      	str	r2, [r4, r5]
 8007a42:	604b      	str	r3, [r1, #4]
 8007a44:	4638      	mov	r0, r7
 8007a46:	f104 060b 	add.w	r6, r4, #11
 8007a4a:	f000 fa6b 	bl	8007f24 <__malloc_unlock>
 8007a4e:	f026 0607 	bic.w	r6, r6, #7
 8007a52:	1d23      	adds	r3, r4, #4
 8007a54:	1af2      	subs	r2, r6, r3
 8007a56:	d0b6      	beq.n	80079c6 <_malloc_r+0x22>
 8007a58:	1b9b      	subs	r3, r3, r6
 8007a5a:	50a3      	str	r3, [r4, r2]
 8007a5c:	e7b3      	b.n	80079c6 <_malloc_r+0x22>
 8007a5e:	6862      	ldr	r2, [r4, #4]
 8007a60:	42a3      	cmp	r3, r4
 8007a62:	bf0c      	ite	eq
 8007a64:	6032      	streq	r2, [r6, #0]
 8007a66:	605a      	strne	r2, [r3, #4]
 8007a68:	e7ec      	b.n	8007a44 <_malloc_r+0xa0>
 8007a6a:	4623      	mov	r3, r4
 8007a6c:	6864      	ldr	r4, [r4, #4]
 8007a6e:	e7b2      	b.n	80079d6 <_malloc_r+0x32>
 8007a70:	4634      	mov	r4, r6
 8007a72:	6876      	ldr	r6, [r6, #4]
 8007a74:	e7b9      	b.n	80079ea <_malloc_r+0x46>
 8007a76:	230c      	movs	r3, #12
 8007a78:	603b      	str	r3, [r7, #0]
 8007a7a:	4638      	mov	r0, r7
 8007a7c:	f000 fa52 	bl	8007f24 <__malloc_unlock>
 8007a80:	e7a1      	b.n	80079c6 <_malloc_r+0x22>
 8007a82:	6025      	str	r5, [r4, #0]
 8007a84:	e7de      	b.n	8007a44 <_malloc_r+0xa0>
 8007a86:	bf00      	nop
 8007a88:	20000364 	.word	0x20000364

08007a8c <__sfputc_r>:
 8007a8c:	6893      	ldr	r3, [r2, #8]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	b410      	push	{r4}
 8007a94:	6093      	str	r3, [r2, #8]
 8007a96:	da08      	bge.n	8007aaa <__sfputc_r+0x1e>
 8007a98:	6994      	ldr	r4, [r2, #24]
 8007a9a:	42a3      	cmp	r3, r4
 8007a9c:	db01      	blt.n	8007aa2 <__sfputc_r+0x16>
 8007a9e:	290a      	cmp	r1, #10
 8007aa0:	d103      	bne.n	8007aaa <__sfputc_r+0x1e>
 8007aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007aa6:	f7fe ba03 	b.w	8005eb0 <__swbuf_r>
 8007aaa:	6813      	ldr	r3, [r2, #0]
 8007aac:	1c58      	adds	r0, r3, #1
 8007aae:	6010      	str	r0, [r2, #0]
 8007ab0:	7019      	strb	r1, [r3, #0]
 8007ab2:	4608      	mov	r0, r1
 8007ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <__sfputs_r>:
 8007aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007abc:	4606      	mov	r6, r0
 8007abe:	460f      	mov	r7, r1
 8007ac0:	4614      	mov	r4, r2
 8007ac2:	18d5      	adds	r5, r2, r3
 8007ac4:	42ac      	cmp	r4, r5
 8007ac6:	d101      	bne.n	8007acc <__sfputs_r+0x12>
 8007ac8:	2000      	movs	r0, #0
 8007aca:	e007      	b.n	8007adc <__sfputs_r+0x22>
 8007acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ad0:	463a      	mov	r2, r7
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	f7ff ffda 	bl	8007a8c <__sfputc_r>
 8007ad8:	1c43      	adds	r3, r0, #1
 8007ada:	d1f3      	bne.n	8007ac4 <__sfputs_r+0xa>
 8007adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ae0 <_vfiprintf_r>:
 8007ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae4:	460d      	mov	r5, r1
 8007ae6:	b09d      	sub	sp, #116	; 0x74
 8007ae8:	4614      	mov	r4, r2
 8007aea:	4698      	mov	r8, r3
 8007aec:	4606      	mov	r6, r0
 8007aee:	b118      	cbz	r0, 8007af8 <_vfiprintf_r+0x18>
 8007af0:	6983      	ldr	r3, [r0, #24]
 8007af2:	b90b      	cbnz	r3, 8007af8 <_vfiprintf_r+0x18>
 8007af4:	f7ff fa30 	bl	8006f58 <__sinit>
 8007af8:	4b89      	ldr	r3, [pc, #548]	; (8007d20 <_vfiprintf_r+0x240>)
 8007afa:	429d      	cmp	r5, r3
 8007afc:	d11b      	bne.n	8007b36 <_vfiprintf_r+0x56>
 8007afe:	6875      	ldr	r5, [r6, #4]
 8007b00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b02:	07d9      	lsls	r1, r3, #31
 8007b04:	d405      	bmi.n	8007b12 <_vfiprintf_r+0x32>
 8007b06:	89ab      	ldrh	r3, [r5, #12]
 8007b08:	059a      	lsls	r2, r3, #22
 8007b0a:	d402      	bmi.n	8007b12 <_vfiprintf_r+0x32>
 8007b0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b0e:	f7ff fac6 	bl	800709e <__retarget_lock_acquire_recursive>
 8007b12:	89ab      	ldrh	r3, [r5, #12]
 8007b14:	071b      	lsls	r3, r3, #28
 8007b16:	d501      	bpl.n	8007b1c <_vfiprintf_r+0x3c>
 8007b18:	692b      	ldr	r3, [r5, #16]
 8007b1a:	b9eb      	cbnz	r3, 8007b58 <_vfiprintf_r+0x78>
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	4630      	mov	r0, r6
 8007b20:	f7fe fa18 	bl	8005f54 <__swsetup_r>
 8007b24:	b1c0      	cbz	r0, 8007b58 <_vfiprintf_r+0x78>
 8007b26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b28:	07dc      	lsls	r4, r3, #31
 8007b2a:	d50e      	bpl.n	8007b4a <_vfiprintf_r+0x6a>
 8007b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b30:	b01d      	add	sp, #116	; 0x74
 8007b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b36:	4b7b      	ldr	r3, [pc, #492]	; (8007d24 <_vfiprintf_r+0x244>)
 8007b38:	429d      	cmp	r5, r3
 8007b3a:	d101      	bne.n	8007b40 <_vfiprintf_r+0x60>
 8007b3c:	68b5      	ldr	r5, [r6, #8]
 8007b3e:	e7df      	b.n	8007b00 <_vfiprintf_r+0x20>
 8007b40:	4b79      	ldr	r3, [pc, #484]	; (8007d28 <_vfiprintf_r+0x248>)
 8007b42:	429d      	cmp	r5, r3
 8007b44:	bf08      	it	eq
 8007b46:	68f5      	ldreq	r5, [r6, #12]
 8007b48:	e7da      	b.n	8007b00 <_vfiprintf_r+0x20>
 8007b4a:	89ab      	ldrh	r3, [r5, #12]
 8007b4c:	0598      	lsls	r0, r3, #22
 8007b4e:	d4ed      	bmi.n	8007b2c <_vfiprintf_r+0x4c>
 8007b50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b52:	f7ff faa5 	bl	80070a0 <__retarget_lock_release_recursive>
 8007b56:	e7e9      	b.n	8007b2c <_vfiprintf_r+0x4c>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b5c:	2320      	movs	r3, #32
 8007b5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b62:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b66:	2330      	movs	r3, #48	; 0x30
 8007b68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007d2c <_vfiprintf_r+0x24c>
 8007b6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b70:	f04f 0901 	mov.w	r9, #1
 8007b74:	4623      	mov	r3, r4
 8007b76:	469a      	mov	sl, r3
 8007b78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b7c:	b10a      	cbz	r2, 8007b82 <_vfiprintf_r+0xa2>
 8007b7e:	2a25      	cmp	r2, #37	; 0x25
 8007b80:	d1f9      	bne.n	8007b76 <_vfiprintf_r+0x96>
 8007b82:	ebba 0b04 	subs.w	fp, sl, r4
 8007b86:	d00b      	beq.n	8007ba0 <_vfiprintf_r+0xc0>
 8007b88:	465b      	mov	r3, fp
 8007b8a:	4622      	mov	r2, r4
 8007b8c:	4629      	mov	r1, r5
 8007b8e:	4630      	mov	r0, r6
 8007b90:	f7ff ff93 	bl	8007aba <__sfputs_r>
 8007b94:	3001      	adds	r0, #1
 8007b96:	f000 80aa 	beq.w	8007cee <_vfiprintf_r+0x20e>
 8007b9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b9c:	445a      	add	r2, fp
 8007b9e:	9209      	str	r2, [sp, #36]	; 0x24
 8007ba0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f000 80a2 	beq.w	8007cee <_vfiprintf_r+0x20e>
 8007baa:	2300      	movs	r3, #0
 8007bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bb4:	f10a 0a01 	add.w	sl, sl, #1
 8007bb8:	9304      	str	r3, [sp, #16]
 8007bba:	9307      	str	r3, [sp, #28]
 8007bbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bc0:	931a      	str	r3, [sp, #104]	; 0x68
 8007bc2:	4654      	mov	r4, sl
 8007bc4:	2205      	movs	r2, #5
 8007bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bca:	4858      	ldr	r0, [pc, #352]	; (8007d2c <_vfiprintf_r+0x24c>)
 8007bcc:	f7f8 fb08 	bl	80001e0 <memchr>
 8007bd0:	9a04      	ldr	r2, [sp, #16]
 8007bd2:	b9d8      	cbnz	r0, 8007c0c <_vfiprintf_r+0x12c>
 8007bd4:	06d1      	lsls	r1, r2, #27
 8007bd6:	bf44      	itt	mi
 8007bd8:	2320      	movmi	r3, #32
 8007bda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bde:	0713      	lsls	r3, r2, #28
 8007be0:	bf44      	itt	mi
 8007be2:	232b      	movmi	r3, #43	; 0x2b
 8007be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007be8:	f89a 3000 	ldrb.w	r3, [sl]
 8007bec:	2b2a      	cmp	r3, #42	; 0x2a
 8007bee:	d015      	beq.n	8007c1c <_vfiprintf_r+0x13c>
 8007bf0:	9a07      	ldr	r2, [sp, #28]
 8007bf2:	4654      	mov	r4, sl
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	f04f 0c0a 	mov.w	ip, #10
 8007bfa:	4621      	mov	r1, r4
 8007bfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c00:	3b30      	subs	r3, #48	; 0x30
 8007c02:	2b09      	cmp	r3, #9
 8007c04:	d94e      	bls.n	8007ca4 <_vfiprintf_r+0x1c4>
 8007c06:	b1b0      	cbz	r0, 8007c36 <_vfiprintf_r+0x156>
 8007c08:	9207      	str	r2, [sp, #28]
 8007c0a:	e014      	b.n	8007c36 <_vfiprintf_r+0x156>
 8007c0c:	eba0 0308 	sub.w	r3, r0, r8
 8007c10:	fa09 f303 	lsl.w	r3, r9, r3
 8007c14:	4313      	orrs	r3, r2
 8007c16:	9304      	str	r3, [sp, #16]
 8007c18:	46a2      	mov	sl, r4
 8007c1a:	e7d2      	b.n	8007bc2 <_vfiprintf_r+0xe2>
 8007c1c:	9b03      	ldr	r3, [sp, #12]
 8007c1e:	1d19      	adds	r1, r3, #4
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	9103      	str	r1, [sp, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	bfbb      	ittet	lt
 8007c28:	425b      	neglt	r3, r3
 8007c2a:	f042 0202 	orrlt.w	r2, r2, #2
 8007c2e:	9307      	strge	r3, [sp, #28]
 8007c30:	9307      	strlt	r3, [sp, #28]
 8007c32:	bfb8      	it	lt
 8007c34:	9204      	strlt	r2, [sp, #16]
 8007c36:	7823      	ldrb	r3, [r4, #0]
 8007c38:	2b2e      	cmp	r3, #46	; 0x2e
 8007c3a:	d10c      	bne.n	8007c56 <_vfiprintf_r+0x176>
 8007c3c:	7863      	ldrb	r3, [r4, #1]
 8007c3e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c40:	d135      	bne.n	8007cae <_vfiprintf_r+0x1ce>
 8007c42:	9b03      	ldr	r3, [sp, #12]
 8007c44:	1d1a      	adds	r2, r3, #4
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	9203      	str	r2, [sp, #12]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	bfb8      	it	lt
 8007c4e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007c52:	3402      	adds	r4, #2
 8007c54:	9305      	str	r3, [sp, #20]
 8007c56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d3c <_vfiprintf_r+0x25c>
 8007c5a:	7821      	ldrb	r1, [r4, #0]
 8007c5c:	2203      	movs	r2, #3
 8007c5e:	4650      	mov	r0, sl
 8007c60:	f7f8 fabe 	bl	80001e0 <memchr>
 8007c64:	b140      	cbz	r0, 8007c78 <_vfiprintf_r+0x198>
 8007c66:	2340      	movs	r3, #64	; 0x40
 8007c68:	eba0 000a 	sub.w	r0, r0, sl
 8007c6c:	fa03 f000 	lsl.w	r0, r3, r0
 8007c70:	9b04      	ldr	r3, [sp, #16]
 8007c72:	4303      	orrs	r3, r0
 8007c74:	3401      	adds	r4, #1
 8007c76:	9304      	str	r3, [sp, #16]
 8007c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c7c:	482c      	ldr	r0, [pc, #176]	; (8007d30 <_vfiprintf_r+0x250>)
 8007c7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c82:	2206      	movs	r2, #6
 8007c84:	f7f8 faac 	bl	80001e0 <memchr>
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	d03f      	beq.n	8007d0c <_vfiprintf_r+0x22c>
 8007c8c:	4b29      	ldr	r3, [pc, #164]	; (8007d34 <_vfiprintf_r+0x254>)
 8007c8e:	bb1b      	cbnz	r3, 8007cd8 <_vfiprintf_r+0x1f8>
 8007c90:	9b03      	ldr	r3, [sp, #12]
 8007c92:	3307      	adds	r3, #7
 8007c94:	f023 0307 	bic.w	r3, r3, #7
 8007c98:	3308      	adds	r3, #8
 8007c9a:	9303      	str	r3, [sp, #12]
 8007c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c9e:	443b      	add	r3, r7
 8007ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ca2:	e767      	b.n	8007b74 <_vfiprintf_r+0x94>
 8007ca4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ca8:	460c      	mov	r4, r1
 8007caa:	2001      	movs	r0, #1
 8007cac:	e7a5      	b.n	8007bfa <_vfiprintf_r+0x11a>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	3401      	adds	r4, #1
 8007cb2:	9305      	str	r3, [sp, #20]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	f04f 0c0a 	mov.w	ip, #10
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cc0:	3a30      	subs	r2, #48	; 0x30
 8007cc2:	2a09      	cmp	r2, #9
 8007cc4:	d903      	bls.n	8007cce <_vfiprintf_r+0x1ee>
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d0c5      	beq.n	8007c56 <_vfiprintf_r+0x176>
 8007cca:	9105      	str	r1, [sp, #20]
 8007ccc:	e7c3      	b.n	8007c56 <_vfiprintf_r+0x176>
 8007cce:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e7f0      	b.n	8007cba <_vfiprintf_r+0x1da>
 8007cd8:	ab03      	add	r3, sp, #12
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	462a      	mov	r2, r5
 8007cde:	4b16      	ldr	r3, [pc, #88]	; (8007d38 <_vfiprintf_r+0x258>)
 8007ce0:	a904      	add	r1, sp, #16
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	f7fd fc8c 	bl	8005600 <_printf_float>
 8007ce8:	4607      	mov	r7, r0
 8007cea:	1c78      	adds	r0, r7, #1
 8007cec:	d1d6      	bne.n	8007c9c <_vfiprintf_r+0x1bc>
 8007cee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cf0:	07d9      	lsls	r1, r3, #31
 8007cf2:	d405      	bmi.n	8007d00 <_vfiprintf_r+0x220>
 8007cf4:	89ab      	ldrh	r3, [r5, #12]
 8007cf6:	059a      	lsls	r2, r3, #22
 8007cf8:	d402      	bmi.n	8007d00 <_vfiprintf_r+0x220>
 8007cfa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cfc:	f7ff f9d0 	bl	80070a0 <__retarget_lock_release_recursive>
 8007d00:	89ab      	ldrh	r3, [r5, #12]
 8007d02:	065b      	lsls	r3, r3, #25
 8007d04:	f53f af12 	bmi.w	8007b2c <_vfiprintf_r+0x4c>
 8007d08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d0a:	e711      	b.n	8007b30 <_vfiprintf_r+0x50>
 8007d0c:	ab03      	add	r3, sp, #12
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	462a      	mov	r2, r5
 8007d12:	4b09      	ldr	r3, [pc, #36]	; (8007d38 <_vfiprintf_r+0x258>)
 8007d14:	a904      	add	r1, sp, #16
 8007d16:	4630      	mov	r0, r6
 8007d18:	f7fd ff16 	bl	8005b48 <_printf_i>
 8007d1c:	e7e4      	b.n	8007ce8 <_vfiprintf_r+0x208>
 8007d1e:	bf00      	nop
 8007d20:	080081cc 	.word	0x080081cc
 8007d24:	080081ec 	.word	0x080081ec
 8007d28:	080081ac 	.word	0x080081ac
 8007d2c:	08008364 	.word	0x08008364
 8007d30:	0800836e 	.word	0x0800836e
 8007d34:	08005601 	.word	0x08005601
 8007d38:	08007abb 	.word	0x08007abb
 8007d3c:	0800836a 	.word	0x0800836a

08007d40 <_sbrk_r>:
 8007d40:	b538      	push	{r3, r4, r5, lr}
 8007d42:	4d06      	ldr	r5, [pc, #24]	; (8007d5c <_sbrk_r+0x1c>)
 8007d44:	2300      	movs	r3, #0
 8007d46:	4604      	mov	r4, r0
 8007d48:	4608      	mov	r0, r1
 8007d4a:	602b      	str	r3, [r5, #0]
 8007d4c:	f7f9 fd44 	bl	80017d8 <_sbrk>
 8007d50:	1c43      	adds	r3, r0, #1
 8007d52:	d102      	bne.n	8007d5a <_sbrk_r+0x1a>
 8007d54:	682b      	ldr	r3, [r5, #0]
 8007d56:	b103      	cbz	r3, 8007d5a <_sbrk_r+0x1a>
 8007d58:	6023      	str	r3, [r4, #0]
 8007d5a:	bd38      	pop	{r3, r4, r5, pc}
 8007d5c:	2000036c 	.word	0x2000036c

08007d60 <__sread>:
 8007d60:	b510      	push	{r4, lr}
 8007d62:	460c      	mov	r4, r1
 8007d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d68:	f000 f8e2 	bl	8007f30 <_read_r>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	bfab      	itete	ge
 8007d70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d72:	89a3      	ldrhlt	r3, [r4, #12]
 8007d74:	181b      	addge	r3, r3, r0
 8007d76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d7a:	bfac      	ite	ge
 8007d7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d7e:	81a3      	strhlt	r3, [r4, #12]
 8007d80:	bd10      	pop	{r4, pc}

08007d82 <__swrite>:
 8007d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d86:	461f      	mov	r7, r3
 8007d88:	898b      	ldrh	r3, [r1, #12]
 8007d8a:	05db      	lsls	r3, r3, #23
 8007d8c:	4605      	mov	r5, r0
 8007d8e:	460c      	mov	r4, r1
 8007d90:	4616      	mov	r6, r2
 8007d92:	d505      	bpl.n	8007da0 <__swrite+0x1e>
 8007d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d98:	2302      	movs	r3, #2
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f000 f898 	bl	8007ed0 <_lseek_r>
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007da6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007daa:	81a3      	strh	r3, [r4, #12]
 8007dac:	4632      	mov	r2, r6
 8007dae:	463b      	mov	r3, r7
 8007db0:	4628      	mov	r0, r5
 8007db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007db6:	f000 b817 	b.w	8007de8 <_write_r>

08007dba <__sseek>:
 8007dba:	b510      	push	{r4, lr}
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dc2:	f000 f885 	bl	8007ed0 <_lseek_r>
 8007dc6:	1c43      	adds	r3, r0, #1
 8007dc8:	89a3      	ldrh	r3, [r4, #12]
 8007dca:	bf15      	itete	ne
 8007dcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007dce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007dd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007dd6:	81a3      	strheq	r3, [r4, #12]
 8007dd8:	bf18      	it	ne
 8007dda:	81a3      	strhne	r3, [r4, #12]
 8007ddc:	bd10      	pop	{r4, pc}

08007dde <__sclose>:
 8007dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de2:	f000 b831 	b.w	8007e48 <_close_r>
	...

08007de8 <_write_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4d07      	ldr	r5, [pc, #28]	; (8007e08 <_write_r+0x20>)
 8007dec:	4604      	mov	r4, r0
 8007dee:	4608      	mov	r0, r1
 8007df0:	4611      	mov	r1, r2
 8007df2:	2200      	movs	r2, #0
 8007df4:	602a      	str	r2, [r5, #0]
 8007df6:	461a      	mov	r2, r3
 8007df8:	f7f9 fc9d 	bl	8001736 <_write>
 8007dfc:	1c43      	adds	r3, r0, #1
 8007dfe:	d102      	bne.n	8007e06 <_write_r+0x1e>
 8007e00:	682b      	ldr	r3, [r5, #0]
 8007e02:	b103      	cbz	r3, 8007e06 <_write_r+0x1e>
 8007e04:	6023      	str	r3, [r4, #0]
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
 8007e08:	2000036c 	.word	0x2000036c

08007e0c <__assert_func>:
 8007e0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e0e:	4614      	mov	r4, r2
 8007e10:	461a      	mov	r2, r3
 8007e12:	4b09      	ldr	r3, [pc, #36]	; (8007e38 <__assert_func+0x2c>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4605      	mov	r5, r0
 8007e18:	68d8      	ldr	r0, [r3, #12]
 8007e1a:	b14c      	cbz	r4, 8007e30 <__assert_func+0x24>
 8007e1c:	4b07      	ldr	r3, [pc, #28]	; (8007e3c <__assert_func+0x30>)
 8007e1e:	9100      	str	r1, [sp, #0]
 8007e20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e24:	4906      	ldr	r1, [pc, #24]	; (8007e40 <__assert_func+0x34>)
 8007e26:	462b      	mov	r3, r5
 8007e28:	f000 f81e 	bl	8007e68 <fiprintf>
 8007e2c:	f000 f89f 	bl	8007f6e <abort>
 8007e30:	4b04      	ldr	r3, [pc, #16]	; (8007e44 <__assert_func+0x38>)
 8007e32:	461c      	mov	r4, r3
 8007e34:	e7f3      	b.n	8007e1e <__assert_func+0x12>
 8007e36:	bf00      	nop
 8007e38:	2000000c 	.word	0x2000000c
 8007e3c:	08008375 	.word	0x08008375
 8007e40:	08008382 	.word	0x08008382
 8007e44:	080083b0 	.word	0x080083b0

08007e48 <_close_r>:
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	4d06      	ldr	r5, [pc, #24]	; (8007e64 <_close_r+0x1c>)
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	4604      	mov	r4, r0
 8007e50:	4608      	mov	r0, r1
 8007e52:	602b      	str	r3, [r5, #0]
 8007e54:	f7f9 fc8b 	bl	800176e <_close>
 8007e58:	1c43      	adds	r3, r0, #1
 8007e5a:	d102      	bne.n	8007e62 <_close_r+0x1a>
 8007e5c:	682b      	ldr	r3, [r5, #0]
 8007e5e:	b103      	cbz	r3, 8007e62 <_close_r+0x1a>
 8007e60:	6023      	str	r3, [r4, #0]
 8007e62:	bd38      	pop	{r3, r4, r5, pc}
 8007e64:	2000036c 	.word	0x2000036c

08007e68 <fiprintf>:
 8007e68:	b40e      	push	{r1, r2, r3}
 8007e6a:	b503      	push	{r0, r1, lr}
 8007e6c:	4601      	mov	r1, r0
 8007e6e:	ab03      	add	r3, sp, #12
 8007e70:	4805      	ldr	r0, [pc, #20]	; (8007e88 <fiprintf+0x20>)
 8007e72:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e76:	6800      	ldr	r0, [r0, #0]
 8007e78:	9301      	str	r3, [sp, #4]
 8007e7a:	f7ff fe31 	bl	8007ae0 <_vfiprintf_r>
 8007e7e:	b002      	add	sp, #8
 8007e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e84:	b003      	add	sp, #12
 8007e86:	4770      	bx	lr
 8007e88:	2000000c 	.word	0x2000000c

08007e8c <_fstat_r>:
 8007e8c:	b538      	push	{r3, r4, r5, lr}
 8007e8e:	4d07      	ldr	r5, [pc, #28]	; (8007eac <_fstat_r+0x20>)
 8007e90:	2300      	movs	r3, #0
 8007e92:	4604      	mov	r4, r0
 8007e94:	4608      	mov	r0, r1
 8007e96:	4611      	mov	r1, r2
 8007e98:	602b      	str	r3, [r5, #0]
 8007e9a:	f7f9 fc74 	bl	8001786 <_fstat>
 8007e9e:	1c43      	adds	r3, r0, #1
 8007ea0:	d102      	bne.n	8007ea8 <_fstat_r+0x1c>
 8007ea2:	682b      	ldr	r3, [r5, #0]
 8007ea4:	b103      	cbz	r3, 8007ea8 <_fstat_r+0x1c>
 8007ea6:	6023      	str	r3, [r4, #0]
 8007ea8:	bd38      	pop	{r3, r4, r5, pc}
 8007eaa:	bf00      	nop
 8007eac:	2000036c 	.word	0x2000036c

08007eb0 <_isatty_r>:
 8007eb0:	b538      	push	{r3, r4, r5, lr}
 8007eb2:	4d06      	ldr	r5, [pc, #24]	; (8007ecc <_isatty_r+0x1c>)
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	4608      	mov	r0, r1
 8007eba:	602b      	str	r3, [r5, #0]
 8007ebc:	f7f9 fc73 	bl	80017a6 <_isatty>
 8007ec0:	1c43      	adds	r3, r0, #1
 8007ec2:	d102      	bne.n	8007eca <_isatty_r+0x1a>
 8007ec4:	682b      	ldr	r3, [r5, #0]
 8007ec6:	b103      	cbz	r3, 8007eca <_isatty_r+0x1a>
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	bd38      	pop	{r3, r4, r5, pc}
 8007ecc:	2000036c 	.word	0x2000036c

08007ed0 <_lseek_r>:
 8007ed0:	b538      	push	{r3, r4, r5, lr}
 8007ed2:	4d07      	ldr	r5, [pc, #28]	; (8007ef0 <_lseek_r+0x20>)
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	4608      	mov	r0, r1
 8007ed8:	4611      	mov	r1, r2
 8007eda:	2200      	movs	r2, #0
 8007edc:	602a      	str	r2, [r5, #0]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	f7f9 fc6c 	bl	80017bc <_lseek>
 8007ee4:	1c43      	adds	r3, r0, #1
 8007ee6:	d102      	bne.n	8007eee <_lseek_r+0x1e>
 8007ee8:	682b      	ldr	r3, [r5, #0]
 8007eea:	b103      	cbz	r3, 8007eee <_lseek_r+0x1e>
 8007eec:	6023      	str	r3, [r4, #0]
 8007eee:	bd38      	pop	{r3, r4, r5, pc}
 8007ef0:	2000036c 	.word	0x2000036c

08007ef4 <__ascii_mbtowc>:
 8007ef4:	b082      	sub	sp, #8
 8007ef6:	b901      	cbnz	r1, 8007efa <__ascii_mbtowc+0x6>
 8007ef8:	a901      	add	r1, sp, #4
 8007efa:	b142      	cbz	r2, 8007f0e <__ascii_mbtowc+0x1a>
 8007efc:	b14b      	cbz	r3, 8007f12 <__ascii_mbtowc+0x1e>
 8007efe:	7813      	ldrb	r3, [r2, #0]
 8007f00:	600b      	str	r3, [r1, #0]
 8007f02:	7812      	ldrb	r2, [r2, #0]
 8007f04:	1e10      	subs	r0, r2, #0
 8007f06:	bf18      	it	ne
 8007f08:	2001      	movne	r0, #1
 8007f0a:	b002      	add	sp, #8
 8007f0c:	4770      	bx	lr
 8007f0e:	4610      	mov	r0, r2
 8007f10:	e7fb      	b.n	8007f0a <__ascii_mbtowc+0x16>
 8007f12:	f06f 0001 	mvn.w	r0, #1
 8007f16:	e7f8      	b.n	8007f0a <__ascii_mbtowc+0x16>

08007f18 <__malloc_lock>:
 8007f18:	4801      	ldr	r0, [pc, #4]	; (8007f20 <__malloc_lock+0x8>)
 8007f1a:	f7ff b8c0 	b.w	800709e <__retarget_lock_acquire_recursive>
 8007f1e:	bf00      	nop
 8007f20:	20000360 	.word	0x20000360

08007f24 <__malloc_unlock>:
 8007f24:	4801      	ldr	r0, [pc, #4]	; (8007f2c <__malloc_unlock+0x8>)
 8007f26:	f7ff b8bb 	b.w	80070a0 <__retarget_lock_release_recursive>
 8007f2a:	bf00      	nop
 8007f2c:	20000360 	.word	0x20000360

08007f30 <_read_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	4d07      	ldr	r5, [pc, #28]	; (8007f50 <_read_r+0x20>)
 8007f34:	4604      	mov	r4, r0
 8007f36:	4608      	mov	r0, r1
 8007f38:	4611      	mov	r1, r2
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	602a      	str	r2, [r5, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f7f9 fbdc 	bl	80016fc <_read>
 8007f44:	1c43      	adds	r3, r0, #1
 8007f46:	d102      	bne.n	8007f4e <_read_r+0x1e>
 8007f48:	682b      	ldr	r3, [r5, #0]
 8007f4a:	b103      	cbz	r3, 8007f4e <_read_r+0x1e>
 8007f4c:	6023      	str	r3, [r4, #0]
 8007f4e:	bd38      	pop	{r3, r4, r5, pc}
 8007f50:	2000036c 	.word	0x2000036c

08007f54 <__ascii_wctomb>:
 8007f54:	b149      	cbz	r1, 8007f6a <__ascii_wctomb+0x16>
 8007f56:	2aff      	cmp	r2, #255	; 0xff
 8007f58:	bf85      	ittet	hi
 8007f5a:	238a      	movhi	r3, #138	; 0x8a
 8007f5c:	6003      	strhi	r3, [r0, #0]
 8007f5e:	700a      	strbls	r2, [r1, #0]
 8007f60:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007f64:	bf98      	it	ls
 8007f66:	2001      	movls	r0, #1
 8007f68:	4770      	bx	lr
 8007f6a:	4608      	mov	r0, r1
 8007f6c:	4770      	bx	lr

08007f6e <abort>:
 8007f6e:	b508      	push	{r3, lr}
 8007f70:	2006      	movs	r0, #6
 8007f72:	f000 f82b 	bl	8007fcc <raise>
 8007f76:	2001      	movs	r0, #1
 8007f78:	f7f9 fbb6 	bl	80016e8 <_exit>

08007f7c <_raise_r>:
 8007f7c:	291f      	cmp	r1, #31
 8007f7e:	b538      	push	{r3, r4, r5, lr}
 8007f80:	4604      	mov	r4, r0
 8007f82:	460d      	mov	r5, r1
 8007f84:	d904      	bls.n	8007f90 <_raise_r+0x14>
 8007f86:	2316      	movs	r3, #22
 8007f88:	6003      	str	r3, [r0, #0]
 8007f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f8e:	bd38      	pop	{r3, r4, r5, pc}
 8007f90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f92:	b112      	cbz	r2, 8007f9a <_raise_r+0x1e>
 8007f94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f98:	b94b      	cbnz	r3, 8007fae <_raise_r+0x32>
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f000 f830 	bl	8008000 <_getpid_r>
 8007fa0:	462a      	mov	r2, r5
 8007fa2:	4601      	mov	r1, r0
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007faa:	f000 b817 	b.w	8007fdc <_kill_r>
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d00a      	beq.n	8007fc8 <_raise_r+0x4c>
 8007fb2:	1c59      	adds	r1, r3, #1
 8007fb4:	d103      	bne.n	8007fbe <_raise_r+0x42>
 8007fb6:	2316      	movs	r3, #22
 8007fb8:	6003      	str	r3, [r0, #0]
 8007fba:	2001      	movs	r0, #1
 8007fbc:	e7e7      	b.n	8007f8e <_raise_r+0x12>
 8007fbe:	2400      	movs	r4, #0
 8007fc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	4798      	blx	r3
 8007fc8:	2000      	movs	r0, #0
 8007fca:	e7e0      	b.n	8007f8e <_raise_r+0x12>

08007fcc <raise>:
 8007fcc:	4b02      	ldr	r3, [pc, #8]	; (8007fd8 <raise+0xc>)
 8007fce:	4601      	mov	r1, r0
 8007fd0:	6818      	ldr	r0, [r3, #0]
 8007fd2:	f7ff bfd3 	b.w	8007f7c <_raise_r>
 8007fd6:	bf00      	nop
 8007fd8:	2000000c 	.word	0x2000000c

08007fdc <_kill_r>:
 8007fdc:	b538      	push	{r3, r4, r5, lr}
 8007fde:	4d07      	ldr	r5, [pc, #28]	; (8007ffc <_kill_r+0x20>)
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	4608      	mov	r0, r1
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	602b      	str	r3, [r5, #0]
 8007fea:	f7f9 fb6d 	bl	80016c8 <_kill>
 8007fee:	1c43      	adds	r3, r0, #1
 8007ff0:	d102      	bne.n	8007ff8 <_kill_r+0x1c>
 8007ff2:	682b      	ldr	r3, [r5, #0]
 8007ff4:	b103      	cbz	r3, 8007ff8 <_kill_r+0x1c>
 8007ff6:	6023      	str	r3, [r4, #0]
 8007ff8:	bd38      	pop	{r3, r4, r5, pc}
 8007ffa:	bf00      	nop
 8007ffc:	2000036c 	.word	0x2000036c

08008000 <_getpid_r>:
 8008000:	f7f9 bb5a 	b.w	80016b8 <_getpid>

08008004 <_init>:
 8008004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008006:	bf00      	nop
 8008008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800800a:	bc08      	pop	{r3}
 800800c:	469e      	mov	lr, r3
 800800e:	4770      	bx	lr

08008010 <_fini>:
 8008010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008012:	bf00      	nop
 8008014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008016:	bc08      	pop	{r3}
 8008018:	469e      	mov	lr, r3
 800801a:	4770      	bx	lr
